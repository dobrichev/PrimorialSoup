/*The Contest

For a graph where every edge has a weight, we define a node's "energy" to be the product
of the weights of the edges attached to it. We also define the energy of the graph to be
 the sum of the node energies.

In this contest you are asked, for each value of n from 4 to 28 inclusive, to weight the edges of Kn
 using the first n(n-1)/2 primes. Your goal is to create and submit graphs with the smallest possible energy.

http://azspcs.com/Contest/PrimorialSoup
*/

//GCC compiler command line
//g++ -O3 -g3 -pedantic -Wall -Wextra -c -fmessage-length=0 -march=native -fopenmp -MMD -MP -MF"main.d" -MT"main.o" -o "main.o" "../main.cpp"

#include <stdio.h>
#include <memory.h>
//#include <stdlib.h>
//#include <stdio.h>
#include <map>
#include <set>
#include <vector>
#include <iostream>
#include <algorithm>
#include <cstdlib>
#include <ctime>
//#include <limits>
#include <iomanip>
#include <sstream>
#include <csignal>
#include <atomic>
#include <bitset>
#include <cmath>
#include <unordered_map>
#include <deque>
#include <exception>
#include <typeinfo>
#include <stdexcept>
#include "BigInteger.h"
#include "BitMask.h"
#include <quadmath.h>	//dangerous
//#include <thread>         // debug std::this_thread::sleep_for
//#include <chrono>         // debug std::chrono::seconds
//typedef __int128_t approxEnergy_t;
typedef long double approxEnergy_t;
//typedef __float128 approxEnergy_t; //conversion problems to other types (string, int?)
//struct approxEnergy_t {
//	__float128 val;
//	approxEnergy_t() : val(0) {}
//	approxEnergy_t(const approxEnergy_t& v) : val(v.val) {}
//	approxEnergy_t(const long long& v) : val(v) {}
//	approxEnergy_t(const long& v) : val(v) {}
//	approxEnergy_t(const unsigned int& v) : val(v) {}
//	approxEnergy_t(const unsigned long& v) : val(v) {}
//	approxEnergy_t(const int& v) : val(v) {}
//	approxEnergy_t(const __float128& v) : val(v) {}
//	approxEnergy_t(const long double& v) : val(v) {}
//	approxEnergy_t(const double& v) : val(v) {}
//	approxEnergy_t& operator =(const approxEnergy_t& v) {val = v.val; return *this;}
//	bool operator ==(const approxEnergy_t& v) const {return val == v.val;}
//	approxEnergy_t& operator *=(const approxEnergy_t& v) {val *= v.val; return *this;}
//	approxEnergy_t& operator +=(const approxEnergy_t& v) {val += v.val; return *this;}
//	const approxEnergy_t operator -() const {return approxEnergy_t(-this->val);}
//    friend std::ostream & operator <<(std::ostream& out, const approxEnergy_t& e) {
//    	//out << std::string(e);
//    	char buf[100];
//    	quadmath_snprintf(buf, 100, "%.46QG", e);
//    	out << buf;
//    	return out;
//    }
//    friend std::istream & operator >>(std::istream& in, approxEnergy_t& e) {
//    	std::string s;
//    	in >> s;
//    	e = strtoflt128(s.c_str(), NULL);
//    	//in.setstate(std::ios::failbit);
//    	//edgesInEgraphBM tmp(s);
//    	//e = tmp;
//    	return in;
//    }
//};
//__float128 operator +(const approxEnergy_t& v1, const approxEnergy_t& v2) {return v1.val + v2.val;}
//__float128 operator -(const approxEnergy_t& v1, const approxEnergy_t& v2) {return v1.val - v2.val;}
//__float128 operator *(const approxEnergy_t& v1, const approxEnergy_t& v2) {return v1.val * v2.val;}
//__float128 operator /(const approxEnergy_t& v1, const unsigned int& v2) {return v1.val / v2;}
//__float128 sqrt(const approxEnergy_t& v) {return sqrtq(v.val);}
//__float128 sqrt(const __float128& v) {return sqrtq(v);}
//__float128 abs(const __float128& v) {return fabsq(v);}
//bool operator <(const approxEnergy_t& v1, const approxEnergy_t& v2) {return v1.val < v2.val;}
//bool operator <=(const approxEnergy_t& v1, const approxEnergy_t& v2) {return v1.val <= v2.val;}
//bool operator >(const approxEnergy_t& v1, const approxEnergy_t& v2) {return v1.val > v2.val;}
//bool operator >=(const approxEnergy_t& v1, const approxEnergy_t& v2) {return v1.val >= v2.val;}

const size_t approxEnergyPrecision = 18;
typedef BigInteger energy_t;
typedef unsigned long long tags_t;

//typedef std::bitset<378> edgesInEgraphBM; //bits 0..377
struct edgesInEgraphBM : public std::bitset<378> {
	edgesInEgraphBM() {}
	//edgesInEgraphBM(const edgesInEgraphBM& other) : std::bitset<378>(std::bitset<378>)) {}
//	edgesInEgraphBM(const std::bitset<378>& other) {
//		(*this) = other;
//	}
	edgesInEgraphBM(const std::string& s) {
		size_t i = 0;
		for(std::string::const_reverse_iterator c = s.rbegin(); c != s.rend(); c++) {
			if(*c == '1') {
				set(i++);
			}
		}
	}
	bool operator < (const edgesInEgraphBM& other) const {
		return std::memcmp(this, &other, sizeof(edgesInEgraphBM)) < 0;
	}
    friend std::ostream & operator <<(std::ostream& out, const edgesInEgraphBM& e) {
    	out << std::string(e);
    	return out;
    }
//    friend std::istream & operator >>(std::istream& in, edgesInEgraphBM& e) {
//    	std::string s;
//    	in >> s;
//    	edgesInEgraphBM tmp(s);
//    	e = tmp;
//    	return in;
//    }
	operator std::string () const {
		std::string s(to_string());
		//compress
		size_t msb(s.find('1'));
		if(msb != std::string::npos) {
			s.erase(0, msb);
		}
		else {
			s = "0";
		}
		return s;
	}
};

struct bitCounts {
	size_t count[378];
	bitCounts() {
		for(size_t i = 0; i < 378; i++)
			count[i] = 0;
	}
	void addCounts(const edgesInEgraphBM& bm) {
		for(size_t bit = bm._Find_first(); bit != bm.size(); bit = bm._Find_next(bit)) {
			count[bit]++;
		}
	}
	size_t getLeastPopulated(const edgesInEgraphBM& bitsInInterest) {
		size_t leastCount = (size_t)-1;
		size_t leastBit = 0;
		for(size_t bit = bitsInInterest._Find_first(); bit != bitsInInterest.size(); bit = bitsInInterest._Find_next(bit)) {
			if(leastCount > count[bit]) {
				leastCount = count[bit];
				leastBit = bit;
			}
		}
		return leastBit;
	}
};

typedef unsigned int edgesInNodeBM; // bits 0..26
typedef unsigned int nodesInEgraphBM; // bits 0..27

const size_t numEdges[29] = {0,0,1,3,6,10,15,21,28,36,45,55,66,78,91,105,120,136,153,171,190,210,231,253,276,300,325,351,378};
const approxEnergy_t nodeTarget[29]= {
	0.,0.,0.,0.,
	173.29166165744964L, //4
	8401.4350711759235L, //5
	850352.69450584096L, //6
	149368935.85188436L, //7
	40024883480.189767L, //8
	15470731709134.818L, //9
	8291773630431513.9L, //10
	//5.8464727875750185e+18L, //11
	5846472787575011487.L, //11 http://www.wolframalpha.com/input/?i=Ceiling%5BProd%5BPrime%5Bi%5D,%7Bi,1,11*(11-1)%2F2%7D%5D%5E(2%2F11)%5D
	//5.1819045565827399e+21L, //12
	5181904556582754301901.L, //12 http://www.wolframalpha.com/input/?i=Ceiling%5BProd%5BPrime%5Bi%5D,%7Bi,1,12*(12-1)%2F2%7D%5D%5E(2%2F12)%5D
	//5.8933852279847145e+24L, //13
	5893385227984695817283140.L, //13 http://www.wolframalpha.com/input/?i=Ceiling%5BProd%5BPrime%5Bi%5D,%7Bi,1,13*(13-1)%2F2%7D%5D%5E(2%2F13)%5D
	//8.0467139648491641e+27L, //14
	8046713964849192771714221016.L, //14 http://www.wolframalpha.com/input/?i=Ceiling%5BProd%5BPrime%5Bi%5D,%7Bi,1,14*(14-1)%2F2%7D%5D%5E(2%2F14)%5D
	//1.3260902826230969e+31L, //15
	13260902826230982297284217027859.L, //15 1.3260902826230982297284217027859e+31 http://www.wolframalpha.com/input/?i=Ceiling%5BProd%5BPrime%5Bi%5D,%7Bi,1,15*(15-1)%2F2%7D%5D%5E(2%2F15)%5D
	//2.5784682567262635e+34L, //16
	25784682567262635327048069933626148.L, // 16 http://www.wolframalpha.com/input/?i=Ceiling%5BProd%5BPrime%5Bi%5D,%7Bi,1,16*(16-1)%2F2%7D%5D%5E(2%2F16)%5D
	//5.7935176644257303e+37L, //17
	57935176644257372662069032296728572553.L, //17 http://www.wolframalpha.com/input/?i=Ceiling%5BProd%5BPrime%5Bi%5D,%7Bi,1,17*(17-1)%2F2%7D%5D%5E(2%2F17)%5D
	//1.5232835565842933e+41L, //18
	152328355658430136291946352893348360705498.L, //18 http://www.wolframalpha.com/input/?i=Ceiling%5BProd%5BPrime%5Bi%5D,%7Bi,1,18*(18-1)%2F2%7D%5D%5E(2%2F18)%5D
	//4.6150957310561642e+44L, //19
	461509573105619057927197444723775691786348210.L, //19 http://www.wolframalpha.com/input/?i=Ceiling%5BProd%5BPrime%5Bi%5D,%7Bi,1,19*(19-1)%2F2%7D%5D%5E(2%2F19)%5D
	//1.5627560739190975e+48L, //20
	1562756073919087901583174573689392560828036274732.L, //20 http://www.wolframalpha.com/input/?i=Ceiling%5BProd%5BPrime%5Bi%5D,%7Bi,1,20*(20-1)%2F2%7D%5D%5E(2%2F20)%5D
	//6.0462112621475488e+51L, //21
	6046211262147588844078469946381715490492083740089745.L, //21 http://www.wolframalpha.com/input/?i=Ceiling%5BProd%5BPrime%5Bi%5D,%7Bi,1,21*(21-1)%2F2%7D%5D%5E(2%2F21)%5D
	//2.6366734777808117e+55L, //22
	26366734777808023307973329771919663561001593669843685073.L, //22 http://www.wolframalpha.com/input/?i=Ceiling%5BProd%5BPrime%5Bi%5D,%7Bi,1,22*(22-1)%2F2%7D%5D%5E(2%2F22)%5D
	//1.2747138144083575e+59L, //23
	127471381440836233592171396575812503938850222220336299962799.L, //23 http://www.wolframalpha.com/input/?i=Ceiling%5BProd%5BPrime%5Bi%5D,%7Bi,1,23*(23-1)%2F2%7D%5D%5E(2%2F23)%5D
	//6.7616423155941781e+62L, //24
	676164231559423240231940586438870038664097322605912406801694387.L, //24 http://www.wolframalpha.com/input/?i=Ceiling%5BProd%5BPrime%5Bi%5D,%7Bi,1,24*(24-1)%2F2%7D%5D%5E(2%2F24)%5D
	//4.0258814776330165e+66L, //25
	4025881477633003663973234722604283551843920068611263508598491699368.L, //25 http://www.wolframalpha.com/input/?i=Ceiling%5BProd%5BPrime%5Bi%5D,%7Bi,1,25*(25-1)%2F2%7D%5D%5E(2%2F25)%5D
	//2.6333119306814134e+70L, //26
	26333119306813896857670964410534423703591345026148714321634033369545688.L, //26 http://www.wolframalpha.com/input/?i=Ceiling%5BProd%5BPrime%5Bi%5D,%7Bi,1,26*(26-1)%2F2%7D%5D%5E(2%2F26)%5D
	//1.8957947256093803e+74L, //27
	189579472560939832999554584631091973026561771519899527582940347991091509931.L, //27 http://www.wolframalpha.com/input/?i=Ceiling%5BProd%5BPrime%5Bi%5D,%7Bi,1,27*(27-1)%2F2%7D%5D%5E(2%2F27)%5D
	//1.4774341727612373e+78L, //28
	1477434172761252026493720089519545229835788604874472841393072278565097758232422.L //28 http://www.wolframalpha.com/input/?i=Ceiling%5BProd%5BPrime%5Bi%5D,%7Bi,1,28*(28-1)%2F2%7D%5D%5E(2%2F28)%5D
};
const BigInteger nodeTargetBI[29]= {
	"0","0","0","0",
	"174", //4
	"8402", //5
	"850353", //6
	"149368936", //7
	"40024883481", //8
	"15470731709135", //9
	"8291773630431514", //10
	//5.8464727875750185e+18L, //11
	"5846472787575011487", //11 http://www.wolframalpha.com/input/?i=Ceiling%5BProd%5BPrime%5Bi%5D,%7Bi,1,11*(11-1)%2F2%7D%5D%5E(2%2F11)%5D
	//5.1819045565827399e+21L, //12
	"5181904556582754301901", //12 http://www.wolframalpha.com/input/?i=Ceiling%5BProd%5BPrime%5Bi%5D,%7Bi,1,12*(12-1)%2F2%7D%5D%5E(2%2F12)%5D
	//5.8933852279847145e+24L, //13
	"5893385227984695817283140", //13 http://www.wolframalpha.com/input/?i=Ceiling%5BProd%5BPrime%5Bi%5D,%7Bi,1,13*(13-1)%2F2%7D%5D%5E(2%2F13)%5D
	//8.0467139648491641e+27L, //14
	"8046713964849192771714221016", //14 http://www.wolframalpha.com/input/?i=Ceiling%5BProd%5BPrime%5Bi%5D,%7Bi,1,14*(14-1)%2F2%7D%5D%5E(2%2F14)%5D
	//1.3260902826230969e+31L, //15
	"13260902826230982297284217027859", //15 1.3260902826230982297284217027859e+31 http://www.wolframalpha.com/input/?i=Ceiling%5BProd%5BPrime%5Bi%5D,%7Bi,1,15*(15-1)%2F2%7D%5D%5E(2%2F15)%5D
	//2.5784682567262635e+34L, //16
	"25784682567262635327048069933626148", // 16 http://www.wolframalpha.com/input/?i=Ceiling%5BProd%5BPrime%5Bi%5D,%7Bi,1,16*(16-1)%2F2%7D%5D%5E(2%2F16)%5D
	//5.7935176644257303e+37L, //17
	"57935176644257372662069032296728572553", //17 http://www.wolframalpha.com/input/?i=Ceiling%5BProd%5BPrime%5Bi%5D,%7Bi,1,17*(17-1)%2F2%7D%5D%5E(2%2F17)%5D
	//1.5232835565842933e+41L, //18
	"152328355658430136291946352893348360705498", //18 http://www.wolframalpha.com/input/?i=Ceiling%5BProd%5BPrime%5Bi%5D,%7Bi,1,18*(18-1)%2F2%7D%5D%5E(2%2F18)%5D
	//4.6150957310561642e+44L, //19
	"461509573105619057927197444723775691786348210", //19 http://www.wolframalpha.com/input/?i=Ceiling%5BProd%5BPrime%5Bi%5D,%7Bi,1,19*(19-1)%2F2%7D%5D%5E(2%2F19)%5D
	//1.5627560739190975e+48L, //20
	"1562756073919087901583174573689392560828036274732", //20 http://www.wolframalpha.com/input/?i=Ceiling%5BProd%5BPrime%5Bi%5D,%7Bi,1,20*(20-1)%2F2%7D%5D%5E(2%2F20)%5D
	//6.0462112621475488e+51L, //21
	"6046211262147588844078469946381715490492083740089745", //21 http://www.wolframalpha.com/input/?i=Ceiling%5BProd%5BPrime%5Bi%5D,%7Bi,1,21*(21-1)%2F2%7D%5D%5E(2%2F21)%5D
	//2.6366734777808117e+55L, //22
	"26366734777808023307973329771919663561001593669843685073", //22 http://www.wolframalpha.com/input/?i=Ceiling%5BProd%5BPrime%5Bi%5D,%7Bi,1,22*(22-1)%2F2%7D%5D%5E(2%2F22)%5D
	//1.2747138144083575e+59L, //23
	"127471381440836233592171396575812503938850222220336299962799", //23 http://www.wolframalpha.com/input/?i=Ceiling%5BProd%5BPrime%5Bi%5D,%7Bi,1,23*(23-1)%2F2%7D%5D%5E(2%2F23)%5D
	//6.7616423155941781e+62L, //24
	"676164231559423240231940586438870038664097322605912406801694387", //24 http://www.wolframalpha.com/input/?i=Ceiling%5BProd%5BPrime%5Bi%5D,%7Bi,1,24*(24-1)%2F2%7D%5D%5E(2%2F24)%5D
	//4.0258814776330165e+66L, //25
	"4025881477633003663973234722604283551843920068611263508598491699368", //25 http://www.wolframalpha.com/input/?i=Ceiling%5BProd%5BPrime%5Bi%5D,%7Bi,1,25*(25-1)%2F2%7D%5D%5E(2%2F25)%5D
	//2.6333119306814134e+70L, //26
	"26333119306813896857670964410534423703591345026148714321634033369545688", //26 http://www.wolframalpha.com/input/?i=Ceiling%5BProd%5BPrime%5Bi%5D,%7Bi,1,26*(26-1)%2F2%7D%5D%5E(2%2F26)%5D
	//1.8957947256093803e+74L, //27
	"189579472560939832999554584631091973026561771519899527582940347991091509931", //27 http://www.wolframalpha.com/input/?i=Ceiling%5BProd%5BPrime%5Bi%5D,%7Bi,1,27*(27-1)%2F2%7D%5D%5E(2%2F27)%5D
	//1.4774341727612373e+78L, //28
	"1477434172761252026493720089519545229835788604874472841393072278565097758232422" //28 http://www.wolframalpha.com/input/?i=Ceiling%5BProd%5BPrime%5Bi%5D,%7Bi,1,28*(28-1)%2F2%7D%5D%5E(2%2F28)%5D
};

const size_t nodesListSizes[29] = {
		4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000,4000000, //0..9
		4000000,4000000,4000000,4000000,
		4000000, //14
		6000000, //15
		4000000, //16
		4000000, //17
		4000000, //18
		4000000, //19
		4000000, //20
		4000000, //21
		4000000, //22
		4000000, //23
		4000000, //24
		4000000, //25
		500, //26
		4000000, //27
		4000000, //28
};
const size_t graphsListSizes[29] = {
		10000,10000,10000,10000,10000,10000,10000,10000,10000,10000, //0..9
		10000,10000,10000,10000,
		10000, //14
		10000, //15
		20000, //16
		20000, //17
		20000, //18
		20000, //19
		20000, //20
		20000, //21
		20000, //22
		20000, //23
		20000, //24
		20000, //25
		100000, //26
		20000, //27
		20000, //28
};
const approxEnergy_t bestRawScores[29] = {
	0,0,0,0,
	24L, //4
	199L,
	253L,
	2958L,
	67478L, //8
	123005L, //9
	2229731L, //10
	8691987L, //11
	101517569L, //12
	1435917659L, // 1659104613L, //13
	90789390323L, //14
	12008125516723L, //15
	1.33142194712492e15L, //16
	2.00076425075219e17L, //17
	5.76998743145856e19L, //18
	4.01181562764629e21L, //19
	4.40329944439881e24L, //20
	1.59524637637425e27L, //21
	9.08147438936631e29L, //22
	2.49816417286987e32L, //23
	1.68313341621214e35L, //24
	1.34707841619550e38L, //25
	5.55347238065724e40L, //26
	2.92131655037204e44L, //27
	1.08560662620876e47L, //28
};

const approxEnergy_t ignoreAbove[29] = {
	0., 0., 0.,//0,1,2
	5000.L, //3
	9.5e+16L, //4
	9.5e+16L, //5
	9.5e+16L, //6
	9.5e+16L,//7
	320210907138.L,//320216672496., //8
	139237861414043.L,//9 139237861414043
	82927355977633254.L, //10
	6.4314528739149604e+19L,//11
	6.2184515060493758e+22L,//12
	7.6614008e+25L,//13
	1.12654e+29L,//14
	1.989135424e+32L,//15
	4.125549250367721671833e+35L,//16
	9.84898007660037325581e+38L,//17
	1e+81L,//18
	1e+81L,//19
	1e+81L,//20
	1e+81L,//21
	1e+81L,//22
	1e+81L,//23
	1e+81L,//24
	1e+81L,//25
	1e+81L,//26
	5.119774043196898e+75L,//27
	4.1368164443040134e+79L//28
};
const unsigned short bruteAfterNode[29] = {
	0,0,0,1,2,3,4,5,6,7,
	7, //10
	8, //11
	9, //12
	10, //13
	11, //14
	11, //15
	11, //16
	13, //17
	14, //18
	15, //19
	16, //20
	17, //21
	18, //22
	19, //23
	20, //24
	21, //25
	22, //26
	23, //27
	24, //28
};
const unsigned short maxSolitaries[29] = {
	1,1,1,1,1,1,1,1,1,1,
	17, //10
	19, //11
	20, //12
	22, //13 12+11+10+9+...
	24, //14
	27, //15
	42, //29, //16
	31, //17
	33, //18
	35, //19
	37, //20
	39, //21
	41, //22
	43, //23
	45, //24
	47, //25
	49, //26
	51, //27
	53, //28
};
const unsigned short maxLostVirgins[29] = {
	0,0,0,0,0,0,0,0,0,0,
	0, //10
	0, //11
	1, //12
	1, //13 3 for (-3) mode
	1, //14
	2, //15
	3, //2, //16
	2, //17
	2, //18
	2, //19
	2, //20
	2, //21
	2, //22
	2, //23
	2, //24
	2, //25
	2, //26
	2, //27
	2, //28
};

//unused minVirginsCount,totalVirginsCount,minConnectedCount
const unsigned int virginsThreshold[29][3] = {
	{0,0,0}, //0
	{0,0,0}, //1
	{0,0,0}, //2
	{0,0,0}, //3
	{0,0,0}, //4
	{0,0,0}, //5
	{0,0,0}, //6
	{0,0,0}, //7
	{0,0,0}, //8
	{0,0,0}, //9
	{0,0,0}, //10
	{0,0,0}, //11
	{0,0,0}, //12
	{800,0,430}, //13 {910,47000}=34957 rejected /45668 passed node pairs; {940,51000}=115229/942; {940,54000}=100/1; {960,54000}=2K/1 bad
	{2630,0,1350}, //14 {2450,163000} average, 0/1 for 760517; {2620,160000,1350}=2 rejected/5 passed virgins, 961 rejected semi-connected
	{0,0,0}, //15
	{0,0,0}, //16
	{0,0,0}, //17
	{0,0,0}, //18
	{0,0,0}, //19
	{0,0,0}, //20
	{0,0,0}, //21
	{0,0,0}, //22
	{0,0,0}, //23
	{0,0,0}, //24
	{0,0,0}, //25
	{0,0,0}, //26
	{0,0,0}, //27
	{0,0,0}, //28
};
const unsigned int leastFrequentEdge[29] = {
	0, //0
	0, //1
	0, //2
	0, //3
	0, //4
	0, //5
	0, //6
	0, //7
	0, //8
	0, //9
	0, //10
	0, //11
	0, //12
	0, //13
	3, //14 3, Node generation bias or whatever
	0, //15
	0, //16
	0, //17
	0, //18
	0, //19
	0, //20
	0, //21
	0, //22
	0, //23
	0, //24
	0, //25
	0, //26
	0, //27
	0, //28
};
const unsigned int primes[378] = {
			2,     3,     5,     7,    11,    13,    17,    19,    23,    29,
		   31,    37,    41,    43,    47,    53,    59,    61,    67,    71,
		   73,    79,    83,    89,    97,   101,   103,   107,   109,   113,
		  127,   131,   137,   139,   149,   151,   157,   163,   167,   173,
		  179,   181,   191,   193,   197,   199,   211,   223,   227,   229,
		  233,   239,   241,   251,   257,   263,   269,   271,   277,   281,
		  283,   293,   307,   311,   313,   317,   331,   337,   347,   349,
		  353,   359,   367,   373,   379,   383,   389,   397,   401,   409,
		  419,   421,   431,   433,   439,   443,   449,   457,   461,   463,
		  467,   479,   487,   491,   499,   503,   509,   521,   523,   541,
		  547,   557,   563,   569,   571,   577,   587,   593,   599,   601,
		  607,   613,   617,   619,   631,   641,   643,   647,   653,   659,
		  661,   673,   677,   683,   691,   701,   709,   719,   727,   733,
		  739,   743,   751,   757,   761,   769,   773,   787,   797,   809,
		  811,   821,   823,   827,   829,   839,   853,   857,   859,   863,
		  877,   881,   883,   887,   907,   911,   919,   929,   937,   941,
		  947,   953,   967,   971,   977,   983,   991,   997,  1009,  1013,
		 1019,  1021,  1031,  1033,  1039,  1049,  1051,  1061,  1063,  1069,
		 1087,  1091,  1093,  1097,  1103,  1109,  1117,  1123,  1129,  1151,
		 1153,  1163,  1171,  1181,  1187,  1193,  1201,  1213,  1217,  1223,
		 1229,  1231,  1237,  1249,  1259,  1277,  1279,  1283,  1289,  1291,
		 1297,  1301,  1303,  1307,  1319,  1321,  1327,  1361,  1367,  1373,
		 1381,  1399,  1409,  1423,  1427,  1429,  1433,  1439,  1447,  1451,
		 1453,  1459,  1471,  1481,  1483,  1487,  1489,  1493,  1499,  1511,
		 1523,  1531,  1543,  1549,  1553,  1559,  1567,  1571,  1579,  1583,
		 1597,  1601,  1607,  1609,  1613,  1619,  1621,  1627,  1637,  1657,
		 1663,  1667,  1669,  1693,  1697,  1699,  1709,  1721,  1723,  1733,
		 1741,  1747,  1753,  1759,  1777,  1783,  1787,  1789,  1801,  1811,
		 1823,  1831,  1847,  1861,  1867,  1871,  1873,  1877,  1879,  1889,
		 1901,  1907,  1913,  1931,  1933,  1949,  1951,  1973,  1979,  1987,
		 1993,  1997,  1999,  2003,  2011,  2017,  2027,  2029,  2039,  2053,
		 2063,  2069,  2081,  2083,  2087,  2089,  2099,  2111,  2113,  2129,
		 2131,  2137,  2141,  2143,  2153,  2161,  2179,  2203,  2207,  2213,
		 2221,  2237,  2239,  2243,  2251,  2267,  2269,  2273,  2281,  2287,
		 2293,  2297,  2309,  2311,  2333,  2339,  2341,  2347,  2351,  2357,
		 2371,  2377,  2381,  2383,  2389,  2393,  2399,  2411,  2417,  2423,
		 2437,  2441,  2447,  2459,  2467,  2473,  2477,  2503,  2521,  2531,
		 2539,  2543,  2549,  2551,  2557,  2579,  2591,  2593
};
//static const int conjugateNode[29][28] = {
//		{0} //still unused
//};
static const int edgeNodes[29][378][2] = {
{
},// size=0
{
},// size=1
{
{0,1},
},// size=2
{
{0,1},{0,2},
{1,2},
},// size=3
{
{0,1},{0,2},{0,3},
{1,2},{1,3},
{2,3},
},// size=4
{
{0,1},{0,2},{0,3},{0,4},
{1,2},{1,3},{1,4},
{2,3},{2,4},
{3,4},
},// size=5
{
{0,1},{0,2},{0,3},{0,4},{0,5},
{1,2},{1,3},{1,4},{1,5},
{2,3},{2,4},{2,5},
{3,4},{3,5},
{4,5},
},// size=6
{
{0,1},{0,2},{0,3},{0,4},{0,5},{0,6},
{1,2},{1,3},{1,4},{1,5},{1,6},
{2,3},{2,4},{2,5},{2,6},
{3,4},{3,5},{3,6},
{4,5},{4,6},
{5,6},
},// size=7
{
{0,1},{0,2},{0,3},{0,4},{0,5},{0,6},{0,7},
{1,2},{1,3},{1,4},{1,5},{1,6},{1,7},
{2,3},{2,4},{2,5},{2,6},{2,7},
{3,4},{3,5},{3,6},{3,7},
{4,5},{4,6},{4,7},
{5,6},{5,7},
{6,7},
},// size=8
{
{0,1},{0,2},{0,3},{0,4},{0,5},{0,6},{0,7},{0,8},
{1,2},{1,3},{1,4},{1,5},{1,6},{1,7},{1,8},
{2,3},{2,4},{2,5},{2,6},{2,7},{2,8},
{3,4},{3,5},{3,6},{3,7},{3,8},
{4,5},{4,6},{4,7},{4,8},
{5,6},{5,7},{5,8},
{6,7},{6,8},
{7,8},
},// size=9
{
{0,1},{0,2},{0,3},{0,4},{0,5},{0,6},{0,7},{0,8},{0,9},
{1,2},{1,3},{1,4},{1,5},{1,6},{1,7},{1,8},{1,9},
{2,3},{2,4},{2,5},{2,6},{2,7},{2,8},{2,9},
{3,4},{3,5},{3,6},{3,7},{3,8},{3,9},
{4,5},{4,6},{4,7},{4,8},{4,9},
{5,6},{5,7},{5,8},{5,9},
{6,7},{6,8},{6,9},
{7,8},{7,9},
{8,9},
},// size=10
{
{0,1},{0,2},{0,3},{0,4},{0,5},{0,6},{0,7},{0,8},{0,9},{0,10},
{1,2},{1,3},{1,4},{1,5},{1,6},{1,7},{1,8},{1,9},{1,10},
{2,3},{2,4},{2,5},{2,6},{2,7},{2,8},{2,9},{2,10},
{3,4},{3,5},{3,6},{3,7},{3,8},{3,9},{3,10},
{4,5},{4,6},{4,7},{4,8},{4,9},{4,10},
{5,6},{5,7},{5,8},{5,9},{5,10},
{6,7},{6,8},{6,9},{6,10},
{7,8},{7,9},{7,10},
{8,9},{8,10},
{9,10},
},// size=11
{
{0,1},{0,2},{0,3},{0,4},{0,5},{0,6},{0,7},{0,8},{0,9},{0,10},{0,11},
{1,2},{1,3},{1,4},{1,5},{1,6},{1,7},{1,8},{1,9},{1,10},{1,11},
{2,3},{2,4},{2,5},{2,6},{2,7},{2,8},{2,9},{2,10},{2,11},
{3,4},{3,5},{3,6},{3,7},{3,8},{3,9},{3,10},{3,11},
{4,5},{4,6},{4,7},{4,8},{4,9},{4,10},{4,11},
{5,6},{5,7},{5,8},{5,9},{5,10},{5,11},
{6,7},{6,8},{6,9},{6,10},{6,11},
{7,8},{7,9},{7,10},{7,11},
{8,9},{8,10},{8,11},
{9,10},{9,11},
{10,11},
},// size=12
{
{0,1},{0,2},{0,3},{0,4},{0,5},{0,6},{0,7},{0,8},{0,9},{0,10},{0,11},{0,12},
{1,2},{1,3},{1,4},{1,5},{1,6},{1,7},{1,8},{1,9},{1,10},{1,11},{1,12},
{2,3},{2,4},{2,5},{2,6},{2,7},{2,8},{2,9},{2,10},{2,11},{2,12},
{3,4},{3,5},{3,6},{3,7},{3,8},{3,9},{3,10},{3,11},{3,12},
{4,5},{4,6},{4,7},{4,8},{4,9},{4,10},{4,11},{4,12},
{5,6},{5,7},{5,8},{5,9},{5,10},{5,11},{5,12},
{6,7},{6,8},{6,9},{6,10},{6,11},{6,12},
{7,8},{7,9},{7,10},{7,11},{7,12},
{8,9},{8,10},{8,11},{8,12},
{9,10},{9,11},{9,12},
{10,11},{10,12},
{11,12},
},// size=13
{
{0,1},{0,2},{0,3},{0,4},{0,5},{0,6},{0,7},{0,8},{0,9},{0,10},{0,11},{0,12},{0,13},
{1,2},{1,3},{1,4},{1,5},{1,6},{1,7},{1,8},{1,9},{1,10},{1,11},{1,12},{1,13},
{2,3},{2,4},{2,5},{2,6},{2,7},{2,8},{2,9},{2,10},{2,11},{2,12},{2,13},
{3,4},{3,5},{3,6},{3,7},{3,8},{3,9},{3,10},{3,11},{3,12},{3,13},
{4,5},{4,6},{4,7},{4,8},{4,9},{4,10},{4,11},{4,12},{4,13},
{5,6},{5,7},{5,8},{5,9},{5,10},{5,11},{5,12},{5,13},
{6,7},{6,8},{6,9},{6,10},{6,11},{6,12},{6,13},
{7,8},{7,9},{7,10},{7,11},{7,12},{7,13},
{8,9},{8,10},{8,11},{8,12},{8,13},
{9,10},{9,11},{9,12},{9,13},
{10,11},{10,12},{10,13},
{11,12},{11,13},
{12,13},
},// size=14
{
{0,1},{0,2},{0,3},{0,4},{0,5},{0,6},{0,7},{0,8},{0,9},{0,10},{0,11},{0,12},{0,13},{0,14},
{1,2},{1,3},{1,4},{1,5},{1,6},{1,7},{1,8},{1,9},{1,10},{1,11},{1,12},{1,13},{1,14},
{2,3},{2,4},{2,5},{2,6},{2,7},{2,8},{2,9},{2,10},{2,11},{2,12},{2,13},{2,14},
{3,4},{3,5},{3,6},{3,7},{3,8},{3,9},{3,10},{3,11},{3,12},{3,13},{3,14},
{4,5},{4,6},{4,7},{4,8},{4,9},{4,10},{4,11},{4,12},{4,13},{4,14},
{5,6},{5,7},{5,8},{5,9},{5,10},{5,11},{5,12},{5,13},{5,14},
{6,7},{6,8},{6,9},{6,10},{6,11},{6,12},{6,13},{6,14},
{7,8},{7,9},{7,10},{7,11},{7,12},{7,13},{7,14},
{8,9},{8,10},{8,11},{8,12},{8,13},{8,14},
{9,10},{9,11},{9,12},{9,13},{9,14},
{10,11},{10,12},{10,13},{10,14},
{11,12},{11,13},{11,14},
{12,13},{12,14},
{13,14},
},// size=15
{
{0,1},{0,2},{0,3},{0,4},{0,5},{0,6},{0,7},{0,8},{0,9},{0,10},{0,11},{0,12},{0,13},{0,14},{0,15},
{1,2},{1,3},{1,4},{1,5},{1,6},{1,7},{1,8},{1,9},{1,10},{1,11},{1,12},{1,13},{1,14},{1,15},
{2,3},{2,4},{2,5},{2,6},{2,7},{2,8},{2,9},{2,10},{2,11},{2,12},{2,13},{2,14},{2,15},
{3,4},{3,5},{3,6},{3,7},{3,8},{3,9},{3,10},{3,11},{3,12},{3,13},{3,14},{3,15},
{4,5},{4,6},{4,7},{4,8},{4,9},{4,10},{4,11},{4,12},{4,13},{4,14},{4,15},
{5,6},{5,7},{5,8},{5,9},{5,10},{5,11},{5,12},{5,13},{5,14},{5,15},
{6,7},{6,8},{6,9},{6,10},{6,11},{6,12},{6,13},{6,14},{6,15},
{7,8},{7,9},{7,10},{7,11},{7,12},{7,13},{7,14},{7,15},
{8,9},{8,10},{8,11},{8,12},{8,13},{8,14},{8,15},
{9,10},{9,11},{9,12},{9,13},{9,14},{9,15},
{10,11},{10,12},{10,13},{10,14},{10,15},
{11,12},{11,13},{11,14},{11,15},
{12,13},{12,14},{12,15},
{13,14},{13,15},
{14,15},
},// size=16
{
{0,1},{0,2},{0,3},{0,4},{0,5},{0,6},{0,7},{0,8},{0,9},{0,10},{0,11},{0,12},{0,13},{0,14},{0,15},{0,16},
{1,2},{1,3},{1,4},{1,5},{1,6},{1,7},{1,8},{1,9},{1,10},{1,11},{1,12},{1,13},{1,14},{1,15},{1,16},
{2,3},{2,4},{2,5},{2,6},{2,7},{2,8},{2,9},{2,10},{2,11},{2,12},{2,13},{2,14},{2,15},{2,16},
{3,4},{3,5},{3,6},{3,7},{3,8},{3,9},{3,10},{3,11},{3,12},{3,13},{3,14},{3,15},{3,16},
{4,5},{4,6},{4,7},{4,8},{4,9},{4,10},{4,11},{4,12},{4,13},{4,14},{4,15},{4,16},
{5,6},{5,7},{5,8},{5,9},{5,10},{5,11},{5,12},{5,13},{5,14},{5,15},{5,16},
{6,7},{6,8},{6,9},{6,10},{6,11},{6,12},{6,13},{6,14},{6,15},{6,16},
{7,8},{7,9},{7,10},{7,11},{7,12},{7,13},{7,14},{7,15},{7,16},
{8,9},{8,10},{8,11},{8,12},{8,13},{8,14},{8,15},{8,16},
{9,10},{9,11},{9,12},{9,13},{9,14},{9,15},{9,16},
{10,11},{10,12},{10,13},{10,14},{10,15},{10,16},
{11,12},{11,13},{11,14},{11,15},{11,16},
{12,13},{12,14},{12,15},{12,16},
{13,14},{13,15},{13,16},
{14,15},{14,16},
{15,16},
},// size=17
{
{0,1},{0,2},{0,3},{0,4},{0,5},{0,6},{0,7},{0,8},{0,9},{0,10},{0,11},{0,12},{0,13},{0,14},{0,15},{0,16},{0,17},
{1,2},{1,3},{1,4},{1,5},{1,6},{1,7},{1,8},{1,9},{1,10},{1,11},{1,12},{1,13},{1,14},{1,15},{1,16},{1,17},
{2,3},{2,4},{2,5},{2,6},{2,7},{2,8},{2,9},{2,10},{2,11},{2,12},{2,13},{2,14},{2,15},{2,16},{2,17},
{3,4},{3,5},{3,6},{3,7},{3,8},{3,9},{3,10},{3,11},{3,12},{3,13},{3,14},{3,15},{3,16},{3,17},
{4,5},{4,6},{4,7},{4,8},{4,9},{4,10},{4,11},{4,12},{4,13},{4,14},{4,15},{4,16},{4,17},
{5,6},{5,7},{5,8},{5,9},{5,10},{5,11},{5,12},{5,13},{5,14},{5,15},{5,16},{5,17},
{6,7},{6,8},{6,9},{6,10},{6,11},{6,12},{6,13},{6,14},{6,15},{6,16},{6,17},
{7,8},{7,9},{7,10},{7,11},{7,12},{7,13},{7,14},{7,15},{7,16},{7,17},
{8,9},{8,10},{8,11},{8,12},{8,13},{8,14},{8,15},{8,16},{8,17},
{9,10},{9,11},{9,12},{9,13},{9,14},{9,15},{9,16},{9,17},
{10,11},{10,12},{10,13},{10,14},{10,15},{10,16},{10,17},
{11,12},{11,13},{11,14},{11,15},{11,16},{11,17},
{12,13},{12,14},{12,15},{12,16},{12,17},
{13,14},{13,15},{13,16},{13,17},
{14,15},{14,16},{14,17},
{15,16},{15,17},
{16,17},
},// size=18
{
{0,1},{0,2},{0,3},{0,4},{0,5},{0,6},{0,7},{0,8},{0,9},{0,10},{0,11},{0,12},{0,13},{0,14},{0,15},{0,16},{0,17},{0,18},
{1,2},{1,3},{1,4},{1,5},{1,6},{1,7},{1,8},{1,9},{1,10},{1,11},{1,12},{1,13},{1,14},{1,15},{1,16},{1,17},{1,18},
{2,3},{2,4},{2,5},{2,6},{2,7},{2,8},{2,9},{2,10},{2,11},{2,12},{2,13},{2,14},{2,15},{2,16},{2,17},{2,18},
{3,4},{3,5},{3,6},{3,7},{3,8},{3,9},{3,10},{3,11},{3,12},{3,13},{3,14},{3,15},{3,16},{3,17},{3,18},
{4,5},{4,6},{4,7},{4,8},{4,9},{4,10},{4,11},{4,12},{4,13},{4,14},{4,15},{4,16},{4,17},{4,18},
{5,6},{5,7},{5,8},{5,9},{5,10},{5,11},{5,12},{5,13},{5,14},{5,15},{5,16},{5,17},{5,18},
{6,7},{6,8},{6,9},{6,10},{6,11},{6,12},{6,13},{6,14},{6,15},{6,16},{6,17},{6,18},
{7,8},{7,9},{7,10},{7,11},{7,12},{7,13},{7,14},{7,15},{7,16},{7,17},{7,18},
{8,9},{8,10},{8,11},{8,12},{8,13},{8,14},{8,15},{8,16},{8,17},{8,18},
{9,10},{9,11},{9,12},{9,13},{9,14},{9,15},{9,16},{9,17},{9,18},
{10,11},{10,12},{10,13},{10,14},{10,15},{10,16},{10,17},{10,18},
{11,12},{11,13},{11,14},{11,15},{11,16},{11,17},{11,18},
{12,13},{12,14},{12,15},{12,16},{12,17},{12,18},
{13,14},{13,15},{13,16},{13,17},{13,18},
{14,15},{14,16},{14,17},{14,18},
{15,16},{15,17},{15,18},
{16,17},{16,18},
{17,18},
},// size=19
{
{0,1},{0,2},{0,3},{0,4},{0,5},{0,6},{0,7},{0,8},{0,9},{0,10},{0,11},{0,12},{0,13},{0,14},{0,15},{0,16},{0,17},{0,18},{0,19},
{1,2},{1,3},{1,4},{1,5},{1,6},{1,7},{1,8},{1,9},{1,10},{1,11},{1,12},{1,13},{1,14},{1,15},{1,16},{1,17},{1,18},{1,19},
{2,3},{2,4},{2,5},{2,6},{2,7},{2,8},{2,9},{2,10},{2,11},{2,12},{2,13},{2,14},{2,15},{2,16},{2,17},{2,18},{2,19},
{3,4},{3,5},{3,6},{3,7},{3,8},{3,9},{3,10},{3,11},{3,12},{3,13},{3,14},{3,15},{3,16},{3,17},{3,18},{3,19},
{4,5},{4,6},{4,7},{4,8},{4,9},{4,10},{4,11},{4,12},{4,13},{4,14},{4,15},{4,16},{4,17},{4,18},{4,19},
{5,6},{5,7},{5,8},{5,9},{5,10},{5,11},{5,12},{5,13},{5,14},{5,15},{5,16},{5,17},{5,18},{5,19},
{6,7},{6,8},{6,9},{6,10},{6,11},{6,12},{6,13},{6,14},{6,15},{6,16},{6,17},{6,18},{6,19},
{7,8},{7,9},{7,10},{7,11},{7,12},{7,13},{7,14},{7,15},{7,16},{7,17},{7,18},{7,19},
{8,9},{8,10},{8,11},{8,12},{8,13},{8,14},{8,15},{8,16},{8,17},{8,18},{8,19},
{9,10},{9,11},{9,12},{9,13},{9,14},{9,15},{9,16},{9,17},{9,18},{9,19},
{10,11},{10,12},{10,13},{10,14},{10,15},{10,16},{10,17},{10,18},{10,19},
{11,12},{11,13},{11,14},{11,15},{11,16},{11,17},{11,18},{11,19},
{12,13},{12,14},{12,15},{12,16},{12,17},{12,18},{12,19},
{13,14},{13,15},{13,16},{13,17},{13,18},{13,19},
{14,15},{14,16},{14,17},{14,18},{14,19},
{15,16},{15,17},{15,18},{15,19},
{16,17},{16,18},{16,19},
{17,18},{17,19},
{18,19},
},// size=20
{
{0,1},{0,2},{0,3},{0,4},{0,5},{0,6},{0,7},{0,8},{0,9},{0,10},{0,11},{0,12},{0,13},{0,14},{0,15},{0,16},{0,17},{0,18},{0,19},{0,20},
{1,2},{1,3},{1,4},{1,5},{1,6},{1,7},{1,8},{1,9},{1,10},{1,11},{1,12},{1,13},{1,14},{1,15},{1,16},{1,17},{1,18},{1,19},{1,20},
{2,3},{2,4},{2,5},{2,6},{2,7},{2,8},{2,9},{2,10},{2,11},{2,12},{2,13},{2,14},{2,15},{2,16},{2,17},{2,18},{2,19},{2,20},
{3,4},{3,5},{3,6},{3,7},{3,8},{3,9},{3,10},{3,11},{3,12},{3,13},{3,14},{3,15},{3,16},{3,17},{3,18},{3,19},{3,20},
{4,5},{4,6},{4,7},{4,8},{4,9},{4,10},{4,11},{4,12},{4,13},{4,14},{4,15},{4,16},{4,17},{4,18},{4,19},{4,20},
{5,6},{5,7},{5,8},{5,9},{5,10},{5,11},{5,12},{5,13},{5,14},{5,15},{5,16},{5,17},{5,18},{5,19},{5,20},
{6,7},{6,8},{6,9},{6,10},{6,11},{6,12},{6,13},{6,14},{6,15},{6,16},{6,17},{6,18},{6,19},{6,20},
{7,8},{7,9},{7,10},{7,11},{7,12},{7,13},{7,14},{7,15},{7,16},{7,17},{7,18},{7,19},{7,20},
{8,9},{8,10},{8,11},{8,12},{8,13},{8,14},{8,15},{8,16},{8,17},{8,18},{8,19},{8,20},
{9,10},{9,11},{9,12},{9,13},{9,14},{9,15},{9,16},{9,17},{9,18},{9,19},{9,20},
{10,11},{10,12},{10,13},{10,14},{10,15},{10,16},{10,17},{10,18},{10,19},{10,20},
{11,12},{11,13},{11,14},{11,15},{11,16},{11,17},{11,18},{11,19},{11,20},
{12,13},{12,14},{12,15},{12,16},{12,17},{12,18},{12,19},{12,20},
{13,14},{13,15},{13,16},{13,17},{13,18},{13,19},{13,20},
{14,15},{14,16},{14,17},{14,18},{14,19},{14,20},
{15,16},{15,17},{15,18},{15,19},{15,20},
{16,17},{16,18},{16,19},{16,20},
{17,18},{17,19},{17,20},
{18,19},{18,20},
{19,20},
},// size=21
{
{0,1},{0,2},{0,3},{0,4},{0,5},{0,6},{0,7},{0,8},{0,9},{0,10},{0,11},{0,12},{0,13},{0,14},{0,15},{0,16},{0,17},{0,18},{0,19},{0,20},{0,21},
{1,2},{1,3},{1,4},{1,5},{1,6},{1,7},{1,8},{1,9},{1,10},{1,11},{1,12},{1,13},{1,14},{1,15},{1,16},{1,17},{1,18},{1,19},{1,20},{1,21},
{2,3},{2,4},{2,5},{2,6},{2,7},{2,8},{2,9},{2,10},{2,11},{2,12},{2,13},{2,14},{2,15},{2,16},{2,17},{2,18},{2,19},{2,20},{2,21},
{3,4},{3,5},{3,6},{3,7},{3,8},{3,9},{3,10},{3,11},{3,12},{3,13},{3,14},{3,15},{3,16},{3,17},{3,18},{3,19},{3,20},{3,21},
{4,5},{4,6},{4,7},{4,8},{4,9},{4,10},{4,11},{4,12},{4,13},{4,14},{4,15},{4,16},{4,17},{4,18},{4,19},{4,20},{4,21},
{5,6},{5,7},{5,8},{5,9},{5,10},{5,11},{5,12},{5,13},{5,14},{5,15},{5,16},{5,17},{5,18},{5,19},{5,20},{5,21},
{6,7},{6,8},{6,9},{6,10},{6,11},{6,12},{6,13},{6,14},{6,15},{6,16},{6,17},{6,18},{6,19},{6,20},{6,21},
{7,8},{7,9},{7,10},{7,11},{7,12},{7,13},{7,14},{7,15},{7,16},{7,17},{7,18},{7,19},{7,20},{7,21},
{8,9},{8,10},{8,11},{8,12},{8,13},{8,14},{8,15},{8,16},{8,17},{8,18},{8,19},{8,20},{8,21},
{9,10},{9,11},{9,12},{9,13},{9,14},{9,15},{9,16},{9,17},{9,18},{9,19},{9,20},{9,21},
{10,11},{10,12},{10,13},{10,14},{10,15},{10,16},{10,17},{10,18},{10,19},{10,20},{10,21},
{11,12},{11,13},{11,14},{11,15},{11,16},{11,17},{11,18},{11,19},{11,20},{11,21},
{12,13},{12,14},{12,15},{12,16},{12,17},{12,18},{12,19},{12,20},{12,21},
{13,14},{13,15},{13,16},{13,17},{13,18},{13,19},{13,20},{13,21},
{14,15},{14,16},{14,17},{14,18},{14,19},{14,20},{14,21},
{15,16},{15,17},{15,18},{15,19},{15,20},{15,21},
{16,17},{16,18},{16,19},{16,20},{16,21},
{17,18},{17,19},{17,20},{17,21},
{18,19},{18,20},{18,21},
{19,20},{19,21},
{20,21},
},// size=22
{
{0,1},{0,2},{0,3},{0,4},{0,5},{0,6},{0,7},{0,8},{0,9},{0,10},{0,11},{0,12},{0,13},{0,14},{0,15},{0,16},{0,17},{0,18},{0,19},{0,20},{0,21},{0,22},
{1,2},{1,3},{1,4},{1,5},{1,6},{1,7},{1,8},{1,9},{1,10},{1,11},{1,12},{1,13},{1,14},{1,15},{1,16},{1,17},{1,18},{1,19},{1,20},{1,21},{1,22},
{2,3},{2,4},{2,5},{2,6},{2,7},{2,8},{2,9},{2,10},{2,11},{2,12},{2,13},{2,14},{2,15},{2,16},{2,17},{2,18},{2,19},{2,20},{2,21},{2,22},
{3,4},{3,5},{3,6},{3,7},{3,8},{3,9},{3,10},{3,11},{3,12},{3,13},{3,14},{3,15},{3,16},{3,17},{3,18},{3,19},{3,20},{3,21},{3,22},
{4,5},{4,6},{4,7},{4,8},{4,9},{4,10},{4,11},{4,12},{4,13},{4,14},{4,15},{4,16},{4,17},{4,18},{4,19},{4,20},{4,21},{4,22},
{5,6},{5,7},{5,8},{5,9},{5,10},{5,11},{5,12},{5,13},{5,14},{5,15},{5,16},{5,17},{5,18},{5,19},{5,20},{5,21},{5,22},
{6,7},{6,8},{6,9},{6,10},{6,11},{6,12},{6,13},{6,14},{6,15},{6,16},{6,17},{6,18},{6,19},{6,20},{6,21},{6,22},
{7,8},{7,9},{7,10},{7,11},{7,12},{7,13},{7,14},{7,15},{7,16},{7,17},{7,18},{7,19},{7,20},{7,21},{7,22},
{8,9},{8,10},{8,11},{8,12},{8,13},{8,14},{8,15},{8,16},{8,17},{8,18},{8,19},{8,20},{8,21},{8,22},
{9,10},{9,11},{9,12},{9,13},{9,14},{9,15},{9,16},{9,17},{9,18},{9,19},{9,20},{9,21},{9,22},
{10,11},{10,12},{10,13},{10,14},{10,15},{10,16},{10,17},{10,18},{10,19},{10,20},{10,21},{10,22},
{11,12},{11,13},{11,14},{11,15},{11,16},{11,17},{11,18},{11,19},{11,20},{11,21},{11,22},
{12,13},{12,14},{12,15},{12,16},{12,17},{12,18},{12,19},{12,20},{12,21},{12,22},
{13,14},{13,15},{13,16},{13,17},{13,18},{13,19},{13,20},{13,21},{13,22},
{14,15},{14,16},{14,17},{14,18},{14,19},{14,20},{14,21},{14,22},
{15,16},{15,17},{15,18},{15,19},{15,20},{15,21},{15,22},
{16,17},{16,18},{16,19},{16,20},{16,21},{16,22},
{17,18},{17,19},{17,20},{17,21},{17,22},
{18,19},{18,20},{18,21},{18,22},
{19,20},{19,21},{19,22},
{20,21},{20,22},
{21,22},
},// size=23
{
{0,1},{0,2},{0,3},{0,4},{0,5},{0,6},{0,7},{0,8},{0,9},{0,10},{0,11},{0,12},{0,13},{0,14},{0,15},{0,16},{0,17},{0,18},{0,19},{0,20},{0,21},{0,22},{0,23},
{1,2},{1,3},{1,4},{1,5},{1,6},{1,7},{1,8},{1,9},{1,10},{1,11},{1,12},{1,13},{1,14},{1,15},{1,16},{1,17},{1,18},{1,19},{1,20},{1,21},{1,22},{1,23},
{2,3},{2,4},{2,5},{2,6},{2,7},{2,8},{2,9},{2,10},{2,11},{2,12},{2,13},{2,14},{2,15},{2,16},{2,17},{2,18},{2,19},{2,20},{2,21},{2,22},{2,23},
{3,4},{3,5},{3,6},{3,7},{3,8},{3,9},{3,10},{3,11},{3,12},{3,13},{3,14},{3,15},{3,16},{3,17},{3,18},{3,19},{3,20},{3,21},{3,22},{3,23},
{4,5},{4,6},{4,7},{4,8},{4,9},{4,10},{4,11},{4,12},{4,13},{4,14},{4,15},{4,16},{4,17},{4,18},{4,19},{4,20},{4,21},{4,22},{4,23},
{5,6},{5,7},{5,8},{5,9},{5,10},{5,11},{5,12},{5,13},{5,14},{5,15},{5,16},{5,17},{5,18},{5,19},{5,20},{5,21},{5,22},{5,23},
{6,7},{6,8},{6,9},{6,10},{6,11},{6,12},{6,13},{6,14},{6,15},{6,16},{6,17},{6,18},{6,19},{6,20},{6,21},{6,22},{6,23},
{7,8},{7,9},{7,10},{7,11},{7,12},{7,13},{7,14},{7,15},{7,16},{7,17},{7,18},{7,19},{7,20},{7,21},{7,22},{7,23},
{8,9},{8,10},{8,11},{8,12},{8,13},{8,14},{8,15},{8,16},{8,17},{8,18},{8,19},{8,20},{8,21},{8,22},{8,23},
{9,10},{9,11},{9,12},{9,13},{9,14},{9,15},{9,16},{9,17},{9,18},{9,19},{9,20},{9,21},{9,22},{9,23},
{10,11},{10,12},{10,13},{10,14},{10,15},{10,16},{10,17},{10,18},{10,19},{10,20},{10,21},{10,22},{10,23},
{11,12},{11,13},{11,14},{11,15},{11,16},{11,17},{11,18},{11,19},{11,20},{11,21},{11,22},{11,23},
{12,13},{12,14},{12,15},{12,16},{12,17},{12,18},{12,19},{12,20},{12,21},{12,22},{12,23},
{13,14},{13,15},{13,16},{13,17},{13,18},{13,19},{13,20},{13,21},{13,22},{13,23},
{14,15},{14,16},{14,17},{14,18},{14,19},{14,20},{14,21},{14,22},{14,23},
{15,16},{15,17},{15,18},{15,19},{15,20},{15,21},{15,22},{15,23},
{16,17},{16,18},{16,19},{16,20},{16,21},{16,22},{16,23},
{17,18},{17,19},{17,20},{17,21},{17,22},{17,23},
{18,19},{18,20},{18,21},{18,22},{18,23},
{19,20},{19,21},{19,22},{19,23},
{20,21},{20,22},{20,23},
{21,22},{21,23},
{22,23},
},// size=24
{
{0,1},{0,2},{0,3},{0,4},{0,5},{0,6},{0,7},{0,8},{0,9},{0,10},{0,11},{0,12},{0,13},{0,14},{0,15},{0,16},{0,17},{0,18},{0,19},{0,20},{0,21},{0,22},{0,23},{0,24},
{1,2},{1,3},{1,4},{1,5},{1,6},{1,7},{1,8},{1,9},{1,10},{1,11},{1,12},{1,13},{1,14},{1,15},{1,16},{1,17},{1,18},{1,19},{1,20},{1,21},{1,22},{1,23},{1,24},
{2,3},{2,4},{2,5},{2,6},{2,7},{2,8},{2,9},{2,10},{2,11},{2,12},{2,13},{2,14},{2,15},{2,16},{2,17},{2,18},{2,19},{2,20},{2,21},{2,22},{2,23},{2,24},
{3,4},{3,5},{3,6},{3,7},{3,8},{3,9},{3,10},{3,11},{3,12},{3,13},{3,14},{3,15},{3,16},{3,17},{3,18},{3,19},{3,20},{3,21},{3,22},{3,23},{3,24},
{4,5},{4,6},{4,7},{4,8},{4,9},{4,10},{4,11},{4,12},{4,13},{4,14},{4,15},{4,16},{4,17},{4,18},{4,19},{4,20},{4,21},{4,22},{4,23},{4,24},
{5,6},{5,7},{5,8},{5,9},{5,10},{5,11},{5,12},{5,13},{5,14},{5,15},{5,16},{5,17},{5,18},{5,19},{5,20},{5,21},{5,22},{5,23},{5,24},
{6,7},{6,8},{6,9},{6,10},{6,11},{6,12},{6,13},{6,14},{6,15},{6,16},{6,17},{6,18},{6,19},{6,20},{6,21},{6,22},{6,23},{6,24},
{7,8},{7,9},{7,10},{7,11},{7,12},{7,13},{7,14},{7,15},{7,16},{7,17},{7,18},{7,19},{7,20},{7,21},{7,22},{7,23},{7,24},
{8,9},{8,10},{8,11},{8,12},{8,13},{8,14},{8,15},{8,16},{8,17},{8,18},{8,19},{8,20},{8,21},{8,22},{8,23},{8,24},
{9,10},{9,11},{9,12},{9,13},{9,14},{9,15},{9,16},{9,17},{9,18},{9,19},{9,20},{9,21},{9,22},{9,23},{9,24},
{10,11},{10,12},{10,13},{10,14},{10,15},{10,16},{10,17},{10,18},{10,19},{10,20},{10,21},{10,22},{10,23},{10,24},
{11,12},{11,13},{11,14},{11,15},{11,16},{11,17},{11,18},{11,19},{11,20},{11,21},{11,22},{11,23},{11,24},
{12,13},{12,14},{12,15},{12,16},{12,17},{12,18},{12,19},{12,20},{12,21},{12,22},{12,23},{12,24},
{13,14},{13,15},{13,16},{13,17},{13,18},{13,19},{13,20},{13,21},{13,22},{13,23},{13,24},
{14,15},{14,16},{14,17},{14,18},{14,19},{14,20},{14,21},{14,22},{14,23},{14,24},
{15,16},{15,17},{15,18},{15,19},{15,20},{15,21},{15,22},{15,23},{15,24},
{16,17},{16,18},{16,19},{16,20},{16,21},{16,22},{16,23},{16,24},
{17,18},{17,19},{17,20},{17,21},{17,22},{17,23},{17,24},
{18,19},{18,20},{18,21},{18,22},{18,23},{18,24},
{19,20},{19,21},{19,22},{19,23},{19,24},
{20,21},{20,22},{20,23},{20,24},
{21,22},{21,23},{21,24},
{22,23},{22,24},
{23,24},
},// size=25
{
{0,1},{0,2},{0,3},{0,4},{0,5},{0,6},{0,7},{0,8},{0,9},{0,10},{0,11},{0,12},{0,13},{0,14},{0,15},{0,16},{0,17},{0,18},{0,19},{0,20},{0,21},{0,22},{0,23},{0,24},{0,25},
{1,2},{1,3},{1,4},{1,5},{1,6},{1,7},{1,8},{1,9},{1,10},{1,11},{1,12},{1,13},{1,14},{1,15},{1,16},{1,17},{1,18},{1,19},{1,20},{1,21},{1,22},{1,23},{1,24},{1,25},
{2,3},{2,4},{2,5},{2,6},{2,7},{2,8},{2,9},{2,10},{2,11},{2,12},{2,13},{2,14},{2,15},{2,16},{2,17},{2,18},{2,19},{2,20},{2,21},{2,22},{2,23},{2,24},{2,25},
{3,4},{3,5},{3,6},{3,7},{3,8},{3,9},{3,10},{3,11},{3,12},{3,13},{3,14},{3,15},{3,16},{3,17},{3,18},{3,19},{3,20},{3,21},{3,22},{3,23},{3,24},{3,25},
{4,5},{4,6},{4,7},{4,8},{4,9},{4,10},{4,11},{4,12},{4,13},{4,14},{4,15},{4,16},{4,17},{4,18},{4,19},{4,20},{4,21},{4,22},{4,23},{4,24},{4,25},
{5,6},{5,7},{5,8},{5,9},{5,10},{5,11},{5,12},{5,13},{5,14},{5,15},{5,16},{5,17},{5,18},{5,19},{5,20},{5,21},{5,22},{5,23},{5,24},{5,25},
{6,7},{6,8},{6,9},{6,10},{6,11},{6,12},{6,13},{6,14},{6,15},{6,16},{6,17},{6,18},{6,19},{6,20},{6,21},{6,22},{6,23},{6,24},{6,25},
{7,8},{7,9},{7,10},{7,11},{7,12},{7,13},{7,14},{7,15},{7,16},{7,17},{7,18},{7,19},{7,20},{7,21},{7,22},{7,23},{7,24},{7,25},
{8,9},{8,10},{8,11},{8,12},{8,13},{8,14},{8,15},{8,16},{8,17},{8,18},{8,19},{8,20},{8,21},{8,22},{8,23},{8,24},{8,25},
{9,10},{9,11},{9,12},{9,13},{9,14},{9,15},{9,16},{9,17},{9,18},{9,19},{9,20},{9,21},{9,22},{9,23},{9,24},{9,25},
{10,11},{10,12},{10,13},{10,14},{10,15},{10,16},{10,17},{10,18},{10,19},{10,20},{10,21},{10,22},{10,23},{10,24},{10,25},
{11,12},{11,13},{11,14},{11,15},{11,16},{11,17},{11,18},{11,19},{11,20},{11,21},{11,22},{11,23},{11,24},{11,25},
{12,13},{12,14},{12,15},{12,16},{12,17},{12,18},{12,19},{12,20},{12,21},{12,22},{12,23},{12,24},{12,25},
{13,14},{13,15},{13,16},{13,17},{13,18},{13,19},{13,20},{13,21},{13,22},{13,23},{13,24},{13,25},
{14,15},{14,16},{14,17},{14,18},{14,19},{14,20},{14,21},{14,22},{14,23},{14,24},{14,25},
{15,16},{15,17},{15,18},{15,19},{15,20},{15,21},{15,22},{15,23},{15,24},{15,25},
{16,17},{16,18},{16,19},{16,20},{16,21},{16,22},{16,23},{16,24},{16,25},
{17,18},{17,19},{17,20},{17,21},{17,22},{17,23},{17,24},{17,25},
{18,19},{18,20},{18,21},{18,22},{18,23},{18,24},{18,25},
{19,20},{19,21},{19,22},{19,23},{19,24},{19,25},
{20,21},{20,22},{20,23},{20,24},{20,25},
{21,22},{21,23},{21,24},{21,25},
{22,23},{22,24},{22,25},
{23,24},{23,25},
{24,25},
},// size=26
{
{0,1},{0,2},{0,3},{0,4},{0,5},{0,6},{0,7},{0,8},{0,9},{0,10},{0,11},{0,12},{0,13},{0,14},{0,15},{0,16},{0,17},{0,18},{0,19},{0,20},{0,21},{0,22},{0,23},{0,24},{0,25},{0,26},
{1,2},{1,3},{1,4},{1,5},{1,6},{1,7},{1,8},{1,9},{1,10},{1,11},{1,12},{1,13},{1,14},{1,15},{1,16},{1,17},{1,18},{1,19},{1,20},{1,21},{1,22},{1,23},{1,24},{1,25},{1,26},
{2,3},{2,4},{2,5},{2,6},{2,7},{2,8},{2,9},{2,10},{2,11},{2,12},{2,13},{2,14},{2,15},{2,16},{2,17},{2,18},{2,19},{2,20},{2,21},{2,22},{2,23},{2,24},{2,25},{2,26},
{3,4},{3,5},{3,6},{3,7},{3,8},{3,9},{3,10},{3,11},{3,12},{3,13},{3,14},{3,15},{3,16},{3,17},{3,18},{3,19},{3,20},{3,21},{3,22},{3,23},{3,24},{3,25},{3,26},
{4,5},{4,6},{4,7},{4,8},{4,9},{4,10},{4,11},{4,12},{4,13},{4,14},{4,15},{4,16},{4,17},{4,18},{4,19},{4,20},{4,21},{4,22},{4,23},{4,24},{4,25},{4,26},
{5,6},{5,7},{5,8},{5,9},{5,10},{5,11},{5,12},{5,13},{5,14},{5,15},{5,16},{5,17},{5,18},{5,19},{5,20},{5,21},{5,22},{5,23},{5,24},{5,25},{5,26},
{6,7},{6,8},{6,9},{6,10},{6,11},{6,12},{6,13},{6,14},{6,15},{6,16},{6,17},{6,18},{6,19},{6,20},{6,21},{6,22},{6,23},{6,24},{6,25},{6,26},
{7,8},{7,9},{7,10},{7,11},{7,12},{7,13},{7,14},{7,15},{7,16},{7,17},{7,18},{7,19},{7,20},{7,21},{7,22},{7,23},{7,24},{7,25},{7,26},
{8,9},{8,10},{8,11},{8,12},{8,13},{8,14},{8,15},{8,16},{8,17},{8,18},{8,19},{8,20},{8,21},{8,22},{8,23},{8,24},{8,25},{8,26},
{9,10},{9,11},{9,12},{9,13},{9,14},{9,15},{9,16},{9,17},{9,18},{9,19},{9,20},{9,21},{9,22},{9,23},{9,24},{9,25},{9,26},
{10,11},{10,12},{10,13},{10,14},{10,15},{10,16},{10,17},{10,18},{10,19},{10,20},{10,21},{10,22},{10,23},{10,24},{10,25},{10,26},
{11,12},{11,13},{11,14},{11,15},{11,16},{11,17},{11,18},{11,19},{11,20},{11,21},{11,22},{11,23},{11,24},{11,25},{11,26},
{12,13},{12,14},{12,15},{12,16},{12,17},{12,18},{12,19},{12,20},{12,21},{12,22},{12,23},{12,24},{12,25},{12,26},
{13,14},{13,15},{13,16},{13,17},{13,18},{13,19},{13,20},{13,21},{13,22},{13,23},{13,24},{13,25},{13,26},
{14,15},{14,16},{14,17},{14,18},{14,19},{14,20},{14,21},{14,22},{14,23},{14,24},{14,25},{14,26},
{15,16},{15,17},{15,18},{15,19},{15,20},{15,21},{15,22},{15,23},{15,24},{15,25},{15,26},
{16,17},{16,18},{16,19},{16,20},{16,21},{16,22},{16,23},{16,24},{16,25},{16,26},
{17,18},{17,19},{17,20},{17,21},{17,22},{17,23},{17,24},{17,25},{17,26},
{18,19},{18,20},{18,21},{18,22},{18,23},{18,24},{18,25},{18,26},
{19,20},{19,21},{19,22},{19,23},{19,24},{19,25},{19,26},
{20,21},{20,22},{20,23},{20,24},{20,25},{20,26},
{21,22},{21,23},{21,24},{21,25},{21,26},
{22,23},{22,24},{22,25},{22,26},
{23,24},{23,25},{23,26},
{24,25},{24,26},
{25,26},
},// size=27
{
{0,1},{0,2},{0,3},{0,4},{0,5},{0,6},{0,7},{0,8},{0,9},{0,10},{0,11},{0,12},{0,13},{0,14},{0,15},{0,16},{0,17},{0,18},{0,19},{0,20},{0,21},{0,22},{0,23},{0,24},{0,25},{0,26},{0,27},
{1,2},{1,3},{1,4},{1,5},{1,6},{1,7},{1,8},{1,9},{1,10},{1,11},{1,12},{1,13},{1,14},{1,15},{1,16},{1,17},{1,18},{1,19},{1,20},{1,21},{1,22},{1,23},{1,24},{1,25},{1,26},{1,27},
{2,3},{2,4},{2,5},{2,6},{2,7},{2,8},{2,9},{2,10},{2,11},{2,12},{2,13},{2,14},{2,15},{2,16},{2,17},{2,18},{2,19},{2,20},{2,21},{2,22},{2,23},{2,24},{2,25},{2,26},{2,27},
{3,4},{3,5},{3,6},{3,7},{3,8},{3,9},{3,10},{3,11},{3,12},{3,13},{3,14},{3,15},{3,16},{3,17},{3,18},{3,19},{3,20},{3,21},{3,22},{3,23},{3,24},{3,25},{3,26},{3,27},
{4,5},{4,6},{4,7},{4,8},{4,9},{4,10},{4,11},{4,12},{4,13},{4,14},{4,15},{4,16},{4,17},{4,18},{4,19},{4,20},{4,21},{4,22},{4,23},{4,24},{4,25},{4,26},{4,27},
{5,6},{5,7},{5,8},{5,9},{5,10},{5,11},{5,12},{5,13},{5,14},{5,15},{5,16},{5,17},{5,18},{5,19},{5,20},{5,21},{5,22},{5,23},{5,24},{5,25},{5,26},{5,27},
{6,7},{6,8},{6,9},{6,10},{6,11},{6,12},{6,13},{6,14},{6,15},{6,16},{6,17},{6,18},{6,19},{6,20},{6,21},{6,22},{6,23},{6,24},{6,25},{6,26},{6,27},
{7,8},{7,9},{7,10},{7,11},{7,12},{7,13},{7,14},{7,15},{7,16},{7,17},{7,18},{7,19},{7,20},{7,21},{7,22},{7,23},{7,24},{7,25},{7,26},{7,27},
{8,9},{8,10},{8,11},{8,12},{8,13},{8,14},{8,15},{8,16},{8,17},{8,18},{8,19},{8,20},{8,21},{8,22},{8,23},{8,24},{8,25},{8,26},{8,27},
{9,10},{9,11},{9,12},{9,13},{9,14},{9,15},{9,16},{9,17},{9,18},{9,19},{9,20},{9,21},{9,22},{9,23},{9,24},{9,25},{9,26},{9,27},
{10,11},{10,12},{10,13},{10,14},{10,15},{10,16},{10,17},{10,18},{10,19},{10,20},{10,21},{10,22},{10,23},{10,24},{10,25},{10,26},{10,27},
{11,12},{11,13},{11,14},{11,15},{11,16},{11,17},{11,18},{11,19},{11,20},{11,21},{11,22},{11,23},{11,24},{11,25},{11,26},{11,27},
{12,13},{12,14},{12,15},{12,16},{12,17},{12,18},{12,19},{12,20},{12,21},{12,22},{12,23},{12,24},{12,25},{12,26},{12,27},
{13,14},{13,15},{13,16},{13,17},{13,18},{13,19},{13,20},{13,21},{13,22},{13,23},{13,24},{13,25},{13,26},{13,27},
{14,15},{14,16},{14,17},{14,18},{14,19},{14,20},{14,21},{14,22},{14,23},{14,24},{14,25},{14,26},{14,27},
{15,16},{15,17},{15,18},{15,19},{15,20},{15,21},{15,22},{15,23},{15,24},{15,25},{15,26},{15,27},
{16,17},{16,18},{16,19},{16,20},{16,21},{16,22},{16,23},{16,24},{16,25},{16,26},{16,27},
{17,18},{17,19},{17,20},{17,21},{17,22},{17,23},{17,24},{17,25},{17,26},{17,27},
{18,19},{18,20},{18,21},{18,22},{18,23},{18,24},{18,25},{18,26},{18,27},
{19,20},{19,21},{19,22},{19,23},{19,24},{19,25},{19,26},{19,27},
{20,21},{20,22},{20,23},{20,24},{20,25},{20,26},{20,27},
{21,22},{21,23},{21,24},{21,25},{21,26},{21,27},
{22,23},{22,24},{22,25},{22,26},{22,27},
{23,24},{23,25},{23,26},{23,27},
{24,25},{24,26},{24,27},
{25,26},{25,27},
{26,27},
},// size=28
};

 const int nodeEdges[29][28][27] = {
{{}
},//0/0
{
{},// 0/1
},
{
{0,},// 0/2
{0,},// 1/2
},
{
{0,1,},// 0/3
{0,2,},// 1/3
{1,2,},// 2/3
},
{
{0,1,2,},// 0/4
{0,3,4,},// 1/4
{1,3,5,},// 2/4
{2,4,5,},// 3/4
},
{
{0,1,2,3,},// 0/5
{0,4,5,6,},// 1/5
{1,4,7,8,},// 2/5
{2,5,7,9,},// 3/5
{3,6,8,9,},// 4/5
},
{
{0,1,2,3,4,},// 0/6
{0,5,6,7,8,},// 1/6
{1,5,9,10,11,},// 2/6
{2,6,9,12,13,},// 3/6
{3,7,10,12,14,},// 4/6
{4,8,11,13,14,},// 5/6
},
{
{0,1,2,3,4,5,},// 0/7
{0,6,7,8,9,10,},// 1/7
{1,6,11,12,13,14,},// 2/7
{2,7,11,15,16,17,},// 3/7
{3,8,12,15,18,19,},// 4/7
{4,9,13,16,18,20,},// 5/7
{5,10,14,17,19,20,},// 6/7
},
{
{0,1,2,3,4,5,6,},// 0/8
{0,7,8,9,10,11,12,},// 1/8
{1,7,13,14,15,16,17,},// 2/8
{2,8,13,18,19,20,21,},// 3/8
{3,9,14,18,22,23,24,},// 4/8
{4,10,15,19,22,25,26,},// 5/8
{5,11,16,20,23,25,27,},// 6/8
{6,12,17,21,24,26,27,},// 7/8
},
{
{0,1,2,3,4,5,6,7,},// 0/9
{0,8,9,10,11,12,13,14,},// 1/9
{1,8,15,16,17,18,19,20,},// 2/9
{2,9,15,21,22,23,24,25,},// 3/9
{3,10,16,21,26,27,28,29,},// 4/9
{4,11,17,22,26,30,31,32,},// 5/9
{5,12,18,23,27,30,33,34,},// 6/9
{6,13,19,24,28,31,33,35,},// 7/9
{7,14,20,25,29,32,34,35,},// 8/9
},
{
{0,1,2,3,4,5,6,7,8,},// 0/10
{0,9,10,11,12,13,14,15,16,},// 1/10
{1,9,17,18,19,20,21,22,23,},// 2/10
{2,10,17,24,25,26,27,28,29,},// 3/10
{3,11,18,24,30,31,32,33,34,},// 4/10
{4,12,19,25,30,35,36,37,38,},// 5/10
{5,13,20,26,31,35,39,40,41,},// 6/10
{6,14,21,27,32,36,39,42,43,},// 7/10
{7,15,22,28,33,37,40,42,44,},// 8/10
{8,16,23,29,34,38,41,43,44,},// 9/10
},
{
{0,1,2,3,4,5,6,7,8,9,},// 0/11
{0,10,11,12,13,14,15,16,17,18,},// 1/11
{1,10,19,20,21,22,23,24,25,26,},// 2/11
{2,11,19,27,28,29,30,31,32,33,},// 3/11
{3,12,20,27,34,35,36,37,38,39,},// 4/11
{4,13,21,28,34,40,41,42,43,44,},// 5/11
{5,14,22,29,35,40,45,46,47,48,},// 6/11
{6,15,23,30,36,41,45,49,50,51,},// 7/11
{7,16,24,31,37,42,46,49,52,53,},// 8/11
{8,17,25,32,38,43,47,50,52,54,},// 9/11
{9,18,26,33,39,44,48,51,53,54,},// 10/11
},
{
{0,1,2,3,4,5,6,7,8,9,10,},// 0/12
{0,11,12,13,14,15,16,17,18,19,20,},// 1/12
{1,11,21,22,23,24,25,26,27,28,29,},// 2/12
{2,12,21,30,31,32,33,34,35,36,37,},// 3/12
{3,13,22,30,38,39,40,41,42,43,44,},// 4/12
{4,14,23,31,38,45,46,47,48,49,50,},// 5/12
{5,15,24,32,39,45,51,52,53,54,55,},// 6/12
{6,16,25,33,40,46,51,56,57,58,59,},// 7/12
{7,17,26,34,41,47,52,56,60,61,62,},// 8/12
{8,18,27,35,42,48,53,57,60,63,64,},// 9/12
{9,19,28,36,43,49,54,58,61,63,65,},// 10/12
{10,20,29,37,44,50,55,59,62,64,65,},// 11/12
},
{
{0,1,2,3,4,5,6,7,8,9,10,11,},// 0/13
{0,12,13,14,15,16,17,18,19,20,21,22,},// 1/13
{1,12,23,24,25,26,27,28,29,30,31,32,},// 2/13
{2,13,23,33,34,35,36,37,38,39,40,41,},// 3/13
{3,14,24,33,42,43,44,45,46,47,48,49,},// 4/13
{4,15,25,34,42,50,51,52,53,54,55,56,},// 5/13
{5,16,26,35,43,50,57,58,59,60,61,62,},// 6/13
{6,17,27,36,44,51,57,63,64,65,66,67,},// 7/13
{7,18,28,37,45,52,58,63,68,69,70,71,},// 8/13
{8,19,29,38,46,53,59,64,68,72,73,74,},// 9/13
{9,20,30,39,47,54,60,65,69,72,75,76,},// 10/13
{10,21,31,40,48,55,61,66,70,73,75,77,},// 11/13
{11,22,32,41,49,56,62,67,71,74,76,77,},// 12/13
},
{
{0,1,2,3,4,5,6,7,8,9,10,11,12,},// 0/14
{0,13,14,15,16,17,18,19,20,21,22,23,24,},// 1/14
{1,13,25,26,27,28,29,30,31,32,33,34,35,},// 2/14
{2,14,25,36,37,38,39,40,41,42,43,44,45,},// 3/14
{3,15,26,36,46,47,48,49,50,51,52,53,54,},// 4/14
{4,16,27,37,46,55,56,57,58,59,60,61,62,},// 5/14
{5,17,28,38,47,55,63,64,65,66,67,68,69,},// 6/14
{6,18,29,39,48,56,63,70,71,72,73,74,75,},// 7/14
{7,19,30,40,49,57,64,70,76,77,78,79,80,},// 8/14
{8,20,31,41,50,58,65,71,76,81,82,83,84,},// 9/14
{9,21,32,42,51,59,66,72,77,81,85,86,87,},// 10/14
{10,22,33,43,52,60,67,73,78,82,85,88,89,},// 11/14
{11,23,34,44,53,61,68,74,79,83,86,88,90,},// 12/14
{12,24,35,45,54,62,69,75,80,84,87,89,90,},// 13/14
},
{
{0,1,2,3,4,5,6,7,8,9,10,11,12,13,},// 0/15
{0,14,15,16,17,18,19,20,21,22,23,24,25,26,},// 1/15
{1,14,27,28,29,30,31,32,33,34,35,36,37,38,},// 2/15
{2,15,27,39,40,41,42,43,44,45,46,47,48,49,},// 3/15
{3,16,28,39,50,51,52,53,54,55,56,57,58,59,},// 4/15
{4,17,29,40,50,60,61,62,63,64,65,66,67,68,},// 5/15
{5,18,30,41,51,60,69,70,71,72,73,74,75,76,},// 6/15
{6,19,31,42,52,61,69,77,78,79,80,81,82,83,},// 7/15
{7,20,32,43,53,62,70,77,84,85,86,87,88,89,},// 8/15
{8,21,33,44,54,63,71,78,84,90,91,92,93,94,},// 9/15
{9,22,34,45,55,64,72,79,85,90,95,96,97,98,},// 10/15
{10,23,35,46,56,65,73,80,86,91,95,99,100,101,},// 11/15
{11,24,36,47,57,66,74,81,87,92,96,99,102,103,},// 12/15
{12,25,37,48,58,67,75,82,88,93,97,100,102,104,},// 13/15
{13,26,38,49,59,68,76,83,89,94,98,101,103,104,},// 14/15
},
{
{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,},// 0/16
{0,15,16,17,18,19,20,21,22,23,24,25,26,27,28,},// 1/16
{1,15,29,30,31,32,33,34,35,36,37,38,39,40,41,},// 2/16
{2,16,29,42,43,44,45,46,47,48,49,50,51,52,53,},// 3/16
{3,17,30,42,54,55,56,57,58,59,60,61,62,63,64,},// 4/16
{4,18,31,43,54,65,66,67,68,69,70,71,72,73,74,},// 5/16
{5,19,32,44,55,65,75,76,77,78,79,80,81,82,83,},// 6/16
{6,20,33,45,56,66,75,84,85,86,87,88,89,90,91,},// 7/16
{7,21,34,46,57,67,76,84,92,93,94,95,96,97,98,},// 8/16
{8,22,35,47,58,68,77,85,92,99,100,101,102,103,104,},// 9/16
{9,23,36,48,59,69,78,86,93,99,105,106,107,108,109,},// 10/16
{10,24,37,49,60,70,79,87,94,100,105,110,111,112,113,},// 11/16
{11,25,38,50,61,71,80,88,95,101,106,110,114,115,116,},// 12/16
{12,26,39,51,62,72,81,89,96,102,107,111,114,117,118,},// 13/16
{13,27,40,52,63,73,82,90,97,103,108,112,115,117,119,},// 14/16
{14,28,41,53,64,74,83,91,98,104,109,113,116,118,119,},// 15/16
},
{
{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,},// 0/17
{0,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,},// 1/17
{1,16,31,32,33,34,35,36,37,38,39,40,41,42,43,44,},// 2/17
{2,17,31,45,46,47,48,49,50,51,52,53,54,55,56,57,},// 3/17
{3,18,32,45,58,59,60,61,62,63,64,65,66,67,68,69,},// 4/17
{4,19,33,46,58,70,71,72,73,74,75,76,77,78,79,80,},// 5/17
{5,20,34,47,59,70,81,82,83,84,85,86,87,88,89,90,},// 6/17
{6,21,35,48,60,71,81,91,92,93,94,95,96,97,98,99,},// 7/17
{7,22,36,49,61,72,82,91,100,101,102,103,104,105,106,107,},// 8/17
{8,23,37,50,62,73,83,92,100,108,109,110,111,112,113,114,},// 9/17
{9,24,38,51,63,74,84,93,101,108,115,116,117,118,119,120,},// 10/17
{10,25,39,52,64,75,85,94,102,109,115,121,122,123,124,125,},// 11/17
{11,26,40,53,65,76,86,95,103,110,116,121,126,127,128,129,},// 12/17
{12,27,41,54,66,77,87,96,104,111,117,122,126,130,131,132,},// 13/17
{13,28,42,55,67,78,88,97,105,112,118,123,127,130,133,134,},// 14/17
{14,29,43,56,68,79,89,98,106,113,119,124,128,131,133,135,},// 15/17
{15,30,44,57,69,80,90,99,107,114,120,125,129,132,134,135,},// 16/17
},
{
{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,},// 0/18
{0,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,},// 1/18
{1,17,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,},// 2/18
{2,18,33,48,49,50,51,52,53,54,55,56,57,58,59,60,61,},// 3/18
{3,19,34,48,62,63,64,65,66,67,68,69,70,71,72,73,74,},// 4/18
{4,20,35,49,62,75,76,77,78,79,80,81,82,83,84,85,86,},// 5/18
{5,21,36,50,63,75,87,88,89,90,91,92,93,94,95,96,97,},// 6/18
{6,22,37,51,64,76,87,98,99,100,101,102,103,104,105,106,107,},// 7/18
{7,23,38,52,65,77,88,98,108,109,110,111,112,113,114,115,116,},// 8/18
{8,24,39,53,66,78,89,99,108,117,118,119,120,121,122,123,124,},// 9/18
{9,25,40,54,67,79,90,100,109,117,125,126,127,128,129,130,131,},// 10/18
{10,26,41,55,68,80,91,101,110,118,125,132,133,134,135,136,137,},// 11/18
{11,27,42,56,69,81,92,102,111,119,126,132,138,139,140,141,142,},// 12/18
{12,28,43,57,70,82,93,103,112,120,127,133,138,143,144,145,146,},// 13/18
{13,29,44,58,71,83,94,104,113,121,128,134,139,143,147,148,149,},// 14/18
{14,30,45,59,72,84,95,105,114,122,129,135,140,144,147,150,151,},// 15/18
{15,31,46,60,73,85,96,106,115,123,130,136,141,145,148,150,152,},// 16/18
{16,32,47,61,74,86,97,107,116,124,131,137,142,146,149,151,152,},// 17/18
},
{
{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,},// 0/19
{0,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,},// 1/19
{1,18,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,},// 2/19
{2,19,35,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,},// 3/19
{3,20,36,51,66,67,68,69,70,71,72,73,74,75,76,77,78,79,},// 4/19
{4,21,37,52,66,80,81,82,83,84,85,86,87,88,89,90,91,92,},// 5/19
{5,22,38,53,67,80,93,94,95,96,97,98,99,100,101,102,103,104,},// 6/19
{6,23,39,54,68,81,93,105,106,107,108,109,110,111,112,113,114,115,},// 7/19
{7,24,40,55,69,82,94,105,116,117,118,119,120,121,122,123,124,125,},// 8/19
{8,25,41,56,70,83,95,106,116,126,127,128,129,130,131,132,133,134,},// 9/19
{9,26,42,57,71,84,96,107,117,126,135,136,137,138,139,140,141,142,},// 10/19
{10,27,43,58,72,85,97,108,118,127,135,143,144,145,146,147,148,149,},// 11/19
{11,28,44,59,73,86,98,109,119,128,136,143,150,151,152,153,154,155,},// 12/19
{12,29,45,60,74,87,99,110,120,129,137,144,150,156,157,158,159,160,},// 13/19
{13,30,46,61,75,88,100,111,121,130,138,145,151,156,161,162,163,164,},// 14/19
{14,31,47,62,76,89,101,112,122,131,139,146,152,157,161,165,166,167,},// 15/19
{15,32,48,63,77,90,102,113,123,132,140,147,153,158,162,165,168,169,},// 16/19
{16,33,49,64,78,91,103,114,124,133,141,148,154,159,163,166,168,170,},// 17/19
{17,34,50,65,79,92,104,115,125,134,142,149,155,160,164,167,169,170,},// 18/19
},
{
{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,},// 0/20
{0,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,},// 1/20
{1,19,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,},// 2/20
{2,20,37,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,},// 3/20
{3,21,38,54,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,},// 4/20
{4,22,39,55,70,85,86,87,88,89,90,91,92,93,94,95,96,97,98,},// 5/20
{5,23,40,56,71,85,99,100,101,102,103,104,105,106,107,108,109,110,111,},// 6/20
{6,24,41,57,72,86,99,112,113,114,115,116,117,118,119,120,121,122,123,},// 7/20
{7,25,42,58,73,87,100,112,124,125,126,127,128,129,130,131,132,133,134,},// 8/20
{8,26,43,59,74,88,101,113,124,135,136,137,138,139,140,141,142,143,144,},// 9/20
{9,27,44,60,75,89,102,114,125,135,145,146,147,148,149,150,151,152,153,},// 10/20
{10,28,45,61,76,90,103,115,126,136,145,154,155,156,157,158,159,160,161,},// 11/20
{11,29,46,62,77,91,104,116,127,137,146,154,162,163,164,165,166,167,168,},// 12/20
{12,30,47,63,78,92,105,117,128,138,147,155,162,169,170,171,172,173,174,},// 13/20
{13,31,48,64,79,93,106,118,129,139,148,156,163,169,175,176,177,178,179,},// 14/20
{14,32,49,65,80,94,107,119,130,140,149,157,164,170,175,180,181,182,183,},// 15/20
{15,33,50,66,81,95,108,120,131,141,150,158,165,171,176,180,184,185,186,},// 16/20
{16,34,51,67,82,96,109,121,132,142,151,159,166,172,177,181,184,187,188,},// 17/20
{17,35,52,68,83,97,110,122,133,143,152,160,167,173,178,182,185,187,189,},// 18/20
{18,36,53,69,84,98,111,123,134,144,153,161,168,174,179,183,186,188,189,},// 19/20
},
{
{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,},// 0/21
{0,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,},// 1/21
{1,20,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,},// 2/21
{2,21,39,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,},// 3/21
{3,22,40,57,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,},// 4/21
{4,23,41,58,74,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,},// 5/21
{5,24,42,59,75,90,105,106,107,108,109,110,111,112,113,114,115,116,117,118,},// 6/21
{6,25,43,60,76,91,105,119,120,121,122,123,124,125,126,127,128,129,130,131,},// 7/21
{7,26,44,61,77,92,106,119,132,133,134,135,136,137,138,139,140,141,142,143,},// 8/21
{8,27,45,62,78,93,107,120,132,144,145,146,147,148,149,150,151,152,153,154,},// 9/21
{9,28,46,63,79,94,108,121,133,144,155,156,157,158,159,160,161,162,163,164,},// 10/21
{10,29,47,64,80,95,109,122,134,145,155,165,166,167,168,169,170,171,172,173,},// 11/21
{11,30,48,65,81,96,110,123,135,146,156,165,174,175,176,177,178,179,180,181,},// 12/21
{12,31,49,66,82,97,111,124,136,147,157,166,174,182,183,184,185,186,187,188,},// 13/21
{13,32,50,67,83,98,112,125,137,148,158,167,175,182,189,190,191,192,193,194,},// 14/21
{14,33,51,68,84,99,113,126,138,149,159,168,176,183,189,195,196,197,198,199,},// 15/21
{15,34,52,69,85,100,114,127,139,150,160,169,177,184,190,195,200,201,202,203,},// 16/21
{16,35,53,70,86,101,115,128,140,151,161,170,178,185,191,196,200,204,205,206,},// 17/21
{17,36,54,71,87,102,116,129,141,152,162,171,179,186,192,197,201,204,207,208,},// 18/21
{18,37,55,72,88,103,117,130,142,153,163,172,180,187,193,198,202,205,207,209,},// 19/21
{19,38,56,73,89,104,118,131,143,154,164,173,181,188,194,199,203,206,208,209,},// 20/21
},
{
{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,},// 0/22
{0,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,},// 1/22
{1,21,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,},// 2/22
{2,22,41,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,},// 3/22
{3,23,42,60,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,},// 4/22
{4,24,43,61,78,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,},// 5/22
{5,25,44,62,79,95,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,},// 6/22
{6,26,45,63,80,96,111,126,127,128,129,130,131,132,133,134,135,136,137,138,139,},// 7/22
{7,27,46,64,81,97,112,126,140,141,142,143,144,145,146,147,148,149,150,151,152,},// 8/22
{8,28,47,65,82,98,113,127,140,153,154,155,156,157,158,159,160,161,162,163,164,},// 9/22
{9,29,48,66,83,99,114,128,141,153,165,166,167,168,169,170,171,172,173,174,175,},// 10/22
{10,30,49,67,84,100,115,129,142,154,165,176,177,178,179,180,181,182,183,184,185,},// 11/22
{11,31,50,68,85,101,116,130,143,155,166,176,186,187,188,189,190,191,192,193,194,},// 12/22
{12,32,51,69,86,102,117,131,144,156,167,177,186,195,196,197,198,199,200,201,202,},// 13/22
{13,33,52,70,87,103,118,132,145,157,168,178,187,195,203,204,205,206,207,208,209,},// 14/22
{14,34,53,71,88,104,119,133,146,158,169,179,188,196,203,210,211,212,213,214,215,},// 15/22
{15,35,54,72,89,105,120,134,147,159,170,180,189,197,204,210,216,217,218,219,220,},// 16/22
{16,36,55,73,90,106,121,135,148,160,171,181,190,198,205,211,216,221,222,223,224,},// 17/22
{17,37,56,74,91,107,122,136,149,161,172,182,191,199,206,212,217,221,225,226,227,},// 18/22
{18,38,57,75,92,108,123,137,150,162,173,183,192,200,207,213,218,222,225,228,229,},// 19/22
{19,39,58,76,93,109,124,138,151,163,174,184,193,201,208,214,219,223,226,228,230,},// 20/22
{20,40,59,77,94,110,125,139,152,164,175,185,194,202,209,215,220,224,227,229,230,},// 21/22
},
{
{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,},// 0/23
{0,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,},// 1/23
{1,22,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,},// 2/23
{2,23,43,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,},// 3/23
{3,24,44,63,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,},// 4/23
{4,25,45,64,82,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,},// 5/23
{5,26,46,65,83,100,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,},// 6/23
{6,27,47,66,84,101,117,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,},// 7/23
{7,28,48,67,85,102,118,133,148,149,150,151,152,153,154,155,156,157,158,159,160,161,},// 8/23
{8,29,49,68,86,103,119,134,148,162,163,164,165,166,167,168,169,170,171,172,173,174,},// 9/23
{9,30,50,69,87,104,120,135,149,162,175,176,177,178,179,180,181,182,183,184,185,186,},// 10/23
{10,31,51,70,88,105,121,136,150,163,175,187,188,189,190,191,192,193,194,195,196,197,},// 11/23
{11,32,52,71,89,106,122,137,151,164,176,187,198,199,200,201,202,203,204,205,206,207,},// 12/23
{12,33,53,72,90,107,123,138,152,165,177,188,198,208,209,210,211,212,213,214,215,216,},// 13/23
{13,34,54,73,91,108,124,139,153,166,178,189,199,208,217,218,219,220,221,222,223,224,},// 14/23
{14,35,55,74,92,109,125,140,154,167,179,190,200,209,217,225,226,227,228,229,230,231,},// 15/23
{15,36,56,75,93,110,126,141,155,168,180,191,201,210,218,225,232,233,234,235,236,237,},// 16/23
{16,37,57,76,94,111,127,142,156,169,181,192,202,211,219,226,232,238,239,240,241,242,},// 17/23
{17,38,58,77,95,112,128,143,157,170,182,193,203,212,220,227,233,238,243,244,245,246,},// 18/23
{18,39,59,78,96,113,129,144,158,171,183,194,204,213,221,228,234,239,243,247,248,249,},// 19/23
{19,40,60,79,97,114,130,145,159,172,184,195,205,214,222,229,235,240,244,247,250,251,},// 20/23
{20,41,61,80,98,115,131,146,160,173,185,196,206,215,223,230,236,241,245,248,250,252,},// 21/23
{21,42,62,81,99,116,132,147,161,174,186,197,207,216,224,231,237,242,246,249,251,252,},// 22/23
},
{
{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,},// 0/24
{0,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,},// 1/24
{1,23,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,},// 2/24
{2,24,45,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,},// 3/24
{3,25,46,66,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,},// 4/24
{4,26,47,67,86,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,},// 5/24
{5,27,48,68,87,105,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,},// 6/24
{6,28,49,69,88,106,123,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,},// 7/24
{7,29,50,70,89,107,124,140,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,},// 8/24
{8,30,51,71,90,108,125,141,156,171,172,173,174,175,176,177,178,179,180,181,182,183,184,},// 9/24
{9,31,52,72,91,109,126,142,157,171,185,186,187,188,189,190,191,192,193,194,195,196,197,},// 10/24
{10,32,53,73,92,110,127,143,158,172,185,198,199,200,201,202,203,204,205,206,207,208,209,},// 11/24
{11,33,54,74,93,111,128,144,159,173,186,198,210,211,212,213,214,215,216,217,218,219,220,},// 12/24
{12,34,55,75,94,112,129,145,160,174,187,199,210,221,222,223,224,225,226,227,228,229,230,},// 13/24
{13,35,56,76,95,113,130,146,161,175,188,200,211,221,231,232,233,234,235,236,237,238,239,},// 14/24
{14,36,57,77,96,114,131,147,162,176,189,201,212,222,231,240,241,242,243,244,245,246,247,},// 15/24
{15,37,58,78,97,115,132,148,163,177,190,202,213,223,232,240,248,249,250,251,252,253,254,},// 16/24
{16,38,59,79,98,116,133,149,164,178,191,203,214,224,233,241,248,255,256,257,258,259,260,},// 17/24
{17,39,60,80,99,117,134,150,165,179,192,204,215,225,234,242,249,255,261,262,263,264,265,},// 18/24
{18,40,61,81,100,118,135,151,166,180,193,205,216,226,235,243,250,256,261,266,267,268,269,},// 19/24
{19,41,62,82,101,119,136,152,167,181,194,206,217,227,236,244,251,257,262,266,270,271,272,},// 20/24
{20,42,63,83,102,120,137,153,168,182,195,207,218,228,237,245,252,258,263,267,270,273,274,},// 21/24
{21,43,64,84,103,121,138,154,169,183,196,208,219,229,238,246,253,259,264,268,271,273,275,},// 22/24
{22,44,65,85,104,122,139,155,170,184,197,209,220,230,239,247,254,260,265,269,272,274,275,},// 23/24
},
{
{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,},// 0/25
{0,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,},// 1/25
{1,24,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,},// 2/25
{2,25,47,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,},// 3/25
{3,26,48,69,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,},// 4/25
{4,27,49,70,90,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,},// 5/25
{5,28,50,71,91,110,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,},// 6/25
{6,29,51,72,92,111,129,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,},// 7/25
{7,30,52,73,93,112,130,147,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,},// 8/25
{8,31,53,74,94,113,131,148,164,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,},// 9/25
{9,32,54,75,95,114,132,149,165,180,195,196,197,198,199,200,201,202,203,204,205,206,207,208,},// 10/25
{10,33,55,76,96,115,133,150,166,181,195,209,210,211,212,213,214,215,216,217,218,219,220,221,},// 11/25
{11,34,56,77,97,116,134,151,167,182,196,209,222,223,224,225,226,227,228,229,230,231,232,233,},// 12/25
{12,35,57,78,98,117,135,152,168,183,197,210,222,234,235,236,237,238,239,240,241,242,243,244,},// 13/25
{13,36,58,79,99,118,136,153,169,184,198,211,223,234,245,246,247,248,249,250,251,252,253,254,},// 14/25
{14,37,59,80,100,119,137,154,170,185,199,212,224,235,245,255,256,257,258,259,260,261,262,263,},// 15/25
{15,38,60,81,101,120,138,155,171,186,200,213,225,236,246,255,264,265,266,267,268,269,270,271,},// 16/25
{16,39,61,82,102,121,139,156,172,187,201,214,226,237,247,256,264,272,273,274,275,276,277,278,},// 17/25
{17,40,62,83,103,122,140,157,173,188,202,215,227,238,248,257,265,272,279,280,281,282,283,284,},// 18/25
{18,41,63,84,104,123,141,158,174,189,203,216,228,239,249,258,266,273,279,285,286,287,288,289,},// 19/25
{19,42,64,85,105,124,142,159,175,190,204,217,229,240,250,259,267,274,280,285,290,291,292,293,},// 20/25
{20,43,65,86,106,125,143,160,176,191,205,218,230,241,251,260,268,275,281,286,290,294,295,296,},// 21/25
{21,44,66,87,107,126,144,161,177,192,206,219,231,242,252,261,269,276,282,287,291,294,297,298,},// 22/25
{22,45,67,88,108,127,145,162,178,193,207,220,232,243,253,262,270,277,283,288,292,295,297,299,},// 23/25
{23,46,68,89,109,128,146,163,179,194,208,221,233,244,254,263,271,278,284,289,293,296,298,299,},// 24/25
},
{
{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,},// 0/26
{0,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,},// 1/26
{1,25,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,},// 2/26
{2,26,49,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,},// 3/26
{3,27,50,72,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,},// 4/26
{4,28,51,73,94,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,},// 5/26
{5,29,52,74,95,115,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,},// 6/26
{6,30,53,75,96,116,135,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,},// 7/26
{7,31,54,76,97,117,136,154,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,},// 8/26
{8,32,55,77,98,118,137,155,172,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,},// 9/26
{9,33,56,78,99,119,138,156,173,189,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,},// 10/26
{10,34,57,79,100,120,139,157,174,190,205,220,221,222,223,224,225,226,227,228,229,230,231,232,233,},// 11/26
{11,35,58,80,101,121,140,158,175,191,206,220,234,235,236,237,238,239,240,241,242,243,244,245,246,},// 12/26
{12,36,59,81,102,122,141,159,176,192,207,221,234,247,248,249,250,251,252,253,254,255,256,257,258,},// 13/26
{13,37,60,82,103,123,142,160,177,193,208,222,235,247,259,260,261,262,263,264,265,266,267,268,269,},// 14/26
{14,38,61,83,104,124,143,161,178,194,209,223,236,248,259,270,271,272,273,274,275,276,277,278,279,},// 15/26
{15,39,62,84,105,125,144,162,179,195,210,224,237,249,260,270,280,281,282,283,284,285,286,287,288,},// 16/26
{16,40,63,85,106,126,145,163,180,196,211,225,238,250,261,271,280,289,290,291,292,293,294,295,296,},// 17/26
{17,41,64,86,107,127,146,164,181,197,212,226,239,251,262,272,281,289,297,298,299,300,301,302,303,},// 18/26
{18,42,65,87,108,128,147,165,182,198,213,227,240,252,263,273,282,290,297,304,305,306,307,308,309,},// 19/26
{19,43,66,88,109,129,148,166,183,199,214,228,241,253,264,274,283,291,298,304,310,311,312,313,314,},// 20/26
{20,44,67,89,110,130,149,167,184,200,215,229,242,254,265,275,284,292,299,305,310,315,316,317,318,},// 21/26
{21,45,68,90,111,131,150,168,185,201,216,230,243,255,266,276,285,293,300,306,311,315,319,320,321,},// 22/26
{22,46,69,91,112,132,151,169,186,202,217,231,244,256,267,277,286,294,301,307,312,316,319,322,323,},// 23/26
{23,47,70,92,113,133,152,170,187,203,218,232,245,257,268,278,287,295,302,308,313,317,320,322,324,},// 24/26
{24,48,71,93,114,134,153,171,188,204,219,233,246,258,269,279,288,296,303,309,314,318,321,323,324,},// 25/26
},
{
{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,},// 0/27
{0,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,},// 1/27
{1,26,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,},// 2/27
{2,27,51,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,},// 3/27
{3,28,52,75,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,},// 4/27
{4,29,53,76,98,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,},// 5/27
{5,30,54,77,99,120,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,},// 6/27
{6,31,55,78,100,121,141,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,},// 7/27
{7,32,56,79,101,122,142,161,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,},// 8/27
{8,33,57,80,102,123,143,162,180,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,},// 9/27
{9,34,58,81,103,124,144,163,181,198,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,},// 10/27
{10,35,59,82,104,125,145,164,182,199,215,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,},// 11/27
{11,36,60,83,105,126,146,165,183,200,216,231,246,247,248,249,250,251,252,253,254,255,256,257,258,259,},// 12/27
{12,37,61,84,106,127,147,166,184,201,217,232,246,260,261,262,263,264,265,266,267,268,269,270,271,272,},// 13/27
{13,38,62,85,107,128,148,167,185,202,218,233,247,260,273,274,275,276,277,278,279,280,281,282,283,284,},// 14/27
{14,39,63,86,108,129,149,168,186,203,219,234,248,261,273,285,286,287,288,289,290,291,292,293,294,295,},// 15/27
{15,40,64,87,109,130,150,169,187,204,220,235,249,262,274,285,296,297,298,299,300,301,302,303,304,305,},// 16/27
{16,41,65,88,110,131,151,170,188,205,221,236,250,263,275,286,296,306,307,308,309,310,311,312,313,314,},// 17/27
{17,42,66,89,111,132,152,171,189,206,222,237,251,264,276,287,297,306,315,316,317,318,319,320,321,322,},// 18/27
{18,43,67,90,112,133,153,172,190,207,223,238,252,265,277,288,298,307,315,323,324,325,326,327,328,329,},// 19/27
{19,44,68,91,113,134,154,173,191,208,224,239,253,266,278,289,299,308,316,323,330,331,332,333,334,335,},// 20/27
{20,45,69,92,114,135,155,174,192,209,225,240,254,267,279,290,300,309,317,324,330,336,337,338,339,340,},// 21/27
{21,46,70,93,115,136,156,175,193,210,226,241,255,268,280,291,301,310,318,325,331,336,341,342,343,344,},// 22/27
{22,47,71,94,116,137,157,176,194,211,227,242,256,269,281,292,302,311,319,326,332,337,341,345,346,347,},// 23/27
{23,48,72,95,117,138,158,177,195,212,228,243,257,270,282,293,303,312,320,327,333,338,342,345,348,349,},// 24/27
{24,49,73,96,118,139,159,178,196,213,229,244,258,271,283,294,304,313,321,328,334,339,343,346,348,350,},// 25/27
{25,50,74,97,119,140,160,179,197,214,230,245,259,272,284,295,305,314,322,329,335,340,344,347,349,350,},// 26/27
},
{
{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,},// 0/28
{0,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,},// 1/28
{1,27,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,},// 2/28
{2,28,53,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,},// 3/28
{3,29,54,78,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,},// 4/28
{4,30,55,79,102,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,},// 5/28
{5,31,56,80,103,125,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,},// 6/28
{6,32,57,81,104,126,147,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,},// 7/28
{7,33,58,82,105,127,148,168,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,},// 8/28
{8,34,59,83,106,128,149,169,188,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,},// 9/28
{9,35,60,84,107,129,150,170,189,207,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,},// 10/28
{10,36,61,85,108,130,151,171,190,208,225,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,},// 11/28
{11,37,62,86,109,131,152,172,191,209,226,242,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,},// 12/28
{12,38,63,87,110,132,153,173,192,210,227,243,258,273,274,275,276,277,278,279,280,281,282,283,284,285,286,},// 13/28
{13,39,64,88,111,133,154,174,193,211,228,244,259,273,287,288,289,290,291,292,293,294,295,296,297,298,299,},// 14/28
{14,40,65,89,112,134,155,175,194,212,229,245,260,274,287,300,301,302,303,304,305,306,307,308,309,310,311,},// 15/28
{15,41,66,90,113,135,156,176,195,213,230,246,261,275,288,300,312,313,314,315,316,317,318,319,320,321,322,},// 16/28
{16,42,67,91,114,136,157,177,196,214,231,247,262,276,289,301,312,323,324,325,326,327,328,329,330,331,332,},// 17/28
{17,43,68,92,115,137,158,178,197,215,232,248,263,277,290,302,313,323,333,334,335,336,337,338,339,340,341,},// 18/28
{18,44,69,93,116,138,159,179,198,216,233,249,264,278,291,303,314,324,333,342,343,344,345,346,347,348,349,},// 19/28
{19,45,70,94,117,139,160,180,199,217,234,250,265,279,292,304,315,325,334,342,350,351,352,353,354,355,356,},// 20/28
{20,46,71,95,118,140,161,181,200,218,235,251,266,280,293,305,316,326,335,343,350,357,358,359,360,361,362,},// 21/28
{21,47,72,96,119,141,162,182,201,219,236,252,267,281,294,306,317,327,336,344,351,357,363,364,365,366,367,},// 22/28
{22,48,73,97,120,142,163,183,202,220,237,253,268,282,295,307,318,328,337,345,352,358,363,368,369,370,371,},// 23/28
{23,49,74,98,121,143,164,184,203,221,238,254,269,283,296,308,319,329,338,346,353,359,364,368,372,373,374,},// 24/28
{24,50,75,99,122,144,165,185,204,222,239,255,270,284,297,309,320,330,339,347,354,360,365,369,372,375,376,},// 25/28
{25,51,76,100,123,145,166,186,205,223,240,256,271,285,298,310,321,331,340,348,355,361,366,370,373,375,377,},// 26/28
{26,52,77,101,124,146,167,187,206,224,241,257,272,286,299,311,322,332,341,349,356,362,367,371,374,376,377,},// 27/28
}
};

//edgeCell=edgePerNodes[size][node1][node2]
const int edgePerNodes[29][28][28] = {
		{
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //0/0
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //1/0
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //2/0
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //3/0
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //4/0
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //5/0
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //6/0
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //7/0
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //8/0
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //9/0
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //10/0
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //11/0
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //12/0
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //13/0
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //14/0
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //15/0
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //16/0
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //17/0
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //18/0
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //19/0
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //20/0
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //21/0
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //22/0
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //23/0
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //24/0
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //25/0
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //26/0
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //27/0
		},
		{
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //0/1
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //1/1
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //2/1
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //3/1
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //4/1
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //5/1
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //6/1
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //7/1
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //8/1
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //9/1
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //10/1
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //11/1
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //12/1
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //13/1
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //14/1
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //15/1
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //16/1
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //17/1
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //18/1
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //19/1
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //20/1
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //21/1
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //22/1
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //23/1
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //24/1
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //25/1
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //26/1
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //27/1
		},
		{
		{-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //0/2
		{0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //1/2
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //2/2
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //3/2
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //4/2
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //5/2
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //6/2
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //7/2
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //8/2
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //9/2
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //10/2
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //11/2
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //12/2
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //13/2
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //14/2
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //15/2
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //16/2
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //17/2
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //18/2
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //19/2
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //20/2
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //21/2
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //22/2
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //23/2
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //24/2
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //25/2
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //26/2
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //27/2
		},
		{
		{-1,0,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //0/3
		{0,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //1/3
		{1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //2/3
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //3/3
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //4/3
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //5/3
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //6/3
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //7/3
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //8/3
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //9/3
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //10/3
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //11/3
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //12/3
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //13/3
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //14/3
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //15/3
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //16/3
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //17/3
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //18/3
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //19/3
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //20/3
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //21/3
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //22/3
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //23/3
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //24/3
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //25/3
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //26/3
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //27/3
		},
		{
		{-1,0,1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //0/4
		{0,-1,3,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //1/4
		{1,3,-1,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //2/4
		{2,4,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //3/4
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //4/4
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //5/4
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //6/4
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //7/4
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //8/4
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //9/4
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //10/4
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //11/4
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //12/4
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //13/4
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //14/4
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //15/4
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //16/4
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //17/4
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //18/4
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //19/4
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //20/4
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //21/4
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //22/4
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //23/4
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //24/4
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //25/4
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //26/4
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //27/4
		},
		{
		{-1,0,1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //0/5
		{0,-1,4,5,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //1/5
		{1,4,-1,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //2/5
		{2,5,7,-1,9,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //3/5
		{3,6,8,9,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //4/5
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //5/5
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //6/5
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //7/5
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //8/5
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //9/5
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //10/5
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //11/5
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //12/5
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //13/5
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //14/5
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //15/5
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //16/5
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //17/5
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //18/5
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //19/5
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //20/5
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //21/5
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //22/5
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //23/5
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //24/5
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //25/5
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //26/5
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //27/5
		},
		{
		{-1,0,1,2,3,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //0/6
		{0,-1,5,6,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //1/6
		{1,5,-1,9,10,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //2/6
		{2,6,9,-1,12,13,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //3/6
		{3,7,10,12,-1,14,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //4/6
		{4,8,11,13,14,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //5/6
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //6/6
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //7/6
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //8/6
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //9/6
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //10/6
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //11/6
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //12/6
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //13/6
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //14/6
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //15/6
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //16/6
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //17/6
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //18/6
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //19/6
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //20/6
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //21/6
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //22/6
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //23/6
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //24/6
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //25/6
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //26/6
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //27/6
		},
		{
		{-1,0,1,2,3,4,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //0/7
		{0,-1,6,7,8,9,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //1/7
		{1,6,-1,11,12,13,14,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //2/7
		{2,7,11,-1,15,16,17,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //3/7
		{3,8,12,15,-1,18,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //4/7
		{4,9,13,16,18,-1,20,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //5/7
		{5,10,14,17,19,20,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //6/7
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //7/7
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //8/7
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //9/7
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //10/7
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //11/7
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //12/7
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //13/7
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //14/7
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //15/7
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //16/7
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //17/7
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //18/7
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //19/7
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //20/7
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //21/7
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //22/7
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //23/7
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //24/7
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //25/7
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //26/7
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //27/7
		},
		{
		{-1,0,1,2,3,4,5,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //0/8
		{0,-1,7,8,9,10,11,12,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //1/8
		{1,7,-1,13,14,15,16,17,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //2/8
		{2,8,13,-1,18,19,20,21,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //3/8
		{3,9,14,18,-1,22,23,24,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //4/8
		{4,10,15,19,22,-1,25,26,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //5/8
		{5,11,16,20,23,25,-1,27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //6/8
		{6,12,17,21,24,26,27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //7/8
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //8/8
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //9/8
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //10/8
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //11/8
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //12/8
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //13/8
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //14/8
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //15/8
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //16/8
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //17/8
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //18/8
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //19/8
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //20/8
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //21/8
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //22/8
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //23/8
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //24/8
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //25/8
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //26/8
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //27/8
		},
		{
		{-1,0,1,2,3,4,5,6,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //0/9
		{0,-1,8,9,10,11,12,13,14,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //1/9
		{1,8,-1,15,16,17,18,19,20,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //2/9
		{2,9,15,-1,21,22,23,24,25,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //3/9
		{3,10,16,21,-1,26,27,28,29,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //4/9
		{4,11,17,22,26,-1,30,31,32,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //5/9
		{5,12,18,23,27,30,-1,33,34,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //6/9
		{6,13,19,24,28,31,33,-1,35,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //7/9
		{7,14,20,25,29,32,34,35,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //8/9
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //9/9
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //10/9
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //11/9
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //12/9
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //13/9
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //14/9
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //15/9
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //16/9
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //17/9
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //18/9
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //19/9
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //20/9
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //21/9
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //22/9
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //23/9
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //24/9
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //25/9
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //26/9
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //27/9
		},
		{
		{-1,0,1,2,3,4,5,6,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //0/10
		{0,-1,9,10,11,12,13,14,15,16,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //1/10
		{1,9,-1,17,18,19,20,21,22,23,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //2/10
		{2,10,17,-1,24,25,26,27,28,29,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //3/10
		{3,11,18,24,-1,30,31,32,33,34,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //4/10
		{4,12,19,25,30,-1,35,36,37,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //5/10
		{5,13,20,26,31,35,-1,39,40,41,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //6/10
		{6,14,21,27,32,36,39,-1,42,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //7/10
		{7,15,22,28,33,37,40,42,-1,44,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //8/10
		{8,16,23,29,34,38,41,43,44,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //9/10
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //10/10
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //11/10
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //12/10
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //13/10
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //14/10
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //15/10
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //16/10
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //17/10
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //18/10
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //19/10
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //20/10
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //21/10
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //22/10
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //23/10
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //24/10
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //25/10
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //26/10
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //27/10
		},
		{
		{-1,0,1,2,3,4,5,6,7,8,9,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //0/11
		{0,-1,10,11,12,13,14,15,16,17,18,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //1/11
		{1,10,-1,19,20,21,22,23,24,25,26,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //2/11
		{2,11,19,-1,27,28,29,30,31,32,33,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //3/11
		{3,12,20,27,-1,34,35,36,37,38,39,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //4/11
		{4,13,21,28,34,-1,40,41,42,43,44,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //5/11
		{5,14,22,29,35,40,-1,45,46,47,48,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //6/11
		{6,15,23,30,36,41,45,-1,49,50,51,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //7/11
		{7,16,24,31,37,42,46,49,-1,52,53,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //8/11
		{8,17,25,32,38,43,47,50,52,-1,54,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //9/11
		{9,18,26,33,39,44,48,51,53,54,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //10/11
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //11/11
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //12/11
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //13/11
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //14/11
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //15/11
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //16/11
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //17/11
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //18/11
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //19/11
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //20/11
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //21/11
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //22/11
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //23/11
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //24/11
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //25/11
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //26/11
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //27/11
		},
		{
		{-1,0,1,2,3,4,5,6,7,8,9,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //0/12
		{0,-1,11,12,13,14,15,16,17,18,19,20,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //1/12
		{1,11,-1,21,22,23,24,25,26,27,28,29,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //2/12
		{2,12,21,-1,30,31,32,33,34,35,36,37,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //3/12
		{3,13,22,30,-1,38,39,40,41,42,43,44,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //4/12
		{4,14,23,31,38,-1,45,46,47,48,49,50,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //5/12
		{5,15,24,32,39,45,-1,51,52,53,54,55,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //6/12
		{6,16,25,33,40,46,51,-1,56,57,58,59,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //7/12
		{7,17,26,34,41,47,52,56,-1,60,61,62,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //8/12
		{8,18,27,35,42,48,53,57,60,-1,63,64,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //9/12
		{9,19,28,36,43,49,54,58,61,63,-1,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //10/12
		{10,20,29,37,44,50,55,59,62,64,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //11/12
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //12/12
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //13/12
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //14/12
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //15/12
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //16/12
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //17/12
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //18/12
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //19/12
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //20/12
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //21/12
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //22/12
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //23/12
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //24/12
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //25/12
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //26/12
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //27/12
		},
		{
		{-1,0,1,2,3,4,5,6,7,8,9,10,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //0/13
		{0,-1,12,13,14,15,16,17,18,19,20,21,22,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //1/13
		{1,12,-1,23,24,25,26,27,28,29,30,31,32,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //2/13
		{2,13,23,-1,33,34,35,36,37,38,39,40,41,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //3/13
		{3,14,24,33,-1,42,43,44,45,46,47,48,49,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //4/13
		{4,15,25,34,42,-1,50,51,52,53,54,55,56,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //5/13
		{5,16,26,35,43,50,-1,57,58,59,60,61,62,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //6/13
		{6,17,27,36,44,51,57,-1,63,64,65,66,67,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //7/13
		{7,18,28,37,45,52,58,63,-1,68,69,70,71,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //8/13
		{8,19,29,38,46,53,59,64,68,-1,72,73,74,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //9/13
		{9,20,30,39,47,54,60,65,69,72,-1,75,76,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //10/13
		{10,21,31,40,48,55,61,66,70,73,75,-1,77,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //11/13
		{11,22,32,41,49,56,62,67,71,74,76,77,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //12/13
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //13/13
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //14/13
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //15/13
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //16/13
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //17/13
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //18/13
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //19/13
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //20/13
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //21/13
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //22/13
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //23/13
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //24/13
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //25/13
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //26/13
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //27/13
		},
		{
		{-1,0,1,2,3,4,5,6,7,8,9,10,11,12,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //0/14
		{0,-1,13,14,15,16,17,18,19,20,21,22,23,24,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //1/14
		{1,13,-1,25,26,27,28,29,30,31,32,33,34,35,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //2/14
		{2,14,25,-1,36,37,38,39,40,41,42,43,44,45,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //3/14
		{3,15,26,36,-1,46,47,48,49,50,51,52,53,54,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //4/14
		{4,16,27,37,46,-1,55,56,57,58,59,60,61,62,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //5/14
		{5,17,28,38,47,55,-1,63,64,65,66,67,68,69,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //6/14
		{6,18,29,39,48,56,63,-1,70,71,72,73,74,75,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //7/14
		{7,19,30,40,49,57,64,70,-1,76,77,78,79,80,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //8/14
		{8,20,31,41,50,58,65,71,76,-1,81,82,83,84,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //9/14
		{9,21,32,42,51,59,66,72,77,81,-1,85,86,87,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //10/14
		{10,22,33,43,52,60,67,73,78,82,85,-1,88,89,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //11/14
		{11,23,34,44,53,61,68,74,79,83,86,88,-1,90,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //12/14
		{12,24,35,45,54,62,69,75,80,84,87,89,90,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //13/14
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //14/14
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //15/14
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //16/14
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //17/14
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //18/14
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //19/14
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //20/14
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //21/14
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //22/14
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //23/14
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //24/14
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //25/14
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //26/14
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //27/14
		},
		{
		{-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //0/15
		{0,-1,14,15,16,17,18,19,20,21,22,23,24,25,26,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //1/15
		{1,14,-1,27,28,29,30,31,32,33,34,35,36,37,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //2/15
		{2,15,27,-1,39,40,41,42,43,44,45,46,47,48,49,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //3/15
		{3,16,28,39,-1,50,51,52,53,54,55,56,57,58,59,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //4/15
		{4,17,29,40,50,-1,60,61,62,63,64,65,66,67,68,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //5/15
		{5,18,30,41,51,60,-1,69,70,71,72,73,74,75,76,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //6/15
		{6,19,31,42,52,61,69,-1,77,78,79,80,81,82,83,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //7/15
		{7,20,32,43,53,62,70,77,-1,84,85,86,87,88,89,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //8/15
		{8,21,33,44,54,63,71,78,84,-1,90,91,92,93,94,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //9/15
		{9,22,34,45,55,64,72,79,85,90,-1,95,96,97,98,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //10/15
		{10,23,35,46,56,65,73,80,86,91,95,-1,99,100,101,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //11/15
		{11,24,36,47,57,66,74,81,87,92,96,99,-1,102,103,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //12/15
		{12,25,37,48,58,67,75,82,88,93,97,100,102,-1,104,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //13/15
		{13,26,38,49,59,68,76,83,89,94,98,101,103,104,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //14/15
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //15/15
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //16/15
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //17/15
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //18/15
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //19/15
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //20/15
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //21/15
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //22/15
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //23/15
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //24/15
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //25/15
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //26/15
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //27/15
		},
		{
		{-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //0/16
		{0,-1,15,16,17,18,19,20,21,22,23,24,25,26,27,28,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //1/16
		{1,15,-1,29,30,31,32,33,34,35,36,37,38,39,40,41,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //2/16
		{2,16,29,-1,42,43,44,45,46,47,48,49,50,51,52,53,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //3/16
		{3,17,30,42,-1,54,55,56,57,58,59,60,61,62,63,64,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //4/16
		{4,18,31,43,54,-1,65,66,67,68,69,70,71,72,73,74,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //5/16
		{5,19,32,44,55,65,-1,75,76,77,78,79,80,81,82,83,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //6/16
		{6,20,33,45,56,66,75,-1,84,85,86,87,88,89,90,91,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //7/16
		{7,21,34,46,57,67,76,84,-1,92,93,94,95,96,97,98,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //8/16
		{8,22,35,47,58,68,77,85,92,-1,99,100,101,102,103,104,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //9/16
		{9,23,36,48,59,69,78,86,93,99,-1,105,106,107,108,109,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //10/16
		{10,24,37,49,60,70,79,87,94,100,105,-1,110,111,112,113,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //11/16
		{11,25,38,50,61,71,80,88,95,101,106,110,-1,114,115,116,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //12/16
		{12,26,39,51,62,72,81,89,96,102,107,111,114,-1,117,118,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //13/16
		{13,27,40,52,63,73,82,90,97,103,108,112,115,117,-1,119,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //14/16
		{14,28,41,53,64,74,83,91,98,104,109,113,116,118,119,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //15/16
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //16/16
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //17/16
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //18/16
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //19/16
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //20/16
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //21/16
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //22/16
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //23/16
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //24/16
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //25/16
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //26/16
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //27/16
		},
		{
		{-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //0/17
		{0,-1,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //1/17
		{1,16,-1,31,32,33,34,35,36,37,38,39,40,41,42,43,44,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //2/17
		{2,17,31,-1,45,46,47,48,49,50,51,52,53,54,55,56,57,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //3/17
		{3,18,32,45,-1,58,59,60,61,62,63,64,65,66,67,68,69,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //4/17
		{4,19,33,46,58,-1,70,71,72,73,74,75,76,77,78,79,80,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //5/17
		{5,20,34,47,59,70,-1,81,82,83,84,85,86,87,88,89,90,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //6/17
		{6,21,35,48,60,71,81,-1,91,92,93,94,95,96,97,98,99,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //7/17
		{7,22,36,49,61,72,82,91,-1,100,101,102,103,104,105,106,107,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //8/17
		{8,23,37,50,62,73,83,92,100,-1,108,109,110,111,112,113,114,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //9/17
		{9,24,38,51,63,74,84,93,101,108,-1,115,116,117,118,119,120,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //10/17
		{10,25,39,52,64,75,85,94,102,109,115,-1,121,122,123,124,125,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //11/17
		{11,26,40,53,65,76,86,95,103,110,116,121,-1,126,127,128,129,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //12/17
		{12,27,41,54,66,77,87,96,104,111,117,122,126,-1,130,131,132,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //13/17
		{13,28,42,55,67,78,88,97,105,112,118,123,127,130,-1,133,134,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //14/17
		{14,29,43,56,68,79,89,98,106,113,119,124,128,131,133,-1,135,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //15/17
		{15,30,44,57,69,80,90,99,107,114,120,125,129,132,134,135,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //16/17
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //17/17
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //18/17
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //19/17
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //20/17
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //21/17
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //22/17
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //23/17
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //24/17
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //25/17
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //26/17
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //27/17
		},
		{
		{-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //0/18
		{0,-1,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //1/18
		{1,17,-1,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //2/18
		{2,18,33,-1,48,49,50,51,52,53,54,55,56,57,58,59,60,61,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //3/18
		{3,19,34,48,-1,62,63,64,65,66,67,68,69,70,71,72,73,74,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //4/18
		{4,20,35,49,62,-1,75,76,77,78,79,80,81,82,83,84,85,86,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //5/18
		{5,21,36,50,63,75,-1,87,88,89,90,91,92,93,94,95,96,97,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //6/18
		{6,22,37,51,64,76,87,-1,98,99,100,101,102,103,104,105,106,107,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //7/18
		{7,23,38,52,65,77,88,98,-1,108,109,110,111,112,113,114,115,116,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //8/18
		{8,24,39,53,66,78,89,99,108,-1,117,118,119,120,121,122,123,124,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //9/18
		{9,25,40,54,67,79,90,100,109,117,-1,125,126,127,128,129,130,131,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //10/18
		{10,26,41,55,68,80,91,101,110,118,125,-1,132,133,134,135,136,137,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //11/18
		{11,27,42,56,69,81,92,102,111,119,126,132,-1,138,139,140,141,142,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //12/18
		{12,28,43,57,70,82,93,103,112,120,127,133,138,-1,143,144,145,146,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //13/18
		{13,29,44,58,71,83,94,104,113,121,128,134,139,143,-1,147,148,149,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //14/18
		{14,30,45,59,72,84,95,105,114,122,129,135,140,144,147,-1,150,151,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //15/18
		{15,31,46,60,73,85,96,106,115,123,130,136,141,145,148,150,-1,152,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //16/18
		{16,32,47,61,74,86,97,107,116,124,131,137,142,146,149,151,152,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //17/18
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //18/18
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //19/18
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //20/18
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //21/18
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //22/18
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //23/18
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //24/18
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //25/18
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //26/18
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //27/18
		},
		{
		{-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //0/19
		{0,-1,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //1/19
		{1,18,-1,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //2/19
		{2,19,35,-1,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //3/19
		{3,20,36,51,-1,66,67,68,69,70,71,72,73,74,75,76,77,78,79,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //4/19
		{4,21,37,52,66,-1,80,81,82,83,84,85,86,87,88,89,90,91,92,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //5/19
		{5,22,38,53,67,80,-1,93,94,95,96,97,98,99,100,101,102,103,104,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //6/19
		{6,23,39,54,68,81,93,-1,105,106,107,108,109,110,111,112,113,114,115,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //7/19
		{7,24,40,55,69,82,94,105,-1,116,117,118,119,120,121,122,123,124,125,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //8/19
		{8,25,41,56,70,83,95,106,116,-1,126,127,128,129,130,131,132,133,134,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //9/19
		{9,26,42,57,71,84,96,107,117,126,-1,135,136,137,138,139,140,141,142,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //10/19
		{10,27,43,58,72,85,97,108,118,127,135,-1,143,144,145,146,147,148,149,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //11/19
		{11,28,44,59,73,86,98,109,119,128,136,143,-1,150,151,152,153,154,155,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //12/19
		{12,29,45,60,74,87,99,110,120,129,137,144,150,-1,156,157,158,159,160,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //13/19
		{13,30,46,61,75,88,100,111,121,130,138,145,151,156,-1,161,162,163,164,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //14/19
		{14,31,47,62,76,89,101,112,122,131,139,146,152,157,161,-1,165,166,167,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //15/19
		{15,32,48,63,77,90,102,113,123,132,140,147,153,158,162,165,-1,168,169,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //16/19
		{16,33,49,64,78,91,103,114,124,133,141,148,154,159,163,166,168,-1,170,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //17/19
		{17,34,50,65,79,92,104,115,125,134,142,149,155,160,164,167,169,170,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //18/19
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //19/19
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //20/19
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //21/19
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //22/19
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //23/19
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //24/19
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //25/19
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //26/19
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //27/19
		},
		{
		{-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,-1,-1,-1,-1,-1,-1,-1,-1,}, //0/20
		{0,-1,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,-1,-1,-1,-1,-1,-1,-1,-1,}, //1/20
		{1,19,-1,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,-1,-1,-1,-1,-1,-1,-1,-1,}, //2/20
		{2,20,37,-1,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,-1,-1,-1,-1,-1,-1,-1,-1,}, //3/20
		{3,21,38,54,-1,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,-1,-1,-1,-1,-1,-1,-1,-1,}, //4/20
		{4,22,39,55,70,-1,85,86,87,88,89,90,91,92,93,94,95,96,97,98,-1,-1,-1,-1,-1,-1,-1,-1,}, //5/20
		{5,23,40,56,71,85,-1,99,100,101,102,103,104,105,106,107,108,109,110,111,-1,-1,-1,-1,-1,-1,-1,-1,}, //6/20
		{6,24,41,57,72,86,99,-1,112,113,114,115,116,117,118,119,120,121,122,123,-1,-1,-1,-1,-1,-1,-1,-1,}, //7/20
		{7,25,42,58,73,87,100,112,-1,124,125,126,127,128,129,130,131,132,133,134,-1,-1,-1,-1,-1,-1,-1,-1,}, //8/20
		{8,26,43,59,74,88,101,113,124,-1,135,136,137,138,139,140,141,142,143,144,-1,-1,-1,-1,-1,-1,-1,-1,}, //9/20
		{9,27,44,60,75,89,102,114,125,135,-1,145,146,147,148,149,150,151,152,153,-1,-1,-1,-1,-1,-1,-1,-1,}, //10/20
		{10,28,45,61,76,90,103,115,126,136,145,-1,154,155,156,157,158,159,160,161,-1,-1,-1,-1,-1,-1,-1,-1,}, //11/20
		{11,29,46,62,77,91,104,116,127,137,146,154,-1,162,163,164,165,166,167,168,-1,-1,-1,-1,-1,-1,-1,-1,}, //12/20
		{12,30,47,63,78,92,105,117,128,138,147,155,162,-1,169,170,171,172,173,174,-1,-1,-1,-1,-1,-1,-1,-1,}, //13/20
		{13,31,48,64,79,93,106,118,129,139,148,156,163,169,-1,175,176,177,178,179,-1,-1,-1,-1,-1,-1,-1,-1,}, //14/20
		{14,32,49,65,80,94,107,119,130,140,149,157,164,170,175,-1,180,181,182,183,-1,-1,-1,-1,-1,-1,-1,-1,}, //15/20
		{15,33,50,66,81,95,108,120,131,141,150,158,165,171,176,180,-1,184,185,186,-1,-1,-1,-1,-1,-1,-1,-1,}, //16/20
		{16,34,51,67,82,96,109,121,132,142,151,159,166,172,177,181,184,-1,187,188,-1,-1,-1,-1,-1,-1,-1,-1,}, //17/20
		{17,35,52,68,83,97,110,122,133,143,152,160,167,173,178,182,185,187,-1,189,-1,-1,-1,-1,-1,-1,-1,-1,}, //18/20
		{18,36,53,69,84,98,111,123,134,144,153,161,168,174,179,183,186,188,189,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //19/20
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //20/20
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //21/20
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //22/20
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //23/20
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //24/20
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //25/20
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //26/20
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //27/20
		},
		{
		{-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,-1,-1,-1,-1,-1,-1,-1,}, //0/21
		{0,-1,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,-1,-1,-1,-1,-1,-1,-1,}, //1/21
		{1,20,-1,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,-1,-1,-1,-1,-1,-1,-1,}, //2/21
		{2,21,39,-1,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,-1,-1,-1,-1,-1,-1,-1,}, //3/21
		{3,22,40,57,-1,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,-1,-1,-1,-1,-1,-1,-1,}, //4/21
		{4,23,41,58,74,-1,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,-1,-1,-1,-1,-1,-1,-1,}, //5/21
		{5,24,42,59,75,90,-1,105,106,107,108,109,110,111,112,113,114,115,116,117,118,-1,-1,-1,-1,-1,-1,-1,}, //6/21
		{6,25,43,60,76,91,105,-1,119,120,121,122,123,124,125,126,127,128,129,130,131,-1,-1,-1,-1,-1,-1,-1,}, //7/21
		{7,26,44,61,77,92,106,119,-1,132,133,134,135,136,137,138,139,140,141,142,143,-1,-1,-1,-1,-1,-1,-1,}, //8/21
		{8,27,45,62,78,93,107,120,132,-1,144,145,146,147,148,149,150,151,152,153,154,-1,-1,-1,-1,-1,-1,-1,}, //9/21
		{9,28,46,63,79,94,108,121,133,144,-1,155,156,157,158,159,160,161,162,163,164,-1,-1,-1,-1,-1,-1,-1,}, //10/21
		{10,29,47,64,80,95,109,122,134,145,155,-1,165,166,167,168,169,170,171,172,173,-1,-1,-1,-1,-1,-1,-1,}, //11/21
		{11,30,48,65,81,96,110,123,135,146,156,165,-1,174,175,176,177,178,179,180,181,-1,-1,-1,-1,-1,-1,-1,}, //12/21
		{12,31,49,66,82,97,111,124,136,147,157,166,174,-1,182,183,184,185,186,187,188,-1,-1,-1,-1,-1,-1,-1,}, //13/21
		{13,32,50,67,83,98,112,125,137,148,158,167,175,182,-1,189,190,191,192,193,194,-1,-1,-1,-1,-1,-1,-1,}, //14/21
		{14,33,51,68,84,99,113,126,138,149,159,168,176,183,189,-1,195,196,197,198,199,-1,-1,-1,-1,-1,-1,-1,}, //15/21
		{15,34,52,69,85,100,114,127,139,150,160,169,177,184,190,195,-1,200,201,202,203,-1,-1,-1,-1,-1,-1,-1,}, //16/21
		{16,35,53,70,86,101,115,128,140,151,161,170,178,185,191,196,200,-1,204,205,206,-1,-1,-1,-1,-1,-1,-1,}, //17/21
		{17,36,54,71,87,102,116,129,141,152,162,171,179,186,192,197,201,204,-1,207,208,-1,-1,-1,-1,-1,-1,-1,}, //18/21
		{18,37,55,72,88,103,117,130,142,153,163,172,180,187,193,198,202,205,207,-1,209,-1,-1,-1,-1,-1,-1,-1,}, //19/21
		{19,38,56,73,89,104,118,131,143,154,164,173,181,188,194,199,203,206,208,209,-1,-1,-1,-1,-1,-1,-1,-1,}, //20/21
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //21/21
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //22/21
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //23/21
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //24/21
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //25/21
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //26/21
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //27/21
		},
		{
		{-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,-1,-1,-1,-1,-1,-1,}, //0/22
		{0,-1,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,-1,-1,-1,-1,-1,-1,}, //1/22
		{1,21,-1,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,-1,-1,-1,-1,-1,-1,}, //2/22
		{2,22,41,-1,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,-1,-1,-1,-1,-1,-1,}, //3/22
		{3,23,42,60,-1,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,-1,-1,-1,-1,-1,-1,}, //4/22
		{4,24,43,61,78,-1,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,-1,-1,-1,-1,-1,-1,}, //5/22
		{5,25,44,62,79,95,-1,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,-1,-1,-1,-1,-1,-1,}, //6/22
		{6,26,45,63,80,96,111,-1,126,127,128,129,130,131,132,133,134,135,136,137,138,139,-1,-1,-1,-1,-1,-1,}, //7/22
		{7,27,46,64,81,97,112,126,-1,140,141,142,143,144,145,146,147,148,149,150,151,152,-1,-1,-1,-1,-1,-1,}, //8/22
		{8,28,47,65,82,98,113,127,140,-1,153,154,155,156,157,158,159,160,161,162,163,164,-1,-1,-1,-1,-1,-1,}, //9/22
		{9,29,48,66,83,99,114,128,141,153,-1,165,166,167,168,169,170,171,172,173,174,175,-1,-1,-1,-1,-1,-1,}, //10/22
		{10,30,49,67,84,100,115,129,142,154,165,-1,176,177,178,179,180,181,182,183,184,185,-1,-1,-1,-1,-1,-1,}, //11/22
		{11,31,50,68,85,101,116,130,143,155,166,176,-1,186,187,188,189,190,191,192,193,194,-1,-1,-1,-1,-1,-1,}, //12/22
		{12,32,51,69,86,102,117,131,144,156,167,177,186,-1,195,196,197,198,199,200,201,202,-1,-1,-1,-1,-1,-1,}, //13/22
		{13,33,52,70,87,103,118,132,145,157,168,178,187,195,-1,203,204,205,206,207,208,209,-1,-1,-1,-1,-1,-1,}, //14/22
		{14,34,53,71,88,104,119,133,146,158,169,179,188,196,203,-1,210,211,212,213,214,215,-1,-1,-1,-1,-1,-1,}, //15/22
		{15,35,54,72,89,105,120,134,147,159,170,180,189,197,204,210,-1,216,217,218,219,220,-1,-1,-1,-1,-1,-1,}, //16/22
		{16,36,55,73,90,106,121,135,148,160,171,181,190,198,205,211,216,-1,221,222,223,224,-1,-1,-1,-1,-1,-1,}, //17/22
		{17,37,56,74,91,107,122,136,149,161,172,182,191,199,206,212,217,221,-1,225,226,227,-1,-1,-1,-1,-1,-1,}, //18/22
		{18,38,57,75,92,108,123,137,150,162,173,183,192,200,207,213,218,222,225,-1,228,229,-1,-1,-1,-1,-1,-1,}, //19/22
		{19,39,58,76,93,109,124,138,151,163,174,184,193,201,208,214,219,223,226,228,-1,230,-1,-1,-1,-1,-1,-1,}, //20/22
		{20,40,59,77,94,110,125,139,152,164,175,185,194,202,209,215,220,224,227,229,230,-1,-1,-1,-1,-1,-1,-1,}, //21/22
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //22/22
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //23/22
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //24/22
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //25/22
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //26/22
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //27/22
		},
		{
		{-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,-1,-1,-1,-1,-1,}, //0/23
		{0,-1,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,-1,-1,-1,-1,-1,}, //1/23
		{1,22,-1,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,-1,-1,-1,-1,-1,}, //2/23
		{2,23,43,-1,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,-1,-1,-1,-1,-1,}, //3/23
		{3,24,44,63,-1,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,-1,-1,-1,-1,-1,}, //4/23
		{4,25,45,64,82,-1,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,-1,-1,-1,-1,-1,}, //5/23
		{5,26,46,65,83,100,-1,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,-1,-1,-1,-1,-1,}, //6/23
		{6,27,47,66,84,101,117,-1,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,-1,-1,-1,-1,-1,}, //7/23
		{7,28,48,67,85,102,118,133,-1,148,149,150,151,152,153,154,155,156,157,158,159,160,161,-1,-1,-1,-1,-1,}, //8/23
		{8,29,49,68,86,103,119,134,148,-1,162,163,164,165,166,167,168,169,170,171,172,173,174,-1,-1,-1,-1,-1,}, //9/23
		{9,30,50,69,87,104,120,135,149,162,-1,175,176,177,178,179,180,181,182,183,184,185,186,-1,-1,-1,-1,-1,}, //10/23
		{10,31,51,70,88,105,121,136,150,163,175,-1,187,188,189,190,191,192,193,194,195,196,197,-1,-1,-1,-1,-1,}, //11/23
		{11,32,52,71,89,106,122,137,151,164,176,187,-1,198,199,200,201,202,203,204,205,206,207,-1,-1,-1,-1,-1,}, //12/23
		{12,33,53,72,90,107,123,138,152,165,177,188,198,-1,208,209,210,211,212,213,214,215,216,-1,-1,-1,-1,-1,}, //13/23
		{13,34,54,73,91,108,124,139,153,166,178,189,199,208,-1,217,218,219,220,221,222,223,224,-1,-1,-1,-1,-1,}, //14/23
		{14,35,55,74,92,109,125,140,154,167,179,190,200,209,217,-1,225,226,227,228,229,230,231,-1,-1,-1,-1,-1,}, //15/23
		{15,36,56,75,93,110,126,141,155,168,180,191,201,210,218,225,-1,232,233,234,235,236,237,-1,-1,-1,-1,-1,}, //16/23
		{16,37,57,76,94,111,127,142,156,169,181,192,202,211,219,226,232,-1,238,239,240,241,242,-1,-1,-1,-1,-1,}, //17/23
		{17,38,58,77,95,112,128,143,157,170,182,193,203,212,220,227,233,238,-1,243,244,245,246,-1,-1,-1,-1,-1,}, //18/23
		{18,39,59,78,96,113,129,144,158,171,183,194,204,213,221,228,234,239,243,-1,247,248,249,-1,-1,-1,-1,-1,}, //19/23
		{19,40,60,79,97,114,130,145,159,172,184,195,205,214,222,229,235,240,244,247,-1,250,251,-1,-1,-1,-1,-1,}, //20/23
		{20,41,61,80,98,115,131,146,160,173,185,196,206,215,223,230,236,241,245,248,250,-1,252,-1,-1,-1,-1,-1,}, //21/23
		{21,42,62,81,99,116,132,147,161,174,186,197,207,216,224,231,237,242,246,249,251,252,-1,-1,-1,-1,-1,-1,}, //22/23
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //23/23
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //24/23
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //25/23
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //26/23
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //27/23
		},
		{
		{-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,-1,-1,-1,-1,}, //0/24
		{0,-1,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,-1,-1,-1,-1,}, //1/24
		{1,23,-1,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,-1,-1,-1,-1,}, //2/24
		{2,24,45,-1,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,-1,-1,-1,-1,}, //3/24
		{3,25,46,66,-1,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,-1,-1,-1,-1,}, //4/24
		{4,26,47,67,86,-1,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,-1,-1,-1,-1,}, //5/24
		{5,27,48,68,87,105,-1,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,-1,-1,-1,-1,}, //6/24
		{6,28,49,69,88,106,123,-1,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,-1,-1,-1,-1,}, //7/24
		{7,29,50,70,89,107,124,140,-1,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,-1,-1,-1,-1,}, //8/24
		{8,30,51,71,90,108,125,141,156,-1,171,172,173,174,175,176,177,178,179,180,181,182,183,184,-1,-1,-1,-1,}, //9/24
		{9,31,52,72,91,109,126,142,157,171,-1,185,186,187,188,189,190,191,192,193,194,195,196,197,-1,-1,-1,-1,}, //10/24
		{10,32,53,73,92,110,127,143,158,172,185,-1,198,199,200,201,202,203,204,205,206,207,208,209,-1,-1,-1,-1,}, //11/24
		{11,33,54,74,93,111,128,144,159,173,186,198,-1,210,211,212,213,214,215,216,217,218,219,220,-1,-1,-1,-1,}, //12/24
		{12,34,55,75,94,112,129,145,160,174,187,199,210,-1,221,222,223,224,225,226,227,228,229,230,-1,-1,-1,-1,}, //13/24
		{13,35,56,76,95,113,130,146,161,175,188,200,211,221,-1,231,232,233,234,235,236,237,238,239,-1,-1,-1,-1,}, //14/24
		{14,36,57,77,96,114,131,147,162,176,189,201,212,222,231,-1,240,241,242,243,244,245,246,247,-1,-1,-1,-1,}, //15/24
		{15,37,58,78,97,115,132,148,163,177,190,202,213,223,232,240,-1,248,249,250,251,252,253,254,-1,-1,-1,-1,}, //16/24
		{16,38,59,79,98,116,133,149,164,178,191,203,214,224,233,241,248,-1,255,256,257,258,259,260,-1,-1,-1,-1,}, //17/24
		{17,39,60,80,99,117,134,150,165,179,192,204,215,225,234,242,249,255,-1,261,262,263,264,265,-1,-1,-1,-1,}, //18/24
		{18,40,61,81,100,118,135,151,166,180,193,205,216,226,235,243,250,256,261,-1,266,267,268,269,-1,-1,-1,-1,}, //19/24
		{19,41,62,82,101,119,136,152,167,181,194,206,217,227,236,244,251,257,262,266,-1,270,271,272,-1,-1,-1,-1,}, //20/24
		{20,42,63,83,102,120,137,153,168,182,195,207,218,228,237,245,252,258,263,267,270,-1,273,274,-1,-1,-1,-1,}, //21/24
		{21,43,64,84,103,121,138,154,169,183,196,208,219,229,238,246,253,259,264,268,271,273,-1,275,-1,-1,-1,-1,}, //22/24
		{22,44,65,85,104,122,139,155,170,184,197,209,220,230,239,247,254,260,265,269,272,274,275,-1,-1,-1,-1,-1,}, //23/24
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //24/24
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //25/24
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //26/24
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //27/24
		},
		{
		{-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,-1,-1,-1,}, //0/25
		{0,-1,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,-1,-1,-1,}, //1/25
		{1,24,-1,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,-1,-1,-1,}, //2/25
		{2,25,47,-1,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,-1,-1,-1,}, //3/25
		{3,26,48,69,-1,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,-1,-1,-1,}, //4/25
		{4,27,49,70,90,-1,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,-1,-1,-1,}, //5/25
		{5,28,50,71,91,110,-1,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,-1,-1,-1,}, //6/25
		{6,29,51,72,92,111,129,-1,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,-1,-1,-1,}, //7/25
		{7,30,52,73,93,112,130,147,-1,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,-1,-1,-1,}, //8/25
		{8,31,53,74,94,113,131,148,164,-1,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,-1,-1,-1,}, //9/25
		{9,32,54,75,95,114,132,149,165,180,-1,195,196,197,198,199,200,201,202,203,204,205,206,207,208,-1,-1,-1,}, //10/25
		{10,33,55,76,96,115,133,150,166,181,195,-1,209,210,211,212,213,214,215,216,217,218,219,220,221,-1,-1,-1,}, //11/25
		{11,34,56,77,97,116,134,151,167,182,196,209,-1,222,223,224,225,226,227,228,229,230,231,232,233,-1,-1,-1,}, //12/25
		{12,35,57,78,98,117,135,152,168,183,197,210,222,-1,234,235,236,237,238,239,240,241,242,243,244,-1,-1,-1,}, //13/25
		{13,36,58,79,99,118,136,153,169,184,198,211,223,234,-1,245,246,247,248,249,250,251,252,253,254,-1,-1,-1,}, //14/25
		{14,37,59,80,100,119,137,154,170,185,199,212,224,235,245,-1,255,256,257,258,259,260,261,262,263,-1,-1,-1,}, //15/25
		{15,38,60,81,101,120,138,155,171,186,200,213,225,236,246,255,-1,264,265,266,267,268,269,270,271,-1,-1,-1,}, //16/25
		{16,39,61,82,102,121,139,156,172,187,201,214,226,237,247,256,264,-1,272,273,274,275,276,277,278,-1,-1,-1,}, //17/25
		{17,40,62,83,103,122,140,157,173,188,202,215,227,238,248,257,265,272,-1,279,280,281,282,283,284,-1,-1,-1,}, //18/25
		{18,41,63,84,104,123,141,158,174,189,203,216,228,239,249,258,266,273,279,-1,285,286,287,288,289,-1,-1,-1,}, //19/25
		{19,42,64,85,105,124,142,159,175,190,204,217,229,240,250,259,267,274,280,285,-1,290,291,292,293,-1,-1,-1,}, //20/25
		{20,43,65,86,106,125,143,160,176,191,205,218,230,241,251,260,268,275,281,286,290,-1,294,295,296,-1,-1,-1,}, //21/25
		{21,44,66,87,107,126,144,161,177,192,206,219,231,242,252,261,269,276,282,287,291,294,-1,297,298,-1,-1,-1,}, //22/25
		{22,45,67,88,108,127,145,162,178,193,207,220,232,243,253,262,270,277,283,288,292,295,297,-1,299,-1,-1,-1,}, //23/25
		{23,46,68,89,109,128,146,163,179,194,208,221,233,244,254,263,271,278,284,289,293,296,298,299,-1,-1,-1,-1,}, //24/25
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //25/25
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //26/25
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //27/25
		},
		{
		{-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,-1,-1,}, //0/26
		{0,-1,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,-1,-1,}, //1/26
		{1,25,-1,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,-1,-1,}, //2/26
		{2,26,49,-1,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,-1,-1,}, //3/26
		{3,27,50,72,-1,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,-1,-1,}, //4/26
		{4,28,51,73,94,-1,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,-1,-1,}, //5/26
		{5,29,52,74,95,115,-1,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,-1,-1,}, //6/26
		{6,30,53,75,96,116,135,-1,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,-1,-1,}, //7/26
		{7,31,54,76,97,117,136,154,-1,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,-1,-1,}, //8/26
		{8,32,55,77,98,118,137,155,172,-1,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,-1,-1,}, //9/26
		{9,33,56,78,99,119,138,156,173,189,-1,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,-1,-1,}, //10/26
		{10,34,57,79,100,120,139,157,174,190,205,-1,220,221,222,223,224,225,226,227,228,229,230,231,232,233,-1,-1,}, //11/26
		{11,35,58,80,101,121,140,158,175,191,206,220,-1,234,235,236,237,238,239,240,241,242,243,244,245,246,-1,-1,}, //12/26
		{12,36,59,81,102,122,141,159,176,192,207,221,234,-1,247,248,249,250,251,252,253,254,255,256,257,258,-1,-1,}, //13/26
		{13,37,60,82,103,123,142,160,177,193,208,222,235,247,-1,259,260,261,262,263,264,265,266,267,268,269,-1,-1,}, //14/26
		{14,38,61,83,104,124,143,161,178,194,209,223,236,248,259,-1,270,271,272,273,274,275,276,277,278,279,-1,-1,}, //15/26
		{15,39,62,84,105,125,144,162,179,195,210,224,237,249,260,270,-1,280,281,282,283,284,285,286,287,288,-1,-1,}, //16/26
		{16,40,63,85,106,126,145,163,180,196,211,225,238,250,261,271,280,-1,289,290,291,292,293,294,295,296,-1,-1,}, //17/26
		{17,41,64,86,107,127,146,164,181,197,212,226,239,251,262,272,281,289,-1,297,298,299,300,301,302,303,-1,-1,}, //18/26
		{18,42,65,87,108,128,147,165,182,198,213,227,240,252,263,273,282,290,297,-1,304,305,306,307,308,309,-1,-1,}, //19/26
		{19,43,66,88,109,129,148,166,183,199,214,228,241,253,264,274,283,291,298,304,-1,310,311,312,313,314,-1,-1,}, //20/26
		{20,44,67,89,110,130,149,167,184,200,215,229,242,254,265,275,284,292,299,305,310,-1,315,316,317,318,-1,-1,}, //21/26
		{21,45,68,90,111,131,150,168,185,201,216,230,243,255,266,276,285,293,300,306,311,315,-1,319,320,321,-1,-1,}, //22/26
		{22,46,69,91,112,132,151,169,186,202,217,231,244,256,267,277,286,294,301,307,312,316,319,-1,322,323,-1,-1,}, //23/26
		{23,47,70,92,113,133,152,170,187,203,218,232,245,257,268,278,287,295,302,308,313,317,320,322,-1,324,-1,-1,}, //24/26
		{24,48,71,93,114,134,153,171,188,204,219,233,246,258,269,279,288,296,303,309,314,318,321,323,324,-1,-1,-1,}, //25/26
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //26/26
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //27/26
		},
		{
		{-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,-1,}, //0/27
		{0,-1,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,-1,}, //1/27
		{1,26,-1,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,-1,}, //2/27
		{2,27,51,-1,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,-1,}, //3/27
		{3,28,52,75,-1,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,-1,}, //4/27
		{4,29,53,76,98,-1,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,-1,}, //5/27
		{5,30,54,77,99,120,-1,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,-1,}, //6/27
		{6,31,55,78,100,121,141,-1,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,-1,}, //7/27
		{7,32,56,79,101,122,142,161,-1,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,-1,}, //8/27
		{8,33,57,80,102,123,143,162,180,-1,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,-1,}, //9/27
		{9,34,58,81,103,124,144,163,181,198,-1,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,-1,}, //10/27
		{10,35,59,82,104,125,145,164,182,199,215,-1,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,-1,}, //11/27
		{11,36,60,83,105,126,146,165,183,200,216,231,-1,246,247,248,249,250,251,252,253,254,255,256,257,258,259,-1,}, //12/27
		{12,37,61,84,106,127,147,166,184,201,217,232,246,-1,260,261,262,263,264,265,266,267,268,269,270,271,272,-1,}, //13/27
		{13,38,62,85,107,128,148,167,185,202,218,233,247,260,-1,273,274,275,276,277,278,279,280,281,282,283,284,-1,}, //14/27
		{14,39,63,86,108,129,149,168,186,203,219,234,248,261,273,-1,285,286,287,288,289,290,291,292,293,294,295,-1,}, //15/27
		{15,40,64,87,109,130,150,169,187,204,220,235,249,262,274,285,-1,296,297,298,299,300,301,302,303,304,305,-1,}, //16/27
		{16,41,65,88,110,131,151,170,188,205,221,236,250,263,275,286,296,-1,306,307,308,309,310,311,312,313,314,-1,}, //17/27
		{17,42,66,89,111,132,152,171,189,206,222,237,251,264,276,287,297,306,-1,315,316,317,318,319,320,321,322,-1,}, //18/27
		{18,43,67,90,112,133,153,172,190,207,223,238,252,265,277,288,298,307,315,-1,323,324,325,326,327,328,329,-1,}, //19/27
		{19,44,68,91,113,134,154,173,191,208,224,239,253,266,278,289,299,308,316,323,-1,330,331,332,333,334,335,-1,}, //20/27
		{20,45,69,92,114,135,155,174,192,209,225,240,254,267,279,290,300,309,317,324,330,-1,336,337,338,339,340,-1,}, //21/27
		{21,46,70,93,115,136,156,175,193,210,226,241,255,268,280,291,301,310,318,325,331,336,-1,341,342,343,344,-1,}, //22/27
		{22,47,71,94,116,137,157,176,194,211,227,242,256,269,281,292,302,311,319,326,332,337,341,-1,345,346,347,-1,}, //23/27
		{23,48,72,95,117,138,158,177,195,212,228,243,257,270,282,293,303,312,320,327,333,338,342,345,-1,348,349,-1,}, //24/27
		{24,49,73,96,118,139,159,178,196,213,229,244,258,271,283,294,304,313,321,328,334,339,343,346,348,-1,350,-1,}, //25/27
		{25,50,74,97,119,140,160,179,197,214,230,245,259,272,284,295,305,314,322,329,335,340,344,347,349,350,-1,-1,}, //26/27
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,}, //27/27
		},
		{
		{-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,}, //0/28
		{0,-1,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,}, //1/28
		{1,27,-1,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,}, //2/28
		{2,28,53,-1,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,}, //3/28
		{3,29,54,78,-1,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,}, //4/28
		{4,30,55,79,102,-1,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,}, //5/28
		{5,31,56,80,103,125,-1,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,}, //6/28
		{6,32,57,81,104,126,147,-1,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,}, //7/28
		{7,33,58,82,105,127,148,168,-1,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,}, //8/28
		{8,34,59,83,106,128,149,169,188,-1,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,}, //9/28
		{9,35,60,84,107,129,150,170,189,207,-1,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,}, //10/28
		{10,36,61,85,108,130,151,171,190,208,225,-1,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,}, //11/28
		{11,37,62,86,109,131,152,172,191,209,226,242,-1,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,}, //12/28
		{12,38,63,87,110,132,153,173,192,210,227,243,258,-1,273,274,275,276,277,278,279,280,281,282,283,284,285,286,}, //13/28
		{13,39,64,88,111,133,154,174,193,211,228,244,259,273,-1,287,288,289,290,291,292,293,294,295,296,297,298,299,}, //14/28
		{14,40,65,89,112,134,155,175,194,212,229,245,260,274,287,-1,300,301,302,303,304,305,306,307,308,309,310,311,}, //15/28
		{15,41,66,90,113,135,156,176,195,213,230,246,261,275,288,300,-1,312,313,314,315,316,317,318,319,320,321,322,}, //16/28
		{16,42,67,91,114,136,157,177,196,214,231,247,262,276,289,301,312,-1,323,324,325,326,327,328,329,330,331,332,}, //17/28
		{17,43,68,92,115,137,158,178,197,215,232,248,263,277,290,302,313,323,-1,333,334,335,336,337,338,339,340,341,}, //18/28
		{18,44,69,93,116,138,159,179,198,216,233,249,264,278,291,303,314,324,333,-1,342,343,344,345,346,347,348,349,}, //19/28
		{19,45,70,94,117,139,160,180,199,217,234,250,265,279,292,304,315,325,334,342,-1,350,351,352,353,354,355,356,}, //20/28
		{20,46,71,95,118,140,161,181,200,218,235,251,266,280,293,305,316,326,335,343,350,-1,357,358,359,360,361,362,}, //21/28
		{21,47,72,96,119,141,162,182,201,219,236,252,267,281,294,306,317,327,336,344,351,357,-1,363,364,365,366,367,}, //22/28
		{22,48,73,97,120,142,163,183,202,220,237,253,268,282,295,307,318,328,337,345,352,358,363,-1,368,369,370,371,}, //23/28
		{23,49,74,98,121,143,164,184,203,221,238,254,269,283,296,308,319,329,338,346,353,359,364,368,-1,372,373,374,}, //24/28
		{24,50,75,99,122,144,165,185,204,222,239,255,270,284,297,309,320,330,339,347,354,360,365,369,372,-1,375,376,}, //25/28
		{25,51,76,100,123,145,166,186,205,223,240,256,271,285,298,310,321,331,340,348,355,361,366,370,373,375,-1,377,}, //26/28
		{26,52,77,101,124,146,167,187,206,224,241,257,272,286,299,311,322,332,341,349,356,362,367,371,374,376,377,-1,}, //27/28
		},
};

static const edgesInEgraphBM allEdgesPerSizeBM[29] = {
edgesInEgraphBM("0"), //0
edgesInEgraphBM("0"), //1
edgesInEgraphBM("01"), //2=1
edgesInEgraphBM("0111"), //3=3
edgesInEgraphBM("0111111"), //4=6
edgesInEgraphBM("01111111111"), //5=10
edgesInEgraphBM("0111111111111111"), //6=15
edgesInEgraphBM("0111111111111111111111"), //7=21
edgesInEgraphBM("01111111111111111111111111111"), //8=28
edgesInEgraphBM("0111111111111111111111111111111111111"), //9=36
edgesInEgraphBM("0111111111111111111111111111111111111111111111"), //10=45
edgesInEgraphBM("01111111111111111111111111111111111111111111111111111111"), //11=55
edgesInEgraphBM("0111111111111111111111111111111111111111111111111111111111111111111"), //12=66
edgesInEgraphBM("0111111111111111111111111111111111111111111111111111111111111111111111111111111"), //13=78
edgesInEgraphBM("01111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"), //14=91
edgesInEgraphBM("0111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"), //15=105
edgesInEgraphBM("0111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"), //16=120
edgesInEgraphBM("01111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"), //17=136
edgesInEgraphBM("0111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"), //18=153
edgesInEgraphBM("0111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"), //19=171
edgesInEgraphBM("01111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"), //20=190
edgesInEgraphBM("0111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"), //21=210
edgesInEgraphBM("0111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"), //22=231
edgesInEgraphBM("01111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"), //23=253
edgesInEgraphBM("0111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"), //24=276
edgesInEgraphBM("0111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"), //25=300
edgesInEgraphBM("01111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"), //26=325
edgesInEgraphBM("0111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"), //27=351
edgesInEgraphBM("0111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"), //28=378
};

static const edgesInEgraphBM nodeEdgesBM[29][28] = {
	{ // 0
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //0/0
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //0/1
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //0/2
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //0/3
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //0/4
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //0/5
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //0/6
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //0/7
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //0/8
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //0/9
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //0/10
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //0/11
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //0/12
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //0/13
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //0/14
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //0/15
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //0/16
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //0/17
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //0/18
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //0/19
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //0/20
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //0/21
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //0/22
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //0/23
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //0/24
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //0/25
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //0/26
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //0/27
	},
	{ // 1
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //1/0
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //1/1
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //1/2
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //1/3
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //1/4
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //1/5
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //1/6
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //1/7
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //1/8
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //1/9
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //1/10
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //1/11
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //1/12
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //1/13
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //1/14
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //1/15
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //1/16
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //1/17
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //1/18
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //1/19
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //1/20
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //1/21
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //1/22
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //1/23
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //1/24
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //1/25
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //1/26
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //1/27
	},
	{ // 2
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //2/0
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //2/1
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //2/2
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //2/3
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //2/4
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //2/5
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //2/6
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //2/7
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //2/8
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //2/9
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //2/10
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //2/11
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //2/12
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //2/13
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //2/14
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //2/15
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //2/16
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //2/17
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //2/18
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //2/19
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //2/20
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //2/21
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //2/22
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //2/23
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //2/24
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //2/25
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //2/26
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //2/27
	},
	{ // 3
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //3/0
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //3/1
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //3/2
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //3/3
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //3/4
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //3/5
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //3/6
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //3/7
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //3/8
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //3/9
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //3/10
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //3/11
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //3/12
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //3/13
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //3/14
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //3/15
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //3/16
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //3/17
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //3/18
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //3/19
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //3/20
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //3/21
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //3/22
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //3/23
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //3/24
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //3/25
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //3/26
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //3/27
	},
	{ // 4
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111"), //4/0
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011001"), //4/1
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101010"), //4/2
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110100"), //4/3
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //4/4
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //4/5
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //4/6
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //4/7
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //4/8
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //4/9
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //4/10
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //4/11
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //4/12
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //4/13
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //4/14
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //4/15
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //4/16
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //4/17
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //4/18
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //4/19
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //4/20
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //4/21
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //4/22
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //4/23
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //4/24
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //4/25
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //4/26
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //4/27
	},
	{ // 5
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111"), //5/0
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001110001"), //5/1
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110010010"), //5/2
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010100100"), //5/3
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001101001000"), //5/4
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //5/5
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //5/6
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //5/7
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //5/8
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //5/9
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //5/10
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //5/11
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //5/12
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //5/13
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //5/14
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //5/15
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //5/16
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //5/17
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //5/18
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //5/19
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //5/20
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //5/21
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //5/22
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //5/23
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //5/24
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //5/25
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //5/26
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //5/27
	},
	{ // 6
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111"), //6/0
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111100001"), //6/1
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111000100010"), //6/2
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011001001000100"), //6/3
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101010010001000"), //6/4
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110100100010000"), //6/5
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //6/6
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //6/7
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //6/8
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //6/9
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //6/10
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //6/11
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //6/12
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //6/13
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //6/14
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //6/15
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //6/16
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //6/17
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //6/18
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //6/19
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //6/20
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //6/21
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //6/22
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //6/23
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //6/24
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //6/25
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //6/26
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //6/27
	},
	{ // 7
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111"), //7/0
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111000001"), //7/1
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111100001000010"), //7/2
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111000100010000100"), //7/3
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011001001000100001000"), //7/4
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101010010001000010000"), //7/5
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110100100010000100000"), //7/6
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //7/7
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //7/8
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //7/9
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //7/10
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //7/11
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //7/12
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //7/13
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //7/14
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //7/15
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //7/16
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //7/17
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //7/18
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //7/19
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //7/20
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //7/21
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //7/22
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //7/23
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //7/24
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //7/25
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //7/26
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //7/27
	},
	{ // 8
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111"), //8/0
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111110000001"), //8/1
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111110000010000010"), //8/2
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111000010000100000100"), //8/3
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001110001000100001000001000"), //8/4
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110010010001000010000010000"), //8/5
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010100100010000100000100000"), //8/6
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001101001000100001000001000000"), //8/7
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //8/8
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //8/9
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //8/10
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //8/11
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //8/12
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //8/13
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //8/14
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //8/15
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //8/16
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //8/17
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //8/18
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //8/19
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //8/20
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //8/21
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //8/22
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //8/23
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //8/24
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //8/25
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //8/26
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //8/27
	},
	{ // 9
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111"), //9/0
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111100000001"), //9/1
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111000000100000010"), //9/2
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111000001000001000000100"), //9/3
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111100001000010000010000001000"), //9/4
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111000100010000100000100000010000"), //9/5
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011001001000100001000001000000100000"), //9/6
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101010010001000010000010000001000000"), //9/7
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110100100010000100000100000010000000"), //9/8
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //9/9
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //9/10
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //9/11
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //9/12
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //9/13
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //9/14
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //9/15
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //9/16
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //9/17
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //9/18
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //9/19
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //9/20
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //9/21
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //9/22
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //9/23
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //9/24
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //9/25
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //9/26
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //9/27
	},
	{ // 10
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111"), //10/0
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111000000001"), //10/1
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111100000001000000010"), //10/2
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111000000100000010000000100"), //10/3
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111000001000001000000100000001000"), //10/4
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111100001000010000010000001000000010000"), //10/5
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111000100010000100000100000010000000100000"), //10/6
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011001001000100001000001000000100000001000000"), //10/7
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101010010001000010000010000001000000010000000"), //10/8
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110100100010000100000100000010000000100000000"), //10/9
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //10/10
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //10/11
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //10/12
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //10/13
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //10/14
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //10/15
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //10/16
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //10/17
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //10/18
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //10/19
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //10/20
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //10/21
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //10/22
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //10/23
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //10/24
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //10/25
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //10/26
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //10/27
	},
	{ // 11
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111"), //11/0
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111110000000001"), //11/1
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111110000000010000000010"), //11/2
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111000000010000000100000000100"), //11/3
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111110000001000000100000001000000001000"), //11/4
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111110000010000010000001000000010000000010000"), //11/5
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111000010000100000100000010000000100000000100000"), //11/6
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001110001000100001000001000000100000001000000001000000"), //11/7
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110010010001000010000010000001000000010000000010000000"), //11/8
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010100100010000100000100000010000000100000000100000000"), //11/9
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001101001000100001000001000000100000001000000001000000000"), //11/10
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //11/11
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //11/12
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //11/13
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //11/14
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //11/15
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //11/16
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //11/17
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //11/18
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //11/19
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //11/20
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //11/21
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //11/22
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //11/23
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //11/24
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //11/25
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //11/26
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //11/27
	},
	{ // 12
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111"), //12/0
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111100000000001"), //12/1
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111000000000100000000010"), //12/2
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111000000001000000001000000000100"), //12/3
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111100000001000000010000000010000000001000"), //12/4
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111000000100000010000000100000000100000000010000"), //12/5
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111000001000001000000100000001000000001000000000100000"), //12/6
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111100001000010000010000001000000010000000010000000001000000"), //12/7
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111000100010000100000100000010000000100000000100000000010000000"), //12/8
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011001001000100001000001000000100000001000000001000000000100000000"), //12/9
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101010010001000010000010000001000000010000000010000000001000000000"), //12/10
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110100100010000100000100000010000000100000000100000000010000000000"), //12/11
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //12/12
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //12/13
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //12/14
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //12/15
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //12/16
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //12/17
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //12/18
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //12/19
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //12/20
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //12/21
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //12/22
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //12/23
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //12/24
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //12/25
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //12/26
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //12/27
	},
	{ // 13
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111111"), //13/0
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111000000000001"), //13/1
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111100000000001000000000010"), //13/2
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111000000000100000000010000000000100"), //13/3
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111000000001000000001000000000100000000001000"), //13/4
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111100000001000000010000000010000000001000000000010000"), //13/5
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111000000100000010000000100000000100000000010000000000100000"), //13/6
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111000001000001000000100000001000000001000000000100000000001000000"), //13/7
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111100001000010000010000001000000010000000010000000001000000000010000000"), //13/8
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111000100010000100000100000010000000100000000100000000010000000000100000000"), //13/9
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011001001000100001000001000000100000001000000001000000000100000000001000000000"), //13/10
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101010010001000010000010000001000000010000000010000000001000000000010000000000"), //13/11
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110100100010000100000100000010000000100000000100000000010000000000100000000000"), //13/12
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //13/13
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //13/14
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //13/15
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //13/16
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //13/17
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //13/18
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //13/19
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //13/20
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //13/21
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //13/22
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //13/23
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //13/24
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //13/25
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //13/26
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //13/27
	},
	{ // 14
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111"), //14/0
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111110000000000001"), //14/1
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111110000000000010000000000010"), //14/2
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111000000000010000000000100000000000100"), //14/3
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111110000000001000000000100000000001000000000001000"), //14/4
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111110000000010000000010000000001000000000010000000000010000"), //14/5
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111000000010000000100000000100000000010000000000100000000000100000"), //14/6
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111110000001000000100000001000000001000000000100000000001000000000001000000"), //14/7
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111110000010000010000001000000010000000010000000001000000000010000000000010000000"), //14/8
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111000010000100000100000010000000100000000100000000010000000000100000000000100000000"), //14/9
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001110001000100001000001000000100000001000000001000000000100000000001000000000001000000000"), //14/10
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110010010001000010000010000001000000010000000010000000001000000000010000000000010000000000"), //14/11
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010100100010000100000100000010000000100000000100000000010000000000100000000000100000000000"), //14/12
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001101001000100001000001000000100000001000000001000000000100000000001000000000001000000000000"), //14/13
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //14/14
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //14/15
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //14/16
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //14/17
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //14/18
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //14/19
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //14/20
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //14/21
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //14/22
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //14/23
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //14/24
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //14/25
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //14/26
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //14/27
	},
	{ // 15
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111"), //15/0
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111111100000000000001"), //15/1
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111111000000000000100000000000010"), //15/2
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111000000000001000000000001000000000000100"), //15/3
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111100000000001000000000010000000000010000000000001000"), //15/4
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111000000000100000000010000000000100000000000100000000000010000"), //15/5
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111000000001000000001000000000100000000001000000000001000000000000100000"), //15/6
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111100000001000000010000000010000000001000000000010000000000010000000000001000000"), //15/7
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111000000100000010000000100000000100000000010000000000100000000000100000000000010000000"), //15/8
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111000001000001000000100000001000000001000000000100000000001000000000001000000000000100000000"), //15/9
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111100001000010000010000001000000010000000010000000001000000000010000000000010000000000001000000000"), //15/10
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111000100010000100000100000010000000100000000100000000010000000000100000000000100000000000010000000000"), //15/11
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011001001000100001000001000000100000001000000001000000000100000000001000000000001000000000000100000000000"), //15/12
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101010010001000010000010000001000000010000000010000000001000000000010000000000010000000000001000000000000"), //15/13
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110100100010000100000100000010000000100000000100000000010000000000100000000000100000000000010000000000000"), //15/14
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //15/15
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //15/16
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //15/17
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //15/18
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //15/19
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //15/20
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //15/21
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //15/22
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //15/23
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //15/24
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //15/25
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //15/26
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //15/27
	},
	{ // 16
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111111111"), //16/0
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111000000000000001"), //16/1
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111111100000000000001000000000000010"), //16/2
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111111000000000000100000000000010000000000000100"), //16/3
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111000000000001000000000001000000000000100000000000001000"), //16/4
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111100000000001000000000010000000000010000000000001000000000000010000"), //16/5
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111000000000100000000010000000000100000000000100000000000010000000000000100000"), //16/6
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111000000001000000001000000000100000000001000000000001000000000000100000000000001000000"), //16/7
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111100000001000000010000000010000000001000000000010000000000010000000000001000000000000010000000"), //16/8
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111000000100000010000000100000000100000000010000000000100000000000100000000000010000000000000100000000"), //16/9
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111000001000001000000100000001000000001000000000100000000001000000000001000000000000100000000000001000000000"), //16/10
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111100001000010000010000001000000010000000010000000001000000000010000000000010000000000001000000000000010000000000"), //16/11
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111000100010000100000100000010000000100000000100000000010000000000100000000000100000000000010000000000000100000000000"), //16/12
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011001001000100001000001000000100000001000000001000000000100000000001000000000001000000000000100000000000001000000000000"), //16/13
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101010010001000010000010000001000000010000000010000000001000000000010000000000010000000000001000000000000010000000000000"), //16/14
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110100100010000100000100000010000000100000000100000000010000000000100000000000100000000000010000000000000100000000000000"), //16/15
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //16/16
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //16/17
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //16/18
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //16/19
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //16/20
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //16/21
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //16/22
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //16/23
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //16/24
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //16/25
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //16/26
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //16/27
	},
	{ // 17
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111"), //17/0
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111110000000000000001"), //17/1
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111111110000000000000010000000000000010"), //17/2
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111000000000000010000000000000100000000000000100"), //17/3
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111110000000000001000000000000100000000000001000000000000001000"), //17/4
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111110000000000010000000000010000000000001000000000000010000000000000010000"), //17/5
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111000000000010000000000100000000000100000000000010000000000000100000000000000100000"), //17/6
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111110000000001000000000100000000001000000000001000000000000100000000000001000000000000001000000"), //17/7
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111110000000010000000010000000001000000000010000000000010000000000001000000000000010000000000000010000000"), //17/8
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111000000010000000100000000100000000010000000000100000000000100000000000010000000000000100000000000000100000000"), //17/9
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111110000001000000100000001000000001000000000100000000001000000000001000000000000100000000000001000000000000001000000000"), //17/10
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111110000010000010000001000000010000000010000000001000000000010000000000010000000000001000000000000010000000000000010000000000"), //17/11
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111000010000100000100000010000000100000000100000000010000000000100000000000100000000000010000000000000100000000000000100000000000"), //17/12
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001110001000100001000001000000100000001000000001000000000100000000001000000000001000000000000100000000000001000000000000001000000000000"), //17/13
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110010010001000010000010000001000000010000000010000000001000000000010000000000010000000000001000000000000010000000000000010000000000000"), //17/14
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010100100010000100000100000010000000100000000100000000010000000000100000000000100000000000010000000000000100000000000000100000000000000"), //17/15
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001101001000100001000001000000100000001000000001000000000100000000001000000000001000000000000100000000000001000000000000001000000000000000"), //17/16
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //17/17
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //17/18
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //17/19
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //17/20
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //17/21
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //17/22
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //17/23
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //17/24
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //17/25
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //17/26
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //17/27
	},
	{ // 18
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111"), //18/0
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111111111100000000000000001"), //18/1
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111111111000000000000000100000000000000010"), //18/2
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111000000000000001000000000000001000000000000000100"), //18/3
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111111100000000000001000000000000010000000000000010000000000000001000"), //18/4
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111111000000000000100000000000010000000000000100000000000000100000000000000010000"), //18/5
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111000000000001000000000001000000000000100000000000001000000000000001000000000000000100000"), //18/6
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111100000000001000000000010000000000010000000000001000000000000010000000000000010000000000000001000000"), //18/7
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111000000000100000000010000000000100000000000100000000000010000000000000100000000000000100000000000000010000000"), //18/8
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111000000001000000001000000000100000000001000000000001000000000000100000000000001000000000000001000000000000000100000000"), //18/9
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111100000001000000010000000010000000001000000000010000000000010000000000001000000000000010000000000000010000000000000001000000000"), //18/10
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111000000100000010000000100000000100000000010000000000100000000000100000000000010000000000000100000000000000100000000000000010000000000"), //18/11
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111000001000001000000100000001000000001000000000100000000001000000000001000000000000100000000000001000000000000001000000000000000100000000000"), //18/12
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111100001000010000010000001000000010000000010000000001000000000010000000000010000000000001000000000000010000000000000010000000000000001000000000000"), //18/13
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111000100010000100000100000010000000100000000100000000010000000000100000000000100000000000010000000000000100000000000000100000000000000010000000000000"), //18/14
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011001001000100001000001000000100000001000000001000000000100000000001000000000001000000000000100000000000001000000000000001000000000000000100000000000000"), //18/15
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101010010001000010000010000001000000010000000010000000001000000000010000000000010000000000001000000000000010000000000000010000000000000001000000000000000"), //18/16
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110100100010000100000100000010000000100000000100000000010000000000100000000000100000000000010000000000000100000000000000100000000000000010000000000000000"), //18/17
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //18/18
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //18/19
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //18/20
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //18/21
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //18/22
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //18/23
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //18/24
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //18/25
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //18/26
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //18/27
	},
	{ // 19
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111111111111"), //19/0
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111000000000000000001"), //19/1
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111111111100000000000000001000000000000000010"), //19/2
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111111111000000000000000100000000000000010000000000000000100"), //19/3
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111000000000000001000000000000001000000000000000100000000000000001000"), //19/4
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111111100000000000001000000000000010000000000000010000000000000001000000000000000010000"), //19/5
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111111000000000000100000000000010000000000000100000000000000100000000000000010000000000000000100000"), //19/6
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111000000000001000000000001000000000000100000000000001000000000000001000000000000000100000000000000001000000"), //19/7
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111100000000001000000000010000000000010000000000001000000000000010000000000000010000000000000001000000000000000010000000"), //19/8
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111000000000100000000010000000000100000000000100000000000010000000000000100000000000000100000000000000010000000000000000100000000"), //19/9
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111000000001000000001000000000100000000001000000000001000000000000100000000000001000000000000001000000000000000100000000000000001000000000"), //19/10
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111100000001000000010000000010000000001000000000010000000000010000000000001000000000000010000000000000010000000000000001000000000000000010000000000"), //19/11
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111000000100000010000000100000000100000000010000000000100000000000100000000000010000000000000100000000000000100000000000000010000000000000000100000000000"), //19/12
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111000001000001000000100000001000000001000000000100000000001000000000001000000000000100000000000001000000000000001000000000000000100000000000000001000000000000"), //19/13
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111100001000010000010000001000000010000000010000000001000000000010000000000010000000000001000000000000010000000000000010000000000000001000000000000000010000000000000"), //19/14
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111000100010000100000100000010000000100000000100000000010000000000100000000000100000000000010000000000000100000000000000100000000000000010000000000000000100000000000000"), //19/15
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011001001000100001000001000000100000001000000001000000000100000000001000000000001000000000000100000000000001000000000000001000000000000000100000000000000001000000000000000"), //19/16
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101010010001000010000010000001000000010000000010000000001000000000010000000000010000000000001000000000000010000000000000010000000000000001000000000000000010000000000000000"), //19/17
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110100100010000100000100000010000000100000000100000000010000000000100000000000100000000000010000000000000100000000000000100000000000000010000000000000000100000000000000000"), //19/18
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //19/19
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //19/20
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //19/21
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //19/22
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //19/23
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //19/24
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //19/25
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //19/26
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //19/27
	},
	{ // 20
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111"), //20/0
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111110000000000000000001"), //20/1
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111111111110000000000000000010000000000000000010"), //20/2
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111000000000000000010000000000000000100000000000000000100"), //20/3
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111110000000000000001000000000000000100000000000000001000000000000000001000"), //20/4
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111111110000000000000010000000000000010000000000000001000000000000000010000000000000000010000"), //20/5
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111000000000000010000000000000100000000000000100000000000000010000000000000000100000000000000000100000"), //20/6
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111110000000000001000000000000100000000000001000000000000001000000000000000100000000000000001000000000000000001000000"), //20/7
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111110000000000010000000000010000000000001000000000000010000000000000010000000000000001000000000000000010000000000000000010000000"), //20/8
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111000000000010000000000100000000000100000000000010000000000000100000000000000100000000000000010000000000000000100000000000000000100000000"), //20/9
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111110000000001000000000100000000001000000000001000000000000100000000000001000000000000001000000000000000100000000000000001000000000000000001000000000"), //20/10
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111110000000010000000010000000001000000000010000000000010000000000001000000000000010000000000000010000000000000001000000000000000010000000000000000010000000000"), //20/11
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111000000010000000100000000100000000010000000000100000000000100000000000010000000000000100000000000000100000000000000010000000000000000100000000000000000100000000000"), //20/12
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111110000001000000100000001000000001000000000100000000001000000000001000000000000100000000000001000000000000001000000000000000100000000000000001000000000000000001000000000000"), //20/13
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111110000010000010000001000000010000000010000000001000000000010000000000010000000000001000000000000010000000000000010000000000000001000000000000000010000000000000000010000000000000"), //20/14
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111000010000100000100000010000000100000000100000000010000000000100000000000100000000000010000000000000100000000000000100000000000000010000000000000000100000000000000000100000000000000"), //20/15
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001110001000100001000001000000100000001000000001000000000100000000001000000000001000000000000100000000000001000000000000001000000000000000100000000000000001000000000000000001000000000000000"), //20/16
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110010010001000010000010000001000000010000000010000000001000000000010000000000010000000000001000000000000010000000000000010000000000000001000000000000000010000000000000000010000000000000000"), //20/17
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010100100010000100000100000010000000100000000100000000010000000000100000000000100000000000010000000000000100000000000000100000000000000010000000000000000100000000000000000100000000000000000"), //20/18
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001101001000100001000001000000100000001000000001000000000100000000001000000000001000000000000100000000000001000000000000001000000000000000100000000000000001000000000000000001000000000000000000"), //20/19
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //20/20
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //20/21
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //20/22
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //20/23
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //20/24
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //20/25
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //20/26
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //20/27
	},
	{ // 21
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111"), //21/0
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111111111111100000000000000000001"), //21/1
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111111111111000000000000000000100000000000000000010"), //21/2
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111000000000000000001000000000000000001000000000000000000100"), //21/3
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111111111100000000000000001000000000000000010000000000000000010000000000000000001000"), //21/4
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111111111000000000000000100000000000000010000000000000000100000000000000000100000000000000000010000"), //21/5
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111000000000000001000000000000001000000000000000100000000000000001000000000000000001000000000000000000100000"), //21/6
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111111100000000000001000000000000010000000000000010000000000000001000000000000000010000000000000000010000000000000000001000000"), //21/7
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111111000000000000100000000000010000000000000100000000000000100000000000000010000000000000000100000000000000000100000000000000000010000000"), //21/8
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111000000000001000000000001000000000000100000000000001000000000000001000000000000000100000000000000001000000000000000001000000000000000000100000000"), //21/9
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111100000000001000000000010000000000010000000000001000000000000010000000000000010000000000000001000000000000000010000000000000000010000000000000000001000000000"), //21/10
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111000000000100000000010000000000100000000000100000000000010000000000000100000000000000100000000000000010000000000000000100000000000000000100000000000000000010000000000"), //21/11
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111000000001000000001000000000100000000001000000000001000000000000100000000000001000000000000001000000000000000100000000000000001000000000000000001000000000000000000100000000000"), //21/12
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111100000001000000010000000010000000001000000000010000000000010000000000001000000000000010000000000000010000000000000001000000000000000010000000000000000010000000000000000001000000000000"), //21/13
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111000000100000010000000100000000100000000010000000000100000000000100000000000010000000000000100000000000000100000000000000010000000000000000100000000000000000100000000000000000010000000000000"), //21/14
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111000001000001000000100000001000000001000000000100000000001000000000001000000000000100000000000001000000000000001000000000000000100000000000000001000000000000000001000000000000000000100000000000000"), //21/15
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111100001000010000010000001000000010000000010000000001000000000010000000000010000000000001000000000000010000000000000010000000000000001000000000000000010000000000000000010000000000000000001000000000000000"), //21/16
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111000100010000100000100000010000000100000000100000000010000000000100000000000100000000000010000000000000100000000000000100000000000000010000000000000000100000000000000000100000000000000000010000000000000000"), //21/17
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011001001000100001000001000000100000001000000001000000000100000000001000000000001000000000000100000000000001000000000000001000000000000000100000000000000001000000000000000001000000000000000000100000000000000000"), //21/18
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101010010001000010000010000001000000010000000010000000001000000000010000000000010000000000001000000000000010000000000000010000000000000001000000000000000010000000000000000010000000000000000001000000000000000000"), //21/19
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110100100010000100000100000010000000100000000100000000010000000000100000000000100000000000010000000000000100000000000000100000000000000010000000000000000100000000000000000100000000000000000010000000000000000000"), //21/20
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //21/21
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //21/22
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //21/23
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //21/24
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //21/25
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //21/26
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //21/27
	},
	{ // 22
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111111111111111"), //22/0
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111000000000000000000001"), //22/1
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111111111111100000000000000000001000000000000000000010"), //22/2
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111111111111000000000000000000100000000000000000010000000000000000000100"), //22/3
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111000000000000000001000000000000000001000000000000000000100000000000000000001000"), //22/4
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111111111100000000000000001000000000000000010000000000000000010000000000000000001000000000000000000010000"), //22/5
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111111111000000000000000100000000000000010000000000000000100000000000000000100000000000000000010000000000000000000100000"), //22/6
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111000000000000001000000000000001000000000000000100000000000000001000000000000000001000000000000000000100000000000000000001000000"), //22/7
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111111100000000000001000000000000010000000000000010000000000000001000000000000000010000000000000000010000000000000000001000000000000000000010000000"), //22/8
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111111000000000000100000000000010000000000000100000000000000100000000000000010000000000000000100000000000000000100000000000000000010000000000000000000100000000"), //22/9
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111000000000001000000000001000000000000100000000000001000000000000001000000000000000100000000000000001000000000000000001000000000000000000100000000000000000001000000000"), //22/10
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111100000000001000000000010000000000010000000000001000000000000010000000000000010000000000000001000000000000000010000000000000000010000000000000000001000000000000000000010000000000"), //22/11
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111000000000100000000010000000000100000000000100000000000010000000000000100000000000000100000000000000010000000000000000100000000000000000100000000000000000010000000000000000000100000000000"), //22/12
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111000000001000000001000000000100000000001000000000001000000000000100000000000001000000000000001000000000000000100000000000000001000000000000000001000000000000000000100000000000000000001000000000000"), //22/13
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111100000001000000010000000010000000001000000000010000000000010000000000001000000000000010000000000000010000000000000001000000000000000010000000000000000010000000000000000001000000000000000000010000000000000"), //22/14
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111000000100000010000000100000000100000000010000000000100000000000100000000000010000000000000100000000000000100000000000000010000000000000000100000000000000000100000000000000000010000000000000000000100000000000000"), //22/15
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111000001000001000000100000001000000001000000000100000000001000000000001000000000000100000000000001000000000000001000000000000000100000000000000001000000000000000001000000000000000000100000000000000000001000000000000000"), //22/16
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111100001000010000010000001000000010000000010000000001000000000010000000000010000000000001000000000000010000000000000010000000000000001000000000000000010000000000000000010000000000000000001000000000000000000010000000000000000"), //22/17
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111000100010000100000100000010000000100000000100000000010000000000100000000000100000000000010000000000000100000000000000100000000000000010000000000000000100000000000000000100000000000000000010000000000000000000100000000000000000"), //22/18
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011001001000100001000001000000100000001000000001000000000100000000001000000000001000000000000100000000000001000000000000001000000000000000100000000000000001000000000000000001000000000000000000100000000000000000001000000000000000000"), //22/19
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101010010001000010000010000001000000010000000010000000001000000000010000000000010000000000001000000000000010000000000000010000000000000001000000000000000010000000000000000010000000000000000001000000000000000000010000000000000000000"), //22/20
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110100100010000100000100000010000000100000000100000000010000000000100000000000100000000000010000000000000100000000000000100000000000000010000000000000000100000000000000000100000000000000000010000000000000000000100000000000000000000"), //22/21
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //22/22
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //22/23
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //22/24
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //22/25
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //22/26
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //22/27
	},
	{ // 23
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111"), //23/0
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111110000000000000000000001"), //23/1
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111111111111110000000000000000000010000000000000000000010"), //23/2
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111000000000000000000010000000000000000000100000000000000000000100"), //23/3
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111110000000000000000001000000000000000000100000000000000000001000000000000000000001000"), //23/4
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111111111110000000000000000010000000000000000010000000000000000001000000000000000000010000000000000000000010000"), //23/5
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111000000000000000010000000000000000100000000000000000100000000000000000010000000000000000000100000000000000000000100000"), //23/6
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111110000000000000001000000000000000100000000000000001000000000000000001000000000000000000100000000000000000001000000000000000000001000000"), //23/7
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111111110000000000000010000000000000010000000000000001000000000000000010000000000000000010000000000000000001000000000000000000010000000000000000000010000000"), //23/8
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111000000000000010000000000000100000000000000100000000000000010000000000000000100000000000000000100000000000000000010000000000000000000100000000000000000000100000000"), //23/9
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111110000000000001000000000000100000000000001000000000000001000000000000000100000000000000001000000000000000001000000000000000000100000000000000000001000000000000000000001000000000"), //23/10
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111110000000000010000000000010000000000001000000000000010000000000000010000000000000001000000000000000010000000000000000010000000000000000001000000000000000000010000000000000000000010000000000"), //23/11
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111000000000010000000000100000000000100000000000010000000000000100000000000000100000000000000010000000000000000100000000000000000100000000000000000010000000000000000000100000000000000000000100000000000"), //23/12
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111110000000001000000000100000000001000000000001000000000000100000000000001000000000000001000000000000000100000000000000001000000000000000001000000000000000000100000000000000000001000000000000000000001000000000000"), //23/13
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111110000000010000000010000000001000000000010000000000010000000000001000000000000010000000000000010000000000000001000000000000000010000000000000000010000000000000000001000000000000000000010000000000000000000010000000000000"), //23/14
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111000000010000000100000000100000000010000000000100000000000100000000000010000000000000100000000000000100000000000000010000000000000000100000000000000000100000000000000000010000000000000000000100000000000000000000100000000000000"), //23/15
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111110000001000000100000001000000001000000000100000000001000000000001000000000000100000000000001000000000000001000000000000000100000000000000001000000000000000001000000000000000000100000000000000000001000000000000000000001000000000000000"), //23/16
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111110000010000010000001000000010000000010000000001000000000010000000000010000000000001000000000000010000000000000010000000000000001000000000000000010000000000000000010000000000000000001000000000000000000010000000000000000000010000000000000000"), //23/17
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111000010000100000100000010000000100000000100000000010000000000100000000000100000000000010000000000000100000000000000100000000000000010000000000000000100000000000000000100000000000000000010000000000000000000100000000000000000000100000000000000000"), //23/18
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001110001000100001000001000000100000001000000001000000000100000000001000000000001000000000000100000000000001000000000000001000000000000000100000000000000001000000000000000001000000000000000000100000000000000000001000000000000000000001000000000000000000"), //23/19
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110010010001000010000010000001000000010000000010000000001000000000010000000000010000000000001000000000000010000000000000010000000000000001000000000000000010000000000000000010000000000000000001000000000000000000010000000000000000000010000000000000000000"), //23/20
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010100100010000100000100000010000000100000000100000000010000000000100000000000100000000000010000000000000100000000000000100000000000000010000000000000000100000000000000000100000000000000000010000000000000000000100000000000000000000100000000000000000000"), //23/21
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001101001000100001000001000000100000001000000001000000000100000000001000000000001000000000000100000000000001000000000000001000000000000000100000000000000001000000000000000001000000000000000000100000000000000000001000000000000000000001000000000000000000000"), //23/22
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //23/23
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //23/24
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //23/25
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //23/26
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //23/27
	},
	{ // 24
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111"), //24/0
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111111111111111100000000000000000000001"), //24/1
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111111111111111000000000000000000000100000000000000000000010"), //24/2
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111000000000000000000001000000000000000000001000000000000000000000100"), //24/3
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111111111111100000000000000000001000000000000000000010000000000000000000010000000000000000000001000"), //24/4
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111111111111000000000000000000100000000000000000010000000000000000000100000000000000000000100000000000000000000010000"), //24/5
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111000000000000000001000000000000000001000000000000000000100000000000000000001000000000000000000001000000000000000000000100000"), //24/6
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111111111100000000000000001000000000000000010000000000000000010000000000000000001000000000000000000010000000000000000000010000000000000000000001000000"), //24/7
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111111111000000000000000100000000000000010000000000000000100000000000000000100000000000000000010000000000000000000100000000000000000000100000000000000000000010000000"), //24/8
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111000000000000001000000000000001000000000000000100000000000000001000000000000000001000000000000000000100000000000000000001000000000000000000001000000000000000000000100000000"), //24/9
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111111100000000000001000000000000010000000000000010000000000000001000000000000000010000000000000000010000000000000000001000000000000000000010000000000000000000010000000000000000000001000000000"), //24/10
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111111000000000000100000000000010000000000000100000000000000100000000000000010000000000000000100000000000000000100000000000000000010000000000000000000100000000000000000000100000000000000000000010000000000"), //24/11
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111000000000001000000000001000000000000100000000000001000000000000001000000000000000100000000000000001000000000000000001000000000000000000100000000000000000001000000000000000000001000000000000000000000100000000000"), //24/12
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111100000000001000000000010000000000010000000000001000000000000010000000000000010000000000000001000000000000000010000000000000000010000000000000000001000000000000000000010000000000000000000010000000000000000000001000000000000"), //24/13
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111000000000100000000010000000000100000000000100000000000010000000000000100000000000000100000000000000010000000000000000100000000000000000100000000000000000010000000000000000000100000000000000000000100000000000000000000010000000000000"), //24/14
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111000000001000000001000000000100000000001000000000001000000000000100000000000001000000000000001000000000000000100000000000000001000000000000000001000000000000000000100000000000000000001000000000000000000001000000000000000000000100000000000000"), //24/15
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111100000001000000010000000010000000001000000000010000000000010000000000001000000000000010000000000000010000000000000001000000000000000010000000000000000010000000000000000001000000000000000000010000000000000000000010000000000000000000001000000000000000"), //24/16
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111000000100000010000000100000000100000000010000000000100000000000100000000000010000000000000100000000000000100000000000000010000000000000000100000000000000000100000000000000000010000000000000000000100000000000000000000100000000000000000000010000000000000000"), //24/17
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111000001000001000000100000001000000001000000000100000000001000000000001000000000000100000000000001000000000000001000000000000000100000000000000001000000000000000001000000000000000000100000000000000000001000000000000000000001000000000000000000000100000000000000000"), //24/18
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111100001000010000010000001000000010000000010000000001000000000010000000000010000000000001000000000000010000000000000010000000000000001000000000000000010000000000000000010000000000000000001000000000000000000010000000000000000000010000000000000000000001000000000000000000"), //24/19
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111000100010000100000100000010000000100000000100000000010000000000100000000000100000000000010000000000000100000000000000100000000000000010000000000000000100000000000000000100000000000000000010000000000000000000100000000000000000000100000000000000000000010000000000000000000"), //24/20
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011001001000100001000001000000100000001000000001000000000100000000001000000000001000000000000100000000000001000000000000001000000000000000100000000000000001000000000000000001000000000000000000100000000000000000001000000000000000000001000000000000000000000100000000000000000000"), //24/21
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101010010001000010000010000001000000010000000010000000001000000000010000000000010000000000001000000000000010000000000000010000000000000001000000000000000010000000000000000010000000000000000001000000000000000000010000000000000000000010000000000000000000001000000000000000000000"), //24/22
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110100100010000100000100000010000000100000000100000000010000000000100000000000100000000000010000000000000100000000000000100000000000000010000000000000000100000000000000000100000000000000000010000000000000000000100000000000000000000100000000000000000000010000000000000000000000"), //24/23
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //24/24
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //24/25
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //24/26
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //24/27
	},
	{ // 25
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111111111111111111"), //25/0
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111000000000000000000000001"), //25/1
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111111111111111100000000000000000000001000000000000000000000010"), //25/2
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111111111111111000000000000000000000100000000000000000000010000000000000000000000100"), //25/3
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111000000000000000000001000000000000000000001000000000000000000000100000000000000000000001000"), //25/4
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111111111111100000000000000000001000000000000000000010000000000000000000010000000000000000000001000000000000000000000010000"), //25/5
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111111111111000000000000000000100000000000000000010000000000000000000100000000000000000000100000000000000000000010000000000000000000000100000"), //25/6
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111000000000000000001000000000000000001000000000000000000100000000000000000001000000000000000000001000000000000000000000100000000000000000000001000000"), //25/7
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111111111100000000000000001000000000000000010000000000000000010000000000000000001000000000000000000010000000000000000000010000000000000000000001000000000000000000000010000000"), //25/8
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111111111000000000000000100000000000000010000000000000000100000000000000000100000000000000000010000000000000000000100000000000000000000100000000000000000000010000000000000000000000100000000"), //25/9
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111000000000000001000000000000001000000000000000100000000000000001000000000000000001000000000000000000100000000000000000001000000000000000000001000000000000000000000100000000000000000000001000000000"), //25/10
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111111100000000000001000000000000010000000000000010000000000000001000000000000000010000000000000000010000000000000000001000000000000000000010000000000000000000010000000000000000000001000000000000000000000010000000000"), //25/11
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111111000000000000100000000000010000000000000100000000000000100000000000000010000000000000000100000000000000000100000000000000000010000000000000000000100000000000000000000100000000000000000000010000000000000000000000100000000000"), //25/12
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111000000000001000000000001000000000000100000000000001000000000000001000000000000000100000000000000001000000000000000001000000000000000000100000000000000000001000000000000000000001000000000000000000000100000000000000000000001000000000000"), //25/13
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111100000000001000000000010000000000010000000000001000000000000010000000000000010000000000000001000000000000000010000000000000000010000000000000000001000000000000000000010000000000000000000010000000000000000000001000000000000000000000010000000000000"), //25/14
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111000000000100000000010000000000100000000000100000000000010000000000000100000000000000100000000000000010000000000000000100000000000000000100000000000000000010000000000000000000100000000000000000000100000000000000000000010000000000000000000000100000000000000"), //25/15
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111000000001000000001000000000100000000001000000000001000000000000100000000000001000000000000001000000000000000100000000000000001000000000000000001000000000000000000100000000000000000001000000000000000000001000000000000000000000100000000000000000000001000000000000000"), //25/16
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111100000001000000010000000010000000001000000000010000000000010000000000001000000000000010000000000000010000000000000001000000000000000010000000000000000010000000000000000001000000000000000000010000000000000000000010000000000000000000001000000000000000000000010000000000000000"), //25/17
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111000000100000010000000100000000100000000010000000000100000000000100000000000010000000000000100000000000000100000000000000010000000000000000100000000000000000100000000000000000010000000000000000000100000000000000000000100000000000000000000010000000000000000000000100000000000000000"), //25/18
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111000001000001000000100000001000000001000000000100000000001000000000001000000000000100000000000001000000000000001000000000000000100000000000000001000000000000000001000000000000000000100000000000000000001000000000000000000001000000000000000000000100000000000000000000001000000000000000000"), //25/19
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000111100001000010000010000001000000010000000010000000001000000000010000000000010000000000001000000000000010000000000000010000000000000001000000000000000010000000000000000010000000000000000001000000000000000000010000000000000000000010000000000000000000001000000000000000000000010000000000000000000"), //25/20
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000111000100010000100000100000010000000100000000100000000010000000000100000000000100000000000010000000000000100000000000000100000000000000010000000000000000100000000000000000100000000000000000010000000000000000000100000000000000000000100000000000000000000010000000000000000000000100000000000000000000"), //25/21
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000011001001000100001000001000000100000001000000001000000000100000000001000000000001000000000000100000000000001000000000000001000000000000000100000000000000001000000000000000001000000000000000000100000000000000000001000000000000000000001000000000000000000000100000000000000000000001000000000000000000000"), //25/22
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000101010010001000010000010000001000000010000000010000000001000000000010000000000010000000000001000000000000010000000000000010000000000000001000000000000000010000000000000000010000000000000000001000000000000000000010000000000000000000010000000000000000000001000000000000000000000010000000000000000000000"), //25/23
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000110100100010000100000100000010000000100000000100000000010000000000100000000000100000000000010000000000000100000000000000100000000000000010000000000000000100000000000000000100000000000000000010000000000000000000100000000000000000000100000000000000000000010000000000000000000000100000000000000000000000"), //25/24
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //25/25
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //25/26
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //25/27
	},
	{ // 26
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111"), //26/0
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111110000000000000000000000001"), //26/1
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111111111111111110000000000000000000000010000000000000000000000010"), //26/2
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111000000000000000000000010000000000000000000000100000000000000000000000100"), //26/3
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111110000000000000000000001000000000000000000000100000000000000000000001000000000000000000000001000"), //26/4
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111111111111110000000000000000000010000000000000000000010000000000000000000001000000000000000000000010000000000000000000000010000"), //26/5
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111000000000000000000010000000000000000000100000000000000000000100000000000000000000010000000000000000000000100000000000000000000000100000"), //26/6
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111110000000000000000001000000000000000000100000000000000000001000000000000000000001000000000000000000000100000000000000000000001000000000000000000000001000000"), //26/7
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111111111110000000000000000010000000000000000010000000000000000001000000000000000000010000000000000000000010000000000000000000001000000000000000000000010000000000000000000000010000000"), //26/8
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111000000000000000010000000000000000100000000000000000100000000000000000010000000000000000000100000000000000000000100000000000000000000010000000000000000000000100000000000000000000000100000000"), //26/9
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111110000000000000001000000000000000100000000000000001000000000000000001000000000000000000100000000000000000001000000000000000000001000000000000000000000100000000000000000000001000000000000000000000001000000000"), //26/10
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111111110000000000000010000000000000010000000000000001000000000000000010000000000000000010000000000000000001000000000000000000010000000000000000000010000000000000000000001000000000000000000000010000000000000000000000010000000000"), //26/11
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111000000000000010000000000000100000000000000100000000000000010000000000000000100000000000000000100000000000000000010000000000000000000100000000000000000000100000000000000000000010000000000000000000000100000000000000000000000100000000000"), //26/12
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111110000000000001000000000000100000000000001000000000000001000000000000000100000000000000001000000000000000001000000000000000000100000000000000000001000000000000000000001000000000000000000000100000000000000000000001000000000000000000000001000000000000"), //26/13
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111110000000000010000000000010000000000001000000000000010000000000000010000000000000001000000000000000010000000000000000010000000000000000001000000000000000000010000000000000000000010000000000000000000001000000000000000000000010000000000000000000000010000000000000"), //26/14
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111000000000010000000000100000000000100000000000010000000000000100000000000000100000000000000010000000000000000100000000000000000100000000000000000010000000000000000000100000000000000000000100000000000000000000010000000000000000000000100000000000000000000000100000000000000"), //26/15
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111110000000001000000000100000000001000000000001000000000000100000000000001000000000000001000000000000000100000000000000001000000000000000001000000000000000000100000000000000000001000000000000000000001000000000000000000000100000000000000000000001000000000000000000000001000000000000000"), //26/16
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000111111110000000010000000010000000001000000000010000000000010000000000001000000000000010000000000000010000000000000001000000000000000010000000000000000010000000000000000001000000000000000000010000000000000000000010000000000000000000001000000000000000000000010000000000000000000000010000000000000000"), //26/17
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000001111111000000010000000100000000100000000010000000000100000000000100000000000010000000000000100000000000000100000000000000010000000000000000100000000000000000100000000000000000010000000000000000000100000000000000000000100000000000000000000010000000000000000000000100000000000000000000000100000000000000000"), //26/18
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000001111110000001000000100000001000000001000000000100000000001000000000001000000000000100000000000001000000000000001000000000000000100000000000000001000000000000000001000000000000000000100000000000000000001000000000000000000001000000000000000000000100000000000000000000001000000000000000000000001000000000000000000"), //26/19
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000111110000010000010000001000000010000000010000000001000000000010000000000010000000000001000000000000010000000000000010000000000000001000000000000000010000000000000000010000000000000000001000000000000000000010000000000000000000010000000000000000000001000000000000000000000010000000000000000000000010000000000000000000"), //26/20
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000001111000010000100000100000010000000100000000100000000010000000000100000000000100000000000010000000000000100000000000000100000000000000010000000000000000100000000000000000100000000000000000010000000000000000000100000000000000000000100000000000000000000010000000000000000000000100000000000000000000000100000000000000000000"), //26/21
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000001110001000100001000001000000100000001000000001000000000100000000001000000000001000000000000100000000000001000000000000001000000000000000100000000000000001000000000000000001000000000000000000100000000000000000001000000000000000000001000000000000000000000100000000000000000000001000000000000000000000001000000000000000000000"), //26/22
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000110010010001000010000010000001000000010000000010000000001000000000010000000000010000000000001000000000000010000000000000010000000000000001000000000000000010000000000000000010000000000000000001000000000000000000010000000000000000000010000000000000000000001000000000000000000000010000000000000000000000010000000000000000000000"), //26/23
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000001010100100010000100000100000010000000100000000100000000010000000000100000000000100000000000010000000000000100000000000000100000000000000010000000000000000100000000000000000100000000000000000010000000000000000000100000000000000000000100000000000000000000010000000000000000000000100000000000000000000000100000000000000000000000"), //26/24
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000001101001000100001000001000000100000001000000001000000000100000000001000000000001000000000000100000000000001000000000000001000000000000000100000000000000001000000000000000001000000000000000000100000000000000000001000000000000000000001000000000000000000000100000000000000000000001000000000000000000000001000000000000000000000000"), //26/25
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //26/26
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //26/27
	},
	{ // 27
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111"), //27/0
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111111111111111111100000000000000000000000001"), //27/1
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111111111111111111000000000000000000000000100000000000000000000000010"), //27/2
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111000000000000000000000001000000000000000000000001000000000000000000000000100"), //27/3
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111111111111111100000000000000000000001000000000000000000000010000000000000000000000010000000000000000000000001000"), //27/4
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111111111111111000000000000000000000100000000000000000000010000000000000000000000100000000000000000000000100000000000000000000000010000"), //27/5
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111000000000000000000001000000000000000000001000000000000000000000100000000000000000000001000000000000000000000001000000000000000000000000100000"), //27/6
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111111111111100000000000000000001000000000000000000010000000000000000000010000000000000000000001000000000000000000000010000000000000000000000010000000000000000000000001000000"), //27/7
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111111111111000000000000000000100000000000000000010000000000000000000100000000000000000000100000000000000000000010000000000000000000000100000000000000000000000100000000000000000000000010000000"), //27/8
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111000000000000000001000000000000000001000000000000000000100000000000000000001000000000000000000001000000000000000000000100000000000000000000001000000000000000000000001000000000000000000000000100000000"), //27/9
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111111111100000000000000001000000000000000010000000000000000010000000000000000001000000000000000000010000000000000000000010000000000000000000001000000000000000000000010000000000000000000000010000000000000000000000001000000000"), //27/10
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111111111000000000000000100000000000000010000000000000000100000000000000000100000000000000000010000000000000000000100000000000000000000100000000000000000000010000000000000000000000100000000000000000000000100000000000000000000000010000000000"), //27/11
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111000000000000001000000000000001000000000000000100000000000000001000000000000000001000000000000000000100000000000000000001000000000000000000001000000000000000000000100000000000000000000001000000000000000000000001000000000000000000000000100000000000"), //27/12
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111111100000000000001000000000000010000000000000010000000000000001000000000000000010000000000000000010000000000000000001000000000000000000010000000000000000000010000000000000000000001000000000000000000000010000000000000000000000010000000000000000000000001000000000000"), //27/13
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111111000000000000100000000000010000000000000100000000000000100000000000000010000000000000000100000000000000000100000000000000000010000000000000000000100000000000000000000100000000000000000000010000000000000000000000100000000000000000000000100000000000000000000000010000000000000"), //27/14
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111000000000001000000000001000000000000100000000000001000000000000001000000000000000100000000000000001000000000000000001000000000000000000100000000000000000001000000000000000000001000000000000000000000100000000000000000000001000000000000000000000001000000000000000000000000100000000000000"), //27/15
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000111111111100000000001000000000010000000000010000000000001000000000000010000000000000010000000000000001000000000000000010000000000000000010000000000000000001000000000000000000010000000000000000000010000000000000000000001000000000000000000000010000000000000000000000010000000000000000000000001000000000000000"), //27/16
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000111111111000000000100000000010000000000100000000000100000000000010000000000000100000000000000100000000000000010000000000000000100000000000000000100000000000000000010000000000000000000100000000000000000000100000000000000000000010000000000000000000000100000000000000000000000100000000000000000000000010000000000000000"), //27/17
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000011111111000000001000000001000000000100000000001000000000001000000000000100000000000001000000000000001000000000000000100000000000000001000000000000000001000000000000000000100000000000000000001000000000000000000001000000000000000000000100000000000000000000001000000000000000000000001000000000000000000000000100000000000000000"), //27/18
	edgesInEgraphBM("000000000000000000000000000000000000000000000000111111100000001000000010000000010000000001000000000010000000000010000000000001000000000000010000000000000010000000000000001000000000000000010000000000000000010000000000000000001000000000000000000010000000000000000000010000000000000000000001000000000000000000000010000000000000000000000010000000000000000000000001000000000000000000"), //27/19
	edgesInEgraphBM("000000000000000000000000000000000000000000111111000000100000010000000100000000100000000010000000000100000000000100000000000010000000000000100000000000000100000000000000010000000000000000100000000000000000100000000000000000010000000000000000000100000000000000000000100000000000000000000010000000000000000000000100000000000000000000000100000000000000000000000010000000000000000000"), //27/20
	edgesInEgraphBM("000000000000000000000000000000000000011111000001000001000000100000001000000001000000000100000000001000000000001000000000000100000000000001000000000000001000000000000000100000000000000001000000000000000001000000000000000000100000000000000000001000000000000000000001000000000000000000000100000000000000000000001000000000000000000000001000000000000000000000000100000000000000000000"), //27/21
	edgesInEgraphBM("000000000000000000000000000000000111100001000010000010000001000000010000000010000000001000000000010000000000010000000000001000000000000010000000000000010000000000000001000000000000000010000000000000000010000000000000000001000000000000000000010000000000000000000010000000000000000000001000000000000000000000010000000000000000000000010000000000000000000000001000000000000000000000"), //27/22
	edgesInEgraphBM("000000000000000000000000000000111000100010000100000100000010000000100000000100000000010000000000100000000000100000000000010000000000000100000000000000100000000000000010000000000000000100000000000000000100000000000000000010000000000000000000100000000000000000000100000000000000000000010000000000000000000000100000000000000000000000100000000000000000000000010000000000000000000000"), //27/23
	edgesInEgraphBM("000000000000000000000000000011001001000100001000001000000100000001000000001000000000100000000001000000000001000000000000100000000000001000000000000001000000000000000100000000000000001000000000000000001000000000000000000100000000000000000001000000000000000000001000000000000000000000100000000000000000000001000000000000000000000001000000000000000000000000100000000000000000000000"), //27/24
	edgesInEgraphBM("000000000000000000000000000101010010001000010000010000001000000010000000010000000001000000000010000000000010000000000001000000000000010000000000000010000000000000001000000000000000010000000000000000010000000000000000001000000000000000000010000000000000000000010000000000000000000001000000000000000000000010000000000000000000000010000000000000000000000001000000000000000000000000"), //27/25
	edgesInEgraphBM("000000000000000000000000000110100100010000100000100000010000000100000000100000000010000000000100000000000100000000000010000000000000100000000000000100000000000000010000000000000000100000000000000000100000000000000000010000000000000000000100000000000000000000100000000000000000000010000000000000000000000100000000000000000000000100000000000000000000000010000000000000000000000000"), //27/26
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), //27/27
	},
	{ // 28
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111111111111111111111"), //28/0
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111000000000000000000000000001"), //28/1
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111111111111111111100000000000000000000000001000000000000000000000000010"), //28/2
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111111111111111111000000000000000000000000100000000000000000000000010000000000000000000000000100"), //28/3
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111000000000000000000000001000000000000000000000001000000000000000000000000100000000000000000000000001000"), //28/4
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111111111111111100000000000000000000001000000000000000000000010000000000000000000000010000000000000000000000001000000000000000000000000010000"), //28/5
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111111111111111000000000000000000000100000000000000000000010000000000000000000000100000000000000000000000100000000000000000000000010000000000000000000000000100000"), //28/6
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111000000000000000000001000000000000000000001000000000000000000000100000000000000000000001000000000000000000000001000000000000000000000000100000000000000000000000001000000"), //28/7
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111111111111100000000000000000001000000000000000000010000000000000000000010000000000000000000001000000000000000000000010000000000000000000000010000000000000000000000001000000000000000000000000010000000"), //28/8
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111111111111000000000000000000100000000000000000010000000000000000000100000000000000000000100000000000000000000010000000000000000000000100000000000000000000000100000000000000000000000010000000000000000000000000100000000"), //28/9
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111000000000000000001000000000000000001000000000000000000100000000000000000001000000000000000000001000000000000000000000100000000000000000000001000000000000000000000001000000000000000000000000100000000000000000000000001000000000"), //28/10
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111111111100000000000000001000000000000000010000000000000000010000000000000000001000000000000000000010000000000000000000010000000000000000000001000000000000000000000010000000000000000000000010000000000000000000000001000000000000000000000000010000000000"), //28/11
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111111111000000000000000100000000000000010000000000000000100000000000000000100000000000000000010000000000000000000100000000000000000000100000000000000000000010000000000000000000000100000000000000000000000100000000000000000000000010000000000000000000000000100000000000"), //28/12
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111000000000000001000000000000001000000000000000100000000000000001000000000000000001000000000000000000100000000000000000001000000000000000000001000000000000000000000100000000000000000000001000000000000000000000001000000000000000000000000100000000000000000000000001000000000000"), //28/13
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000000000000000111111111111100000000000001000000000000010000000000000010000000000000001000000000000000010000000000000000010000000000000000001000000000000000000010000000000000000000010000000000000000000001000000000000000000000010000000000000000000000010000000000000000000000001000000000000000000000000010000000000000"), //28/14
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000000000000000111111111111000000000000100000000000010000000000000100000000000000100000000000000010000000000000000100000000000000000100000000000000000010000000000000000000100000000000000000000100000000000000000000010000000000000000000000100000000000000000000000100000000000000000000000010000000000000000000000000100000000000000"), //28/15
	edgesInEgraphBM("000000000000000000000000000000000000000000000000000000011111111111000000000001000000000001000000000000100000000000001000000000000001000000000000000100000000000000001000000000000000001000000000000000000100000000000000000001000000000000000000001000000000000000000000100000000000000000000001000000000000000000000001000000000000000000000000100000000000000000000000001000000000000000"), //28/16
	edgesInEgraphBM("000000000000000000000000000000000000000000000111111111100000000001000000000010000000000010000000000001000000000000010000000000000010000000000000001000000000000000010000000000000000010000000000000000001000000000000000000010000000000000000000010000000000000000000001000000000000000000000010000000000000000000000010000000000000000000000001000000000000000000000000010000000000000000"), //28/17
	edgesInEgraphBM("000000000000000000000000000000000000111111111000000000100000000010000000000100000000000100000000000010000000000000100000000000000100000000000000010000000000000000100000000000000000100000000000000000010000000000000000000100000000000000000000100000000000000000000010000000000000000000000100000000000000000000000100000000000000000000000010000000000000000000000000100000000000000000"), //28/18
	edgesInEgraphBM("000000000000000000000000000011111111000000001000000001000000000100000000001000000000001000000000000100000000000001000000000000001000000000000000100000000000000001000000000000000001000000000000000000100000000000000000001000000000000000000001000000000000000000000100000000000000000000001000000000000000000000001000000000000000000000000100000000000000000000000001000000000000000000"), //28/19
	edgesInEgraphBM("000000000000000000000111111100000001000000010000000010000000001000000000010000000000010000000000001000000000000010000000000000010000000000000001000000000000000010000000000000000010000000000000000001000000000000000000010000000000000000000010000000000000000000001000000000000000000000010000000000000000000000010000000000000000000000001000000000000000000000000010000000000000000000"), //28/20
	edgesInEgraphBM("000000000000000111111000000100000010000000100000000100000000010000000000100000000000100000000000010000000000000100000000000000100000000000000010000000000000000100000000000000000100000000000000000010000000000000000000100000000000000000000100000000000000000000010000000000000000000000100000000000000000000000100000000000000000000000010000000000000000000000000100000000000000000000"), //28/21
	edgesInEgraphBM("000000000011111000001000001000000100000001000000001000000000100000000001000000000001000000000000100000000000001000000000000001000000000000000100000000000000001000000000000000001000000000000000000100000000000000000001000000000000000000001000000000000000000000100000000000000000000001000000000000000000000001000000000000000000000000100000000000000000000000001000000000000000000000"), //28/22
	edgesInEgraphBM("000000111100001000010000010000001000000010000000010000000001000000000010000000000010000000000001000000000000010000000000000010000000000000001000000000000000010000000000000000010000000000000000001000000000000000000010000000000000000000010000000000000000000001000000000000000000000010000000000000000000000010000000000000000000000001000000000000000000000000010000000000000000000000"), //28/23
	edgesInEgraphBM("000111000100010000100000100000010000000100000000100000000010000000000100000000000100000000000010000000000000100000000000000100000000000000010000000000000000100000000000000000100000000000000000010000000000000000000100000000000000000000100000000000000000000010000000000000000000000100000000000000000000000100000000000000000000000010000000000000000000000000100000000000000000000000"), //28/24
	edgesInEgraphBM("011001001000100001000001000000100000001000000001000000000100000000001000000000001000000000000100000000000001000000000000001000000000000000100000000000000001000000000000000001000000000000000000100000000000000000001000000000000000000001000000000000000000000100000000000000000000001000000000000000000000001000000000000000000000000100000000000000000000000001000000000000000000000000"), //28/25
	edgesInEgraphBM("101010010001000010000010000001000000010000000010000000001000000000010000000000010000000000001000000000000010000000000000010000000000000001000000000000000010000000000000000010000000000000000001000000000000000000010000000000000000000010000000000000000000001000000000000000000000010000000000000000000000010000000000000000000000001000000000000000000000000010000000000000000000000000"), //28/26
	edgesInEgraphBM("110100100010000100000100000010000000100000000100000000010000000000100000000000100000000000010000000000000100000000000000100000000000000010000000000000000100000000000000000100000000000000000010000000000000000000100000000000000000000100000000000000000000010000000000000000000000100000000000000000000000100000000000000000000000010000000000000000000000000100000000000000000000000000"), //28/27
	},
};

////////////////////////////////////////////////////////////

//code used for generation of lookup tables

//double x = 1.0;
//printf("%d", 28 * 27 / 2); //378
//for(int i = 0; i < 28; i++) x *= primes[378 - i];
//printf("%g", x); //1.67877e+92

//	for(int i = 4; i <= 28; i++) {
//		compressedEgraph eg0;
//		eg0.init(i);
//	    std::cout << eg0;
//	}

//	for(int i = 4; i <= 28; i++) {
//		egraph eg0;
//		eg0.ceg.init(i);
//		eg0.fromCompressedEgraph(eg0.ceg);
//		eg0.canonicalize();
//	    std::cout << eg0.ceg;
//		egraph eg1(eg0);
//		eg1.scramble(600);
//	    std::cout << eg1.ceg;
//		egraph eg2(eg1);
//		eg2.scramble(600);
//	    std::cout << eg2.ceg;
//	    std::cout << eg2.ceg.site_format() << std::endl;
//	    std::cout << std::endl;
//	}

//	for(int i = 4; i <= 28; i++) {
//		compressedEgraph eg0;
//	    std::cin >> eg0;
//	    std::cout << eg0;
//	}

//	for(int i = 0; i <= 28; i++) {
//	    std::cout << (i * (i - 1) / 2) << ",";
//	}

//	std::set<int> nodeEdges[29][28];
//	for(int n = 0; n <= 28; n++) {
//		//std::cout << "{" << std::endl;
//		int k = 0;
//		for(int i = 0; i < n - 1; i++) {
//			for(int j = i + 1; j < n; j++) {
//				//for size n edge k joins nodes i and j (i < j)
//				//edgeNodes[n][k][0] = i;
//				//edgeNodes[n][k][1] = j;
//				nodeEdges[n][i].insert(k);
//				nodeEdges[n][j].insert(k);
//				k++;
//				//std::cout << "{" << i  << "," << j << "},";
//			}
//			//std::cout << std::endl;
//		}
//		//std::cout << "}," << "// size=" << n << std::endl;
//	}
//	for(int n = 0; n <= 28; n++) {
//		std::cout << "{" << std::endl;
//		for(int k = 0; k < n; k++) {
//			std::cout << "{";
//			for(std::set<int>::const_iterator i = nodeEdges[n][k].begin(); i != nodeEdges[n][k].end(); i++) {
//				std::cout << *i  << ",";
//			}
//			std::cout << "}," << "// " << k << "/" << n << std::endl;
//		}
//		std::cout << "}," << std::endl;
//	}

//	int expandedEdges[29][28][28];
//	for(int s = 0; s <= 28; s++) {
//		for(int n1 = 0; n1 < 28; n1++) {
//			for(int n2 = 0; n2 < 28; n2++) {
//				expandedEdges[s][n1][n2] = -1;
//			}
//		}
//	}
//	for(int s = 0; s <= 28; s++) {
//		for(int e = 0; e < numEdges[s]; e++) {
//			expandedEdges[s][edgeNodes[s][e][0]][edgeNodes[s][e][1]] = e;
//			expandedEdges[s][edgeNodes[s][e][1]][edgeNodes[s][e][0]] = e;
//		}
//	}
//	for(int s = 0; s <= 28; s++) {
//		std::cout << "{" << std::endl;
//		for(int n1 = 0; n1 < 28; n1++) {
//			std::cout << "{";
//			for(int n2 = 0; n2 < 28; n2++) {
//				std::cout << expandedEdges[s][n1][n2] << ",";
//			}
//			std::cout << "}, //" << n1 << "/" << s << std::endl;
//		}
//		std::cout << "}," << std::endl;
//	}

//	//permutations
//	const int sz = 6;
//	int myints[] = {0,1,2,3,4,5,6,7,8,9};
//
//	std::sort (myints,myints+sz);
//
//	do {
//		for(int i = 0; i < sz; i++) {
//			if(myints[i] == i)
//				goto next_perm;
//		}
//		std::cout << "{";
//		for(int i = 0; i < sz; i++) {
//			std::cout << myints[i] << ",";
//		}
//		std::cout << "},\n";
//		next_perm:
//		;
//	} while ( std::next_permutation(myints,myints+sz) );

//	//permutations
//	const int sz = 7;
//	int myints[] = {0,1,2,3,4,5,6,7,8,9};
//	int n = 0;
//
//	std::sort (myints,myints+sz);
//
//	do {
//		for(int i = 0; i < sz; i++) {
//			if(myints[i] == i)
//				goto next_perm;
//		}
//		std::cout << "{";
//		for(int i = 0; i < sz; i++) {
//			std::cout << myints[i] << ",";
//		}
//		std::cout << "},";
//		n++;
//		if(n % 10 == 0)
//			std::cout << "\n";
//		next_perm:
//		;
//	} while ( std::next_permutation(myints,myints+sz) );
//	std::cout << "permute" << sz <<"["<<n<<"][" <<sz<<"] = {\n";
//
//	return 0;

//	//calculate targets
//	approxEnergy_t x[29];
//	std::cout << "approxEnergy_t nodeTarget[29]= {\n";
//	for(int s = 4; s < 29; s++) {
//		approxEnergy_t prod = 1;
//		for(int i = 0; i < numEdges[s]; i++) {
//			prod *= primes[i];
//		}
//		x[s] = std::pow(prod, 2. / s);
//		std::cout << x[s] << ", //" << s << "\n";
//	}
//	std::cout << "}\n";
//
//	return 0;

//	//edges per node bit masks lookup
//	edgesInEgraphBM nodeEdgesBM[29][28];
//	std::cout << "static const edgesInEgraphBM nodeEdgesBM[29][28] = {\n";
//	for(int s = 0; s < 29; s++) {
//		for(int n = 0; n < 28; n++) {
//			nodeEdgesBM[s][n].reset();
//		}
//	}
//	for(int s = 4; s < 29; s++) {
//		for(int n = 0; n < s; n++) {
//			for(int e = 0; e < s - 1; e++) {
//				nodeEdgesBM[s][n].set(nodeEdges[s][n][e]);
//			}
//		}
//	}
//	for(int s = 0; s < 29; s++) {
//		std::cout << "{ // " << s << "\n";
//		for(int n = 0; n < 28; n++) {
//			std::cout << "edgesInEgraphBM(\"";
//			std::cout << nodeEdgesBM[s][n].to_string();
//			std::cout << "\"), //" << s << "/" << n << "\n";
//		}
//		std::cout << "},\n";
//	}
//	std::cout << "};\n";
//
//	return 0;

//	//patch the tags for bx command, replace >2 to 2. 7 = 
//	for(compressedEgraphMap::iterator g = db.begin(); g != db.end(); g++) {
//		if(((g->second.tags >> 15) & 15) > 2) g->second.tags = (g->second.tags & ~((tags_t)15 << 15)) | ((tags_t)2 << 15);
//	}
//	db.save();
//	return 0;


////////////////////////////////////////////////////////////

volatile std::atomic_bool gExiting = ATOMIC_VAR_INIT(false);
//volatile std::sig_atomic_t gExiting = 0;
void exit_signal_handler(int signal)
{
	gExiting = true;
	signal++; //suppress compiler warnings
}

//a node with
//  - undefined positions on the board (neither nodeIndex nor intra-node permutations)
//  - defined edge values (i.e. energy)
//it is naturally in canonical form
struct detachedNode {
	edgesInEgraphBM valuesOccupied; //true = the n-th VALUE is occupied by this node; board positions don't matter
	//approxEnergy_t approxEnergy;
	approxEnergy_t disbalance;
	//bit 0 = positive disbalance
	//bits 1..4 = mutated at depth 1..4
	//bits 5..14 = joined at depth 1..9
	//bit 15.. = ???
	tags_t tags;
	detachedNode() : valuesOccupied(), disbalance(0), tags(0) {}
	detachedNode(const edgesInEgraphBM& val) : valuesOccupied(val), disbalance(0), tags(0) {
		this->setDisbalance();
	}
	detachedNode(const detachedNode& src) : valuesOccupied(src.valuesOccupied), disbalance(src.disbalance), tags(src.tags) {}
	detachedNode(const std::string& s) : disbalance(0), tags(0) {
		std::stringstream ss;
		ss.precision(approxEnergyPrecision);
		ss << s;
		ss >> disbalance;
		char sign;
		ss >> sign;
		ss >> tags;
		if(sign == '+') tags |= 1;
		ss >> valuesOccupied;
	}
	bool operator < (const detachedNode& n2) const {
		size_t v1, v2;
		for(v1 = this->valuesOccupied._Find_first(), v2 = n2.valuesOccupied._Find_first();
				v1 == v2 && v1 != this->valuesOccupied.size();
				v1 = this->valuesOccupied._Find_next(v1), v2 = n2.valuesOccupied._Find_next(v2)) {
			;
		}
		return v1 > v2;
	}
	static bool disbalanceCompare(const detachedNode& n1, const detachedNode& n2) {
		return n1.disbalance < n2.disbalance;
	}
    friend std::ostream & operator <<(std::ostream& out, const detachedNode& n) {
    	//out << std::string(n);
		out.precision(approxEnergyPrecision);
		out << n.disbalance << "\t";
		out << ((n.tags & 1) ? '+' : '-') << "\t";
		out << n.tags << "\t";
		out << n.valuesOccupied << "\n";
    	return out;
    }
	operator std::string () const {
		std::stringstream ss;
		ss.precision(approxEnergyPrecision);
		ss << disbalance << "\t";
		ss << ((tags & 1) ? '+' : '-') << "\t";
		ss << tags << "\t";
		ss << valuesOccupied;
		//ss >> s; !!!!!!!!1 only the first serialized element from the stream goes to the string
		return ss.str();
	}
	approxEnergy_t getDisbalance() const {
		return (tags & 1) ? disbalance : -disbalance;
	}
	void setDisbalance() {
		size_t v1, n = 1;
		disbalance = 1;
		for(v1 = this->valuesOccupied._Find_first();
				v1 != this->valuesOccupied.size();
				v1 = this->valuesOccupied._Find_next(v1)) {
			disbalance *= primes[v1];
			n++;
		}
		if(disbalance > nodeTarget[n]) {
			tags |= 1;
			disbalance = disbalance - nodeTarget[n];
		}
		else {
			tags &= ~(tags_t)1;
			disbalance = nodeTarget[n] - disbalance;
		}
	}
//	void m2p2(const edgesInEgraphBM& alphabet) {
//		approxEnergy_t disbalance = (tags & 1) ? disbalance : -disbalance;
//		size_t nodeSize = valuesOccupied.count();
//		size_t alphabetSize = alphabet.count();
//		for(int i1 = 0; i1 < nodeSize - 1; i1++) {
//			for(int i2 = i1 + 1; i2 < nodeSize; i2++) {
//				for(int i2 = i1 + 1; i2 < nodeSize; i2++) {
//
//			}
//		}
//	}
};

struct detachedNodes : public std::unordered_map<edgesInEgraphBM,detachedNode,std::hash<std::bitset<378>>> {
	typedef std::multimap<approxEnergy_t,detachedNode*> idxByDeviation_t;
	idxByDeviation_t idxByDeviation;
	size_t max_size = 4000000;
	//size_t max_size = 10000000;
	bool isFull = false;
	approxEnergy_t worstDeviation = 1.e+100;
	bool isWeak (const approxEnergy_t& val) const {
		return this->isFull && this->worstDeviation < val;
	}
	void AddNode(const detachedNode& n) {
		if(isFull && n.disbalance > worstDeviation) return;
		detachedNodes::iterator old = this->find(n.valuesOccupied);
		if(old == this->end()) {
			//inserting
			if(isFull) {
				idxByDeviation_t::const_iterator last = std::prev(idxByDeviation.end());
				erase(last->second->valuesOccupied);
				idxByDeviation.erase(last);
			}
			else {
				if(this->size() >= max_size - 1) {
					isFull = true;
				}
			}
			old = this->insert(std::make_pair(n.valuesOccupied, n)).first;
			idxByDeviation.insert(std::make_pair(n.disbalance, &(old->second)));
			worstDeviation = std::prev(idxByDeviation.cend())->first;
			//			if(logBest && crunching && eg.approxEnergy < bestApproxEnergy) {
			//				logBestEgraph(eg); //watch better scores w/o interrupting the crunching process
			//				bestApproxEnergy = eg.approxEnergy;
			//			}
		}
		else {
			//updating
			old->second.tags |= n.tags;
		}
	}
    friend std::ostream & operator <<(std::ostream& out, const detachedNodes& nn) {
    	for(idxByDeviation_t::const_iterator n = nn.idxByDeviation.begin(); n != nn.idxByDeviation.end(); n++) {
    		out << *(n->second);
    	}
    	return out;
    }
    //use this when knowing the latest processed node but iterators could be damaged after insertion/deletion of elements
    idxByDeviation_t::const_iterator findNextByObject(const detachedNode& node) {
    	std::pair <idxByDeviation_t::const_iterator, idxByDeviation_t::const_iterator> range;
    	range = idxByDeviation.equal_range(node.disbalance);
    	for (idxByDeviation_t::const_iterator nn(range.first); nn != range.second; ++nn) {
    		//key exists with possible multiple elements
    		if(nn->second->valuesOccupied == node.valuesOccupied) {
    			//the given still exists so return the next within the range or next key or end()
    			++nn;
    			return nn;
    		}
    	}
    	//the given node is erased. Return iterator to the next key or end()
    	return range.second;
    }
};

struct edgelist {
	size_t size;
	std::vector<short> edgeIndexes;
	//short edgeIndexes[378];
	bool operator < (const edgelist& other) const {
		return (edgeIndexes < other.edgeIndexes);
		//return memcmp(edgeIndexes, &other.edgeIndexes, numEdges[size] * sizeof(edgeIndexes[0])) < 0;
	}
	edgelist() : size(0), edgeIndexes(0){};
	edgelist(const edgelist& src) : size(src.size), edgeIndexes(src.edgeIndexes){}
	edgelist(size_t known_size) : size(known_size), edgeIndexes(numEdges[known_size]){}
	void setSize(int new_size) {
		size = new_size;
		edgeIndexes.resize(numEdges[size]);
	}
};

struct compressedEgraph {
	edgelist edges;
	approxEnergy_t approxEnergy;
	//bit 0 = latest node pair regenerated (obsolete)
	//bits 1..8 = mutated at depth 1..8
	//bit 9 = all node pairs regenerated
	//bit 10 = all node triplets regenerated
	//bit 11,12,13,14 = worst 3,4,5,6 nodes regenerated in all possible ways
	//bits 15,16,17,18 all N[0..15] tuples regenerated by attempting to attach only good nodes to them
	//bit 19 = all node quadruplets regenerated
	tags_t tags;
//	void init(int the_size) {
//		edges.size = the_size;
//		for(int i = 0; i < numEdges[edges.size]; i++) {
//			edges.edgeIndexes[i] = i;
//		}
//		tags = 0;
//	}
	compressedEgraph() : edges(), approxEnergy(0.), tags(0) {}
	compressedEgraph(const edgelist& el) : edges(el), approxEnergy(0.), tags(0) {}
	approxEnergy_t getNodeEnergy(int node) const {
		approxEnergy_t en = 1;
		for(size_t e = 0; e < edges.size - 1; e++) {
			en *= primes[edges.edgeIndexes[nodeEdges[edges.size][node][e]]];
		}
		return en;
	}
	void mergeTags(const compressedEgraph& other) {
		mergeTags(other.tags);
	}
	void mergeTags(const tags_t& other) {
		const tags_t bxMask = ((tags_t)15) << 15;
		tags_t oldBx1 = this->tags & bxMask;
		tags_t oldBx2 = other & bxMask;
		this->tags |= other;
		if(oldBx1 && oldBx2) { //both are nonzero
			this->tags &= ~bxMask; //clear
			this->tags |= std::min(oldBx1, oldBx2);
		}
	}
	void canonicalize() {
		approxEnergy_t approxNodeEnergies[29];
		getApproxEnergies(approxNodeEnergies);
		canonicalize(approxNodeEnergies);
	}
	void canonicalize(approxEnergy_t* approxNodeEnergies) {
		//sort nodes by increasing energy
		struct intDouble {
			size_t index;
			approxEnergy_t value;
			bool operator <(const intDouble& other) const {
				return this->value < other.value;
			}
		};
		intDouble energies[28];
		repeat:
		for(size_t i = 0; i < edges.size; i++) {
			energies[i].index = i;
			energies[i].value = approxNodeEnergies[i];
		}
		std::stable_sort(energies, energies + edges.size); //stable sort to avoid infinite loop
		for(size_t i = 0; i < edges.size; i++) {
			if(energies[i].index == i) continue;
			swapNodes(energies[i].index, i, approxNodeEnergies);
			goto repeat;
		}
	}
	void swapNodes(int n1, int n2, approxEnergy_t* approxNodeEnergies) {
		//swap edge weights so that node n2 has weights previously assigned to node n1 and vice versa
		for(size_t i = 0; i < edges.size; i++) {
			int e1 = edgePerNodes[edges.size][n1][i];
			if(e1 == -1) continue;
			int e2 = edgePerNodes[edges.size][n2][i];
			if(e2 == -1) continue;
			std::swap(edges.edgeIndexes[e1], edges.edgeIndexes[e2]);
		}
		std::swap(approxNodeEnergies[n1], approxNodeEnergies[n2]);
	}
	void getApproxEnergies(approxEnergy_t* approxNodeEnergies)  {
		approxEnergy = 0;
		for(size_t i = 0; i < edges.size; i++) {
			approxNodeEnergies[i] = getNodeEnergy(i);
			approxEnergy += approxNodeEnergies[i];
		}
	}
	void getApproxEnergy() {
		approxEnergy = 0;
		for(size_t i = 0; i < edges.size; i++) {
			approxEnergy += getNodeEnergy(i);
		}
	}
	detachedNode getDetachedNode(int index) const {
		detachedNode n;
		for(size_t i = 0; i < edges.size - 1; i++) {
			n.valuesOccupied.set(edges.edgeIndexes[nodeEdges[edges.size][index][i]]);
		}
		approxEnergy_t approxEnergy = getNodeEnergy(index);
		if(approxEnergy > nodeTarget[edges.size]) {
			n.tags = 1;
			n.disbalance = approxEnergy - nodeTarget[edges.size];
		}
		else {
			n.tags = 0;
			n.disbalance = nodeTarget[edges.size] - approxEnergy;
		}
		return n;
	}
	std::vector<detachedNode> getDetachedNodes() const {
		std::vector<detachedNode> nodes;
		for(size_t index = 0; index < edges.size; index++) {
			nodes.push_back(getDetachedNode(index));
		}
		return nodes;
	}
	std::string site_format() const {
		//format the graph in a form suitable for publishing to http://azspcs.com
		//calculate integer energy
		BigInteger graphEnergy(0);
		for(size_t node = 0; node < edges.size; node++) {
			BigInteger nodeEnergy(1);
			for(size_t e = 0; e < edges.size - 1; e++) {
				nodeEnergy *= primes[edges.edgeIndexes[nodeEdges[edges.size][node][e]]];
			}
			graphEnergy += nodeEnergy;
		}
		std::string o(graphEnergy);
		o.append("\n");
		//output the nodes
		for(size_t n = 0; n < edges.size; n++) {
			if(n) o.append(", ");
			o.append("{");
			for(size_t e = 0; e < edges.size - 1; e++) {
				if(e) o.append(", ");
				o.append(std::to_string(primes[edges.edgeIndexes[nodeEdges[edges.size][n][e]]]));
			}
			o.append("}");
		}
		return o;
	}
    friend std::ostream & operator <<(std::ostream& out, const compressedEgraph& ceg) {
    	out << ceg.edges.size << "\t";
		for(size_t i = 0; i < numEdges[ceg.edges.size]; i++) {
			out << ceg.edges.edgeIndexes[i] << "\t";
		}
		//out << std::setprecision(approxEnergyPrecision) << ceg.approxEnergy << "\t" << ceg.tags << "\t" << std::endl;
		out << ceg.approxEnergy << "\t" << ceg.tags << std::endl;
    	return out;
    }
    friend std::istream & operator >>(std::istream& in, compressedEgraph& ceg) {
    	//memset(&ceg.edges, -1, sizeof(ceg.edges)); //random data in the unused space could cause false differences in the key
    	ceg.edges.size = 0; //start by invalid size
    	in.precision(approxEnergyPrecision);
    	in >> ceg.edges.size;
    	ceg.edges.setSize(ceg.edges.size);
		for(size_t i = 0; i < numEdges[ceg.edges.size]; i++) {
			in >> ceg.edges.edgeIndexes[i];
		}
		in >> ceg.approxEnergy;
		if(in.eof() || ceg.edges.edgeIndexes[ceg.edges.size - 1] == -1) { //unsuccessful
			ceg.edges.size = 0;
		}
		else {
			in >> ceg.tags;
		}

		if(in.fail()) { //unsuccessful
			ceg.edges.size = 0;
		}
		if(ceg.edges.size) {
			for(size_t i = 0; i < numEdges[ceg.edges.size]; i++) {
				in >> ceg.edges.edgeIndexes[i];
				if(ceg.edges.edgeIndexes[i] < 0 || ceg.edges.edgeIndexes[i] >= (short)numEdges[ceg.edges.size])
					ceg.edges.size = 0; //invalidate
				break;
			}
		}
		return in;
    }
//    void getEnergy(energy_t& e) const {
//    	e = 0;
//		for(int n = 0; n < edges.size; n++) {
//			energy_t ne(1);
//			for(int e = 0; e < edges.size - 1; e++) {
//				ne *= primes[edges.edgeIndexes[nodeEdges[edges.size][n][e]]];
//			}
//			e += ne;
//		}
//    }
};

struct givenPair {
	size_t rating;
	size_t node1Index;
	size_t node2Index;
	givenPair(const std::string& s) {
		std::stringstream ss;
		//ss.precision(approxEnergyPrecision);
		ss << s;
		ss >> rating;
		ss >> node1Index;
		ss >> node2Index;
	}
    friend std::ostream & operator <<(std::ostream& out, const givenPair& p) {
		out << p.rating << "\t";
		out << p.node1Index << "\t";
		out << p.node2Index << "\n";
    	return out;
    }
};
typedef std::vector<givenPair> givenPairs_t;

typedef std::multimap <approxEnergy_t, const compressedEgraph*> idxApproxEnergy_t;
typedef std::map <edgelist, compressedEgraph> compressedEgraphMap_t;
struct compressedEgraphMap : public compressedEgraphMap_t {
	const bool logBest = true;
	//const size_t max_size = 2000000;
	//const size_t max_size = 1000000;
	size_t max_size = 10000;
	idxApproxEnergy_t idxApproxEnergy;
	detachedNodes nodesList;
	//detachedNodes furtherNodesList; //optimal nodes for the next larger egraph
	givenPairs_t givenPairs;

	approxEnergy_t worstApproxEnergy;
	approxEnergy_t bestApproxEnergy;
	size_t egraphSize;
	//std::clock_t lastGraphAppendAt;
	bool crunching;
	bool isFull;
	compressedEgraphMap() :
			worstApproxEnergy(1e+300),
			bestApproxEnergy(1e+300),
			egraphSize(0),
			crunching(false),
			isFull(false)
	{
		//lastGraphAppendAt = std::clock();
	}
	approxEnergy_t maxNodeDeviationForWorst() const {
		//return std::sqrt(2 * nodeTarget[egraphSize] * (this->worstApproxEnergy - egraphSize * nodeTarget[egraphSize]));
		static approxEnergy_t res = -1.;
		if(res < 0) {
			res = (approxEnergy_t)sqrtq(2 * nodeTarget[egraphSize] * ((__float128)this->worstApproxEnergy - egraphSize * (__float128)nodeTarget[egraphSize]));
		}
		return res;
	}
	approxEnergy_t maxNodeDeviationForBetter() const {
		//abs(max_node_deviation) = sqrt(2 * nodeTarget * raw_score)
		//for 9 at time of writing this it is sqrt(2 * 15470731709134.818 * 1086947) = 5799287097.402397618 = top 3054 nodes
		//for 11 sqrt(2 * 5.8464727875750185e+18 * (6.431120066346365e+19 - 11 * 5.8464727875750185e+18)) = 1.61884739×10²⁷ = all
		//return std::sqrt(2 * nodeTarget[egraphSize] * (this->bestApproxEnergy - egraphSize * nodeTarget[egraphSize]));
		//return sqrtq(2 * nodeTarget[egraphSize] * (this->bestApproxEnergy - egraphSize * nodeTarget[egraphSize]));
		static approxEnergy_t res = -1.;
		if(res < 0) {
			res = (approxEnergy_t)sqrtq(2 * nodeTarget[egraphSize] * ((__float128)this->bestApproxEnergy - egraphSize * (__float128)nodeTarget[egraphSize]));
		}
		return res;
	}
	approxEnergy_t maxNodeDeviationForBest() const {
		//for 9 it is sqrt(2 * 15470731709134.818 * 123005) = 1950885621.394615891 = top 1003 nodes
		//for 11 sqrt(2 * 5.8464727875750185e+18 * 8691987) = 1.008141513×10¹³ = top 5480 nodes
		//for 12 sqrt(2 * 5.1819045565827399e+21 * 101517569) = 1.025723504×10¹⁵ = top 24711 nodes
		//return std::sqrt(2 * nodeTarget[egraphSize] * bestRawScores[egraphSize]);
		//return sqrtq(2 * nodeTarget[egraphSize] * bestRawScores[egraphSize]);
		static approxEnergy_t res = -1.;
		if(res < 0) {
			res = (approxEnergy_t)sqrtq(2 * nodeTarget[egraphSize] * (__float128)bestRawScores[egraphSize]);
		}
		return res;
	}
//	bool graphAgeTimeout() const {
//		std::clock_t now = std::clock();
//		return ((now - lastGraphAppendAt) / CLOCKS_PER_SEC) > 2000;
//	}
//	void resetGraphAge() {
//		lastGraphAppendAt = std::clock();
//	}
	bool is_weak(approxEnergy_t approxEnergy) const {
		bool ret;
//#ifdef _OPENMP
//#pragma omp critical (dbUpdate)
//#endif //_OPENMP
		{
			ret = isFull && approxEnergy >= worstApproxEnergy;
		}
		return ret;
	}
	void AddNode(const detachedNode& n) {
//		//check whether it is suitable for the next size
//		if(crunching && egraphSize != 28 && n.valuesOccupied.count() == egraphSize - 1) {
//			for(size_t e = numEdges[egraphSize]; e < numEdges[egraphSize + 1]; e++) {
//				detachedNode nn(n);
//				nn.valuesOccupied.set(e);
//				if(furtherNodesList.find(nn.valuesOccupied) == furtherNodesList.end()) {
//					nn.setDisbalance(); //this can be done easily
//					if(furtherNodesList.isFull && furtherNodesList.worstDeviation < nn.disbalance) continue;
//					furtherNodesList.AddNode(nn);
//				}
//			}
//		}
		nodesList.AddNode(n);
	}
	void addEgraph(const compressedEgraph& eg) {
		//if(eg.approxEnergy > ignoreAbove[eg.edges.size]) return; //simply don't read weak seed AND zero-sized graphs
		if(eg.edges.size < 4 || eg.edges.size > 28) return; //don't read zero-sized graphs
		if(isFull) {
			if(eg.approxEnergy > worstApproxEnergy) return;
		}
//#ifdef _OPENMP
//#pragma omp critical (dbUpdate)
//#endif //_OPENMP
		{
			{
				compressedEgraphMap::iterator old = this->find(eg.edges);
				if(old == this->end()) {
					//should insert
					//if(crunching) std::cerr << "+";
					if(isFull) {
						//if(crunching) std::cerr << "-";
						idxApproxEnergy_t::const_iterator last = std::prev(idxApproxEnergy.end());
						erase(last->second->edges);
						idxApproxEnergy.erase(last);
						last = std::prev(idxApproxEnergy.end());
						worstApproxEnergy = last->first;
					}
					else {
						if(size() >= max_size - 1) {
							isFull = true;
							idxApproxEnergy_t::const_iterator last = std::prev(idxApproxEnergy.end());
							worstApproxEnergy = last->first;
						}
					}
					old = this->insert(std::make_pair(eg.edges, eg)).first;
					idxApproxEnergy.insert(std::make_pair(eg.approxEnergy, &(old->second)));
					if(crunching && eg.approxEnergy < bestApproxEnergy) {
						if(logBest) logBestEgraph(eg); //watch better scores w/o interrupting the crunching process
						bestApproxEnergy = eg.approxEnergy;
					}
				}
				else {
					//should update
					//if(crunching) std::cerr << "=";
					//merge to the existing one
					//old->second.tags |= eg.tags; obsolete after the more complicated flags logic was involved
					old->second.mergeTags(eg);
				}
			}
		}
	}
	void load() {
		//std::this_thread::sleep_for (std::chrono::seconds(10)); //debug
		//nodesList.max_size = 3000000;
		//furtherNodesList.max_size = 1000000;; //optimal nodes for the next larger egraph
		enum dbsections {
			header,
			graphs,
			nodes,
			furthernodes,
			pairs
		};
		dbsections mode = dbsections::graphs;
//	    friend std::istream & operator >>(std::istream& in, compressedEgraphMap& db) {
//			std::string line;
//			while(! in.fail()) {
//				std::getline(in, line);
//				std::istringstream iss(line);
//	    		compressedEgraph g;
//	    		iss >> g;
//	    		db.addEgraph(g);
//	    	}
//	    	std::cerr << db.size() << " graphs loaded." << std::endl;
//	    	return in;
//	    }
		while((!std::cin.eof()) && !std::cin.fail()) {
			std::string line;
			std::getline(std::cin, line);
			if(line.size() == 0) continue;
			std::istringstream ss(line);
			if(line[0] == '[') {
				//switch mode
				switch(line[1]) {
					case 'h':
						mode = dbsections::header;
						break;
					case 'g':
						mode = dbsections::graphs;
						break;
					case 'n':
						mode = dbsections::nodes;
						break;
					case 'f':
						mode = dbsections::furthernodes;
						break;
					case 'p':
						mode = dbsections::pairs;
						break;
					default:
						std::cerr << "Invalid header, exiting...\n";
						exit(1);
				}
				continue; //skip this line
			}
			switch(mode) {
				case dbsections::header:
					ss >> egraphSize;
					this->nodesList.max_size = nodesListSizes[egraphSize];
					this->max_size = graphsListSizes[egraphSize];
					break;
				case dbsections::graphs:
				{
					compressedEgraph g;
					ss >> g;
					if(egraphSize && g.edges.size != egraphSize) continue; //ignore graphs of different size
					if(egraphSize == 0) egraphSize = g.edges.size;
					g.canonicalize();//don't trust the loaded energy and canonical form but recalculate it
					addEgraph(g);
				}
					break;
				case dbsections::nodes:
				{
					detachedNode n(ss.str());
					if(egraphSize && ((n.valuesOccupied.count() + 1) != egraphSize)) continue; //ignore nodes of different size
					if(egraphSize == 0) egraphSize = n.valuesOccupied.count() + 1;
					n.setDisbalance(); //don't trust the loaded disbalance but recalculate it
					AddNode(n); //call this instance which also composes further nodes
				}
					break;
				case dbsections::furthernodes:
				{
//					detachedNode n(ss.str());
//					if(egraphSize && (n.valuesOccupied.count() != egraphSize)) continue; //ignore nodes of different size
//					n.setDisbalance(); //don't trust the loaded disbalance but recalculate it
//					furtherNodesList.AddNode(n);
				}
					break;
				case dbsections::pairs:
				{
					givenPair p(ss.str());
					givenPairs.push_back(p);
				}
					break;
				default:
					;
			}
		}
		//std::cin >> *this;
    	idxApproxEnergy_t::const_iterator g = idxApproxEnergy.begin();
    	if(g != idxApproxEnergy.end()) {
    		bestApproxEnergy = g->first;
    		g = std::prev(idxApproxEnergy.end());
    		worstApproxEnergy = g->first;
    	}
    	//std::cerr << size() << " graphs, " << nodesList.size() << " nodes and " << furtherNodesList.size() << " further nodes loaded." << std::endl;
    	std::cerr << size() << " graphs and " << nodesList.size() << " nodes loaded." << std::endl;
    	//extract nodes from the existing graphs
    	for(compressedEgraphMap::const_iterator g = begin(); g != end(); g++) {
			std::vector<detachedNode> nn = g->second.getDetachedNodes();
			for(std::vector<detachedNode>::const_iterator n = nn.begin(); n != nn.end(); n++) {
				this->AddNode(*n);
			}
    	}
		crunching = true;
	}
	void save() {
		crunching = false;
    	logBestEgraph();
    	//std::cerr << "Saving " << size() << " graphs, " << nodesList.size() << " nodes and " << furtherNodesList.size() << " further nodes." << std::endl;
    	for(compressedEgraphMap::const_iterator g = begin(); g != end(); g++) {
			std::vector<detachedNode> nn = g->second.getDetachedNodes();
			for(std::vector<detachedNode>::const_iterator n = nn.begin(); n != nn.end(); n++) {
				this->AddNode(*n);
			}
    	}
    	std::cerr << "Saving " << size() << " graphs and " << nodesList.size() << " nodes." << std::endl;
		std::cout << *this;
	}
	const compressedEgraph* findTopUntagged(tags_t tagMask) {
		const compressedEgraph* ret = NULL;
//#ifdef _OPENMP
//#pragma omp critical (dbUpdate)
//#endif //_OPENMP
		{
			for(idxApproxEnergy_t::const_iterator top = idxApproxEnergy.begin(); top != idxApproxEnergy.end(); top++) {
				if(top->second->tags & tagMask) continue;
				ret = top->second;
				break;
			}
		}
		return ret;
	}
	void getTopN(int num, std::vector<compressedEgraph>& res) const {
		int n = num;
//#ifdef _OPENMP
//#pragma omp critical (dbUpdate)
//#endif //_OPENMP
		{
			for(idxApproxEnergy_t::const_iterator top = idxApproxEnergy.begin(); (top != idxApproxEnergy.end()) && n; top++, n--) {
				res.push_back(*(top->second));
			}
		}
	}
	void getTopUntaggedN(int num, tags_t tagMask, std::vector<compressedEgraph>& res) const {
		if(num > 0) {
			int n = num;
			for(idxApproxEnergy_t::const_iterator top = idxApproxEnergy.begin(); (n > 0 && top != idxApproxEnergy.end()); top++) {
				if(top->second->tags & tagMask) continue;
				res.push_back(*(top->second));
				n--;
			}
		}
		else { //read from bottom to top
			int n = -num;
			for(idxApproxEnergy_t::const_reverse_iterator top = idxApproxEnergy.rbegin(); (n > 0 && top != idxApproxEnergy.rend()); top++) {
				if(top->second->tags & tagMask) continue;
				res.push_back(*(top->second));
				n--;
			}
		}
	}
	void logBestEgraph(const compressedEgraph& g) const {
		std::cerr << "Best score " << g.edges.size << " " << g.approxEnergy << "\n";
		std::cerr << g.site_format() << std::endl;
	}
	void logBestEgraph() const {
//#ifdef _OPENMP deadlock
//#pragma omp critical (dbUpdate)
//#endif //_OPENMP
		{
			idxApproxEnergy_t::const_iterator g = idxApproxEnergy.begin();
			if(g != idxApproxEnergy.end()) {
				logBestEgraph(*(g->second));
			}
		}
	}
    friend std::ostream & operator <<(std::ostream& out, const compressedEgraphMap& db) {
    	out << "[header]\n";
    	out << db.egraphSize << "\n";
    	out << "[graphs]\n";
    	for(idxApproxEnergy_t::const_iterator g = db.idxApproxEnergy.begin(); g != db.idxApproxEnergy.end(); g++) {
    		out << *(g->second);
    	}
    	out << "[nodes]\n";
    	out << db.nodesList;
    	//out << "[furthernodes]\n";
    	//out << db.furtherNodesList;
    	return out;
    }
//    friend std::istream & operator >>(std::istream& in, compressedEgraphMap& db) {
//		std::string line;
//		while(! in.fail()) {
//			std::getline(in, line);
//			std::istringstream iss(line);
//    		compressedEgraph g;
//    		iss >> g;
//    		db.addEgraph(g);
//    	}
//    	std::cerr << db.size() << " graphs loaded." << std::endl;
//    	return in;
//    }
};

compressedEgraphMap db;

struct egraph {
	compressedEgraph ceg;
	approxEnergy_t approxNodeEnergies[29];
	//energy_t nodeEnergies[29];
	bool isWeak;
	egraph() : ceg(), isWeak(false) {}
	egraph(const edgelist& el) : ceg(el), isWeak(false) {
		getApproxNodesEnergies();
		canonicalize();
	}
	egraph(const compressedEgraph& the_ceg) : ceg(the_ceg), isWeak(false) {
		getApproxNodesEnergies();
	}
	void fromCompressedEgraph(const compressedEgraph& the_ceg) {
		ceg = the_ceg;
		isWeak = false;
		getApproxNodesEnergies();
	}
	bool isDbWeak() {
		return (isWeak || db.is_weak(ceg.approxEnergy));
	}
	approxEnergy_t getNodeEnergy(int node) {
		approxEnergy_t en = 1;
		for(size_t e = 0; e < ceg.edges.size - 1; e++) {
			en *= primes[ceg.edges.edgeIndexes[nodeEdges[ceg.edges.size][node][e]]];
		}
		return en;
	}
	void getApproxNodesEnergies(bool recalcOnlyEmptyNodes = false) {
		approxEnergy_t en = 0;
		for(int i = ceg.edges.size - 1; i >= 0 ; i--) { //revert to increase chances for earlier determination of weakness
		//for(int i = 0; i < ceg.edges.size; i++) {
			if((!recalcOnlyEmptyNodes) || approxNodeEnergies[i] == 0) {
				approxNodeEnergies[i] = getNodeEnergy(i);
			}
			en += approxNodeEnergies[i];
			if(en > ignoreAbove[ceg.edges.size]) {
				isWeak = true;
				return;
			}
		}
		ceg.approxEnergy = en;
		isWeak = false;
	}
	void canonicalize() {
		//sort nodes by increasing energy
		struct intDouble {
			size_t index;
			approxEnergy_t value;
			bool operator <(const intDouble& other) const {
				return this->value < other.value;
			}
		};
		intDouble energies[28];
		repeat:
		for(size_t i = 0; i < ceg.edges.size; i++) {
			energies[i].index = i;
			energies[i].value = approxNodeEnergies[i];
		}
		std::stable_sort(energies, energies + ceg.edges.size); //stable sort to avoid infinite loop
		for(size_t i = 0; i < ceg.edges.size; i++) {
			if(energies[i].index == i) continue;
			swapNodes(energies[i].index, i);
			goto repeat;
		}
	}
	void swapNodes(int n1, int n2) {
		//swap edge weights so that node n2 has weights previously assigned to node n1 and vice versa
		for(size_t i = 0; i < ceg.edges.size; i++) {
			int e1 = edgePerNodes[ceg.edges.size][n1][i];
			if(e1 == -1) continue;
			int e2 = edgePerNodes[ceg.edges.size][n2][i];
			if(e2 == -1) continue;
			std::swap(ceg.edges.edgeIndexes[e1], ceg.edges.edgeIndexes[e2]);
		}
		std::swap(approxNodeEnergies[n1], approxNodeEnergies[n2]);
	}
	void scramble(int numSwaps = 40) {
		//std::srand(std::time(0));
		const int maxEdge = numEdges[ceg.edges.size];
		for(int i = 0; i < numSwaps; i++) {
			int e1 = std::rand() % maxEdge;
			int e2 = std::rand() % maxEdge;
			std::swap(ceg.edges.edgeIndexes[e1], ceg.edges.edgeIndexes[e2]);
		}
		getApproxNodesEnergies();
		if((!isWeak) && (!db.is_weak(ceg.approxEnergy))) {
			canonicalize();
			ceg.tags = 0;
//#ifdef _OPENMP
//#pragma omp critical
//#endif //_OPENMP
			db.addEgraph(ceg);
		}
	}
	void storeMutated() {
		getApproxNodesEnergies(true); //recalculate invalidated nodes
		if((!isWeak) && (!db.is_weak(ceg.approxEnergy))) {
			canonicalize();
			ceg.tags = 0;
			db.addEgraph(ceg);
		}
		//debug, w/o weakness checking
//		getApproxNodesEnergies(); //recalculate all nodes
//		canonicalize();
//		ceg.tags = 0;
//		db.addEgraph(ceg);
	}
};

//list nodes with their disbalance from a db instance
void getDetachedNodes() {
	std::map<approxEnergy_t, detachedNode> bestNodes;
	for(compressedEgraphMap::iterator gg = db.begin(); gg != db.end(); gg++) {
		const compressedEgraph& g = gg->second;
		std::vector<detachedNode> nn(g.getDetachedNodes());
		for(size_t index = 0; index < nn.size(); index++) {
			detachedNode n(nn[index]);
			bestNodes.insert(std::make_pair(n.disbalance, n));
		}
	}
	for(std::multimap<approxEnergy_t, detachedNode>::const_iterator n = bestNodes.begin(); n != bestNodes.end(); n++) {
		std::cout << std::string(n->second) << "\n";
	}
}

class eGraphsBuffer {
	static const size_t maxSize = 100000;
	egraph buf[maxSize];
	size_t size;
public:
	eGraphsBuffer() : size(0) {};
	void add(const egraph& e) {
		buf[size++] = e;
		if(size == maxSize) {
			flush();
		}
	}
	void flush() {
#ifdef _OPENMP
//#pragma omp parallel for schedule(dynamic, 1) default(none)
#pragma omp parallel for schedule(guided) default(none)
#endif //_OPENMP
		for(size_t i = 0; i < size; i++) {
			//buf[i].storeMutated();
			buf[i].getApproxNodesEnergies(true); //recalculate invalidated nodes
			if(buf[i].isWeak) continue;
			buf[i].isWeak = buf[i].isDbWeak();
			if(buf[i].isWeak) continue;
			buf[i].canonicalize();
			buf[i].ceg.tags = 0;
		}
		for(size_t i = 0; i < size; i++) {
			if(buf[i].isWeak) continue;
			db.addEgraph(buf[i].ceg);
		}
		size = 0;
	}
};

eGraphsBuffer equeue;
static const edgesInEgraphBM emptyEdgesInEgraphBM;

void mutate(const compressedEgraph& eg, int depth, const edgesInEgraphBM& fixNodes = emptyEdgesInEgraphBM) {
	static const int permute3[2][3] = {{1,2,0},{2,0,1}};
	static const int permute4[9][4] = {{1,0,3,2},{1,2,3,0},{1,3,0,2},{2,0,3,1},{2,3,0,1},{2,3,1,0},{3,0,1,2},{3,2,0,1},{3,2,1,0}};
	static const int permute5[44][5] = {
		{1,0,3,4,2,},{1,0,4,2,3,},{1,2,0,4,3,},{1,2,3,4,0,},
		{1,2,4,0,3,},{1,3,0,4,2,},{1,3,4,0,2,},{1,3,4,2,0,},
		{1,4,0,2,3,},{1,4,3,0,2,},{1,4,3,2,0,},{2,0,1,4,3,},
		{2,0,3,4,1,},{2,0,4,1,3,},{2,3,0,4,1,},{2,3,1,4,0,},
		{2,3,4,0,1,},{2,3,4,1,0,},{2,4,0,1,3,},{2,4,1,0,3,},
		{2,4,3,0,1,},{2,4,3,1,0,},{3,0,1,4,2,},{3,0,4,1,2,},
		{3,0,4,2,1,},{3,2,0,4,1,},{3,2,1,4,0,},{3,2,4,0,1,},
		{3,2,4,1,0,},{3,4,0,1,2,},{3,4,0,2,1,},{3,4,1,0,2,},
		{3,4,1,2,0,},{4,0,1,2,3,},{4,0,3,1,2,},{4,0,3,2,1,},
		{4,2,0,1,3,},{4,2,1,0,3,},{4,2,3,0,1,},{4,2,3,1,0,},
		{4,3,0,1,2,},{4,3,0,2,1,},{4,3,1,0,2,},{4,3,1,2,0,}
	};
	static const int permute6[265][6] = {
		{1,0,3,2,5,4,},{1,0,3,4,5,2,},{1,0,3,5,2,4,},{1,0,4,2,5,3,},{1,0,4,5,2,3,},{1,0,4,5,3,2,},{1,0,5,2,3,4,},{1,0,5,4,2,3,},{1,0,5,4,3,2,},{1,2,0,4,5,3,},
		{1,2,0,5,3,4,},{1,2,3,0,5,4,},{1,2,3,4,5,0,},{1,2,3,5,0,4,},{1,2,4,0,5,3,},{1,2,4,5,0,3,},{1,2,4,5,3,0,},{1,2,5,0,3,4,},{1,2,5,4,0,3,},{1,2,5,4,3,0,},
		{1,3,0,2,5,4,},{1,3,0,4,5,2,},{1,3,0,5,2,4,},{1,3,4,0,5,2,},{1,3,4,2,5,0,},{1,3,4,5,0,2,},{1,3,4,5,2,0,},{1,3,5,0,2,4,},{1,3,5,2,0,4,},{1,3,5,4,0,2,},
		{1,3,5,4,2,0,},{1,4,0,2,5,3,},{1,4,0,5,2,3,},{1,4,0,5,3,2,},{1,4,3,0,5,2,},{1,4,3,2,5,0,},{1,4,3,5,0,2,},{1,4,3,5,2,0,},{1,4,5,0,2,3,},{1,4,5,0,3,2,},
		{1,4,5,2,0,3,},{1,4,5,2,3,0,},{1,5,0,2,3,4,},{1,5,0,4,2,3,},{1,5,0,4,3,2,},{1,5,3,0,2,4,},{1,5,3,2,0,4,},{1,5,3,4,0,2,},{1,5,3,4,2,0,},{1,5,4,0,2,3,},
		{1,5,4,0,3,2,},{1,5,4,2,0,3,},{1,5,4,2,3,0,},{2,0,1,4,5,3,},{2,0,1,5,3,4,},{2,0,3,1,5,4,},{2,0,3,4,5,1,},{2,0,3,5,1,4,},{2,0,4,1,5,3,},{2,0,4,5,1,3,},
		{2,0,4,5,3,1,},{2,0,5,1,3,4,},{2,0,5,4,1,3,},{2,0,5,4,3,1,},{2,3,0,1,5,4,},{2,3,0,4,5,1,},{2,3,0,5,1,4,},{2,3,1,0,5,4,},{2,3,1,4,5,0,},{2,3,1,5,0,4,},
		{2,3,4,0,5,1,},{2,3,4,1,5,0,},{2,3,4,5,0,1,},{2,3,4,5,1,0,},{2,3,5,0,1,4,},{2,3,5,1,0,4,},{2,3,5,4,0,1,},{2,3,5,4,1,0,},{2,4,0,1,5,3,},{2,4,0,5,1,3,},
		{2,4,0,5,3,1,},{2,4,1,0,5,3,},{2,4,1,5,0,3,},{2,4,1,5,3,0,},{2,4,3,0,5,1,},{2,4,3,1,5,0,},{2,4,3,5,0,1,},{2,4,3,5,1,0,},{2,4,5,0,1,3,},{2,4,5,0,3,1,},
		{2,4,5,1,0,3,},{2,4,5,1,3,0,},{2,5,0,1,3,4,},{2,5,0,4,1,3,},{2,5,0,4,3,1,},{2,5,1,0,3,4,},{2,5,1,4,0,3,},{2,5,1,4,3,0,},{2,5,3,0,1,4,},{2,5,3,1,0,4,},
		{2,5,3,4,0,1,},{2,5,3,4,1,0,},{2,5,4,0,1,3,},{2,5,4,0,3,1,},{2,5,4,1,0,3,},{2,5,4,1,3,0,},{3,0,1,2,5,4,},{3,0,1,4,5,2,},{3,0,1,5,2,4,},{3,0,4,1,5,2,},
		{3,0,4,2,5,1,},{3,0,4,5,1,2,},{3,0,4,5,2,1,},{3,0,5,1,2,4,},{3,0,5,2,1,4,},{3,0,5,4,1,2,},{3,0,5,4,2,1,},{3,2,0,1,5,4,},{3,2,0,4,5,1,},{3,2,0,5,1,4,},
		{3,2,1,0,5,4,},{3,2,1,4,5,0,},{3,2,1,5,0,4,},{3,2,4,0,5,1,},{3,2,4,1,5,0,},{3,2,4,5,0,1,},{3,2,4,5,1,0,},{3,2,5,0,1,4,},{3,2,5,1,0,4,},{3,2,5,4,0,1,},
		{3,2,5,4,1,0,},{3,4,0,1,5,2,},{3,4,0,2,5,1,},{3,4,0,5,1,2,},{3,4,0,5,2,1,},{3,4,1,0,5,2,},{3,4,1,2,5,0,},{3,4,1,5,0,2,},{3,4,1,5,2,0,},{3,4,5,0,1,2,},
		{3,4,5,0,2,1,},{3,4,5,1,0,2,},{3,4,5,1,2,0,},{3,4,5,2,0,1,},{3,4,5,2,1,0,},{3,5,0,1,2,4,},{3,5,0,2,1,4,},{3,5,0,4,1,2,},{3,5,0,4,2,1,},{3,5,1,0,2,4,},
		{3,5,1,2,0,4,},{3,5,1,4,0,2,},{3,5,1,4,2,0,},{3,5,4,0,1,2,},{3,5,4,0,2,1,},{3,5,4,1,0,2,},{3,5,4,1,2,0,},{3,5,4,2,0,1,},{3,5,4,2,1,0,},{4,0,1,2,5,3,},
		{4,0,1,5,2,3,},{4,0,1,5,3,2,},{4,0,3,1,5,2,},{4,0,3,2,5,1,},{4,0,3,5,1,2,},{4,0,3,5,2,1,},{4,0,5,1,2,3,},{4,0,5,1,3,2,},{4,0,5,2,1,3,},{4,0,5,2,3,1,},
		{4,2,0,1,5,3,},{4,2,0,5,1,3,},{4,2,0,5,3,1,},{4,2,1,0,5,3,},{4,2,1,5,0,3,},{4,2,1,5,3,0,},{4,2,3,0,5,1,},{4,2,3,1,5,0,},{4,2,3,5,0,1,},{4,2,3,5,1,0,},
		{4,2,5,0,1,3,},{4,2,5,0,3,1,},{4,2,5,1,0,3,},{4,2,5,1,3,0,},{4,3,0,1,5,2,},{4,3,0,2,5,1,},{4,3,0,5,1,2,},{4,3,0,5,2,1,},{4,3,1,0,5,2,},{4,3,1,2,5,0,},
		{4,3,1,5,0,2,},{4,3,1,5,2,0,},{4,3,5,0,1,2,},{4,3,5,0,2,1,},{4,3,5,1,0,2,},{4,3,5,1,2,0,},{4,3,5,2,0,1,},{4,3,5,2,1,0,},{4,5,0,1,2,3,},{4,5,0,1,3,2,},
		{4,5,0,2,1,3,},{4,5,0,2,3,1,},{4,5,1,0,2,3,},{4,5,1,0,3,2,},{4,5,1,2,0,3,},{4,5,1,2,3,0,},{4,5,3,0,1,2,},{4,5,3,0,2,1,},{4,5,3,1,0,2,},{4,5,3,1,2,0,},
		{4,5,3,2,0,1,},{4,5,3,2,1,0,},{5,0,1,2,3,4,},{5,0,1,4,2,3,},{5,0,1,4,3,2,},{5,0,3,1,2,4,},{5,0,3,2,1,4,},{5,0,3,4,1,2,},{5,0,3,4,2,1,},{5,0,4,1,2,3,},
		{5,0,4,1,3,2,},{5,0,4,2,1,3,},{5,0,4,2,3,1,},{5,2,0,1,3,4,},{5,2,0,4,1,3,},{5,2,0,4,3,1,},{5,2,1,0,3,4,},{5,2,1,4,0,3,},{5,2,1,4,3,0,},{5,2,3,0,1,4,},
		{5,2,3,1,0,4,},{5,2,3,4,0,1,},{5,2,3,4,1,0,},{5,2,4,0,1,3,},{5,2,4,0,3,1,},{5,2,4,1,0,3,},{5,2,4,1,3,0,},{5,3,0,1,2,4,},{5,3,0,2,1,4,},{5,3,0,4,1,2,},
		{5,3,0,4,2,1,},{5,3,1,0,2,4,},{5,3,1,2,0,4,},{5,3,1,4,0,2,},{5,3,1,4,2,0,},{5,3,4,0,1,2,},{5,3,4,0,2,1,},{5,3,4,1,0,2,},{5,3,4,1,2,0,},{5,3,4,2,0,1,},
		{5,3,4,2,1,0,},{5,4,0,1,2,3,},{5,4,0,1,3,2,},{5,4,0,2,1,3,},{5,4,0,2,3,1,},{5,4,1,0,2,3,},{5,4,1,0,3,2,},{5,4,1,2,0,3,},{5,4,1,2,3,0,},{5,4,3,0,1,2,},
		{5,4,3,0,2,1,},{5,4,3,1,0,2,},{5,4,3,1,2,0,},{5,4,3,2,0,1,},{5,4,3,2,1,0,}
	};
	static const int permute7[1854][7] = {
		{1,0,3,2,5,6,4,},{1,0,3,2,6,4,5,},{1,0,3,4,2,6,5,},{1,0,3,4,5,6,2,},{1,0,3,4,6,2,5,},{1,0,3,5,2,6,4,},{1,0,3,5,6,2,4,},{1,0,3,5,6,4,2,},{1,0,3,6,2,4,5,},{1,0,3,6,5,2,4,},
		{1,0,3,6,5,4,2,},{1,0,4,2,3,6,5,},{1,0,4,2,5,6,3,},{1,0,4,2,6,3,5,},{1,0,4,5,2,6,3,},{1,0,4,5,3,6,2,},{1,0,4,5,6,2,3,},{1,0,4,5,6,3,2,},{1,0,4,6,2,3,5,},{1,0,4,6,3,2,5,},
		{1,0,4,6,5,2,3,},{1,0,4,6,5,3,2,},{1,0,5,2,3,6,4,},{1,0,5,2,6,3,4,},{1,0,5,2,6,4,3,},{1,0,5,4,2,6,3,},{1,0,5,4,3,6,2,},{1,0,5,4,6,2,3,},{1,0,5,4,6,3,2,},{1,0,5,6,2,3,4,},
		{1,0,5,6,2,4,3,},{1,0,5,6,3,2,4,},{1,0,5,6,3,4,2,},{1,0,6,2,3,4,5,},{1,0,6,2,5,3,4,},{1,0,6,2,5,4,3,},{1,0,6,4,2,3,5,},{1,0,6,4,3,2,5,},{1,0,6,4,5,2,3,},{1,0,6,4,5,3,2,},
		{1,0,6,5,2,3,4,},{1,0,6,5,2,4,3,},{1,0,6,5,3,2,4,},{1,0,6,5,3,4,2,},{1,2,0,4,3,6,5,},{1,2,0,4,5,6,3,},{1,2,0,4,6,3,5,},{1,2,0,5,3,6,4,},{1,2,0,5,6,3,4,},{1,2,0,5,6,4,3,},
		{1,2,0,6,3,4,5,},{1,2,0,6,5,3,4,},{1,2,0,6,5,4,3,},{1,2,3,0,5,6,4,},{1,2,3,0,6,4,5,},{1,2,3,4,0,6,5,},{1,2,3,4,5,6,0,},{1,2,3,4,6,0,5,},{1,2,3,5,0,6,4,},{1,2,3,5,6,0,4,},
		{1,2,3,5,6,4,0,},{1,2,3,6,0,4,5,},{1,2,3,6,5,0,4,},{1,2,3,6,5,4,0,},{1,2,4,0,3,6,5,},{1,2,4,0,5,6,3,},{1,2,4,0,6,3,5,},{1,2,4,5,0,6,3,},{1,2,4,5,3,6,0,},{1,2,4,5,6,0,3,},
		{1,2,4,5,6,3,0,},{1,2,4,6,0,3,5,},{1,2,4,6,3,0,5,},{1,2,4,6,5,0,3,},{1,2,4,6,5,3,0,},{1,2,5,0,3,6,4,},{1,2,5,0,6,3,4,},{1,2,5,0,6,4,3,},{1,2,5,4,0,6,3,},{1,2,5,4,3,6,0,},
		{1,2,5,4,6,0,3,},{1,2,5,4,6,3,0,},{1,2,5,6,0,3,4,},{1,2,5,6,0,4,3,},{1,2,5,6,3,0,4,},{1,2,5,6,3,4,0,},{1,2,6,0,3,4,5,},{1,2,6,0,5,3,4,},{1,2,6,0,5,4,3,},{1,2,6,4,0,3,5,},
		{1,2,6,4,3,0,5,},{1,2,6,4,5,0,3,},{1,2,6,4,5,3,0,},{1,2,6,5,0,3,4,},{1,2,6,5,0,4,3,},{1,2,6,5,3,0,4,},{1,2,6,5,3,4,0,},{1,3,0,2,5,6,4,},{1,3,0,2,6,4,5,},{1,3,0,4,2,6,5,},
		{1,3,0,4,5,6,2,},{1,3,0,4,6,2,5,},{1,3,0,5,2,6,4,},{1,3,0,5,6,2,4,},{1,3,0,5,6,4,2,},{1,3,0,6,2,4,5,},{1,3,0,6,5,2,4,},{1,3,0,6,5,4,2,},{1,3,4,0,2,6,5,},{1,3,4,0,5,6,2,},
		{1,3,4,0,6,2,5,},{1,3,4,2,0,6,5,},{1,3,4,2,5,6,0,},{1,3,4,2,6,0,5,},{1,3,4,5,0,6,2,},{1,3,4,5,2,6,0,},{1,3,4,5,6,0,2,},{1,3,4,5,6,2,0,},{1,3,4,6,0,2,5,},{1,3,4,6,2,0,5,},
		{1,3,4,6,5,0,2,},{1,3,4,6,5,2,0,},{1,3,5,0,2,6,4,},{1,3,5,0,6,2,4,},{1,3,5,0,6,4,2,},{1,3,5,2,0,6,4,},{1,3,5,2,6,0,4,},{1,3,5,2,6,4,0,},{1,3,5,4,0,6,2,},{1,3,5,4,2,6,0,},
		{1,3,5,4,6,0,2,},{1,3,5,4,6,2,0,},{1,3,5,6,0,2,4,},{1,3,5,6,0,4,2,},{1,3,5,6,2,0,4,},{1,3,5,6,2,4,0,},{1,3,6,0,2,4,5,},{1,3,6,0,5,2,4,},{1,3,6,0,5,4,2,},{1,3,6,2,0,4,5,},
		{1,3,6,2,5,0,4,},{1,3,6,2,5,4,0,},{1,3,6,4,0,2,5,},{1,3,6,4,2,0,5,},{1,3,6,4,5,0,2,},{1,3,6,4,5,2,0,},{1,3,6,5,0,2,4,},{1,3,6,5,0,4,2,},{1,3,6,5,2,0,4,},{1,3,6,5,2,4,0,},
		{1,4,0,2,3,6,5,},{1,4,0,2,5,6,3,},{1,4,0,2,6,3,5,},{1,4,0,5,2,6,3,},{1,4,0,5,3,6,2,},{1,4,0,5,6,2,3,},{1,4,0,5,6,3,2,},{1,4,0,6,2,3,5,},{1,4,0,6,3,2,5,},{1,4,0,6,5,2,3,},
		{1,4,0,6,5,3,2,},{1,4,3,0,2,6,5,},{1,4,3,0,5,6,2,},{1,4,3,0,6,2,5,},{1,4,3,2,0,6,5,},{1,4,3,2,5,6,0,},{1,4,3,2,6,0,5,},{1,4,3,5,0,6,2,},{1,4,3,5,2,6,0,},{1,4,3,5,6,0,2,},
		{1,4,3,5,6,2,0,},{1,4,3,6,0,2,5,},{1,4,3,6,2,0,5,},{1,4,3,6,5,0,2,},{1,4,3,6,5,2,0,},{1,4,5,0,2,6,3,},{1,4,5,0,3,6,2,},{1,4,5,0,6,2,3,},{1,4,5,0,6,3,2,},{1,4,5,2,0,6,3,},
		{1,4,5,2,3,6,0,},{1,4,5,2,6,0,3,},{1,4,5,2,6,3,0,},{1,4,5,6,0,2,3,},{1,4,5,6,0,3,2,},{1,4,5,6,2,0,3,},{1,4,5,6,2,3,0,},{1,4,5,6,3,0,2,},{1,4,5,6,3,2,0,},{1,4,6,0,2,3,5,},
		{1,4,6,0,3,2,5,},{1,4,6,0,5,2,3,},{1,4,6,0,5,3,2,},{1,4,6,2,0,3,5,},{1,4,6,2,3,0,5,},{1,4,6,2,5,0,3,},{1,4,6,2,5,3,0,},{1,4,6,5,0,2,3,},{1,4,6,5,0,3,2,},{1,4,6,5,2,0,3,},
		{1,4,6,5,2,3,0,},{1,4,6,5,3,0,2,},{1,4,6,5,3,2,0,},{1,5,0,2,3,6,4,},{1,5,0,2,6,3,4,},{1,5,0,2,6,4,3,},{1,5,0,4,2,6,3,},{1,5,0,4,3,6,2,},{1,5,0,4,6,2,3,},{1,5,0,4,6,3,2,},
		{1,5,0,6,2,3,4,},{1,5,0,6,2,4,3,},{1,5,0,6,3,2,4,},{1,5,0,6,3,4,2,},{1,5,3,0,2,6,4,},{1,5,3,0,6,2,4,},{1,5,3,0,6,4,2,},{1,5,3,2,0,6,4,},{1,5,3,2,6,0,4,},{1,5,3,2,6,4,0,},
		{1,5,3,4,0,6,2,},{1,5,3,4,2,6,0,},{1,5,3,4,6,0,2,},{1,5,3,4,6,2,0,},{1,5,3,6,0,2,4,},{1,5,3,6,0,4,2,},{1,5,3,6,2,0,4,},{1,5,3,6,2,4,0,},{1,5,4,0,2,6,3,},{1,5,4,0,3,6,2,},
		{1,5,4,0,6,2,3,},{1,5,4,0,6,3,2,},{1,5,4,2,0,6,3,},{1,5,4,2,3,6,0,},{1,5,4,2,6,0,3,},{1,5,4,2,6,3,0,},{1,5,4,6,0,2,3,},{1,5,4,6,0,3,2,},{1,5,4,6,2,0,3,},{1,5,4,6,2,3,0,},
		{1,5,4,6,3,0,2,},{1,5,4,6,3,2,0,},{1,5,6,0,2,3,4,},{1,5,6,0,2,4,3,},{1,5,6,0,3,2,4,},{1,5,6,0,3,4,2,},{1,5,6,2,0,3,4,},{1,5,6,2,0,4,3,},{1,5,6,2,3,0,4,},{1,5,6,2,3,4,0,},
		{1,5,6,4,0,2,3,},{1,5,6,4,0,3,2,},{1,5,6,4,2,0,3,},{1,5,6,4,2,3,0,},{1,5,6,4,3,0,2,},{1,5,6,4,3,2,0,},{1,6,0,2,3,4,5,},{1,6,0,2,5,3,4,},{1,6,0,2,5,4,3,},{1,6,0,4,2,3,5,},
		{1,6,0,4,3,2,5,},{1,6,0,4,5,2,3,},{1,6,0,4,5,3,2,},{1,6,0,5,2,3,4,},{1,6,0,5,2,4,3,},{1,6,0,5,3,2,4,},{1,6,0,5,3,4,2,},{1,6,3,0,2,4,5,},{1,6,3,0,5,2,4,},{1,6,3,0,5,4,2,},
		{1,6,3,2,0,4,5,},{1,6,3,2,5,0,4,},{1,6,3,2,5,4,0,},{1,6,3,4,0,2,5,},{1,6,3,4,2,0,5,},{1,6,3,4,5,0,2,},{1,6,3,4,5,2,0,},{1,6,3,5,0,2,4,},{1,6,3,5,0,4,2,},{1,6,3,5,2,0,4,},
		{1,6,3,5,2,4,0,},{1,6,4,0,2,3,5,},{1,6,4,0,3,2,5,},{1,6,4,0,5,2,3,},{1,6,4,0,5,3,2,},{1,6,4,2,0,3,5,},{1,6,4,2,3,0,5,},{1,6,4,2,5,0,3,},{1,6,4,2,5,3,0,},{1,6,4,5,0,2,3,},
		{1,6,4,5,0,3,2,},{1,6,4,5,2,0,3,},{1,6,4,5,2,3,0,},{1,6,4,5,3,0,2,},{1,6,4,5,3,2,0,},{1,6,5,0,2,3,4,},{1,6,5,0,2,4,3,},{1,6,5,0,3,2,4,},{1,6,5,0,3,4,2,},{1,6,5,2,0,3,4,},
		{1,6,5,2,0,4,3,},{1,6,5,2,3,0,4,},{1,6,5,2,3,4,0,},{1,6,5,4,0,2,3,},{1,6,5,4,0,3,2,},{1,6,5,4,2,0,3,},{1,6,5,4,2,3,0,},{1,6,5,4,3,0,2,},{1,6,5,4,3,2,0,},{2,0,1,4,3,6,5,},
		{2,0,1,4,5,6,3,},{2,0,1,4,6,3,5,},{2,0,1,5,3,6,4,},{2,0,1,5,6,3,4,},{2,0,1,5,6,4,3,},{2,0,1,6,3,4,5,},{2,0,1,6,5,3,4,},{2,0,1,6,5,4,3,},{2,0,3,1,5,6,4,},{2,0,3,1,6,4,5,},
		{2,0,3,4,1,6,5,},{2,0,3,4,5,6,1,},{2,0,3,4,6,1,5,},{2,0,3,5,1,6,4,},{2,0,3,5,6,1,4,},{2,0,3,5,6,4,1,},{2,0,3,6,1,4,5,},{2,0,3,6,5,1,4,},{2,0,3,6,5,4,1,},{2,0,4,1,3,6,5,},
		{2,0,4,1,5,6,3,},{2,0,4,1,6,3,5,},{2,0,4,5,1,6,3,},{2,0,4,5,3,6,1,},{2,0,4,5,6,1,3,},{2,0,4,5,6,3,1,},{2,0,4,6,1,3,5,},{2,0,4,6,3,1,5,},{2,0,4,6,5,1,3,},{2,0,4,6,5,3,1,},
		{2,0,5,1,3,6,4,},{2,0,5,1,6,3,4,},{2,0,5,1,6,4,3,},{2,0,5,4,1,6,3,},{2,0,5,4,3,6,1,},{2,0,5,4,6,1,3,},{2,0,5,4,6,3,1,},{2,0,5,6,1,3,4,},{2,0,5,6,1,4,3,},{2,0,5,6,3,1,4,},
		{2,0,5,6,3,4,1,},{2,0,6,1,3,4,5,},{2,0,6,1,5,3,4,},{2,0,6,1,5,4,3,},{2,0,6,4,1,3,5,},{2,0,6,4,3,1,5,},{2,0,6,4,5,1,3,},{2,0,6,4,5,3,1,},{2,0,6,5,1,3,4,},{2,0,6,5,1,4,3,},
		{2,0,6,5,3,1,4,},{2,0,6,5,3,4,1,},{2,3,0,1,5,6,4,},{2,3,0,1,6,4,5,},{2,3,0,4,1,6,5,},{2,3,0,4,5,6,1,},{2,3,0,4,6,1,5,},{2,3,0,5,1,6,4,},{2,3,0,5,6,1,4,},{2,3,0,5,6,4,1,},
		{2,3,0,6,1,4,5,},{2,3,0,6,5,1,4,},{2,3,0,6,5,4,1,},{2,3,1,0,5,6,4,},{2,3,1,0,6,4,5,},{2,3,1,4,0,6,5,},{2,3,1,4,5,6,0,},{2,3,1,4,6,0,5,},{2,3,1,5,0,6,4,},{2,3,1,5,6,0,4,},
		{2,3,1,5,6,4,0,},{2,3,1,6,0,4,5,},{2,3,1,6,5,0,4,},{2,3,1,6,5,4,0,},{2,3,4,0,1,6,5,},{2,3,4,0,5,6,1,},{2,3,4,0,6,1,5,},{2,3,4,1,0,6,5,},{2,3,4,1,5,6,0,},{2,3,4,1,6,0,5,},
		{2,3,4,5,0,6,1,},{2,3,4,5,1,6,0,},{2,3,4,5,6,0,1,},{2,3,4,5,6,1,0,},{2,3,4,6,0,1,5,},{2,3,4,6,1,0,5,},{2,3,4,6,5,0,1,},{2,3,4,6,5,1,0,},{2,3,5,0,1,6,4,},{2,3,5,0,6,1,4,},
		{2,3,5,0,6,4,1,},{2,3,5,1,0,6,4,},{2,3,5,1,6,0,4,},{2,3,5,1,6,4,0,},{2,3,5,4,0,6,1,},{2,3,5,4,1,6,0,},{2,3,5,4,6,0,1,},{2,3,5,4,6,1,0,},{2,3,5,6,0,1,4,},{2,3,5,6,0,4,1,},
		{2,3,5,6,1,0,4,},{2,3,5,6,1,4,0,},{2,3,6,0,1,4,5,},{2,3,6,0,5,1,4,},{2,3,6,0,5,4,1,},{2,3,6,1,0,4,5,},{2,3,6,1,5,0,4,},{2,3,6,1,5,4,0,},{2,3,6,4,0,1,5,},{2,3,6,4,1,0,5,},
		{2,3,6,4,5,0,1,},{2,3,6,4,5,1,0,},{2,3,6,5,0,1,4,},{2,3,6,5,0,4,1,},{2,3,6,5,1,0,4,},{2,3,6,5,1,4,0,},{2,4,0,1,3,6,5,},{2,4,0,1,5,6,3,},{2,4,0,1,6,3,5,},{2,4,0,5,1,6,3,},
		{2,4,0,5,3,6,1,},{2,4,0,5,6,1,3,},{2,4,0,5,6,3,1,},{2,4,0,6,1,3,5,},{2,4,0,6,3,1,5,},{2,4,0,6,5,1,3,},{2,4,0,6,5,3,1,},{2,4,1,0,3,6,5,},{2,4,1,0,5,6,3,},{2,4,1,0,6,3,5,},
		{2,4,1,5,0,6,3,},{2,4,1,5,3,6,0,},{2,4,1,5,6,0,3,},{2,4,1,5,6,3,0,},{2,4,1,6,0,3,5,},{2,4,1,6,3,0,5,},{2,4,1,6,5,0,3,},{2,4,1,6,5,3,0,},{2,4,3,0,1,6,5,},{2,4,3,0,5,6,1,},
		{2,4,3,0,6,1,5,},{2,4,3,1,0,6,5,},{2,4,3,1,5,6,0,},{2,4,3,1,6,0,5,},{2,4,3,5,0,6,1,},{2,4,3,5,1,6,0,},{2,4,3,5,6,0,1,},{2,4,3,5,6,1,0,},{2,4,3,6,0,1,5,},{2,4,3,6,1,0,5,},
		{2,4,3,6,5,0,1,},{2,4,3,6,5,1,0,},{2,4,5,0,1,6,3,},{2,4,5,0,3,6,1,},{2,4,5,0,6,1,3,},{2,4,5,0,6,3,1,},{2,4,5,1,0,6,3,},{2,4,5,1,3,6,0,},{2,4,5,1,6,0,3,},{2,4,5,1,6,3,0,},
		{2,4,5,6,0,1,3,},{2,4,5,6,0,3,1,},{2,4,5,6,1,0,3,},{2,4,5,6,1,3,0,},{2,4,5,6,3,0,1,},{2,4,5,6,3,1,0,},{2,4,6,0,1,3,5,},{2,4,6,0,3,1,5,},{2,4,6,0,5,1,3,},{2,4,6,0,5,3,1,},
		{2,4,6,1,0,3,5,},{2,4,6,1,3,0,5,},{2,4,6,1,5,0,3,},{2,4,6,1,5,3,0,},{2,4,6,5,0,1,3,},{2,4,6,5,0,3,1,},{2,4,6,5,1,0,3,},{2,4,6,5,1,3,0,},{2,4,6,5,3,0,1,},{2,4,6,5,3,1,0,},
		{2,5,0,1,3,6,4,},{2,5,0,1,6,3,4,},{2,5,0,1,6,4,3,},{2,5,0,4,1,6,3,},{2,5,0,4,3,6,1,},{2,5,0,4,6,1,3,},{2,5,0,4,6,3,1,},{2,5,0,6,1,3,4,},{2,5,0,6,1,4,3,},{2,5,0,6,3,1,4,},
		{2,5,0,6,3,4,1,},{2,5,1,0,3,6,4,},{2,5,1,0,6,3,4,},{2,5,1,0,6,4,3,},{2,5,1,4,0,6,3,},{2,5,1,4,3,6,0,},{2,5,1,4,6,0,3,},{2,5,1,4,6,3,0,},{2,5,1,6,0,3,4,},{2,5,1,6,0,4,3,},
		{2,5,1,6,3,0,4,},{2,5,1,6,3,4,0,},{2,5,3,0,1,6,4,},{2,5,3,0,6,1,4,},{2,5,3,0,6,4,1,},{2,5,3,1,0,6,4,},{2,5,3,1,6,0,4,},{2,5,3,1,6,4,0,},{2,5,3,4,0,6,1,},{2,5,3,4,1,6,0,},
		{2,5,3,4,6,0,1,},{2,5,3,4,6,1,0,},{2,5,3,6,0,1,4,},{2,5,3,6,0,4,1,},{2,5,3,6,1,0,4,},{2,5,3,6,1,4,0,},{2,5,4,0,1,6,3,},{2,5,4,0,3,6,1,},{2,5,4,0,6,1,3,},{2,5,4,0,6,3,1,},
		{2,5,4,1,0,6,3,},{2,5,4,1,3,6,0,},{2,5,4,1,6,0,3,},{2,5,4,1,6,3,0,},{2,5,4,6,0,1,3,},{2,5,4,6,0,3,1,},{2,5,4,6,1,0,3,},{2,5,4,6,1,3,0,},{2,5,4,6,3,0,1,},{2,5,4,6,3,1,0,},
		{2,5,6,0,1,3,4,},{2,5,6,0,1,4,3,},{2,5,6,0,3,1,4,},{2,5,6,0,3,4,1,},{2,5,6,1,0,3,4,},{2,5,6,1,0,4,3,},{2,5,6,1,3,0,4,},{2,5,6,1,3,4,0,},{2,5,6,4,0,1,3,},{2,5,6,4,0,3,1,},
		{2,5,6,4,1,0,3,},{2,5,6,4,1,3,0,},{2,5,6,4,3,0,1,},{2,5,6,4,3,1,0,},{2,6,0,1,3,4,5,},{2,6,0,1,5,3,4,},{2,6,0,1,5,4,3,},{2,6,0,4,1,3,5,},{2,6,0,4,3,1,5,},{2,6,0,4,5,1,3,},
		{2,6,0,4,5,3,1,},{2,6,0,5,1,3,4,},{2,6,0,5,1,4,3,},{2,6,0,5,3,1,4,},{2,6,0,5,3,4,1,},{2,6,1,0,3,4,5,},{2,6,1,0,5,3,4,},{2,6,1,0,5,4,3,},{2,6,1,4,0,3,5,},{2,6,1,4,3,0,5,},
		{2,6,1,4,5,0,3,},{2,6,1,4,5,3,0,},{2,6,1,5,0,3,4,},{2,6,1,5,0,4,3,},{2,6,1,5,3,0,4,},{2,6,1,5,3,4,0,},{2,6,3,0,1,4,5,},{2,6,3,0,5,1,4,},{2,6,3,0,5,4,1,},{2,6,3,1,0,4,5,},
		{2,6,3,1,5,0,4,},{2,6,3,1,5,4,0,},{2,6,3,4,0,1,5,},{2,6,3,4,1,0,5,},{2,6,3,4,5,0,1,},{2,6,3,4,5,1,0,},{2,6,3,5,0,1,4,},{2,6,3,5,0,4,1,},{2,6,3,5,1,0,4,},{2,6,3,5,1,4,0,},
		{2,6,4,0,1,3,5,},{2,6,4,0,3,1,5,},{2,6,4,0,5,1,3,},{2,6,4,0,5,3,1,},{2,6,4,1,0,3,5,},{2,6,4,1,3,0,5,},{2,6,4,1,5,0,3,},{2,6,4,1,5,3,0,},{2,6,4,5,0,1,3,},{2,6,4,5,0,3,1,},
		{2,6,4,5,1,0,3,},{2,6,4,5,1,3,0,},{2,6,4,5,3,0,1,},{2,6,4,5,3,1,0,},{2,6,5,0,1,3,4,},{2,6,5,0,1,4,3,},{2,6,5,0,3,1,4,},{2,6,5,0,3,4,1,},{2,6,5,1,0,3,4,},{2,6,5,1,0,4,3,},
		{2,6,5,1,3,0,4,},{2,6,5,1,3,4,0,},{2,6,5,4,0,1,3,},{2,6,5,4,0,3,1,},{2,6,5,4,1,0,3,},{2,6,5,4,1,3,0,},{2,6,5,4,3,0,1,},{2,6,5,4,3,1,0,},{3,0,1,2,5,6,4,},{3,0,1,2,6,4,5,},
		{3,0,1,4,2,6,5,},{3,0,1,4,5,6,2,},{3,0,1,4,6,2,5,},{3,0,1,5,2,6,4,},{3,0,1,5,6,2,4,},{3,0,1,5,6,4,2,},{3,0,1,6,2,4,5,},{3,0,1,6,5,2,4,},{3,0,1,6,5,4,2,},{3,0,4,1,2,6,5,},
		{3,0,4,1,5,6,2,},{3,0,4,1,6,2,5,},{3,0,4,2,1,6,5,},{3,0,4,2,5,6,1,},{3,0,4,2,6,1,5,},{3,0,4,5,1,6,2,},{3,0,4,5,2,6,1,},{3,0,4,5,6,1,2,},{3,0,4,5,6,2,1,},{3,0,4,6,1,2,5,},
		{3,0,4,6,2,1,5,},{3,0,4,6,5,1,2,},{3,0,4,6,5,2,1,},{3,0,5,1,2,6,4,},{3,0,5,1,6,2,4,},{3,0,5,1,6,4,2,},{3,0,5,2,1,6,4,},{3,0,5,2,6,1,4,},{3,0,5,2,6,4,1,},{3,0,5,4,1,6,2,},
		{3,0,5,4,2,6,1,},{3,0,5,4,6,1,2,},{3,0,5,4,6,2,1,},{3,0,5,6,1,2,4,},{3,0,5,6,1,4,2,},{3,0,5,6,2,1,4,},{3,0,5,6,2,4,1,},{3,0,6,1,2,4,5,},{3,0,6,1,5,2,4,},{3,0,6,1,5,4,2,},
		{3,0,6,2,1,4,5,},{3,0,6,2,5,1,4,},{3,0,6,2,5,4,1,},{3,0,6,4,1,2,5,},{3,0,6,4,2,1,5,},{3,0,6,4,5,1,2,},{3,0,6,4,5,2,1,},{3,0,6,5,1,2,4,},{3,0,6,5,1,4,2,},{3,0,6,5,2,1,4,},
		{3,0,6,5,2,4,1,},{3,2,0,1,5,6,4,},{3,2,0,1,6,4,5,},{3,2,0,4,1,6,5,},{3,2,0,4,5,6,1,},{3,2,0,4,6,1,5,},{3,2,0,5,1,6,4,},{3,2,0,5,6,1,4,},{3,2,0,5,6,4,1,},{3,2,0,6,1,4,5,},
		{3,2,0,6,5,1,4,},{3,2,0,6,5,4,1,},{3,2,1,0,5,6,4,},{3,2,1,0,6,4,5,},{3,2,1,4,0,6,5,},{3,2,1,4,5,6,0,},{3,2,1,4,6,0,5,},{3,2,1,5,0,6,4,},{3,2,1,5,6,0,4,},{3,2,1,5,6,4,0,},
		{3,2,1,6,0,4,5,},{3,2,1,6,5,0,4,},{3,2,1,6,5,4,0,},{3,2,4,0,1,6,5,},{3,2,4,0,5,6,1,},{3,2,4,0,6,1,5,},{3,2,4,1,0,6,5,},{3,2,4,1,5,6,0,},{3,2,4,1,6,0,5,},{3,2,4,5,0,6,1,},
		{3,2,4,5,1,6,0,},{3,2,4,5,6,0,1,},{3,2,4,5,6,1,0,},{3,2,4,6,0,1,5,},{3,2,4,6,1,0,5,},{3,2,4,6,5,0,1,},{3,2,4,6,5,1,0,},{3,2,5,0,1,6,4,},{3,2,5,0,6,1,4,},{3,2,5,0,6,4,1,},
		{3,2,5,1,0,6,4,},{3,2,5,1,6,0,4,},{3,2,5,1,6,4,0,},{3,2,5,4,0,6,1,},{3,2,5,4,1,6,0,},{3,2,5,4,6,0,1,},{3,2,5,4,6,1,0,},{3,2,5,6,0,1,4,},{3,2,5,6,0,4,1,},{3,2,5,6,1,0,4,},
		{3,2,5,6,1,4,0,},{3,2,6,0,1,4,5,},{3,2,6,0,5,1,4,},{3,2,6,0,5,4,1,},{3,2,6,1,0,4,5,},{3,2,6,1,5,0,4,},{3,2,6,1,5,4,0,},{3,2,6,4,0,1,5,},{3,2,6,4,1,0,5,},{3,2,6,4,5,0,1,},
		{3,2,6,4,5,1,0,},{3,2,6,5,0,1,4,},{3,2,6,5,0,4,1,},{3,2,6,5,1,0,4,},{3,2,6,5,1,4,0,},{3,4,0,1,2,6,5,},{3,4,0,1,5,6,2,},{3,4,0,1,6,2,5,},{3,4,0,2,1,6,5,},{3,4,0,2,5,6,1,},
		{3,4,0,2,6,1,5,},{3,4,0,5,1,6,2,},{3,4,0,5,2,6,1,},{3,4,0,5,6,1,2,},{3,4,0,5,6,2,1,},{3,4,0,6,1,2,5,},{3,4,0,6,2,1,5,},{3,4,0,6,5,1,2,},{3,4,0,6,5,2,1,},{3,4,1,0,2,6,5,},
		{3,4,1,0,5,6,2,},{3,4,1,0,6,2,5,},{3,4,1,2,0,6,5,},{3,4,1,2,5,6,0,},{3,4,1,2,6,0,5,},{3,4,1,5,0,6,2,},{3,4,1,5,2,6,0,},{3,4,1,5,6,0,2,},{3,4,1,5,6,2,0,},{3,4,1,6,0,2,5,},
		{3,4,1,6,2,0,5,},{3,4,1,6,5,0,2,},{3,4,1,6,5,2,0,},{3,4,5,0,1,6,2,},{3,4,5,0,2,6,1,},{3,4,5,0,6,1,2,},{3,4,5,0,6,2,1,},{3,4,5,1,0,6,2,},{3,4,5,1,2,6,0,},{3,4,5,1,6,0,2,},
		{3,4,5,1,6,2,0,},{3,4,5,2,0,6,1,},{3,4,5,2,1,6,0,},{3,4,5,2,6,0,1,},{3,4,5,2,6,1,0,},{3,4,5,6,0,1,2,},{3,4,5,6,0,2,1,},{3,4,5,6,1,0,2,},{3,4,5,6,1,2,0,},{3,4,5,6,2,0,1,},
		{3,4,5,6,2,1,0,},{3,4,6,0,1,2,5,},{3,4,6,0,2,1,5,},{3,4,6,0,5,1,2,},{3,4,6,0,5,2,1,},{3,4,6,1,0,2,5,},{3,4,6,1,2,0,5,},{3,4,6,1,5,0,2,},{3,4,6,1,5,2,0,},{3,4,6,2,0,1,5,},
		{3,4,6,2,1,0,5,},{3,4,6,2,5,0,1,},{3,4,6,2,5,1,0,},{3,4,6,5,0,1,2,},{3,4,6,5,0,2,1,},{3,4,6,5,1,0,2,},{3,4,6,5,1,2,0,},{3,4,6,5,2,0,1,},{3,4,6,5,2,1,0,},{3,5,0,1,2,6,4,},
		{3,5,0,1,6,2,4,},{3,5,0,1,6,4,2,},{3,5,0,2,1,6,4,},{3,5,0,2,6,1,4,},{3,5,0,2,6,4,1,},{3,5,0,4,1,6,2,},{3,5,0,4,2,6,1,},{3,5,0,4,6,1,2,},{3,5,0,4,6,2,1,},{3,5,0,6,1,2,4,},
		{3,5,0,6,1,4,2,},{3,5,0,6,2,1,4,},{3,5,0,6,2,4,1,},{3,5,1,0,2,6,4,},{3,5,1,0,6,2,4,},{3,5,1,0,6,4,2,},{3,5,1,2,0,6,4,},{3,5,1,2,6,0,4,},{3,5,1,2,6,4,0,},{3,5,1,4,0,6,2,},
		{3,5,1,4,2,6,0,},{3,5,1,4,6,0,2,},{3,5,1,4,6,2,0,},{3,5,1,6,0,2,4,},{3,5,1,6,0,4,2,},{3,5,1,6,2,0,4,},{3,5,1,6,2,4,0,},{3,5,4,0,1,6,2,},{3,5,4,0,2,6,1,},{3,5,4,0,6,1,2,},
		{3,5,4,0,6,2,1,},{3,5,4,1,0,6,2,},{3,5,4,1,2,6,0,},{3,5,4,1,6,0,2,},{3,5,4,1,6,2,0,},{3,5,4,2,0,6,1,},{3,5,4,2,1,6,0,},{3,5,4,2,6,0,1,},{3,5,4,2,6,1,0,},{3,5,4,6,0,1,2,},
		{3,5,4,6,0,2,1,},{3,5,4,6,1,0,2,},{3,5,4,6,1,2,0,},{3,5,4,6,2,0,1,},{3,5,4,6,2,1,0,},{3,5,6,0,1,2,4,},{3,5,6,0,1,4,2,},{3,5,6,0,2,1,4,},{3,5,6,0,2,4,1,},{3,5,6,1,0,2,4,},
		{3,5,6,1,0,4,2,},{3,5,6,1,2,0,4,},{3,5,6,1,2,4,0,},{3,5,6,2,0,1,4,},{3,5,6,2,0,4,1,},{3,5,6,2,1,0,4,},{3,5,6,2,1,4,0,},{3,5,6,4,0,1,2,},{3,5,6,4,0,2,1,},{3,5,6,4,1,0,2,},
		{3,5,6,4,1,2,0,},{3,5,6,4,2,0,1,},{3,5,6,4,2,1,0,},{3,6,0,1,2,4,5,},{3,6,0,1,5,2,4,},{3,6,0,1,5,4,2,},{3,6,0,2,1,4,5,},{3,6,0,2,5,1,4,},{3,6,0,2,5,4,1,},{3,6,0,4,1,2,5,},
		{3,6,0,4,2,1,5,},{3,6,0,4,5,1,2,},{3,6,0,4,5,2,1,},{3,6,0,5,1,2,4,},{3,6,0,5,1,4,2,},{3,6,0,5,2,1,4,},{3,6,0,5,2,4,1,},{3,6,1,0,2,4,5,},{3,6,1,0,5,2,4,},{3,6,1,0,5,4,2,},
		{3,6,1,2,0,4,5,},{3,6,1,2,5,0,4,},{3,6,1,2,5,4,0,},{3,6,1,4,0,2,5,},{3,6,1,4,2,0,5,},{3,6,1,4,5,0,2,},{3,6,1,4,5,2,0,},{3,6,1,5,0,2,4,},{3,6,1,5,0,4,2,},{3,6,1,5,2,0,4,},
		{3,6,1,5,2,4,0,},{3,6,4,0,1,2,5,},{3,6,4,0,2,1,5,},{3,6,4,0,5,1,2,},{3,6,4,0,5,2,1,},{3,6,4,1,0,2,5,},{3,6,4,1,2,0,5,},{3,6,4,1,5,0,2,},{3,6,4,1,5,2,0,},{3,6,4,2,0,1,5,},
		{3,6,4,2,1,0,5,},{3,6,4,2,5,0,1,},{3,6,4,2,5,1,0,},{3,6,4,5,0,1,2,},{3,6,4,5,0,2,1,},{3,6,4,5,1,0,2,},{3,6,4,5,1,2,0,},{3,6,4,5,2,0,1,},{3,6,4,5,2,1,0,},{3,6,5,0,1,2,4,},
		{3,6,5,0,1,4,2,},{3,6,5,0,2,1,4,},{3,6,5,0,2,4,1,},{3,6,5,1,0,2,4,},{3,6,5,1,0,4,2,},{3,6,5,1,2,0,4,},{3,6,5,1,2,4,0,},{3,6,5,2,0,1,4,},{3,6,5,2,0,4,1,},{3,6,5,2,1,0,4,},
		{3,6,5,2,1,4,0,},{3,6,5,4,0,1,2,},{3,6,5,4,0,2,1,},{3,6,5,4,1,0,2,},{3,6,5,4,1,2,0,},{3,6,5,4,2,0,1,},{3,6,5,4,2,1,0,},{4,0,1,2,3,6,5,},{4,0,1,2,5,6,3,},{4,0,1,2,6,3,5,},
		{4,0,1,5,2,6,3,},{4,0,1,5,3,6,2,},{4,0,1,5,6,2,3,},{4,0,1,5,6,3,2,},{4,0,1,6,2,3,5,},{4,0,1,6,3,2,5,},{4,0,1,6,5,2,3,},{4,0,1,6,5,3,2,},{4,0,3,1,2,6,5,},{4,0,3,1,5,6,2,},
		{4,0,3,1,6,2,5,},{4,0,3,2,1,6,5,},{4,0,3,2,5,6,1,},{4,0,3,2,6,1,5,},{4,0,3,5,1,6,2,},{4,0,3,5,2,6,1,},{4,0,3,5,6,1,2,},{4,0,3,5,6,2,1,},{4,0,3,6,1,2,5,},{4,0,3,6,2,1,5,},
		{4,0,3,6,5,1,2,},{4,0,3,6,5,2,1,},{4,0,5,1,2,6,3,},{4,0,5,1,3,6,2,},{4,0,5,1,6,2,3,},{4,0,5,1,6,3,2,},{4,0,5,2,1,6,3,},{4,0,5,2,3,6,1,},{4,0,5,2,6,1,3,},{4,0,5,2,6,3,1,},
		{4,0,5,6,1,2,3,},{4,0,5,6,1,3,2,},{4,0,5,6,2,1,3,},{4,0,5,6,2,3,1,},{4,0,5,6,3,1,2,},{4,0,5,6,3,2,1,},{4,0,6,1,2,3,5,},{4,0,6,1,3,2,5,},{4,0,6,1,5,2,3,},{4,0,6,1,5,3,2,},
		{4,0,6,2,1,3,5,},{4,0,6,2,3,1,5,},{4,0,6,2,5,1,3,},{4,0,6,2,5,3,1,},{4,0,6,5,1,2,3,},{4,0,6,5,1,3,2,},{4,0,6,5,2,1,3,},{4,0,6,5,2,3,1,},{4,0,6,5,3,1,2,},{4,0,6,5,3,2,1,},
		{4,2,0,1,3,6,5,},{4,2,0,1,5,6,3,},{4,2,0,1,6,3,5,},{4,2,0,5,1,6,3,},{4,2,0,5,3,6,1,},{4,2,0,5,6,1,3,},{4,2,0,5,6,3,1,},{4,2,0,6,1,3,5,},{4,2,0,6,3,1,5,},{4,2,0,6,5,1,3,},
		{4,2,0,6,5,3,1,},{4,2,1,0,3,6,5,},{4,2,1,0,5,6,3,},{4,2,1,0,6,3,5,},{4,2,1,5,0,6,3,},{4,2,1,5,3,6,0,},{4,2,1,5,6,0,3,},{4,2,1,5,6,3,0,},{4,2,1,6,0,3,5,},{4,2,1,6,3,0,5,},
		{4,2,1,6,5,0,3,},{4,2,1,6,5,3,0,},{4,2,3,0,1,6,5,},{4,2,3,0,5,6,1,},{4,2,3,0,6,1,5,},{4,2,3,1,0,6,5,},{4,2,3,1,5,6,0,},{4,2,3,1,6,0,5,},{4,2,3,5,0,6,1,},{4,2,3,5,1,6,0,},
		{4,2,3,5,6,0,1,},{4,2,3,5,6,1,0,},{4,2,3,6,0,1,5,},{4,2,3,6,1,0,5,},{4,2,3,6,5,0,1,},{4,2,3,6,5,1,0,},{4,2,5,0,1,6,3,},{4,2,5,0,3,6,1,},{4,2,5,0,6,1,3,},{4,2,5,0,6,3,1,},
		{4,2,5,1,0,6,3,},{4,2,5,1,3,6,0,},{4,2,5,1,6,0,3,},{4,2,5,1,6,3,0,},{4,2,5,6,0,1,3,},{4,2,5,6,0,3,1,},{4,2,5,6,1,0,3,},{4,2,5,6,1,3,0,},{4,2,5,6,3,0,1,},{4,2,5,6,3,1,0,},
		{4,2,6,0,1,3,5,},{4,2,6,0,3,1,5,},{4,2,6,0,5,1,3,},{4,2,6,0,5,3,1,},{4,2,6,1,0,3,5,},{4,2,6,1,3,0,5,},{4,2,6,1,5,0,3,},{4,2,6,1,5,3,0,},{4,2,6,5,0,1,3,},{4,2,6,5,0,3,1,},
		{4,2,6,5,1,0,3,},{4,2,6,5,1,3,0,},{4,2,6,5,3,0,1,},{4,2,6,5,3,1,0,},{4,3,0,1,2,6,5,},{4,3,0,1,5,6,2,},{4,3,0,1,6,2,5,},{4,3,0,2,1,6,5,},{4,3,0,2,5,6,1,},{4,3,0,2,6,1,5,},
		{4,3,0,5,1,6,2,},{4,3,0,5,2,6,1,},{4,3,0,5,6,1,2,},{4,3,0,5,6,2,1,},{4,3,0,6,1,2,5,},{4,3,0,6,2,1,5,},{4,3,0,6,5,1,2,},{4,3,0,6,5,2,1,},{4,3,1,0,2,6,5,},{4,3,1,0,5,6,2,},
		{4,3,1,0,6,2,5,},{4,3,1,2,0,6,5,},{4,3,1,2,5,6,0,},{4,3,1,2,6,0,5,},{4,3,1,5,0,6,2,},{4,3,1,5,2,6,0,},{4,3,1,5,6,0,2,},{4,3,1,5,6,2,0,},{4,3,1,6,0,2,5,},{4,3,1,6,2,0,5,},
		{4,3,1,6,5,0,2,},{4,3,1,6,5,2,0,},{4,3,5,0,1,6,2,},{4,3,5,0,2,6,1,},{4,3,5,0,6,1,2,},{4,3,5,0,6,2,1,},{4,3,5,1,0,6,2,},{4,3,5,1,2,6,0,},{4,3,5,1,6,0,2,},{4,3,5,1,6,2,0,},
		{4,3,5,2,0,6,1,},{4,3,5,2,1,6,0,},{4,3,5,2,6,0,1,},{4,3,5,2,6,1,0,},{4,3,5,6,0,1,2,},{4,3,5,6,0,2,1,},{4,3,5,6,1,0,2,},{4,3,5,6,1,2,0,},{4,3,5,6,2,0,1,},{4,3,5,6,2,1,0,},
		{4,3,6,0,1,2,5,},{4,3,6,0,2,1,5,},{4,3,6,0,5,1,2,},{4,3,6,0,5,2,1,},{4,3,6,1,0,2,5,},{4,3,6,1,2,0,5,},{4,3,6,1,5,0,2,},{4,3,6,1,5,2,0,},{4,3,6,2,0,1,5,},{4,3,6,2,1,0,5,},
		{4,3,6,2,5,0,1,},{4,3,6,2,5,1,0,},{4,3,6,5,0,1,2,},{4,3,6,5,0,2,1,},{4,3,6,5,1,0,2,},{4,3,6,5,1,2,0,},{4,3,6,5,2,0,1,},{4,3,6,5,2,1,0,},{4,5,0,1,2,6,3,},{4,5,0,1,3,6,2,},
		{4,5,0,1,6,2,3,},{4,5,0,1,6,3,2,},{4,5,0,2,1,6,3,},{4,5,0,2,3,6,1,},{4,5,0,2,6,1,3,},{4,5,0,2,6,3,1,},{4,5,0,6,1,2,3,},{4,5,0,6,1,3,2,},{4,5,0,6,2,1,3,},{4,5,0,6,2,3,1,},
		{4,5,0,6,3,1,2,},{4,5,0,6,3,2,1,},{4,5,1,0,2,6,3,},{4,5,1,0,3,6,2,},{4,5,1,0,6,2,3,},{4,5,1,0,6,3,2,},{4,5,1,2,0,6,3,},{4,5,1,2,3,6,0,},{4,5,1,2,6,0,3,},{4,5,1,2,6,3,0,},
		{4,5,1,6,0,2,3,},{4,5,1,6,0,3,2,},{4,5,1,6,2,0,3,},{4,5,1,6,2,3,0,},{4,5,1,6,3,0,2,},{4,5,1,6,3,2,0,},{4,5,3,0,1,6,2,},{4,5,3,0,2,6,1,},{4,5,3,0,6,1,2,},{4,5,3,0,6,2,1,},
		{4,5,3,1,0,6,2,},{4,5,3,1,2,6,0,},{4,5,3,1,6,0,2,},{4,5,3,1,6,2,0,},{4,5,3,2,0,6,1,},{4,5,3,2,1,6,0,},{4,5,3,2,6,0,1,},{4,5,3,2,6,1,0,},{4,5,3,6,0,1,2,},{4,5,3,6,0,2,1,},
		{4,5,3,6,1,0,2,},{4,5,3,6,1,2,0,},{4,5,3,6,2,0,1,},{4,5,3,6,2,1,0,},{4,5,6,0,1,2,3,},{4,5,6,0,1,3,2,},{4,5,6,0,2,1,3,},{4,5,6,0,2,3,1,},{4,5,6,0,3,1,2,},{4,5,6,0,3,2,1,},
		{4,5,6,1,0,2,3,},{4,5,6,1,0,3,2,},{4,5,6,1,2,0,3,},{4,5,6,1,2,3,0,},{4,5,6,1,3,0,2,},{4,5,6,1,3,2,0,},{4,5,6,2,0,1,3,},{4,5,6,2,0,3,1,},{4,5,6,2,1,0,3,},{4,5,6,2,1,3,0,},
		{4,5,6,2,3,0,1,},{4,5,6,2,3,1,0,},{4,6,0,1,2,3,5,},{4,6,0,1,3,2,5,},{4,6,0,1,5,2,3,},{4,6,0,1,5,3,2,},{4,6,0,2,1,3,5,},{4,6,0,2,3,1,5,},{4,6,0,2,5,1,3,},{4,6,0,2,5,3,1,},
		{4,6,0,5,1,2,3,},{4,6,0,5,1,3,2,},{4,6,0,5,2,1,3,},{4,6,0,5,2,3,1,},{4,6,0,5,3,1,2,},{4,6,0,5,3,2,1,},{4,6,1,0,2,3,5,},{4,6,1,0,3,2,5,},{4,6,1,0,5,2,3,},{4,6,1,0,5,3,2,},
		{4,6,1,2,0,3,5,},{4,6,1,2,3,0,5,},{4,6,1,2,5,0,3,},{4,6,1,2,5,3,0,},{4,6,1,5,0,2,3,},{4,6,1,5,0,3,2,},{4,6,1,5,2,0,3,},{4,6,1,5,2,3,0,},{4,6,1,5,3,0,2,},{4,6,1,5,3,2,0,},
		{4,6,3,0,1,2,5,},{4,6,3,0,2,1,5,},{4,6,3,0,5,1,2,},{4,6,3,0,5,2,1,},{4,6,3,1,0,2,5,},{4,6,3,1,2,0,5,},{4,6,3,1,5,0,2,},{4,6,3,1,5,2,0,},{4,6,3,2,0,1,5,},{4,6,3,2,1,0,5,},
		{4,6,3,2,5,0,1,},{4,6,3,2,5,1,0,},{4,6,3,5,0,1,2,},{4,6,3,5,0,2,1,},{4,6,3,5,1,0,2,},{4,6,3,5,1,2,0,},{4,6,3,5,2,0,1,},{4,6,3,5,2,1,0,},{4,6,5,0,1,2,3,},{4,6,5,0,1,3,2,},
		{4,6,5,0,2,1,3,},{4,6,5,0,2,3,1,},{4,6,5,0,3,1,2,},{4,6,5,0,3,2,1,},{4,6,5,1,0,2,3,},{4,6,5,1,0,3,2,},{4,6,5,1,2,0,3,},{4,6,5,1,2,3,0,},{4,6,5,1,3,0,2,},{4,6,5,1,3,2,0,},
		{4,6,5,2,0,1,3,},{4,6,5,2,0,3,1,},{4,6,5,2,1,0,3,},{4,6,5,2,1,3,0,},{4,6,5,2,3,0,1,},{4,6,5,2,3,1,0,},{5,0,1,2,3,6,4,},{5,0,1,2,6,3,4,},{5,0,1,2,6,4,3,},{5,0,1,4,2,6,3,},
		{5,0,1,4,3,6,2,},{5,0,1,4,6,2,3,},{5,0,1,4,6,3,2,},{5,0,1,6,2,3,4,},{5,0,1,6,2,4,3,},{5,0,1,6,3,2,4,},{5,0,1,6,3,4,2,},{5,0,3,1,2,6,4,},{5,0,3,1,6,2,4,},{5,0,3,1,6,4,2,},
		{5,0,3,2,1,6,4,},{5,0,3,2,6,1,4,},{5,0,3,2,6,4,1,},{5,0,3,4,1,6,2,},{5,0,3,4,2,6,1,},{5,0,3,4,6,1,2,},{5,0,3,4,6,2,1,},{5,0,3,6,1,2,4,},{5,0,3,6,1,4,2,},{5,0,3,6,2,1,4,},
		{5,0,3,6,2,4,1,},{5,0,4,1,2,6,3,},{5,0,4,1,3,6,2,},{5,0,4,1,6,2,3,},{5,0,4,1,6,3,2,},{5,0,4,2,1,6,3,},{5,0,4,2,3,6,1,},{5,0,4,2,6,1,3,},{5,0,4,2,6,3,1,},{5,0,4,6,1,2,3,},
		{5,0,4,6,1,3,2,},{5,0,4,6,2,1,3,},{5,0,4,6,2,3,1,},{5,0,4,6,3,1,2,},{5,0,4,6,3,2,1,},{5,0,6,1,2,3,4,},{5,0,6,1,2,4,3,},{5,0,6,1,3,2,4,},{5,0,6,1,3,4,2,},{5,0,6,2,1,3,4,},
		{5,0,6,2,1,4,3,},{5,0,6,2,3,1,4,},{5,0,6,2,3,4,1,},{5,0,6,4,1,2,3,},{5,0,6,4,1,3,2,},{5,0,6,4,2,1,3,},{5,0,6,4,2,3,1,},{5,0,6,4,3,1,2,},{5,0,6,4,3,2,1,},{5,2,0,1,3,6,4,},
		{5,2,0,1,6,3,4,},{5,2,0,1,6,4,3,},{5,2,0,4,1,6,3,},{5,2,0,4,3,6,1,},{5,2,0,4,6,1,3,},{5,2,0,4,6,3,1,},{5,2,0,6,1,3,4,},{5,2,0,6,1,4,3,},{5,2,0,6,3,1,4,},{5,2,0,6,3,4,1,},
		{5,2,1,0,3,6,4,},{5,2,1,0,6,3,4,},{5,2,1,0,6,4,3,},{5,2,1,4,0,6,3,},{5,2,1,4,3,6,0,},{5,2,1,4,6,0,3,},{5,2,1,4,6,3,0,},{5,2,1,6,0,3,4,},{5,2,1,6,0,4,3,},{5,2,1,6,3,0,4,},
		{5,2,1,6,3,4,0,},{5,2,3,0,1,6,4,},{5,2,3,0,6,1,4,},{5,2,3,0,6,4,1,},{5,2,3,1,0,6,4,},{5,2,3,1,6,0,4,},{5,2,3,1,6,4,0,},{5,2,3,4,0,6,1,},{5,2,3,4,1,6,0,},{5,2,3,4,6,0,1,},
		{5,2,3,4,6,1,0,},{5,2,3,6,0,1,4,},{5,2,3,6,0,4,1,},{5,2,3,6,1,0,4,},{5,2,3,6,1,4,0,},{5,2,4,0,1,6,3,},{5,2,4,0,3,6,1,},{5,2,4,0,6,1,3,},{5,2,4,0,6,3,1,},{5,2,4,1,0,6,3,},
		{5,2,4,1,3,6,0,},{5,2,4,1,6,0,3,},{5,2,4,1,6,3,0,},{5,2,4,6,0,1,3,},{5,2,4,6,0,3,1,},{5,2,4,6,1,0,3,},{5,2,4,6,1,3,0,},{5,2,4,6,3,0,1,},{5,2,4,6,3,1,0,},{5,2,6,0,1,3,4,},
		{5,2,6,0,1,4,3,},{5,2,6,0,3,1,4,},{5,2,6,0,3,4,1,},{5,2,6,1,0,3,4,},{5,2,6,1,0,4,3,},{5,2,6,1,3,0,4,},{5,2,6,1,3,4,0,},{5,2,6,4,0,1,3,},{5,2,6,4,0,3,1,},{5,2,6,4,1,0,3,},
		{5,2,6,4,1,3,0,},{5,2,6,4,3,0,1,},{5,2,6,4,3,1,0,},{5,3,0,1,2,6,4,},{5,3,0,1,6,2,4,},{5,3,0,1,6,4,2,},{5,3,0,2,1,6,4,},{5,3,0,2,6,1,4,},{5,3,0,2,6,4,1,},{5,3,0,4,1,6,2,},
		{5,3,0,4,2,6,1,},{5,3,0,4,6,1,2,},{5,3,0,4,6,2,1,},{5,3,0,6,1,2,4,},{5,3,0,6,1,4,2,},{5,3,0,6,2,1,4,},{5,3,0,6,2,4,1,},{5,3,1,0,2,6,4,},{5,3,1,0,6,2,4,},{5,3,1,0,6,4,2,},
		{5,3,1,2,0,6,4,},{5,3,1,2,6,0,4,},{5,3,1,2,6,4,0,},{5,3,1,4,0,6,2,},{5,3,1,4,2,6,0,},{5,3,1,4,6,0,2,},{5,3,1,4,6,2,0,},{5,3,1,6,0,2,4,},{5,3,1,6,0,4,2,},{5,3,1,6,2,0,4,},
		{5,3,1,6,2,4,0,},{5,3,4,0,1,6,2,},{5,3,4,0,2,6,1,},{5,3,4,0,6,1,2,},{5,3,4,0,6,2,1,},{5,3,4,1,0,6,2,},{5,3,4,1,2,6,0,},{5,3,4,1,6,0,2,},{5,3,4,1,6,2,0,},{5,3,4,2,0,6,1,},
		{5,3,4,2,1,6,0,},{5,3,4,2,6,0,1,},{5,3,4,2,6,1,0,},{5,3,4,6,0,1,2,},{5,3,4,6,0,2,1,},{5,3,4,6,1,0,2,},{5,3,4,6,1,2,0,},{5,3,4,6,2,0,1,},{5,3,4,6,2,1,0,},{5,3,6,0,1,2,4,},
		{5,3,6,0,1,4,2,},{5,3,6,0,2,1,4,},{5,3,6,0,2,4,1,},{5,3,6,1,0,2,4,},{5,3,6,1,0,4,2,},{5,3,6,1,2,0,4,},{5,3,6,1,2,4,0,},{5,3,6,2,0,1,4,},{5,3,6,2,0,4,1,},{5,3,6,2,1,0,4,},
		{5,3,6,2,1,4,0,},{5,3,6,4,0,1,2,},{5,3,6,4,0,2,1,},{5,3,6,4,1,0,2,},{5,3,6,4,1,2,0,},{5,3,6,4,2,0,1,},{5,3,6,4,2,1,0,},{5,4,0,1,2,6,3,},{5,4,0,1,3,6,2,},{5,4,0,1,6,2,3,},
		{5,4,0,1,6,3,2,},{5,4,0,2,1,6,3,},{5,4,0,2,3,6,1,},{5,4,0,2,6,1,3,},{5,4,0,2,6,3,1,},{5,4,0,6,1,2,3,},{5,4,0,6,1,3,2,},{5,4,0,6,2,1,3,},{5,4,0,6,2,3,1,},{5,4,0,6,3,1,2,},
		{5,4,0,6,3,2,1,},{5,4,1,0,2,6,3,},{5,4,1,0,3,6,2,},{5,4,1,0,6,2,3,},{5,4,1,0,6,3,2,},{5,4,1,2,0,6,3,},{5,4,1,2,3,6,0,},{5,4,1,2,6,0,3,},{5,4,1,2,6,3,0,},{5,4,1,6,0,2,3,},
		{5,4,1,6,0,3,2,},{5,4,1,6,2,0,3,},{5,4,1,6,2,3,0,},{5,4,1,6,3,0,2,},{5,4,1,6,3,2,0,},{5,4,3,0,1,6,2,},{5,4,3,0,2,6,1,},{5,4,3,0,6,1,2,},{5,4,3,0,6,2,1,},{5,4,3,1,0,6,2,},
		{5,4,3,1,2,6,0,},{5,4,3,1,6,0,2,},{5,4,3,1,6,2,0,},{5,4,3,2,0,6,1,},{5,4,3,2,1,6,0,},{5,4,3,2,6,0,1,},{5,4,3,2,6,1,0,},{5,4,3,6,0,1,2,},{5,4,3,6,0,2,1,},{5,4,3,6,1,0,2,},
		{5,4,3,6,1,2,0,},{5,4,3,6,2,0,1,},{5,4,3,6,2,1,0,},{5,4,6,0,1,2,3,},{5,4,6,0,1,3,2,},{5,4,6,0,2,1,3,},{5,4,6,0,2,3,1,},{5,4,6,0,3,1,2,},{5,4,6,0,3,2,1,},{5,4,6,1,0,2,3,},
		{5,4,6,1,0,3,2,},{5,4,6,1,2,0,3,},{5,4,6,1,2,3,0,},{5,4,6,1,3,0,2,},{5,4,6,1,3,2,0,},{5,4,6,2,0,1,3,},{5,4,6,2,0,3,1,},{5,4,6,2,1,0,3,},{5,4,6,2,1,3,0,},{5,4,6,2,3,0,1,},
		{5,4,6,2,3,1,0,},{5,6,0,1,2,3,4,},{5,6,0,1,2,4,3,},{5,6,0,1,3,2,4,},{5,6,0,1,3,4,2,},{5,6,0,2,1,3,4,},{5,6,0,2,1,4,3,},{5,6,0,2,3,1,4,},{5,6,0,2,3,4,1,},{5,6,0,4,1,2,3,},
		{5,6,0,4,1,3,2,},{5,6,0,4,2,1,3,},{5,6,0,4,2,3,1,},{5,6,0,4,3,1,2,},{5,6,0,4,3,2,1,},{5,6,1,0,2,3,4,},{5,6,1,0,2,4,3,},{5,6,1,0,3,2,4,},{5,6,1,0,3,4,2,},{5,6,1,2,0,3,4,},
		{5,6,1,2,0,4,3,},{5,6,1,2,3,0,4,},{5,6,1,2,3,4,0,},{5,6,1,4,0,2,3,},{5,6,1,4,0,3,2,},{5,6,1,4,2,0,3,},{5,6,1,4,2,3,0,},{5,6,1,4,3,0,2,},{5,6,1,4,3,2,0,},{5,6,3,0,1,2,4,},
		{5,6,3,0,1,4,2,},{5,6,3,0,2,1,4,},{5,6,3,0,2,4,1,},{5,6,3,1,0,2,4,},{5,6,3,1,0,4,2,},{5,6,3,1,2,0,4,},{5,6,3,1,2,4,0,},{5,6,3,2,0,1,4,},{5,6,3,2,0,4,1,},{5,6,3,2,1,0,4,},
		{5,6,3,2,1,4,0,},{5,6,3,4,0,1,2,},{5,6,3,4,0,2,1,},{5,6,3,4,1,0,2,},{5,6,3,4,1,2,0,},{5,6,3,4,2,0,1,},{5,6,3,4,2,1,0,},{5,6,4,0,1,2,3,},{5,6,4,0,1,3,2,},{5,6,4,0,2,1,3,},
		{5,6,4,0,2,3,1,},{5,6,4,0,3,1,2,},{5,6,4,0,3,2,1,},{5,6,4,1,0,2,3,},{5,6,4,1,0,3,2,},{5,6,4,1,2,0,3,},{5,6,4,1,2,3,0,},{5,6,4,1,3,0,2,},{5,6,4,1,3,2,0,},{5,6,4,2,0,1,3,},
		{5,6,4,2,0,3,1,},{5,6,4,2,1,0,3,},{5,6,4,2,1,3,0,},{5,6,4,2,3,0,1,},{5,6,4,2,3,1,0,},{6,0,1,2,3,4,5,},{6,0,1,2,5,3,4,},{6,0,1,2,5,4,3,},{6,0,1,4,2,3,5,},{6,0,1,4,3,2,5,},
		{6,0,1,4,5,2,3,},{6,0,1,4,5,3,2,},{6,0,1,5,2,3,4,},{6,0,1,5,2,4,3,},{6,0,1,5,3,2,4,},{6,0,1,5,3,4,2,},{6,0,3,1,2,4,5,},{6,0,3,1,5,2,4,},{6,0,3,1,5,4,2,},{6,0,3,2,1,4,5,},
		{6,0,3,2,5,1,4,},{6,0,3,2,5,4,1,},{6,0,3,4,1,2,5,},{6,0,3,4,2,1,5,},{6,0,3,4,5,1,2,},{6,0,3,4,5,2,1,},{6,0,3,5,1,2,4,},{6,0,3,5,1,4,2,},{6,0,3,5,2,1,4,},{6,0,3,5,2,4,1,},
		{6,0,4,1,2,3,5,},{6,0,4,1,3,2,5,},{6,0,4,1,5,2,3,},{6,0,4,1,5,3,2,},{6,0,4,2,1,3,5,},{6,0,4,2,3,1,5,},{6,0,4,2,5,1,3,},{6,0,4,2,5,3,1,},{6,0,4,5,1,2,3,},{6,0,4,5,1,3,2,},
		{6,0,4,5,2,1,3,},{6,0,4,5,2,3,1,},{6,0,4,5,3,1,2,},{6,0,4,5,3,2,1,},{6,0,5,1,2,3,4,},{6,0,5,1,2,4,3,},{6,0,5,1,3,2,4,},{6,0,5,1,3,4,2,},{6,0,5,2,1,3,4,},{6,0,5,2,1,4,3,},
		{6,0,5,2,3,1,4,},{6,0,5,2,3,4,1,},{6,0,5,4,1,2,3,},{6,0,5,4,1,3,2,},{6,0,5,4,2,1,3,},{6,0,5,4,2,3,1,},{6,0,5,4,3,1,2,},{6,0,5,4,3,2,1,},{6,2,0,1,3,4,5,},{6,2,0,1,5,3,4,},
		{6,2,0,1,5,4,3,},{6,2,0,4,1,3,5,},{6,2,0,4,3,1,5,},{6,2,0,4,5,1,3,},{6,2,0,4,5,3,1,},{6,2,0,5,1,3,4,},{6,2,0,5,1,4,3,},{6,2,0,5,3,1,4,},{6,2,0,5,3,4,1,},{6,2,1,0,3,4,5,},
		{6,2,1,0,5,3,4,},{6,2,1,0,5,4,3,},{6,2,1,4,0,3,5,},{6,2,1,4,3,0,5,},{6,2,1,4,5,0,3,},{6,2,1,4,5,3,0,},{6,2,1,5,0,3,4,},{6,2,1,5,0,4,3,},{6,2,1,5,3,0,4,},{6,2,1,5,3,4,0,},
		{6,2,3,0,1,4,5,},{6,2,3,0,5,1,4,},{6,2,3,0,5,4,1,},{6,2,3,1,0,4,5,},{6,2,3,1,5,0,4,},{6,2,3,1,5,4,0,},{6,2,3,4,0,1,5,},{6,2,3,4,1,0,5,},{6,2,3,4,5,0,1,},{6,2,3,4,5,1,0,},
		{6,2,3,5,0,1,4,},{6,2,3,5,0,4,1,},{6,2,3,5,1,0,4,},{6,2,3,5,1,4,0,},{6,2,4,0,1,3,5,},{6,2,4,0,3,1,5,},{6,2,4,0,5,1,3,},{6,2,4,0,5,3,1,},{6,2,4,1,0,3,5,},{6,2,4,1,3,0,5,},
		{6,2,4,1,5,0,3,},{6,2,4,1,5,3,0,},{6,2,4,5,0,1,3,},{6,2,4,5,0,3,1,},{6,2,4,5,1,0,3,},{6,2,4,5,1,3,0,},{6,2,4,5,3,0,1,},{6,2,4,5,3,1,0,},{6,2,5,0,1,3,4,},{6,2,5,0,1,4,3,},
		{6,2,5,0,3,1,4,},{6,2,5,0,3,4,1,},{6,2,5,1,0,3,4,},{6,2,5,1,0,4,3,},{6,2,5,1,3,0,4,},{6,2,5,1,3,4,0,},{6,2,5,4,0,1,3,},{6,2,5,4,0,3,1,},{6,2,5,4,1,0,3,},{6,2,5,4,1,3,0,},
		{6,2,5,4,3,0,1,},{6,2,5,4,3,1,0,},{6,3,0,1,2,4,5,},{6,3,0,1,5,2,4,},{6,3,0,1,5,4,2,},{6,3,0,2,1,4,5,},{6,3,0,2,5,1,4,},{6,3,0,2,5,4,1,},{6,3,0,4,1,2,5,},{6,3,0,4,2,1,5,},
		{6,3,0,4,5,1,2,},{6,3,0,4,5,2,1,},{6,3,0,5,1,2,4,},{6,3,0,5,1,4,2,},{6,3,0,5,2,1,4,},{6,3,0,5,2,4,1,},{6,3,1,0,2,4,5,},{6,3,1,0,5,2,4,},{6,3,1,0,5,4,2,},{6,3,1,2,0,4,5,},
		{6,3,1,2,5,0,4,},{6,3,1,2,5,4,0,},{6,3,1,4,0,2,5,},{6,3,1,4,2,0,5,},{6,3,1,4,5,0,2,},{6,3,1,4,5,2,0,},{6,3,1,5,0,2,4,},{6,3,1,5,0,4,2,},{6,3,1,5,2,0,4,},{6,3,1,5,2,4,0,},
		{6,3,4,0,1,2,5,},{6,3,4,0,2,1,5,},{6,3,4,0,5,1,2,},{6,3,4,0,5,2,1,},{6,3,4,1,0,2,5,},{6,3,4,1,2,0,5,},{6,3,4,1,5,0,2,},{6,3,4,1,5,2,0,},{6,3,4,2,0,1,5,},{6,3,4,2,1,0,5,},
		{6,3,4,2,5,0,1,},{6,3,4,2,5,1,0,},{6,3,4,5,0,1,2,},{6,3,4,5,0,2,1,},{6,3,4,5,1,0,2,},{6,3,4,5,1,2,0,},{6,3,4,5,2,0,1,},{6,3,4,5,2,1,0,},{6,3,5,0,1,2,4,},{6,3,5,0,1,4,2,},
		{6,3,5,0,2,1,4,},{6,3,5,0,2,4,1,},{6,3,5,1,0,2,4,},{6,3,5,1,0,4,2,},{6,3,5,1,2,0,4,},{6,3,5,1,2,4,0,},{6,3,5,2,0,1,4,},{6,3,5,2,0,4,1,},{6,3,5,2,1,0,4,},{6,3,5,2,1,4,0,},
		{6,3,5,4,0,1,2,},{6,3,5,4,0,2,1,},{6,3,5,4,1,0,2,},{6,3,5,4,1,2,0,},{6,3,5,4,2,0,1,},{6,3,5,4,2,1,0,},{6,4,0,1,2,3,5,},{6,4,0,1,3,2,5,},{6,4,0,1,5,2,3,},{6,4,0,1,5,3,2,},
		{6,4,0,2,1,3,5,},{6,4,0,2,3,1,5,},{6,4,0,2,5,1,3,},{6,4,0,2,5,3,1,},{6,4,0,5,1,2,3,},{6,4,0,5,1,3,2,},{6,4,0,5,2,1,3,},{6,4,0,5,2,3,1,},{6,4,0,5,3,1,2,},{6,4,0,5,3,2,1,},
		{6,4,1,0,2,3,5,},{6,4,1,0,3,2,5,},{6,4,1,0,5,2,3,},{6,4,1,0,5,3,2,},{6,4,1,2,0,3,5,},{6,4,1,2,3,0,5,},{6,4,1,2,5,0,3,},{6,4,1,2,5,3,0,},{6,4,1,5,0,2,3,},{6,4,1,5,0,3,2,},
		{6,4,1,5,2,0,3,},{6,4,1,5,2,3,0,},{6,4,1,5,3,0,2,},{6,4,1,5,3,2,0,},{6,4,3,0,1,2,5,},{6,4,3,0,2,1,5,},{6,4,3,0,5,1,2,},{6,4,3,0,5,2,1,},{6,4,3,1,0,2,5,},{6,4,3,1,2,0,5,},
		{6,4,3,1,5,0,2,},{6,4,3,1,5,2,0,},{6,4,3,2,0,1,5,},{6,4,3,2,1,0,5,},{6,4,3,2,5,0,1,},{6,4,3,2,5,1,0,},{6,4,3,5,0,1,2,},{6,4,3,5,0,2,1,},{6,4,3,5,1,0,2,},{6,4,3,5,1,2,0,},
		{6,4,3,5,2,0,1,},{6,4,3,5,2,1,0,},{6,4,5,0,1,2,3,},{6,4,5,0,1,3,2,},{6,4,5,0,2,1,3,},{6,4,5,0,2,3,1,},{6,4,5,0,3,1,2,},{6,4,5,0,3,2,1,},{6,4,5,1,0,2,3,},{6,4,5,1,0,3,2,},
		{6,4,5,1,2,0,3,},{6,4,5,1,2,3,0,},{6,4,5,1,3,0,2,},{6,4,5,1,3,2,0,},{6,4,5,2,0,1,3,},{6,4,5,2,0,3,1,},{6,4,5,2,1,0,3,},{6,4,5,2,1,3,0,},{6,4,5,2,3,0,1,},{6,4,5,2,3,1,0,},
		{6,5,0,1,2,3,4,},{6,5,0,1,2,4,3,},{6,5,0,1,3,2,4,},{6,5,0,1,3,4,2,},{6,5,0,2,1,3,4,},{6,5,0,2,1,4,3,},{6,5,0,2,3,1,4,},{6,5,0,2,3,4,1,},{6,5,0,4,1,2,3,},{6,5,0,4,1,3,2,},
		{6,5,0,4,2,1,3,},{6,5,0,4,2,3,1,},{6,5,0,4,3,1,2,},{6,5,0,4,3,2,1,},{6,5,1,0,2,3,4,},{6,5,1,0,2,4,3,},{6,5,1,0,3,2,4,},{6,5,1,0,3,4,2,},{6,5,1,2,0,3,4,},{6,5,1,2,0,4,3,},
		{6,5,1,2,3,0,4,},{6,5,1,2,3,4,0,},{6,5,1,4,0,2,3,},{6,5,1,4,0,3,2,},{6,5,1,4,2,0,3,},{6,5,1,4,2,3,0,},{6,5,1,4,3,0,2,},{6,5,1,4,3,2,0,},{6,5,3,0,1,2,4,},{6,5,3,0,1,4,2,},
		{6,5,3,0,2,1,4,},{6,5,3,0,2,4,1,},{6,5,3,1,0,2,4,},{6,5,3,1,0,4,2,},{6,5,3,1,2,0,4,},{6,5,3,1,2,4,0,},{6,5,3,2,0,1,4,},{6,5,3,2,0,4,1,},{6,5,3,2,1,0,4,},{6,5,3,2,1,4,0,},
		{6,5,3,4,0,1,2,},{6,5,3,4,0,2,1,},{6,5,3,4,1,0,2,},{6,5,3,4,1,2,0,},{6,5,3,4,2,0,1,},{6,5,3,4,2,1,0,},{6,5,4,0,1,2,3,},{6,5,4,0,1,3,2,},{6,5,4,0,2,1,3,},{6,5,4,0,2,3,1,},
		{6,5,4,0,3,1,2,},{6,5,4,0,3,2,1,},{6,5,4,1,0,2,3,},{6,5,4,1,0,3,2,},{6,5,4,1,2,0,3,},{6,5,4,1,2,3,0,},{6,5,4,1,3,0,2,},{6,5,4,1,3,2,0,},{6,5,4,2,0,1,3,},{6,5,4,2,0,3,1,},
		{6,5,4,2,1,0,3,},{6,5,4,2,1,3,0,},{6,5,4,2,3,0,1,},{6,5,4,2,3,1,0,}
	};
	static const int permute8[14833][8] = {
		{1,0,3,2,5,4,7,6,},{1,0,3,2,5,6,7,4,},{1,0,3,2,5,7,4,6,},{1,0,3,2,6,4,7,5,},{1,0,3,2,6,7,4,5,},{1,0,3,2,6,7,5,4,},{1,0,3,2,7,4,5,6,},{1,0,3,2,7,6,4,5,},{1,0,3,2,7,6,5,4,},{1,0,3,4,2,6,7,5,},
		{1,0,3,4,2,7,5,6,},{1,0,3,4,5,2,7,6,},{1,0,3,4,5,6,7,2,},{1,0,3,4,5,7,2,6,},{1,0,3,4,6,2,7,5,},{1,0,3,4,6,7,2,5,},{1,0,3,4,6,7,5,2,},{1,0,3,4,7,2,5,6,},{1,0,3,4,7,6,2,5,},{1,0,3,4,7,6,5,2,},
		{1,0,3,5,2,4,7,6,},{1,0,3,5,2,6,7,4,},{1,0,3,5,2,7,4,6,},{1,0,3,5,6,2,7,4,},{1,0,3,5,6,4,7,2,},{1,0,3,5,6,7,2,4,},{1,0,3,5,6,7,4,2,},{1,0,3,5,7,2,4,6,},{1,0,3,5,7,4,2,6,},{1,0,3,5,7,6,2,4,},
		{1,0,3,5,7,6,4,2,},{1,0,3,6,2,4,7,5,},{1,0,3,6,2,7,4,5,},{1,0,3,6,2,7,5,4,},{1,0,3,6,5,2,7,4,},{1,0,3,6,5,4,7,2,},{1,0,3,6,5,7,2,4,},{1,0,3,6,5,7,4,2,},{1,0,3,6,7,2,4,5,},{1,0,3,6,7,2,5,4,},
		{1,0,3,6,7,4,2,5,},{1,0,3,6,7,4,5,2,},{1,0,3,7,2,4,5,6,},{1,0,3,7,2,6,4,5,},{1,0,3,7,2,6,5,4,},{1,0,3,7,5,2,4,6,},{1,0,3,7,5,4,2,6,},{1,0,3,7,5,6,2,4,},{1,0,3,7,5,6,4,2,},{1,0,3,7,6,2,4,5,},
		{1,0,3,7,6,2,5,4,},{1,0,3,7,6,4,2,5,},{1,0,3,7,6,4,5,2,},{1,0,4,2,3,6,7,5,},{1,0,4,2,3,7,5,6,},{1,0,4,2,5,3,7,6,},{1,0,4,2,5,6,7,3,},{1,0,4,2,5,7,3,6,},{1,0,4,2,6,3,7,5,},{1,0,4,2,6,7,3,5,},
		{1,0,4,2,6,7,5,3,},{1,0,4,2,7,3,5,6,},{1,0,4,2,7,6,3,5,},{1,0,4,2,7,6,5,3,},{1,0,4,5,2,3,7,6,},{1,0,4,5,2,6,7,3,},{1,0,4,5,2,7,3,6,},{1,0,4,5,3,2,7,6,},{1,0,4,5,3,6,7,2,},{1,0,4,5,3,7,2,6,},
		{1,0,4,5,6,2,7,3,},{1,0,4,5,6,3,7,2,},{1,0,4,5,6,7,2,3,},{1,0,4,5,6,7,3,2,},{1,0,4,5,7,2,3,6,},{1,0,4,5,7,3,2,6,},{1,0,4,5,7,6,2,3,},{1,0,4,5,7,6,3,2,},{1,0,4,6,2,3,7,5,},{1,0,4,6,2,7,3,5,},
		{1,0,4,6,2,7,5,3,},{1,0,4,6,3,2,7,5,},{1,0,4,6,3,7,2,5,},{1,0,4,6,3,7,5,2,},{1,0,4,6,5,2,7,3,},{1,0,4,6,5,3,7,2,},{1,0,4,6,5,7,2,3,},{1,0,4,6,5,7,3,2,},{1,0,4,6,7,2,3,5,},{1,0,4,6,7,2,5,3,},
		{1,0,4,6,7,3,2,5,},{1,0,4,6,7,3,5,2,},{1,0,4,7,2,3,5,6,},{1,0,4,7,2,6,3,5,},{1,0,4,7,2,6,5,3,},{1,0,4,7,3,2,5,6,},{1,0,4,7,3,6,2,5,},{1,0,4,7,3,6,5,2,},{1,0,4,7,5,2,3,6,},{1,0,4,7,5,3,2,6,},
		{1,0,4,7,5,6,2,3,},{1,0,4,7,5,6,3,2,},{1,0,4,7,6,2,3,5,},{1,0,4,7,6,2,5,3,},{1,0,4,7,6,3,2,5,},{1,0,4,7,6,3,5,2,},{1,0,5,2,3,4,7,6,},{1,0,5,2,3,6,7,4,},{1,0,5,2,3,7,4,6,},{1,0,5,2,6,3,7,4,},
		{1,0,5,2,6,4,7,3,},{1,0,5,2,6,7,3,4,},{1,0,5,2,6,7,4,3,},{1,0,5,2,7,3,4,6,},{1,0,5,2,7,4,3,6,},{1,0,5,2,7,6,3,4,},{1,0,5,2,7,6,4,3,},{1,0,5,4,2,3,7,6,},{1,0,5,4,2,6,7,3,},{1,0,5,4,2,7,3,6,},
		{1,0,5,4,3,2,7,6,},{1,0,5,4,3,6,7,2,},{1,0,5,4,3,7,2,6,},{1,0,5,4,6,2,7,3,},{1,0,5,4,6,3,7,2,},{1,0,5,4,6,7,2,3,},{1,0,5,4,6,7,3,2,},{1,0,5,4,7,2,3,6,},{1,0,5,4,7,3,2,6,},{1,0,5,4,7,6,2,3,},
		{1,0,5,4,7,6,3,2,},{1,0,5,6,2,3,7,4,},{1,0,5,6,2,4,7,3,},{1,0,5,6,2,7,3,4,},{1,0,5,6,2,7,4,3,},{1,0,5,6,3,2,7,4,},{1,0,5,6,3,4,7,2,},{1,0,5,6,3,7,2,4,},{1,0,5,6,3,7,4,2,},{1,0,5,6,7,2,3,4,},
		{1,0,5,6,7,2,4,3,},{1,0,5,6,7,3,2,4,},{1,0,5,6,7,3,4,2,},{1,0,5,6,7,4,2,3,},{1,0,5,6,7,4,3,2,},{1,0,5,7,2,3,4,6,},{1,0,5,7,2,4,3,6,},{1,0,5,7,2,6,3,4,},{1,0,5,7,2,6,4,3,},{1,0,5,7,3,2,4,6,},
		{1,0,5,7,3,4,2,6,},{1,0,5,7,3,6,2,4,},{1,0,5,7,3,6,4,2,},{1,0,5,7,6,2,3,4,},{1,0,5,7,6,2,4,3,},{1,0,5,7,6,3,2,4,},{1,0,5,7,6,3,4,2,},{1,0,5,7,6,4,2,3,},{1,0,5,7,6,4,3,2,},{1,0,6,2,3,4,7,5,},
		{1,0,6,2,3,7,4,5,},{1,0,6,2,3,7,5,4,},{1,0,6,2,5,3,7,4,},{1,0,6,2,5,4,7,3,},{1,0,6,2,5,7,3,4,},{1,0,6,2,5,7,4,3,},{1,0,6,2,7,3,4,5,},{1,0,6,2,7,3,5,4,},{1,0,6,2,7,4,3,5,},{1,0,6,2,7,4,5,3,},
		{1,0,6,4,2,3,7,5,},{1,0,6,4,2,7,3,5,},{1,0,6,4,2,7,5,3,},{1,0,6,4,3,2,7,5,},{1,0,6,4,3,7,2,5,},{1,0,6,4,3,7,5,2,},{1,0,6,4,5,2,7,3,},{1,0,6,4,5,3,7,2,},{1,0,6,4,5,7,2,3,},{1,0,6,4,5,7,3,2,},
		{1,0,6,4,7,2,3,5,},{1,0,6,4,7,2,5,3,},{1,0,6,4,7,3,2,5,},{1,0,6,4,7,3,5,2,},{1,0,6,5,2,3,7,4,},{1,0,6,5,2,4,7,3,},{1,0,6,5,2,7,3,4,},{1,0,6,5,2,7,4,3,},{1,0,6,5,3,2,7,4,},{1,0,6,5,3,4,7,2,},
		{1,0,6,5,3,7,2,4,},{1,0,6,5,3,7,4,2,},{1,0,6,5,7,2,3,4,},{1,0,6,5,7,2,4,3,},{1,0,6,5,7,3,2,4,},{1,0,6,5,7,3,4,2,},{1,0,6,5,7,4,2,3,},{1,0,6,5,7,4,3,2,},{1,0,6,7,2,3,4,5,},{1,0,6,7,2,3,5,4,},
		{1,0,6,7,2,4,3,5,},{1,0,6,7,2,4,5,3,},{1,0,6,7,3,2,4,5,},{1,0,6,7,3,2,5,4,},{1,0,6,7,3,4,2,5,},{1,0,6,7,3,4,5,2,},{1,0,6,7,5,2,3,4,},{1,0,6,7,5,2,4,3,},{1,0,6,7,5,3,2,4,},{1,0,6,7,5,3,4,2,},
		{1,0,6,7,5,4,2,3,},{1,0,6,7,5,4,3,2,},{1,0,7,2,3,4,5,6,},{1,0,7,2,3,6,4,5,},{1,0,7,2,3,6,5,4,},{1,0,7,2,5,3,4,6,},{1,0,7,2,5,4,3,6,},{1,0,7,2,5,6,3,4,},{1,0,7,2,5,6,4,3,},{1,0,7,2,6,3,4,5,},
		{1,0,7,2,6,3,5,4,},{1,0,7,2,6,4,3,5,},{1,0,7,2,6,4,5,3,},{1,0,7,4,2,3,5,6,},{1,0,7,4,2,6,3,5,},{1,0,7,4,2,6,5,3,},{1,0,7,4,3,2,5,6,},{1,0,7,4,3,6,2,5,},{1,0,7,4,3,6,5,2,},{1,0,7,4,5,2,3,6,},
		{1,0,7,4,5,3,2,6,},{1,0,7,4,5,6,2,3,},{1,0,7,4,5,6,3,2,},{1,0,7,4,6,2,3,5,},{1,0,7,4,6,2,5,3,},{1,0,7,4,6,3,2,5,},{1,0,7,4,6,3,5,2,},{1,0,7,5,2,3,4,6,},{1,0,7,5,2,4,3,6,},{1,0,7,5,2,6,3,4,},
		{1,0,7,5,2,6,4,3,},{1,0,7,5,3,2,4,6,},{1,0,7,5,3,4,2,6,},{1,0,7,5,3,6,2,4,},{1,0,7,5,3,6,4,2,},{1,0,7,5,6,2,3,4,},{1,0,7,5,6,2,4,3,},{1,0,7,5,6,3,2,4,},{1,0,7,5,6,3,4,2,},{1,0,7,5,6,4,2,3,},
		{1,0,7,5,6,4,3,2,},{1,0,7,6,2,3,4,5,},{1,0,7,6,2,3,5,4,},{1,0,7,6,2,4,3,5,},{1,0,7,6,2,4,5,3,},{1,0,7,6,3,2,4,5,},{1,0,7,6,3,2,5,4,},{1,0,7,6,3,4,2,5,},{1,0,7,6,3,4,5,2,},{1,0,7,6,5,2,3,4,},
		{1,0,7,6,5,2,4,3,},{1,0,7,6,5,3,2,4,},{1,0,7,6,5,3,4,2,},{1,0,7,6,5,4,2,3,},{1,0,7,6,5,4,3,2,},{1,2,0,4,3,6,7,5,},{1,2,0,4,3,7,5,6,},{1,2,0,4,5,3,7,6,},{1,2,0,4,5,6,7,3,},{1,2,0,4,5,7,3,6,},
		{1,2,0,4,6,3,7,5,},{1,2,0,4,6,7,3,5,},{1,2,0,4,6,7,5,3,},{1,2,0,4,7,3,5,6,},{1,2,0,4,7,6,3,5,},{1,2,0,4,7,6,5,3,},{1,2,0,5,3,4,7,6,},{1,2,0,5,3,6,7,4,},{1,2,0,5,3,7,4,6,},{1,2,0,5,6,3,7,4,},
		{1,2,0,5,6,4,7,3,},{1,2,0,5,6,7,3,4,},{1,2,0,5,6,7,4,3,},{1,2,0,5,7,3,4,6,},{1,2,0,5,7,4,3,6,},{1,2,0,5,7,6,3,4,},{1,2,0,5,7,6,4,3,},{1,2,0,6,3,4,7,5,},{1,2,0,6,3,7,4,5,},{1,2,0,6,3,7,5,4,},
		{1,2,0,6,5,3,7,4,},{1,2,0,6,5,4,7,3,},{1,2,0,6,5,7,3,4,},{1,2,0,6,5,7,4,3,},{1,2,0,6,7,3,4,5,},{1,2,0,6,7,3,5,4,},{1,2,0,6,7,4,3,5,},{1,2,0,6,7,4,5,3,},{1,2,0,7,3,4,5,6,},{1,2,0,7,3,6,4,5,},
		{1,2,0,7,3,6,5,4,},{1,2,0,7,5,3,4,6,},{1,2,0,7,5,4,3,6,},{1,2,0,7,5,6,3,4,},{1,2,0,7,5,6,4,3,},{1,2,0,7,6,3,4,5,},{1,2,0,7,6,3,5,4,},{1,2,0,7,6,4,3,5,},{1,2,0,7,6,4,5,3,},{1,2,3,0,5,4,7,6,},
		{1,2,3,0,5,6,7,4,},{1,2,3,0,5,7,4,6,},{1,2,3,0,6,4,7,5,},{1,2,3,0,6,7,4,5,},{1,2,3,0,6,7,5,4,},{1,2,3,0,7,4,5,6,},{1,2,3,0,7,6,4,5,},{1,2,3,0,7,6,5,4,},{1,2,3,4,0,6,7,5,},{1,2,3,4,0,7,5,6,},
		{1,2,3,4,5,0,7,6,},{1,2,3,4,5,6,7,0,},{1,2,3,4,5,7,0,6,},{1,2,3,4,6,0,7,5,},{1,2,3,4,6,7,0,5,},{1,2,3,4,6,7,5,0,},{1,2,3,4,7,0,5,6,},{1,2,3,4,7,6,0,5,},{1,2,3,4,7,6,5,0,},{1,2,3,5,0,4,7,6,},
		{1,2,3,5,0,6,7,4,},{1,2,3,5,0,7,4,6,},{1,2,3,5,6,0,7,4,},{1,2,3,5,6,4,7,0,},{1,2,3,5,6,7,0,4,},{1,2,3,5,6,7,4,0,},{1,2,3,5,7,0,4,6,},{1,2,3,5,7,4,0,6,},{1,2,3,5,7,6,0,4,},{1,2,3,5,7,6,4,0,},
		{1,2,3,6,0,4,7,5,},{1,2,3,6,0,7,4,5,},{1,2,3,6,0,7,5,4,},{1,2,3,6,5,0,7,4,},{1,2,3,6,5,4,7,0,},{1,2,3,6,5,7,0,4,},{1,2,3,6,5,7,4,0,},{1,2,3,6,7,0,4,5,},{1,2,3,6,7,0,5,4,},{1,2,3,6,7,4,0,5,},
		{1,2,3,6,7,4,5,0,},{1,2,3,7,0,4,5,6,},{1,2,3,7,0,6,4,5,},{1,2,3,7,0,6,5,4,},{1,2,3,7,5,0,4,6,},{1,2,3,7,5,4,0,6,},{1,2,3,7,5,6,0,4,},{1,2,3,7,5,6,4,0,},{1,2,3,7,6,0,4,5,},{1,2,3,7,6,0,5,4,},
		{1,2,3,7,6,4,0,5,},{1,2,3,7,6,4,5,0,},{1,2,4,0,3,6,7,5,},{1,2,4,0,3,7,5,6,},{1,2,4,0,5,3,7,6,},{1,2,4,0,5,6,7,3,},{1,2,4,0,5,7,3,6,},{1,2,4,0,6,3,7,5,},{1,2,4,0,6,7,3,5,},{1,2,4,0,6,7,5,3,},
		{1,2,4,0,7,3,5,6,},{1,2,4,0,7,6,3,5,},{1,2,4,0,7,6,5,3,},{1,2,4,5,0,3,7,6,},{1,2,4,5,0,6,7,3,},{1,2,4,5,0,7,3,6,},{1,2,4,5,3,0,7,6,},{1,2,4,5,3,6,7,0,},{1,2,4,5,3,7,0,6,},{1,2,4,5,6,0,7,3,},
		{1,2,4,5,6,3,7,0,},{1,2,4,5,6,7,0,3,},{1,2,4,5,6,7,3,0,},{1,2,4,5,7,0,3,6,},{1,2,4,5,7,3,0,6,},{1,2,4,5,7,6,0,3,},{1,2,4,5,7,6,3,0,},{1,2,4,6,0,3,7,5,},{1,2,4,6,0,7,3,5,},{1,2,4,6,0,7,5,3,},
		{1,2,4,6,3,0,7,5,},{1,2,4,6,3,7,0,5,},{1,2,4,6,3,7,5,0,},{1,2,4,6,5,0,7,3,},{1,2,4,6,5,3,7,0,},{1,2,4,6,5,7,0,3,},{1,2,4,6,5,7,3,0,},{1,2,4,6,7,0,3,5,},{1,2,4,6,7,0,5,3,},{1,2,4,6,7,3,0,5,},
		{1,2,4,6,7,3,5,0,},{1,2,4,7,0,3,5,6,},{1,2,4,7,0,6,3,5,},{1,2,4,7,0,6,5,3,},{1,2,4,7,3,0,5,6,},{1,2,4,7,3,6,0,5,},{1,2,4,7,3,6,5,0,},{1,2,4,7,5,0,3,6,},{1,2,4,7,5,3,0,6,},{1,2,4,7,5,6,0,3,},
		{1,2,4,7,5,6,3,0,},{1,2,4,7,6,0,3,5,},{1,2,4,7,6,0,5,3,},{1,2,4,7,6,3,0,5,},{1,2,4,7,6,3,5,0,},{1,2,5,0,3,4,7,6,},{1,2,5,0,3,6,7,4,},{1,2,5,0,3,7,4,6,},{1,2,5,0,6,3,7,4,},{1,2,5,0,6,4,7,3,},
		{1,2,5,0,6,7,3,4,},{1,2,5,0,6,7,4,3,},{1,2,5,0,7,3,4,6,},{1,2,5,0,7,4,3,6,},{1,2,5,0,7,6,3,4,},{1,2,5,0,7,6,4,3,},{1,2,5,4,0,3,7,6,},{1,2,5,4,0,6,7,3,},{1,2,5,4,0,7,3,6,},{1,2,5,4,3,0,7,6,},
		{1,2,5,4,3,6,7,0,},{1,2,5,4,3,7,0,6,},{1,2,5,4,6,0,7,3,},{1,2,5,4,6,3,7,0,},{1,2,5,4,6,7,0,3,},{1,2,5,4,6,7,3,0,},{1,2,5,4,7,0,3,6,},{1,2,5,4,7,3,0,6,},{1,2,5,4,7,6,0,3,},{1,2,5,4,7,6,3,0,},
		{1,2,5,6,0,3,7,4,},{1,2,5,6,0,4,7,3,},{1,2,5,6,0,7,3,4,},{1,2,5,6,0,7,4,3,},{1,2,5,6,3,0,7,4,},{1,2,5,6,3,4,7,0,},{1,2,5,6,3,7,0,4,},{1,2,5,6,3,7,4,0,},{1,2,5,6,7,0,3,4,},{1,2,5,6,7,0,4,3,},
		{1,2,5,6,7,3,0,4,},{1,2,5,6,7,3,4,0,},{1,2,5,6,7,4,0,3,},{1,2,5,6,7,4,3,0,},{1,2,5,7,0,3,4,6,},{1,2,5,7,0,4,3,6,},{1,2,5,7,0,6,3,4,},{1,2,5,7,0,6,4,3,},{1,2,5,7,3,0,4,6,},{1,2,5,7,3,4,0,6,},
		{1,2,5,7,3,6,0,4,},{1,2,5,7,3,6,4,0,},{1,2,5,7,6,0,3,4,},{1,2,5,7,6,0,4,3,},{1,2,5,7,6,3,0,4,},{1,2,5,7,6,3,4,0,},{1,2,5,7,6,4,0,3,},{1,2,5,7,6,4,3,0,},{1,2,6,0,3,4,7,5,},{1,2,6,0,3,7,4,5,},
		{1,2,6,0,3,7,5,4,},{1,2,6,0,5,3,7,4,},{1,2,6,0,5,4,7,3,},{1,2,6,0,5,7,3,4,},{1,2,6,0,5,7,4,3,},{1,2,6,0,7,3,4,5,},{1,2,6,0,7,3,5,4,},{1,2,6,0,7,4,3,5,},{1,2,6,0,7,4,5,3,},{1,2,6,4,0,3,7,5,},
		{1,2,6,4,0,7,3,5,},{1,2,6,4,0,7,5,3,},{1,2,6,4,3,0,7,5,},{1,2,6,4,3,7,0,5,},{1,2,6,4,3,7,5,0,},{1,2,6,4,5,0,7,3,},{1,2,6,4,5,3,7,0,},{1,2,6,4,5,7,0,3,},{1,2,6,4,5,7,3,0,},{1,2,6,4,7,0,3,5,},
		{1,2,6,4,7,0,5,3,},{1,2,6,4,7,3,0,5,},{1,2,6,4,7,3,5,0,},{1,2,6,5,0,3,7,4,},{1,2,6,5,0,4,7,3,},{1,2,6,5,0,7,3,4,},{1,2,6,5,0,7,4,3,},{1,2,6,5,3,0,7,4,},{1,2,6,5,3,4,7,0,},{1,2,6,5,3,7,0,4,},
		{1,2,6,5,3,7,4,0,},{1,2,6,5,7,0,3,4,},{1,2,6,5,7,0,4,3,},{1,2,6,5,7,3,0,4,},{1,2,6,5,7,3,4,0,},{1,2,6,5,7,4,0,3,},{1,2,6,5,7,4,3,0,},{1,2,6,7,0,3,4,5,},{1,2,6,7,0,3,5,4,},{1,2,6,7,0,4,3,5,},
		{1,2,6,7,0,4,5,3,},{1,2,6,7,3,0,4,5,},{1,2,6,7,3,0,5,4,},{1,2,6,7,3,4,0,5,},{1,2,6,7,3,4,5,0,},{1,2,6,7,5,0,3,4,},{1,2,6,7,5,0,4,3,},{1,2,6,7,5,3,0,4,},{1,2,6,7,5,3,4,0,},{1,2,6,7,5,4,0,3,},
		{1,2,6,7,5,4,3,0,},{1,2,7,0,3,4,5,6,},{1,2,7,0,3,6,4,5,},{1,2,7,0,3,6,5,4,},{1,2,7,0,5,3,4,6,},{1,2,7,0,5,4,3,6,},{1,2,7,0,5,6,3,4,},{1,2,7,0,5,6,4,3,},{1,2,7,0,6,3,4,5,},{1,2,7,0,6,3,5,4,},
		{1,2,7,0,6,4,3,5,},{1,2,7,0,6,4,5,3,},{1,2,7,4,0,3,5,6,},{1,2,7,4,0,6,3,5,},{1,2,7,4,0,6,5,3,},{1,2,7,4,3,0,5,6,},{1,2,7,4,3,6,0,5,},{1,2,7,4,3,6,5,0,},{1,2,7,4,5,0,3,6,},{1,2,7,4,5,3,0,6,},
		{1,2,7,4,5,6,0,3,},{1,2,7,4,5,6,3,0,},{1,2,7,4,6,0,3,5,},{1,2,7,4,6,0,5,3,},{1,2,7,4,6,3,0,5,},{1,2,7,4,6,3,5,0,},{1,2,7,5,0,3,4,6,},{1,2,7,5,0,4,3,6,},{1,2,7,5,0,6,3,4,},{1,2,7,5,0,6,4,3,},
		{1,2,7,5,3,0,4,6,},{1,2,7,5,3,4,0,6,},{1,2,7,5,3,6,0,4,},{1,2,7,5,3,6,4,0,},{1,2,7,5,6,0,3,4,},{1,2,7,5,6,0,4,3,},{1,2,7,5,6,3,0,4,},{1,2,7,5,6,3,4,0,},{1,2,7,5,6,4,0,3,},{1,2,7,5,6,4,3,0,},
		{1,2,7,6,0,3,4,5,},{1,2,7,6,0,3,5,4,},{1,2,7,6,0,4,3,5,},{1,2,7,6,0,4,5,3,},{1,2,7,6,3,0,4,5,},{1,2,7,6,3,0,5,4,},{1,2,7,6,3,4,0,5,},{1,2,7,6,3,4,5,0,},{1,2,7,6,5,0,3,4,},{1,2,7,6,5,0,4,3,},
		{1,2,7,6,5,3,0,4,},{1,2,7,6,5,3,4,0,},{1,2,7,6,5,4,0,3,},{1,2,7,6,5,4,3,0,},{1,3,0,2,5,4,7,6,},{1,3,0,2,5,6,7,4,},{1,3,0,2,5,7,4,6,},{1,3,0,2,6,4,7,5,},{1,3,0,2,6,7,4,5,},{1,3,0,2,6,7,5,4,},
		{1,3,0,2,7,4,5,6,},{1,3,0,2,7,6,4,5,},{1,3,0,2,7,6,5,4,},{1,3,0,4,2,6,7,5,},{1,3,0,4,2,7,5,6,},{1,3,0,4,5,2,7,6,},{1,3,0,4,5,6,7,2,},{1,3,0,4,5,7,2,6,},{1,3,0,4,6,2,7,5,},{1,3,0,4,6,7,2,5,},
		{1,3,0,4,6,7,5,2,},{1,3,0,4,7,2,5,6,},{1,3,0,4,7,6,2,5,},{1,3,0,4,7,6,5,2,},{1,3,0,5,2,4,7,6,},{1,3,0,5,2,6,7,4,},{1,3,0,5,2,7,4,6,},{1,3,0,5,6,2,7,4,},{1,3,0,5,6,4,7,2,},{1,3,0,5,6,7,2,4,},
		{1,3,0,5,6,7,4,2,},{1,3,0,5,7,2,4,6,},{1,3,0,5,7,4,2,6,},{1,3,0,5,7,6,2,4,},{1,3,0,5,7,6,4,2,},{1,3,0,6,2,4,7,5,},{1,3,0,6,2,7,4,5,},{1,3,0,6,2,7,5,4,},{1,3,0,6,5,2,7,4,},{1,3,0,6,5,4,7,2,},
		{1,3,0,6,5,7,2,4,},{1,3,0,6,5,7,4,2,},{1,3,0,6,7,2,4,5,},{1,3,0,6,7,2,5,4,},{1,3,0,6,7,4,2,5,},{1,3,0,6,7,4,5,2,},{1,3,0,7,2,4,5,6,},{1,3,0,7,2,6,4,5,},{1,3,0,7,2,6,5,4,},{1,3,0,7,5,2,4,6,},
		{1,3,0,7,5,4,2,6,},{1,3,0,7,5,6,2,4,},{1,3,0,7,5,6,4,2,},{1,3,0,7,6,2,4,5,},{1,3,0,7,6,2,5,4,},{1,3,0,7,6,4,2,5,},{1,3,0,7,6,4,5,2,},{1,3,4,0,2,6,7,5,},{1,3,4,0,2,7,5,6,},{1,3,4,0,5,2,7,6,},
		{1,3,4,0,5,6,7,2,},{1,3,4,0,5,7,2,6,},{1,3,4,0,6,2,7,5,},{1,3,4,0,6,7,2,5,},{1,3,4,0,6,7,5,2,},{1,3,4,0,7,2,5,6,},{1,3,4,0,7,6,2,5,},{1,3,4,0,7,6,5,2,},{1,3,4,2,0,6,7,5,},{1,3,4,2,0,7,5,6,},
		{1,3,4,2,5,0,7,6,},{1,3,4,2,5,6,7,0,},{1,3,4,2,5,7,0,6,},{1,3,4,2,6,0,7,5,},{1,3,4,2,6,7,0,5,},{1,3,4,2,6,7,5,0,},{1,3,4,2,7,0,5,6,},{1,3,4,2,7,6,0,5,},{1,3,4,2,7,6,5,0,},{1,3,4,5,0,2,7,6,},
		{1,3,4,5,0,6,7,2,},{1,3,4,5,0,7,2,6,},{1,3,4,5,2,0,7,6,},{1,3,4,5,2,6,7,0,},{1,3,4,5,2,7,0,6,},{1,3,4,5,6,0,7,2,},{1,3,4,5,6,2,7,0,},{1,3,4,5,6,7,0,2,},{1,3,4,5,6,7,2,0,},{1,3,4,5,7,0,2,6,},
		{1,3,4,5,7,2,0,6,},{1,3,4,5,7,6,0,2,},{1,3,4,5,7,6,2,0,},{1,3,4,6,0,2,7,5,},{1,3,4,6,0,7,2,5,},{1,3,4,6,0,7,5,2,},{1,3,4,6,2,0,7,5,},{1,3,4,6,2,7,0,5,},{1,3,4,6,2,7,5,0,},{1,3,4,6,5,0,7,2,},
		{1,3,4,6,5,2,7,0,},{1,3,4,6,5,7,0,2,},{1,3,4,6,5,7,2,0,},{1,3,4,6,7,0,2,5,},{1,3,4,6,7,0,5,2,},{1,3,4,6,7,2,0,5,},{1,3,4,6,7,2,5,0,},{1,3,4,7,0,2,5,6,},{1,3,4,7,0,6,2,5,},{1,3,4,7,0,6,5,2,},
		{1,3,4,7,2,0,5,6,},{1,3,4,7,2,6,0,5,},{1,3,4,7,2,6,5,0,},{1,3,4,7,5,0,2,6,},{1,3,4,7,5,2,0,6,},{1,3,4,7,5,6,0,2,},{1,3,4,7,5,6,2,0,},{1,3,4,7,6,0,2,5,},{1,3,4,7,6,0,5,2,},{1,3,4,7,6,2,0,5,},
		{1,3,4,7,6,2,5,0,},{1,3,5,0,2,4,7,6,},{1,3,5,0,2,6,7,4,},{1,3,5,0,2,7,4,6,},{1,3,5,0,6,2,7,4,},{1,3,5,0,6,4,7,2,},{1,3,5,0,6,7,2,4,},{1,3,5,0,6,7,4,2,},{1,3,5,0,7,2,4,6,},{1,3,5,0,7,4,2,6,},
		{1,3,5,0,7,6,2,4,},{1,3,5,0,7,6,4,2,},{1,3,5,2,0,4,7,6,},{1,3,5,2,0,6,7,4,},{1,3,5,2,0,7,4,6,},{1,3,5,2,6,0,7,4,},{1,3,5,2,6,4,7,0,},{1,3,5,2,6,7,0,4,},{1,3,5,2,6,7,4,0,},{1,3,5,2,7,0,4,6,},
		{1,3,5,2,7,4,0,6,},{1,3,5,2,7,6,0,4,},{1,3,5,2,7,6,4,0,},{1,3,5,4,0,2,7,6,},{1,3,5,4,0,6,7,2,},{1,3,5,4,0,7,2,6,},{1,3,5,4,2,0,7,6,},{1,3,5,4,2,6,7,0,},{1,3,5,4,2,7,0,6,},{1,3,5,4,6,0,7,2,},
		{1,3,5,4,6,2,7,0,},{1,3,5,4,6,7,0,2,},{1,3,5,4,6,7,2,0,},{1,3,5,4,7,0,2,6,},{1,3,5,4,7,2,0,6,},{1,3,5,4,7,6,0,2,},{1,3,5,4,7,6,2,0,},{1,3,5,6,0,2,7,4,},{1,3,5,6,0,4,7,2,},{1,3,5,6,0,7,2,4,},
		{1,3,5,6,0,7,4,2,},{1,3,5,6,2,0,7,4,},{1,3,5,6,2,4,7,0,},{1,3,5,6,2,7,0,4,},{1,3,5,6,2,7,4,0,},{1,3,5,6,7,0,2,4,},{1,3,5,6,7,0,4,2,},{1,3,5,6,7,2,0,4,},{1,3,5,6,7,2,4,0,},{1,3,5,6,7,4,0,2,},
		{1,3,5,6,7,4,2,0,},{1,3,5,7,0,2,4,6,},{1,3,5,7,0,4,2,6,},{1,3,5,7,0,6,2,4,},{1,3,5,7,0,6,4,2,},{1,3,5,7,2,0,4,6,},{1,3,5,7,2,4,0,6,},{1,3,5,7,2,6,0,4,},{1,3,5,7,2,6,4,0,},{1,3,5,7,6,0,2,4,},
		{1,3,5,7,6,0,4,2,},{1,3,5,7,6,2,0,4,},{1,3,5,7,6,2,4,0,},{1,3,5,7,6,4,0,2,},{1,3,5,7,6,4,2,0,},{1,3,6,0,2,4,7,5,},{1,3,6,0,2,7,4,5,},{1,3,6,0,2,7,5,4,},{1,3,6,0,5,2,7,4,},{1,3,6,0,5,4,7,2,},
		{1,3,6,0,5,7,2,4,},{1,3,6,0,5,7,4,2,},{1,3,6,0,7,2,4,5,},{1,3,6,0,7,2,5,4,},{1,3,6,0,7,4,2,5,},{1,3,6,0,7,4,5,2,},{1,3,6,2,0,4,7,5,},{1,3,6,2,0,7,4,5,},{1,3,6,2,0,7,5,4,},{1,3,6,2,5,0,7,4,},
		{1,3,6,2,5,4,7,0,},{1,3,6,2,5,7,0,4,},{1,3,6,2,5,7,4,0,},{1,3,6,2,7,0,4,5,},{1,3,6,2,7,0,5,4,},{1,3,6,2,7,4,0,5,},{1,3,6,2,7,4,5,0,},{1,3,6,4,0,2,7,5,},{1,3,6,4,0,7,2,5,},{1,3,6,4,0,7,5,2,},
		{1,3,6,4,2,0,7,5,},{1,3,6,4,2,7,0,5,},{1,3,6,4,2,7,5,0,},{1,3,6,4,5,0,7,2,},{1,3,6,4,5,2,7,0,},{1,3,6,4,5,7,0,2,},{1,3,6,4,5,7,2,0,},{1,3,6,4,7,0,2,5,},{1,3,6,4,7,0,5,2,},{1,3,6,4,7,2,0,5,},
		{1,3,6,4,7,2,5,0,},{1,3,6,5,0,2,7,4,},{1,3,6,5,0,4,7,2,},{1,3,6,5,0,7,2,4,},{1,3,6,5,0,7,4,2,},{1,3,6,5,2,0,7,4,},{1,3,6,5,2,4,7,0,},{1,3,6,5,2,7,0,4,},{1,3,6,5,2,7,4,0,},{1,3,6,5,7,0,2,4,},
		{1,3,6,5,7,0,4,2,},{1,3,6,5,7,2,0,4,},{1,3,6,5,7,2,4,0,},{1,3,6,5,7,4,0,2,},{1,3,6,5,7,4,2,0,},{1,3,6,7,0,2,4,5,},{1,3,6,7,0,2,5,4,},{1,3,6,7,0,4,2,5,},{1,3,6,7,0,4,5,2,},{1,3,6,7,2,0,4,5,},
		{1,3,6,7,2,0,5,4,},{1,3,6,7,2,4,0,5,},{1,3,6,7,2,4,5,0,},{1,3,6,7,5,0,2,4,},{1,3,6,7,5,0,4,2,},{1,3,6,7,5,2,0,4,},{1,3,6,7,5,2,4,0,},{1,3,6,7,5,4,0,2,},{1,3,6,7,5,4,2,0,},{1,3,7,0,2,4,5,6,},
		{1,3,7,0,2,6,4,5,},{1,3,7,0,2,6,5,4,},{1,3,7,0,5,2,4,6,},{1,3,7,0,5,4,2,6,},{1,3,7,0,5,6,2,4,},{1,3,7,0,5,6,4,2,},{1,3,7,0,6,2,4,5,},{1,3,7,0,6,2,5,4,},{1,3,7,0,6,4,2,5,},{1,3,7,0,6,4,5,2,},
		{1,3,7,2,0,4,5,6,},{1,3,7,2,0,6,4,5,},{1,3,7,2,0,6,5,4,},{1,3,7,2,5,0,4,6,},{1,3,7,2,5,4,0,6,},{1,3,7,2,5,6,0,4,},{1,3,7,2,5,6,4,0,},{1,3,7,2,6,0,4,5,},{1,3,7,2,6,0,5,4,},{1,3,7,2,6,4,0,5,},
		{1,3,7,2,6,4,5,0,},{1,3,7,4,0,2,5,6,},{1,3,7,4,0,6,2,5,},{1,3,7,4,0,6,5,2,},{1,3,7,4,2,0,5,6,},{1,3,7,4,2,6,0,5,},{1,3,7,4,2,6,5,0,},{1,3,7,4,5,0,2,6,},{1,3,7,4,5,2,0,6,},{1,3,7,4,5,6,0,2,},
		{1,3,7,4,5,6,2,0,},{1,3,7,4,6,0,2,5,},{1,3,7,4,6,0,5,2,},{1,3,7,4,6,2,0,5,},{1,3,7,4,6,2,5,0,},{1,3,7,5,0,2,4,6,},{1,3,7,5,0,4,2,6,},{1,3,7,5,0,6,2,4,},{1,3,7,5,0,6,4,2,},{1,3,7,5,2,0,4,6,},
		{1,3,7,5,2,4,0,6,},{1,3,7,5,2,6,0,4,},{1,3,7,5,2,6,4,0,},{1,3,7,5,6,0,2,4,},{1,3,7,5,6,0,4,2,},{1,3,7,5,6,2,0,4,},{1,3,7,5,6,2,4,0,},{1,3,7,5,6,4,0,2,},{1,3,7,5,6,4,2,0,},{1,3,7,6,0,2,4,5,},
		{1,3,7,6,0,2,5,4,},{1,3,7,6,0,4,2,5,},{1,3,7,6,0,4,5,2,},{1,3,7,6,2,0,4,5,},{1,3,7,6,2,0,5,4,},{1,3,7,6,2,4,0,5,},{1,3,7,6,2,4,5,0,},{1,3,7,6,5,0,2,4,},{1,3,7,6,5,0,4,2,},{1,3,7,6,5,2,0,4,},
		{1,3,7,6,5,2,4,0,},{1,3,7,6,5,4,0,2,},{1,3,7,6,5,4,2,0,},{1,4,0,2,3,6,7,5,},{1,4,0,2,3,7,5,6,},{1,4,0,2,5,3,7,6,},{1,4,0,2,5,6,7,3,},{1,4,0,2,5,7,3,6,},{1,4,0,2,6,3,7,5,},{1,4,0,2,6,7,3,5,},
		{1,4,0,2,6,7,5,3,},{1,4,0,2,7,3,5,6,},{1,4,0,2,7,6,3,5,},{1,4,0,2,7,6,5,3,},{1,4,0,5,2,3,7,6,},{1,4,0,5,2,6,7,3,},{1,4,0,5,2,7,3,6,},{1,4,0,5,3,2,7,6,},{1,4,0,5,3,6,7,2,},{1,4,0,5,3,7,2,6,},
		{1,4,0,5,6,2,7,3,},{1,4,0,5,6,3,7,2,},{1,4,0,5,6,7,2,3,},{1,4,0,5,6,7,3,2,},{1,4,0,5,7,2,3,6,},{1,4,0,5,7,3,2,6,},{1,4,0,5,7,6,2,3,},{1,4,0,5,7,6,3,2,},{1,4,0,6,2,3,7,5,},{1,4,0,6,2,7,3,5,},
		{1,4,0,6,2,7,5,3,},{1,4,0,6,3,2,7,5,},{1,4,0,6,3,7,2,5,},{1,4,0,6,3,7,5,2,},{1,4,0,6,5,2,7,3,},{1,4,0,6,5,3,7,2,},{1,4,0,6,5,7,2,3,},{1,4,0,6,5,7,3,2,},{1,4,0,6,7,2,3,5,},{1,4,0,6,7,2,5,3,},
		{1,4,0,6,7,3,2,5,},{1,4,0,6,7,3,5,2,},{1,4,0,7,2,3,5,6,},{1,4,0,7,2,6,3,5,},{1,4,0,7,2,6,5,3,},{1,4,0,7,3,2,5,6,},{1,4,0,7,3,6,2,5,},{1,4,0,7,3,6,5,2,},{1,4,0,7,5,2,3,6,},{1,4,0,7,5,3,2,6,},
		{1,4,0,7,5,6,2,3,},{1,4,0,7,5,6,3,2,},{1,4,0,7,6,2,3,5,},{1,4,0,7,6,2,5,3,},{1,4,0,7,6,3,2,5,},{1,4,0,7,6,3,5,2,},{1,4,3,0,2,6,7,5,},{1,4,3,0,2,7,5,6,},{1,4,3,0,5,2,7,6,},{1,4,3,0,5,6,7,2,},
		{1,4,3,0,5,7,2,6,},{1,4,3,0,6,2,7,5,},{1,4,3,0,6,7,2,5,},{1,4,3,0,6,7,5,2,},{1,4,3,0,7,2,5,6,},{1,4,3,0,7,6,2,5,},{1,4,3,0,7,6,5,2,},{1,4,3,2,0,6,7,5,},{1,4,3,2,0,7,5,6,},{1,4,3,2,5,0,7,6,},
		{1,4,3,2,5,6,7,0,},{1,4,3,2,5,7,0,6,},{1,4,3,2,6,0,7,5,},{1,4,3,2,6,7,0,5,},{1,4,3,2,6,7,5,0,},{1,4,3,2,7,0,5,6,},{1,4,3,2,7,6,0,5,},{1,4,3,2,7,6,5,0,},{1,4,3,5,0,2,7,6,},{1,4,3,5,0,6,7,2,},
		{1,4,3,5,0,7,2,6,},{1,4,3,5,2,0,7,6,},{1,4,3,5,2,6,7,0,},{1,4,3,5,2,7,0,6,},{1,4,3,5,6,0,7,2,},{1,4,3,5,6,2,7,0,},{1,4,3,5,6,7,0,2,},{1,4,3,5,6,7,2,0,},{1,4,3,5,7,0,2,6,},{1,4,3,5,7,2,0,6,},
		{1,4,3,5,7,6,0,2,},{1,4,3,5,7,6,2,0,},{1,4,3,6,0,2,7,5,},{1,4,3,6,0,7,2,5,},{1,4,3,6,0,7,5,2,},{1,4,3,6,2,0,7,5,},{1,4,3,6,2,7,0,5,},{1,4,3,6,2,7,5,0,},{1,4,3,6,5,0,7,2,},{1,4,3,6,5,2,7,0,},
		{1,4,3,6,5,7,0,2,},{1,4,3,6,5,7,2,0,},{1,4,3,6,7,0,2,5,},{1,4,3,6,7,0,5,2,},{1,4,3,6,7,2,0,5,},{1,4,3,6,7,2,5,0,},{1,4,3,7,0,2,5,6,},{1,4,3,7,0,6,2,5,},{1,4,3,7,0,6,5,2,},{1,4,3,7,2,0,5,6,},
		{1,4,3,7,2,6,0,5,},{1,4,3,7,2,6,5,0,},{1,4,3,7,5,0,2,6,},{1,4,3,7,5,2,0,6,},{1,4,3,7,5,6,0,2,},{1,4,3,7,5,6,2,0,},{1,4,3,7,6,0,2,5,},{1,4,3,7,6,0,5,2,},{1,4,3,7,6,2,0,5,},{1,4,3,7,6,2,5,0,},
		{1,4,5,0,2,3,7,6,},{1,4,5,0,2,6,7,3,},{1,4,5,0,2,7,3,6,},{1,4,5,0,3,2,7,6,},{1,4,5,0,3,6,7,2,},{1,4,5,0,3,7,2,6,},{1,4,5,0,6,2,7,3,},{1,4,5,0,6,3,7,2,},{1,4,5,0,6,7,2,3,},{1,4,5,0,6,7,3,2,},
		{1,4,5,0,7,2,3,6,},{1,4,5,0,7,3,2,6,},{1,4,5,0,7,6,2,3,},{1,4,5,0,7,6,3,2,},{1,4,5,2,0,3,7,6,},{1,4,5,2,0,6,7,3,},{1,4,5,2,0,7,3,6,},{1,4,5,2,3,0,7,6,},{1,4,5,2,3,6,7,0,},{1,4,5,2,3,7,0,6,},
		{1,4,5,2,6,0,7,3,},{1,4,5,2,6,3,7,0,},{1,4,5,2,6,7,0,3,},{1,4,5,2,6,7,3,0,},{1,4,5,2,7,0,3,6,},{1,4,5,2,7,3,0,6,},{1,4,5,2,7,6,0,3,},{1,4,5,2,7,6,3,0,},{1,4,5,6,0,2,7,3,},{1,4,5,6,0,3,7,2,},
		{1,4,5,6,0,7,2,3,},{1,4,5,6,0,7,3,2,},{1,4,5,6,2,0,7,3,},{1,4,5,6,2,3,7,0,},{1,4,5,6,2,7,0,3,},{1,4,5,6,2,7,3,0,},{1,4,5,6,3,0,7,2,},{1,4,5,6,3,2,7,0,},{1,4,5,6,3,7,0,2,},{1,4,5,6,3,7,2,0,},
		{1,4,5,6,7,0,2,3,},{1,4,5,6,7,0,3,2,},{1,4,5,6,7,2,0,3,},{1,4,5,6,7,2,3,0,},{1,4,5,6,7,3,0,2,},{1,4,5,6,7,3,2,0,},{1,4,5,7,0,2,3,6,},{1,4,5,7,0,3,2,6,},{1,4,5,7,0,6,2,3,},{1,4,5,7,0,6,3,2,},
		{1,4,5,7,2,0,3,6,},{1,4,5,7,2,3,0,6,},{1,4,5,7,2,6,0,3,},{1,4,5,7,2,6,3,0,},{1,4,5,7,3,0,2,6,},{1,4,5,7,3,2,0,6,},{1,4,5,7,3,6,0,2,},{1,4,5,7,3,6,2,0,},{1,4,5,7,6,0,2,3,},{1,4,5,7,6,0,3,2,},
		{1,4,5,7,6,2,0,3,},{1,4,5,7,6,2,3,0,},{1,4,5,7,6,3,0,2,},{1,4,5,7,6,3,2,0,},{1,4,6,0,2,3,7,5,},{1,4,6,0,2,7,3,5,},{1,4,6,0,2,7,5,3,},{1,4,6,0,3,2,7,5,},{1,4,6,0,3,7,2,5,},{1,4,6,0,3,7,5,2,},
		{1,4,6,0,5,2,7,3,},{1,4,6,0,5,3,7,2,},{1,4,6,0,5,7,2,3,},{1,4,6,0,5,7,3,2,},{1,4,6,0,7,2,3,5,},{1,4,6,0,7,2,5,3,},{1,4,6,0,7,3,2,5,},{1,4,6,0,7,3,5,2,},{1,4,6,2,0,3,7,5,},{1,4,6,2,0,7,3,5,},
		{1,4,6,2,0,7,5,3,},{1,4,6,2,3,0,7,5,},{1,4,6,2,3,7,0,5,},{1,4,6,2,3,7,5,0,},{1,4,6,2,5,0,7,3,},{1,4,6,2,5,3,7,0,},{1,4,6,2,5,7,0,3,},{1,4,6,2,5,7,3,0,},{1,4,6,2,7,0,3,5,},{1,4,6,2,7,0,5,3,},
		{1,4,6,2,7,3,0,5,},{1,4,6,2,7,3,5,0,},{1,4,6,5,0,2,7,3,},{1,4,6,5,0,3,7,2,},{1,4,6,5,0,7,2,3,},{1,4,6,5,0,7,3,2,},{1,4,6,5,2,0,7,3,},{1,4,6,5,2,3,7,0,},{1,4,6,5,2,7,0,3,},{1,4,6,5,2,7,3,0,},
		{1,4,6,5,3,0,7,2,},{1,4,6,5,3,2,7,0,},{1,4,6,5,3,7,0,2,},{1,4,6,5,3,7,2,0,},{1,4,6,5,7,0,2,3,},{1,4,6,5,7,0,3,2,},{1,4,6,5,7,2,0,3,},{1,4,6,5,7,2,3,0,},{1,4,6,5,7,3,0,2,},{1,4,6,5,7,3,2,0,},
		{1,4,6,7,0,2,3,5,},{1,4,6,7,0,2,5,3,},{1,4,6,7,0,3,2,5,},{1,4,6,7,0,3,5,2,},{1,4,6,7,2,0,3,5,},{1,4,6,7,2,0,5,3,},{1,4,6,7,2,3,0,5,},{1,4,6,7,2,3,5,0,},{1,4,6,7,3,0,2,5,},{1,4,6,7,3,0,5,2,},
		{1,4,6,7,3,2,0,5,},{1,4,6,7,3,2,5,0,},{1,4,6,7,5,0,2,3,},{1,4,6,7,5,0,3,2,},{1,4,6,7,5,2,0,3,},{1,4,6,7,5,2,3,0,},{1,4,6,7,5,3,0,2,},{1,4,6,7,5,3,2,0,},{1,4,7,0,2,3,5,6,},{1,4,7,0,2,6,3,5,},
		{1,4,7,0,2,6,5,3,},{1,4,7,0,3,2,5,6,},{1,4,7,0,3,6,2,5,},{1,4,7,0,3,6,5,2,},{1,4,7,0,5,2,3,6,},{1,4,7,0,5,3,2,6,},{1,4,7,0,5,6,2,3,},{1,4,7,0,5,6,3,2,},{1,4,7,0,6,2,3,5,},{1,4,7,0,6,2,5,3,},
		{1,4,7,0,6,3,2,5,},{1,4,7,0,6,3,5,2,},{1,4,7,2,0,3,5,6,},{1,4,7,2,0,6,3,5,},{1,4,7,2,0,6,5,3,},{1,4,7,2,3,0,5,6,},{1,4,7,2,3,6,0,5,},{1,4,7,2,3,6,5,0,},{1,4,7,2,5,0,3,6,},{1,4,7,2,5,3,0,6,},
		{1,4,7,2,5,6,0,3,},{1,4,7,2,5,6,3,0,},{1,4,7,2,6,0,3,5,},{1,4,7,2,6,0,5,3,},{1,4,7,2,6,3,0,5,},{1,4,7,2,6,3,5,0,},{1,4,7,5,0,2,3,6,},{1,4,7,5,0,3,2,6,},{1,4,7,5,0,6,2,3,},{1,4,7,5,0,6,3,2,},
		{1,4,7,5,2,0,3,6,},{1,4,7,5,2,3,0,6,},{1,4,7,5,2,6,0,3,},{1,4,7,5,2,6,3,0,},{1,4,7,5,3,0,2,6,},{1,4,7,5,3,2,0,6,},{1,4,7,5,3,6,0,2,},{1,4,7,5,3,6,2,0,},{1,4,7,5,6,0,2,3,},{1,4,7,5,6,0,3,2,},
		{1,4,7,5,6,2,0,3,},{1,4,7,5,6,2,3,0,},{1,4,7,5,6,3,0,2,},{1,4,7,5,6,3,2,0,},{1,4,7,6,0,2,3,5,},{1,4,7,6,0,2,5,3,},{1,4,7,6,0,3,2,5,},{1,4,7,6,0,3,5,2,},{1,4,7,6,2,0,3,5,},{1,4,7,6,2,0,5,3,},
		{1,4,7,6,2,3,0,5,},{1,4,7,6,2,3,5,0,},{1,4,7,6,3,0,2,5,},{1,4,7,6,3,0,5,2,},{1,4,7,6,3,2,0,5,},{1,4,7,6,3,2,5,0,},{1,4,7,6,5,0,2,3,},{1,4,7,6,5,0,3,2,},{1,4,7,6,5,2,0,3,},{1,4,7,6,5,2,3,0,},
		{1,4,7,6,5,3,0,2,},{1,4,7,6,5,3,2,0,},{1,5,0,2,3,4,7,6,},{1,5,0,2,3,6,7,4,},{1,5,0,2,3,7,4,6,},{1,5,0,2,6,3,7,4,},{1,5,0,2,6,4,7,3,},{1,5,0,2,6,7,3,4,},{1,5,0,2,6,7,4,3,},{1,5,0,2,7,3,4,6,},
		{1,5,0,2,7,4,3,6,},{1,5,0,2,7,6,3,4,},{1,5,0,2,7,6,4,3,},{1,5,0,4,2,3,7,6,},{1,5,0,4,2,6,7,3,},{1,5,0,4,2,7,3,6,},{1,5,0,4,3,2,7,6,},{1,5,0,4,3,6,7,2,},{1,5,0,4,3,7,2,6,},{1,5,0,4,6,2,7,3,},
		{1,5,0,4,6,3,7,2,},{1,5,0,4,6,7,2,3,},{1,5,0,4,6,7,3,2,},{1,5,0,4,7,2,3,6,},{1,5,0,4,7,3,2,6,},{1,5,0,4,7,6,2,3,},{1,5,0,4,7,6,3,2,},{1,5,0,6,2,3,7,4,},{1,5,0,6,2,4,7,3,},{1,5,0,6,2,7,3,4,},
		{1,5,0,6,2,7,4,3,},{1,5,0,6,3,2,7,4,},{1,5,0,6,3,4,7,2,},{1,5,0,6,3,7,2,4,},{1,5,0,6,3,7,4,2,},{1,5,0,6,7,2,3,4,},{1,5,0,6,7,2,4,3,},{1,5,0,6,7,3,2,4,},{1,5,0,6,7,3,4,2,},{1,5,0,6,7,4,2,3,},
		{1,5,0,6,7,4,3,2,},{1,5,0,7,2,3,4,6,},{1,5,0,7,2,4,3,6,},{1,5,0,7,2,6,3,4,},{1,5,0,7,2,6,4,3,},{1,5,0,7,3,2,4,6,},{1,5,0,7,3,4,2,6,},{1,5,0,7,3,6,2,4,},{1,5,0,7,3,6,4,2,},{1,5,0,7,6,2,3,4,},
		{1,5,0,7,6,2,4,3,},{1,5,0,7,6,3,2,4,},{1,5,0,7,6,3,4,2,},{1,5,0,7,6,4,2,3,},{1,5,0,7,6,4,3,2,},{1,5,3,0,2,4,7,6,},{1,5,3,0,2,6,7,4,},{1,5,3,0,2,7,4,6,},{1,5,3,0,6,2,7,4,},{1,5,3,0,6,4,7,2,},
		{1,5,3,0,6,7,2,4,},{1,5,3,0,6,7,4,2,},{1,5,3,0,7,2,4,6,},{1,5,3,0,7,4,2,6,},{1,5,3,0,7,6,2,4,},{1,5,3,0,7,6,4,2,},{1,5,3,2,0,4,7,6,},{1,5,3,2,0,6,7,4,},{1,5,3,2,0,7,4,6,},{1,5,3,2,6,0,7,4,},
		{1,5,3,2,6,4,7,0,},{1,5,3,2,6,7,0,4,},{1,5,3,2,6,7,4,0,},{1,5,3,2,7,0,4,6,},{1,5,3,2,7,4,0,6,},{1,5,3,2,7,6,0,4,},{1,5,3,2,7,6,4,0,},{1,5,3,4,0,2,7,6,},{1,5,3,4,0,6,7,2,},{1,5,3,4,0,7,2,6,},
		{1,5,3,4,2,0,7,6,},{1,5,3,4,2,6,7,0,},{1,5,3,4,2,7,0,6,},{1,5,3,4,6,0,7,2,},{1,5,3,4,6,2,7,0,},{1,5,3,4,6,7,0,2,},{1,5,3,4,6,7,2,0,},{1,5,3,4,7,0,2,6,},{1,5,3,4,7,2,0,6,},{1,5,3,4,7,6,0,2,},
		{1,5,3,4,7,6,2,0,},{1,5,3,6,0,2,7,4,},{1,5,3,6,0,4,7,2,},{1,5,3,6,0,7,2,4,},{1,5,3,6,0,7,4,2,},{1,5,3,6,2,0,7,4,},{1,5,3,6,2,4,7,0,},{1,5,3,6,2,7,0,4,},{1,5,3,6,2,7,4,0,},{1,5,3,6,7,0,2,4,},
		{1,5,3,6,7,0,4,2,},{1,5,3,6,7,2,0,4,},{1,5,3,6,7,2,4,0,},{1,5,3,6,7,4,0,2,},{1,5,3,6,7,4,2,0,},{1,5,3,7,0,2,4,6,},{1,5,3,7,0,4,2,6,},{1,5,3,7,0,6,2,4,},{1,5,3,7,0,6,4,2,},{1,5,3,7,2,0,4,6,},
		{1,5,3,7,2,4,0,6,},{1,5,3,7,2,6,0,4,},{1,5,3,7,2,6,4,0,},{1,5,3,7,6,0,2,4,},{1,5,3,7,6,0,4,2,},{1,5,3,7,6,2,0,4,},{1,5,3,7,6,2,4,0,},{1,5,3,7,6,4,0,2,},{1,5,3,7,6,4,2,0,},{1,5,4,0,2,3,7,6,},
		{1,5,4,0,2,6,7,3,},{1,5,4,0,2,7,3,6,},{1,5,4,0,3,2,7,6,},{1,5,4,0,3,6,7,2,},{1,5,4,0,3,7,2,6,},{1,5,4,0,6,2,7,3,},{1,5,4,0,6,3,7,2,},{1,5,4,0,6,7,2,3,},{1,5,4,0,6,7,3,2,},{1,5,4,0,7,2,3,6,},
		{1,5,4,0,7,3,2,6,},{1,5,4,0,7,6,2,3,},{1,5,4,0,7,6,3,2,},{1,5,4,2,0,3,7,6,},{1,5,4,2,0,6,7,3,},{1,5,4,2,0,7,3,6,},{1,5,4,2,3,0,7,6,},{1,5,4,2,3,6,7,0,},{1,5,4,2,3,7,0,6,},{1,5,4,2,6,0,7,3,},
		{1,5,4,2,6,3,7,0,},{1,5,4,2,6,7,0,3,},{1,5,4,2,6,7,3,0,},{1,5,4,2,7,0,3,6,},{1,5,4,2,7,3,0,6,},{1,5,4,2,7,6,0,3,},{1,5,4,2,7,6,3,0,},{1,5,4,6,0,2,7,3,},{1,5,4,6,0,3,7,2,},{1,5,4,6,0,7,2,3,},
		{1,5,4,6,0,7,3,2,},{1,5,4,6,2,0,7,3,},{1,5,4,6,2,3,7,0,},{1,5,4,6,2,7,0,3,},{1,5,4,6,2,7,3,0,},{1,5,4,6,3,0,7,2,},{1,5,4,6,3,2,7,0,},{1,5,4,6,3,7,0,2,},{1,5,4,6,3,7,2,0,},{1,5,4,6,7,0,2,3,},
		{1,5,4,6,7,0,3,2,},{1,5,4,6,7,2,0,3,},{1,5,4,6,7,2,3,0,},{1,5,4,6,7,3,0,2,},{1,5,4,6,7,3,2,0,},{1,5,4,7,0,2,3,6,},{1,5,4,7,0,3,2,6,},{1,5,4,7,0,6,2,3,},{1,5,4,7,0,6,3,2,},{1,5,4,7,2,0,3,6,},
		{1,5,4,7,2,3,0,6,},{1,5,4,7,2,6,0,3,},{1,5,4,7,2,6,3,0,},{1,5,4,7,3,0,2,6,},{1,5,4,7,3,2,0,6,},{1,5,4,7,3,6,0,2,},{1,5,4,7,3,6,2,0,},{1,5,4,7,6,0,2,3,},{1,5,4,7,6,0,3,2,},{1,5,4,7,6,2,0,3,},
		{1,5,4,7,6,2,3,0,},{1,5,4,7,6,3,0,2,},{1,5,4,7,6,3,2,0,},{1,5,6,0,2,3,7,4,},{1,5,6,0,2,4,7,3,},{1,5,6,0,2,7,3,4,},{1,5,6,0,2,7,4,3,},{1,5,6,0,3,2,7,4,},{1,5,6,0,3,4,7,2,},{1,5,6,0,3,7,2,4,},
		{1,5,6,0,3,7,4,2,},{1,5,6,0,7,2,3,4,},{1,5,6,0,7,2,4,3,},{1,5,6,0,7,3,2,4,},{1,5,6,0,7,3,4,2,},{1,5,6,0,7,4,2,3,},{1,5,6,0,7,4,3,2,},{1,5,6,2,0,3,7,4,},{1,5,6,2,0,4,7,3,},{1,5,6,2,0,7,3,4,},
		{1,5,6,2,0,7,4,3,},{1,5,6,2,3,0,7,4,},{1,5,6,2,3,4,7,0,},{1,5,6,2,3,7,0,4,},{1,5,6,2,3,7,4,0,},{1,5,6,2,7,0,3,4,},{1,5,6,2,7,0,4,3,},{1,5,6,2,7,3,0,4,},{1,5,6,2,7,3,4,0,},{1,5,6,2,7,4,0,3,},
		{1,5,6,2,7,4,3,0,},{1,5,6,4,0,2,7,3,},{1,5,6,4,0,3,7,2,},{1,5,6,4,0,7,2,3,},{1,5,6,4,0,7,3,2,},{1,5,6,4,2,0,7,3,},{1,5,6,4,2,3,7,0,},{1,5,6,4,2,7,0,3,},{1,5,6,4,2,7,3,0,},{1,5,6,4,3,0,7,2,},
		{1,5,6,4,3,2,7,0,},{1,5,6,4,3,7,0,2,},{1,5,6,4,3,7,2,0,},{1,5,6,4,7,0,2,3,},{1,5,6,4,7,0,3,2,},{1,5,6,4,7,2,0,3,},{1,5,6,4,7,2,3,0,},{1,5,6,4,7,3,0,2,},{1,5,6,4,7,3,2,0,},{1,5,6,7,0,2,3,4,},
		{1,5,6,7,0,2,4,3,},{1,5,6,7,0,3,2,4,},{1,5,6,7,0,3,4,2,},{1,5,6,7,0,4,2,3,},{1,5,6,7,0,4,3,2,},{1,5,6,7,2,0,3,4,},{1,5,6,7,2,0,4,3,},{1,5,6,7,2,3,0,4,},{1,5,6,7,2,3,4,0,},{1,5,6,7,2,4,0,3,},
		{1,5,6,7,2,4,3,0,},{1,5,6,7,3,0,2,4,},{1,5,6,7,3,0,4,2,},{1,5,6,7,3,2,0,4,},{1,5,6,7,3,2,4,0,},{1,5,6,7,3,4,0,2,},{1,5,6,7,3,4,2,0,},{1,5,7,0,2,3,4,6,},{1,5,7,0,2,4,3,6,},{1,5,7,0,2,6,3,4,},
		{1,5,7,0,2,6,4,3,},{1,5,7,0,3,2,4,6,},{1,5,7,0,3,4,2,6,},{1,5,7,0,3,6,2,4,},{1,5,7,0,3,6,4,2,},{1,5,7,0,6,2,3,4,},{1,5,7,0,6,2,4,3,},{1,5,7,0,6,3,2,4,},{1,5,7,0,6,3,4,2,},{1,5,7,0,6,4,2,3,},
		{1,5,7,0,6,4,3,2,},{1,5,7,2,0,3,4,6,},{1,5,7,2,0,4,3,6,},{1,5,7,2,0,6,3,4,},{1,5,7,2,0,6,4,3,},{1,5,7,2,3,0,4,6,},{1,5,7,2,3,4,0,6,},{1,5,7,2,3,6,0,4,},{1,5,7,2,3,6,4,0,},{1,5,7,2,6,0,3,4,},
		{1,5,7,2,6,0,4,3,},{1,5,7,2,6,3,0,4,},{1,5,7,2,6,3,4,0,},{1,5,7,2,6,4,0,3,},{1,5,7,2,6,4,3,0,},{1,5,7,4,0,2,3,6,},{1,5,7,4,0,3,2,6,},{1,5,7,4,0,6,2,3,},{1,5,7,4,0,6,3,2,},{1,5,7,4,2,0,3,6,},
		{1,5,7,4,2,3,0,6,},{1,5,7,4,2,6,0,3,},{1,5,7,4,2,6,3,0,},{1,5,7,4,3,0,2,6,},{1,5,7,4,3,2,0,6,},{1,5,7,4,3,6,0,2,},{1,5,7,4,3,6,2,0,},{1,5,7,4,6,0,2,3,},{1,5,7,4,6,0,3,2,},{1,5,7,4,6,2,0,3,},
		{1,5,7,4,6,2,3,0,},{1,5,7,4,6,3,0,2,},{1,5,7,4,6,3,2,0,},{1,5,7,6,0,2,3,4,},{1,5,7,6,0,2,4,3,},{1,5,7,6,0,3,2,4,},{1,5,7,6,0,3,4,2,},{1,5,7,6,0,4,2,3,},{1,5,7,6,0,4,3,2,},{1,5,7,6,2,0,3,4,},
		{1,5,7,6,2,0,4,3,},{1,5,7,6,2,3,0,4,},{1,5,7,6,2,3,4,0,},{1,5,7,6,2,4,0,3,},{1,5,7,6,2,4,3,0,},{1,5,7,6,3,0,2,4,},{1,5,7,6,3,0,4,2,},{1,5,7,6,3,2,0,4,},{1,5,7,6,3,2,4,0,},{1,5,7,6,3,4,0,2,},
		{1,5,7,6,3,4,2,0,},{1,6,0,2,3,4,7,5,},{1,6,0,2,3,7,4,5,},{1,6,0,2,3,7,5,4,},{1,6,0,2,5,3,7,4,},{1,6,0,2,5,4,7,3,},{1,6,0,2,5,7,3,4,},{1,6,0,2,5,7,4,3,},{1,6,0,2,7,3,4,5,},{1,6,0,2,7,3,5,4,},
		{1,6,0,2,7,4,3,5,},{1,6,0,2,7,4,5,3,},{1,6,0,4,2,3,7,5,},{1,6,0,4,2,7,3,5,},{1,6,0,4,2,7,5,3,},{1,6,0,4,3,2,7,5,},{1,6,0,4,3,7,2,5,},{1,6,0,4,3,7,5,2,},{1,6,0,4,5,2,7,3,},{1,6,0,4,5,3,7,2,},
		{1,6,0,4,5,7,2,3,},{1,6,0,4,5,7,3,2,},{1,6,0,4,7,2,3,5,},{1,6,0,4,7,2,5,3,},{1,6,0,4,7,3,2,5,},{1,6,0,4,7,3,5,2,},{1,6,0,5,2,3,7,4,},{1,6,0,5,2,4,7,3,},{1,6,0,5,2,7,3,4,},{1,6,0,5,2,7,4,3,},
		{1,6,0,5,3,2,7,4,},{1,6,0,5,3,4,7,2,},{1,6,0,5,3,7,2,4,},{1,6,0,5,3,7,4,2,},{1,6,0,5,7,2,3,4,},{1,6,0,5,7,2,4,3,},{1,6,0,5,7,3,2,4,},{1,6,0,5,7,3,4,2,},{1,6,0,5,7,4,2,3,},{1,6,0,5,7,4,3,2,},
		{1,6,0,7,2,3,4,5,},{1,6,0,7,2,3,5,4,},{1,6,0,7,2,4,3,5,},{1,6,0,7,2,4,5,3,},{1,6,0,7,3,2,4,5,},{1,6,0,7,3,2,5,4,},{1,6,0,7,3,4,2,5,},{1,6,0,7,3,4,5,2,},{1,6,0,7,5,2,3,4,},{1,6,0,7,5,2,4,3,},
		{1,6,0,7,5,3,2,4,},{1,6,0,7,5,3,4,2,},{1,6,0,7,5,4,2,3,},{1,6,0,7,5,4,3,2,},{1,6,3,0,2,4,7,5,},{1,6,3,0,2,7,4,5,},{1,6,3,0,2,7,5,4,},{1,6,3,0,5,2,7,4,},{1,6,3,0,5,4,7,2,},{1,6,3,0,5,7,2,4,},
		{1,6,3,0,5,7,4,2,},{1,6,3,0,7,2,4,5,},{1,6,3,0,7,2,5,4,},{1,6,3,0,7,4,2,5,},{1,6,3,0,7,4,5,2,},{1,6,3,2,0,4,7,5,},{1,6,3,2,0,7,4,5,},{1,6,3,2,0,7,5,4,},{1,6,3,2,5,0,7,4,},{1,6,3,2,5,4,7,0,},
		{1,6,3,2,5,7,0,4,},{1,6,3,2,5,7,4,0,},{1,6,3,2,7,0,4,5,},{1,6,3,2,7,0,5,4,},{1,6,3,2,7,4,0,5,},{1,6,3,2,7,4,5,0,},{1,6,3,4,0,2,7,5,},{1,6,3,4,0,7,2,5,},{1,6,3,4,0,7,5,2,},{1,6,3,4,2,0,7,5,},
		{1,6,3,4,2,7,0,5,},{1,6,3,4,2,7,5,0,},{1,6,3,4,5,0,7,2,},{1,6,3,4,5,2,7,0,},{1,6,3,4,5,7,0,2,},{1,6,3,4,5,7,2,0,},{1,6,3,4,7,0,2,5,},{1,6,3,4,7,0,5,2,},{1,6,3,4,7,2,0,5,},{1,6,3,4,7,2,5,0,},
		{1,6,3,5,0,2,7,4,},{1,6,3,5,0,4,7,2,},{1,6,3,5,0,7,2,4,},{1,6,3,5,0,7,4,2,},{1,6,3,5,2,0,7,4,},{1,6,3,5,2,4,7,0,},{1,6,3,5,2,7,0,4,},{1,6,3,5,2,7,4,0,},{1,6,3,5,7,0,2,4,},{1,6,3,5,7,0,4,2,},
		{1,6,3,5,7,2,0,4,},{1,6,3,5,7,2,4,0,},{1,6,3,5,7,4,0,2,},{1,6,3,5,7,4,2,0,},{1,6,3,7,0,2,4,5,},{1,6,3,7,0,2,5,4,},{1,6,3,7,0,4,2,5,},{1,6,3,7,0,4,5,2,},{1,6,3,7,2,0,4,5,},{1,6,3,7,2,0,5,4,},
		{1,6,3,7,2,4,0,5,},{1,6,3,7,2,4,5,0,},{1,6,3,7,5,0,2,4,},{1,6,3,7,5,0,4,2,},{1,6,3,7,5,2,0,4,},{1,6,3,7,5,2,4,0,},{1,6,3,7,5,4,0,2,},{1,6,3,7,5,4,2,0,},{1,6,4,0,2,3,7,5,},{1,6,4,0,2,7,3,5,},
		{1,6,4,0,2,7,5,3,},{1,6,4,0,3,2,7,5,},{1,6,4,0,3,7,2,5,},{1,6,4,0,3,7,5,2,},{1,6,4,0,5,2,7,3,},{1,6,4,0,5,3,7,2,},{1,6,4,0,5,7,2,3,},{1,6,4,0,5,7,3,2,},{1,6,4,0,7,2,3,5,},{1,6,4,0,7,2,5,3,},
		{1,6,4,0,7,3,2,5,},{1,6,4,0,7,3,5,2,},{1,6,4,2,0,3,7,5,},{1,6,4,2,0,7,3,5,},{1,6,4,2,0,7,5,3,},{1,6,4,2,3,0,7,5,},{1,6,4,2,3,7,0,5,},{1,6,4,2,3,7,5,0,},{1,6,4,2,5,0,7,3,},{1,6,4,2,5,3,7,0,},
		{1,6,4,2,5,7,0,3,},{1,6,4,2,5,7,3,0,},{1,6,4,2,7,0,3,5,},{1,6,4,2,7,0,5,3,},{1,6,4,2,7,3,0,5,},{1,6,4,2,7,3,5,0,},{1,6,4,5,0,2,7,3,},{1,6,4,5,0,3,7,2,},{1,6,4,5,0,7,2,3,},{1,6,4,5,0,7,3,2,},
		{1,6,4,5,2,0,7,3,},{1,6,4,5,2,3,7,0,},{1,6,4,5,2,7,0,3,},{1,6,4,5,2,7,3,0,},{1,6,4,5,3,0,7,2,},{1,6,4,5,3,2,7,0,},{1,6,4,5,3,7,0,2,},{1,6,4,5,3,7,2,0,},{1,6,4,5,7,0,2,3,},{1,6,4,5,7,0,3,2,},
		{1,6,4,5,7,2,0,3,},{1,6,4,5,7,2,3,0,},{1,6,4,5,7,3,0,2,},{1,6,4,5,7,3,2,0,},{1,6,4,7,0,2,3,5,},{1,6,4,7,0,2,5,3,},{1,6,4,7,0,3,2,5,},{1,6,4,7,0,3,5,2,},{1,6,4,7,2,0,3,5,},{1,6,4,7,2,0,5,3,},
		{1,6,4,7,2,3,0,5,},{1,6,4,7,2,3,5,0,},{1,6,4,7,3,0,2,5,},{1,6,4,7,3,0,5,2,},{1,6,4,7,3,2,0,5,},{1,6,4,7,3,2,5,0,},{1,6,4,7,5,0,2,3,},{1,6,4,7,5,0,3,2,},{1,6,4,7,5,2,0,3,},{1,6,4,7,5,2,3,0,},
		{1,6,4,7,5,3,0,2,},{1,6,4,7,5,3,2,0,},{1,6,5,0,2,3,7,4,},{1,6,5,0,2,4,7,3,},{1,6,5,0,2,7,3,4,},{1,6,5,0,2,7,4,3,},{1,6,5,0,3,2,7,4,},{1,6,5,0,3,4,7,2,},{1,6,5,0,3,7,2,4,},{1,6,5,0,3,7,4,2,},
		{1,6,5,0,7,2,3,4,},{1,6,5,0,7,2,4,3,},{1,6,5,0,7,3,2,4,},{1,6,5,0,7,3,4,2,},{1,6,5,0,7,4,2,3,},{1,6,5,0,7,4,3,2,},{1,6,5,2,0,3,7,4,},{1,6,5,2,0,4,7,3,},{1,6,5,2,0,7,3,4,},{1,6,5,2,0,7,4,3,},
		{1,6,5,2,3,0,7,4,},{1,6,5,2,3,4,7,0,},{1,6,5,2,3,7,0,4,},{1,6,5,2,3,7,4,0,},{1,6,5,2,7,0,3,4,},{1,6,5,2,7,0,4,3,},{1,6,5,2,7,3,0,4,},{1,6,5,2,7,3,4,0,},{1,6,5,2,7,4,0,3,},{1,6,5,2,7,4,3,0,},
		{1,6,5,4,0,2,7,3,},{1,6,5,4,0,3,7,2,},{1,6,5,4,0,7,2,3,},{1,6,5,4,0,7,3,2,},{1,6,5,4,2,0,7,3,},{1,6,5,4,2,3,7,0,},{1,6,5,4,2,7,0,3,},{1,6,5,4,2,7,3,0,},{1,6,5,4,3,0,7,2,},{1,6,5,4,3,2,7,0,},
		{1,6,5,4,3,7,0,2,},{1,6,5,4,3,7,2,0,},{1,6,5,4,7,0,2,3,},{1,6,5,4,7,0,3,2,},{1,6,5,4,7,2,0,3,},{1,6,5,4,7,2,3,0,},{1,6,5,4,7,3,0,2,},{1,6,5,4,7,3,2,0,},{1,6,5,7,0,2,3,4,},{1,6,5,7,0,2,4,3,},
		{1,6,5,7,0,3,2,4,},{1,6,5,7,0,3,4,2,},{1,6,5,7,0,4,2,3,},{1,6,5,7,0,4,3,2,},{1,6,5,7,2,0,3,4,},{1,6,5,7,2,0,4,3,},{1,6,5,7,2,3,0,4,},{1,6,5,7,2,3,4,0,},{1,6,5,7,2,4,0,3,},{1,6,5,7,2,4,3,0,},
		{1,6,5,7,3,0,2,4,},{1,6,5,7,3,0,4,2,},{1,6,5,7,3,2,0,4,},{1,6,5,7,3,2,4,0,},{1,6,5,7,3,4,0,2,},{1,6,5,7,3,4,2,0,},{1,6,7,0,2,3,4,5,},{1,6,7,0,2,3,5,4,},{1,6,7,0,2,4,3,5,},{1,6,7,0,2,4,5,3,},
		{1,6,7,0,3,2,4,5,},{1,6,7,0,3,2,5,4,},{1,6,7,0,3,4,2,5,},{1,6,7,0,3,4,5,2,},{1,6,7,0,5,2,3,4,},{1,6,7,0,5,2,4,3,},{1,6,7,0,5,3,2,4,},{1,6,7,0,5,3,4,2,},{1,6,7,0,5,4,2,3,},{1,6,7,0,5,4,3,2,},
		{1,6,7,2,0,3,4,5,},{1,6,7,2,0,3,5,4,},{1,6,7,2,0,4,3,5,},{1,6,7,2,0,4,5,3,},{1,6,7,2,3,0,4,5,},{1,6,7,2,3,0,5,4,},{1,6,7,2,3,4,0,5,},{1,6,7,2,3,4,5,0,},{1,6,7,2,5,0,3,4,},{1,6,7,2,5,0,4,3,},
		{1,6,7,2,5,3,0,4,},{1,6,7,2,5,3,4,0,},{1,6,7,2,5,4,0,3,},{1,6,7,2,5,4,3,0,},{1,6,7,4,0,2,3,5,},{1,6,7,4,0,2,5,3,},{1,6,7,4,0,3,2,5,},{1,6,7,4,0,3,5,2,},{1,6,7,4,2,0,3,5,},{1,6,7,4,2,0,5,3,},
		{1,6,7,4,2,3,0,5,},{1,6,7,4,2,3,5,0,},{1,6,7,4,3,0,2,5,},{1,6,7,4,3,0,5,2,},{1,6,7,4,3,2,0,5,},{1,6,7,4,3,2,5,0,},{1,6,7,4,5,0,2,3,},{1,6,7,4,5,0,3,2,},{1,6,7,4,5,2,0,3,},{1,6,7,4,5,2,3,0,},
		{1,6,7,4,5,3,0,2,},{1,6,7,4,5,3,2,0,},{1,6,7,5,0,2,3,4,},{1,6,7,5,0,2,4,3,},{1,6,7,5,0,3,2,4,},{1,6,7,5,0,3,4,2,},{1,6,7,5,0,4,2,3,},{1,6,7,5,0,4,3,2,},{1,6,7,5,2,0,3,4,},{1,6,7,5,2,0,4,3,},
		{1,6,7,5,2,3,0,4,},{1,6,7,5,2,3,4,0,},{1,6,7,5,2,4,0,3,},{1,6,7,5,2,4,3,0,},{1,6,7,5,3,0,2,4,},{1,6,7,5,3,0,4,2,},{1,6,7,5,3,2,0,4,},{1,6,7,5,3,2,4,0,},{1,6,7,5,3,4,0,2,},{1,6,7,5,3,4,2,0,},
		{1,7,0,2,3,4,5,6,},{1,7,0,2,3,6,4,5,},{1,7,0,2,3,6,5,4,},{1,7,0,2,5,3,4,6,},{1,7,0,2,5,4,3,6,},{1,7,0,2,5,6,3,4,},{1,7,0,2,5,6,4,3,},{1,7,0,2,6,3,4,5,},{1,7,0,2,6,3,5,4,},{1,7,0,2,6,4,3,5,},
		{1,7,0,2,6,4,5,3,},{1,7,0,4,2,3,5,6,},{1,7,0,4,2,6,3,5,},{1,7,0,4,2,6,5,3,},{1,7,0,4,3,2,5,6,},{1,7,0,4,3,6,2,5,},{1,7,0,4,3,6,5,2,},{1,7,0,4,5,2,3,6,},{1,7,0,4,5,3,2,6,},{1,7,0,4,5,6,2,3,},
		{1,7,0,4,5,6,3,2,},{1,7,0,4,6,2,3,5,},{1,7,0,4,6,2,5,3,},{1,7,0,4,6,3,2,5,},{1,7,0,4,6,3,5,2,},{1,7,0,5,2,3,4,6,},{1,7,0,5,2,4,3,6,},{1,7,0,5,2,6,3,4,},{1,7,0,5,2,6,4,3,},{1,7,0,5,3,2,4,6,},
		{1,7,0,5,3,4,2,6,},{1,7,0,5,3,6,2,4,},{1,7,0,5,3,6,4,2,},{1,7,0,5,6,2,3,4,},{1,7,0,5,6,2,4,3,},{1,7,0,5,6,3,2,4,},{1,7,0,5,6,3,4,2,},{1,7,0,5,6,4,2,3,},{1,7,0,5,6,4,3,2,},{1,7,0,6,2,3,4,5,},
		{1,7,0,6,2,3,5,4,},{1,7,0,6,2,4,3,5,},{1,7,0,6,2,4,5,3,},{1,7,0,6,3,2,4,5,},{1,7,0,6,3,2,5,4,},{1,7,0,6,3,4,2,5,},{1,7,0,6,3,4,5,2,},{1,7,0,6,5,2,3,4,},{1,7,0,6,5,2,4,3,},{1,7,0,6,5,3,2,4,},
		{1,7,0,6,5,3,4,2,},{1,7,0,6,5,4,2,3,},{1,7,0,6,5,4,3,2,},{1,7,3,0,2,4,5,6,},{1,7,3,0,2,6,4,5,},{1,7,3,0,2,6,5,4,},{1,7,3,0,5,2,4,6,},{1,7,3,0,5,4,2,6,},{1,7,3,0,5,6,2,4,},{1,7,3,0,5,6,4,2,},
		{1,7,3,0,6,2,4,5,},{1,7,3,0,6,2,5,4,},{1,7,3,0,6,4,2,5,},{1,7,3,0,6,4,5,2,},{1,7,3,2,0,4,5,6,},{1,7,3,2,0,6,4,5,},{1,7,3,2,0,6,5,4,},{1,7,3,2,5,0,4,6,},{1,7,3,2,5,4,0,6,},{1,7,3,2,5,6,0,4,},
		{1,7,3,2,5,6,4,0,},{1,7,3,2,6,0,4,5,},{1,7,3,2,6,0,5,4,},{1,7,3,2,6,4,0,5,},{1,7,3,2,6,4,5,0,},{1,7,3,4,0,2,5,6,},{1,7,3,4,0,6,2,5,},{1,7,3,4,0,6,5,2,},{1,7,3,4,2,0,5,6,},{1,7,3,4,2,6,0,5,},
		{1,7,3,4,2,6,5,0,},{1,7,3,4,5,0,2,6,},{1,7,3,4,5,2,0,6,},{1,7,3,4,5,6,0,2,},{1,7,3,4,5,6,2,0,},{1,7,3,4,6,0,2,5,},{1,7,3,4,6,0,5,2,},{1,7,3,4,6,2,0,5,},{1,7,3,4,6,2,5,0,},{1,7,3,5,0,2,4,6,},
		{1,7,3,5,0,4,2,6,},{1,7,3,5,0,6,2,4,},{1,7,3,5,0,6,4,2,},{1,7,3,5,2,0,4,6,},{1,7,3,5,2,4,0,6,},{1,7,3,5,2,6,0,4,},{1,7,3,5,2,6,4,0,},{1,7,3,5,6,0,2,4,},{1,7,3,5,6,0,4,2,},{1,7,3,5,6,2,0,4,},
		{1,7,3,5,6,2,4,0,},{1,7,3,5,6,4,0,2,},{1,7,3,5,6,4,2,0,},{1,7,3,6,0,2,4,5,},{1,7,3,6,0,2,5,4,},{1,7,3,6,0,4,2,5,},{1,7,3,6,0,4,5,2,},{1,7,3,6,2,0,4,5,},{1,7,3,6,2,0,5,4,},{1,7,3,6,2,4,0,5,},
		{1,7,3,6,2,4,5,0,},{1,7,3,6,5,0,2,4,},{1,7,3,6,5,0,4,2,},{1,7,3,6,5,2,0,4,},{1,7,3,6,5,2,4,0,},{1,7,3,6,5,4,0,2,},{1,7,3,6,5,4,2,0,},{1,7,4,0,2,3,5,6,},{1,7,4,0,2,6,3,5,},{1,7,4,0,2,6,5,3,},
		{1,7,4,0,3,2,5,6,},{1,7,4,0,3,6,2,5,},{1,7,4,0,3,6,5,2,},{1,7,4,0,5,2,3,6,},{1,7,4,0,5,3,2,6,},{1,7,4,0,5,6,2,3,},{1,7,4,0,5,6,3,2,},{1,7,4,0,6,2,3,5,},{1,7,4,0,6,2,5,3,},{1,7,4,0,6,3,2,5,},
		{1,7,4,0,6,3,5,2,},{1,7,4,2,0,3,5,6,},{1,7,4,2,0,6,3,5,},{1,7,4,2,0,6,5,3,},{1,7,4,2,3,0,5,6,},{1,7,4,2,3,6,0,5,},{1,7,4,2,3,6,5,0,},{1,7,4,2,5,0,3,6,},{1,7,4,2,5,3,0,6,},{1,7,4,2,5,6,0,3,},
		{1,7,4,2,5,6,3,0,},{1,7,4,2,6,0,3,5,},{1,7,4,2,6,0,5,3,},{1,7,4,2,6,3,0,5,},{1,7,4,2,6,3,5,0,},{1,7,4,5,0,2,3,6,},{1,7,4,5,0,3,2,6,},{1,7,4,5,0,6,2,3,},{1,7,4,5,0,6,3,2,},{1,7,4,5,2,0,3,6,},
		{1,7,4,5,2,3,0,6,},{1,7,4,5,2,6,0,3,},{1,7,4,5,2,6,3,0,},{1,7,4,5,3,0,2,6,},{1,7,4,5,3,2,0,6,},{1,7,4,5,3,6,0,2,},{1,7,4,5,3,6,2,0,},{1,7,4,5,6,0,2,3,},{1,7,4,5,6,0,3,2,},{1,7,4,5,6,2,0,3,},
		{1,7,4,5,6,2,3,0,},{1,7,4,5,6,3,0,2,},{1,7,4,5,6,3,2,0,},{1,7,4,6,0,2,3,5,},{1,7,4,6,0,2,5,3,},{1,7,4,6,0,3,2,5,},{1,7,4,6,0,3,5,2,},{1,7,4,6,2,0,3,5,},{1,7,4,6,2,0,5,3,},{1,7,4,6,2,3,0,5,},
		{1,7,4,6,2,3,5,0,},{1,7,4,6,3,0,2,5,},{1,7,4,6,3,0,5,2,},{1,7,4,6,3,2,0,5,},{1,7,4,6,3,2,5,0,},{1,7,4,6,5,0,2,3,},{1,7,4,6,5,0,3,2,},{1,7,4,6,5,2,0,3,},{1,7,4,6,5,2,3,0,},{1,7,4,6,5,3,0,2,},
		{1,7,4,6,5,3,2,0,},{1,7,5,0,2,3,4,6,},{1,7,5,0,2,4,3,6,},{1,7,5,0,2,6,3,4,},{1,7,5,0,2,6,4,3,},{1,7,5,0,3,2,4,6,},{1,7,5,0,3,4,2,6,},{1,7,5,0,3,6,2,4,},{1,7,5,0,3,6,4,2,},{1,7,5,0,6,2,3,4,},
		{1,7,5,0,6,2,4,3,},{1,7,5,0,6,3,2,4,},{1,7,5,0,6,3,4,2,},{1,7,5,0,6,4,2,3,},{1,7,5,0,6,4,3,2,},{1,7,5,2,0,3,4,6,},{1,7,5,2,0,4,3,6,},{1,7,5,2,0,6,3,4,},{1,7,5,2,0,6,4,3,},{1,7,5,2,3,0,4,6,},
		{1,7,5,2,3,4,0,6,},{1,7,5,2,3,6,0,4,},{1,7,5,2,3,6,4,0,},{1,7,5,2,6,0,3,4,},{1,7,5,2,6,0,4,3,},{1,7,5,2,6,3,0,4,},{1,7,5,2,6,3,4,0,},{1,7,5,2,6,4,0,3,},{1,7,5,2,6,4,3,0,},{1,7,5,4,0,2,3,6,},
		{1,7,5,4,0,3,2,6,},{1,7,5,4,0,6,2,3,},{1,7,5,4,0,6,3,2,},{1,7,5,4,2,0,3,6,},{1,7,5,4,2,3,0,6,},{1,7,5,4,2,6,0,3,},{1,7,5,4,2,6,3,0,},{1,7,5,4,3,0,2,6,},{1,7,5,4,3,2,0,6,},{1,7,5,4,3,6,0,2,},
		{1,7,5,4,3,6,2,0,},{1,7,5,4,6,0,2,3,},{1,7,5,4,6,0,3,2,},{1,7,5,4,6,2,0,3,},{1,7,5,4,6,2,3,0,},{1,7,5,4,6,3,0,2,},{1,7,5,4,6,3,2,0,},{1,7,5,6,0,2,3,4,},{1,7,5,6,0,2,4,3,},{1,7,5,6,0,3,2,4,},
		{1,7,5,6,0,3,4,2,},{1,7,5,6,0,4,2,3,},{1,7,5,6,0,4,3,2,},{1,7,5,6,2,0,3,4,},{1,7,5,6,2,0,4,3,},{1,7,5,6,2,3,0,4,},{1,7,5,6,2,3,4,0,},{1,7,5,6,2,4,0,3,},{1,7,5,6,2,4,3,0,},{1,7,5,6,3,0,2,4,},
		{1,7,5,6,3,0,4,2,},{1,7,5,6,3,2,0,4,},{1,7,5,6,3,2,4,0,},{1,7,5,6,3,4,0,2,},{1,7,5,6,3,4,2,0,},{1,7,6,0,2,3,4,5,},{1,7,6,0,2,3,5,4,},{1,7,6,0,2,4,3,5,},{1,7,6,0,2,4,5,3,},{1,7,6,0,3,2,4,5,},
		{1,7,6,0,3,2,5,4,},{1,7,6,0,3,4,2,5,},{1,7,6,0,3,4,5,2,},{1,7,6,0,5,2,3,4,},{1,7,6,0,5,2,4,3,},{1,7,6,0,5,3,2,4,},{1,7,6,0,5,3,4,2,},{1,7,6,0,5,4,2,3,},{1,7,6,0,5,4,3,2,},{1,7,6,2,0,3,4,5,},
		{1,7,6,2,0,3,5,4,},{1,7,6,2,0,4,3,5,},{1,7,6,2,0,4,5,3,},{1,7,6,2,3,0,4,5,},{1,7,6,2,3,0,5,4,},{1,7,6,2,3,4,0,5,},{1,7,6,2,3,4,5,0,},{1,7,6,2,5,0,3,4,},{1,7,6,2,5,0,4,3,},{1,7,6,2,5,3,0,4,},
		{1,7,6,2,5,3,4,0,},{1,7,6,2,5,4,0,3,},{1,7,6,2,5,4,3,0,},{1,7,6,4,0,2,3,5,},{1,7,6,4,0,2,5,3,},{1,7,6,4,0,3,2,5,},{1,7,6,4,0,3,5,2,},{1,7,6,4,2,0,3,5,},{1,7,6,4,2,0,5,3,},{1,7,6,4,2,3,0,5,},
		{1,7,6,4,2,3,5,0,},{1,7,6,4,3,0,2,5,},{1,7,6,4,3,0,5,2,},{1,7,6,4,3,2,0,5,},{1,7,6,4,3,2,5,0,},{1,7,6,4,5,0,2,3,},{1,7,6,4,5,0,3,2,},{1,7,6,4,5,2,0,3,},{1,7,6,4,5,2,3,0,},{1,7,6,4,5,3,0,2,},
		{1,7,6,4,5,3,2,0,},{1,7,6,5,0,2,3,4,},{1,7,6,5,0,2,4,3,},{1,7,6,5,0,3,2,4,},{1,7,6,5,0,3,4,2,},{1,7,6,5,0,4,2,3,},{1,7,6,5,0,4,3,2,},{1,7,6,5,2,0,3,4,},{1,7,6,5,2,0,4,3,},{1,7,6,5,2,3,0,4,},
		{1,7,6,5,2,3,4,0,},{1,7,6,5,2,4,0,3,},{1,7,6,5,2,4,3,0,},{1,7,6,5,3,0,2,4,},{1,7,6,5,3,0,4,2,},{1,7,6,5,3,2,0,4,},{1,7,6,5,3,2,4,0,},{1,7,6,5,3,4,0,2,},{1,7,6,5,3,4,2,0,},{2,0,1,4,3,6,7,5,},
		{2,0,1,4,3,7,5,6,},{2,0,1,4,5,3,7,6,},{2,0,1,4,5,6,7,3,},{2,0,1,4,5,7,3,6,},{2,0,1,4,6,3,7,5,},{2,0,1,4,6,7,3,5,},{2,0,1,4,6,7,5,3,},{2,0,1,4,7,3,5,6,},{2,0,1,4,7,6,3,5,},{2,0,1,4,7,6,5,3,},
		{2,0,1,5,3,4,7,6,},{2,0,1,5,3,6,7,4,},{2,0,1,5,3,7,4,6,},{2,0,1,5,6,3,7,4,},{2,0,1,5,6,4,7,3,},{2,0,1,5,6,7,3,4,},{2,0,1,5,6,7,4,3,},{2,0,1,5,7,3,4,6,},{2,0,1,5,7,4,3,6,},{2,0,1,5,7,6,3,4,},
		{2,0,1,5,7,6,4,3,},{2,0,1,6,3,4,7,5,},{2,0,1,6,3,7,4,5,},{2,0,1,6,3,7,5,4,},{2,0,1,6,5,3,7,4,},{2,0,1,6,5,4,7,3,},{2,0,1,6,5,7,3,4,},{2,0,1,6,5,7,4,3,},{2,0,1,6,7,3,4,5,},{2,0,1,6,7,3,5,4,},
		{2,0,1,6,7,4,3,5,},{2,0,1,6,7,4,5,3,},{2,0,1,7,3,4,5,6,},{2,0,1,7,3,6,4,5,},{2,0,1,7,3,6,5,4,},{2,0,1,7,5,3,4,6,},{2,0,1,7,5,4,3,6,},{2,0,1,7,5,6,3,4,},{2,0,1,7,5,6,4,3,},{2,0,1,7,6,3,4,5,},
		{2,0,1,7,6,3,5,4,},{2,0,1,7,6,4,3,5,},{2,0,1,7,6,4,5,3,},{2,0,3,1,5,4,7,6,},{2,0,3,1,5,6,7,4,},{2,0,3,1,5,7,4,6,},{2,0,3,1,6,4,7,5,},{2,0,3,1,6,7,4,5,},{2,0,3,1,6,7,5,4,},{2,0,3,1,7,4,5,6,},
		{2,0,3,1,7,6,4,5,},{2,0,3,1,7,6,5,4,},{2,0,3,4,1,6,7,5,},{2,0,3,4,1,7,5,6,},{2,0,3,4,5,1,7,6,},{2,0,3,4,5,6,7,1,},{2,0,3,4,5,7,1,6,},{2,0,3,4,6,1,7,5,},{2,0,3,4,6,7,1,5,},{2,0,3,4,6,7,5,1,},
		{2,0,3,4,7,1,5,6,},{2,0,3,4,7,6,1,5,},{2,0,3,4,7,6,5,1,},{2,0,3,5,1,4,7,6,},{2,0,3,5,1,6,7,4,},{2,0,3,5,1,7,4,6,},{2,0,3,5,6,1,7,4,},{2,0,3,5,6,4,7,1,},{2,0,3,5,6,7,1,4,},{2,0,3,5,6,7,4,1,},
		{2,0,3,5,7,1,4,6,},{2,0,3,5,7,4,1,6,},{2,0,3,5,7,6,1,4,},{2,0,3,5,7,6,4,1,},{2,0,3,6,1,4,7,5,},{2,0,3,6,1,7,4,5,},{2,0,3,6,1,7,5,4,},{2,0,3,6,5,1,7,4,},{2,0,3,6,5,4,7,1,},{2,0,3,6,5,7,1,4,},
		{2,0,3,6,5,7,4,1,},{2,0,3,6,7,1,4,5,},{2,0,3,6,7,1,5,4,},{2,0,3,6,7,4,1,5,},{2,0,3,6,7,4,5,1,},{2,0,3,7,1,4,5,6,},{2,0,3,7,1,6,4,5,},{2,0,3,7,1,6,5,4,},{2,0,3,7,5,1,4,6,},{2,0,3,7,5,4,1,6,},
		{2,0,3,7,5,6,1,4,},{2,0,3,7,5,6,4,1,},{2,0,3,7,6,1,4,5,},{2,0,3,7,6,1,5,4,},{2,0,3,7,6,4,1,5,},{2,0,3,7,6,4,5,1,},{2,0,4,1,3,6,7,5,},{2,0,4,1,3,7,5,6,},{2,0,4,1,5,3,7,6,},{2,0,4,1,5,6,7,3,},
		{2,0,4,1,5,7,3,6,},{2,0,4,1,6,3,7,5,},{2,0,4,1,6,7,3,5,},{2,0,4,1,6,7,5,3,},{2,0,4,1,7,3,5,6,},{2,0,4,1,7,6,3,5,},{2,0,4,1,7,6,5,3,},{2,0,4,5,1,3,7,6,},{2,0,4,5,1,6,7,3,},{2,0,4,5,1,7,3,6,},
		{2,0,4,5,3,1,7,6,},{2,0,4,5,3,6,7,1,},{2,0,4,5,3,7,1,6,},{2,0,4,5,6,1,7,3,},{2,0,4,5,6,3,7,1,},{2,0,4,5,6,7,1,3,},{2,0,4,5,6,7,3,1,},{2,0,4,5,7,1,3,6,},{2,0,4,5,7,3,1,6,},{2,0,4,5,7,6,1,3,},
		{2,0,4,5,7,6,3,1,},{2,0,4,6,1,3,7,5,},{2,0,4,6,1,7,3,5,},{2,0,4,6,1,7,5,3,},{2,0,4,6,3,1,7,5,},{2,0,4,6,3,7,1,5,},{2,0,4,6,3,7,5,1,},{2,0,4,6,5,1,7,3,},{2,0,4,6,5,3,7,1,},{2,0,4,6,5,7,1,3,},
		{2,0,4,6,5,7,3,1,},{2,0,4,6,7,1,3,5,},{2,0,4,6,7,1,5,3,},{2,0,4,6,7,3,1,5,},{2,0,4,6,7,3,5,1,},{2,0,4,7,1,3,5,6,},{2,0,4,7,1,6,3,5,},{2,0,4,7,1,6,5,3,},{2,0,4,7,3,1,5,6,},{2,0,4,7,3,6,1,5,},
		{2,0,4,7,3,6,5,1,},{2,0,4,7,5,1,3,6,},{2,0,4,7,5,3,1,6,},{2,0,4,7,5,6,1,3,},{2,0,4,7,5,6,3,1,},{2,0,4,7,6,1,3,5,},{2,0,4,7,6,1,5,3,},{2,0,4,7,6,3,1,5,},{2,0,4,7,6,3,5,1,},{2,0,5,1,3,4,7,6,},
		{2,0,5,1,3,6,7,4,},{2,0,5,1,3,7,4,6,},{2,0,5,1,6,3,7,4,},{2,0,5,1,6,4,7,3,},{2,0,5,1,6,7,3,4,},{2,0,5,1,6,7,4,3,},{2,0,5,1,7,3,4,6,},{2,0,5,1,7,4,3,6,},{2,0,5,1,7,6,3,4,},{2,0,5,1,7,6,4,3,},
		{2,0,5,4,1,3,7,6,},{2,0,5,4,1,6,7,3,},{2,0,5,4,1,7,3,6,},{2,0,5,4,3,1,7,6,},{2,0,5,4,3,6,7,1,},{2,0,5,4,3,7,1,6,},{2,0,5,4,6,1,7,3,},{2,0,5,4,6,3,7,1,},{2,0,5,4,6,7,1,3,},{2,0,5,4,6,7,3,1,},
		{2,0,5,4,7,1,3,6,},{2,0,5,4,7,3,1,6,},{2,0,5,4,7,6,1,3,},{2,0,5,4,7,6,3,1,},{2,0,5,6,1,3,7,4,},{2,0,5,6,1,4,7,3,},{2,0,5,6,1,7,3,4,},{2,0,5,6,1,7,4,3,},{2,0,5,6,3,1,7,4,},{2,0,5,6,3,4,7,1,},
		{2,0,5,6,3,7,1,4,},{2,0,5,6,3,7,4,1,},{2,0,5,6,7,1,3,4,},{2,0,5,6,7,1,4,3,},{2,0,5,6,7,3,1,4,},{2,0,5,6,7,3,4,1,},{2,0,5,6,7,4,1,3,},{2,0,5,6,7,4,3,1,},{2,0,5,7,1,3,4,6,},{2,0,5,7,1,4,3,6,},
		{2,0,5,7,1,6,3,4,},{2,0,5,7,1,6,4,3,},{2,0,5,7,3,1,4,6,},{2,0,5,7,3,4,1,6,},{2,0,5,7,3,6,1,4,},{2,0,5,7,3,6,4,1,},{2,0,5,7,6,1,3,4,},{2,0,5,7,6,1,4,3,},{2,0,5,7,6,3,1,4,},{2,0,5,7,6,3,4,1,},
		{2,0,5,7,6,4,1,3,},{2,0,5,7,6,4,3,1,},{2,0,6,1,3,4,7,5,},{2,0,6,1,3,7,4,5,},{2,0,6,1,3,7,5,4,},{2,0,6,1,5,3,7,4,},{2,0,6,1,5,4,7,3,},{2,0,6,1,5,7,3,4,},{2,0,6,1,5,7,4,3,},{2,0,6,1,7,3,4,5,},
		{2,0,6,1,7,3,5,4,},{2,0,6,1,7,4,3,5,},{2,0,6,1,7,4,5,3,},{2,0,6,4,1,3,7,5,},{2,0,6,4,1,7,3,5,},{2,0,6,4,1,7,5,3,},{2,0,6,4,3,1,7,5,},{2,0,6,4,3,7,1,5,},{2,0,6,4,3,7,5,1,},{2,0,6,4,5,1,7,3,},
		{2,0,6,4,5,3,7,1,},{2,0,6,4,5,7,1,3,},{2,0,6,4,5,7,3,1,},{2,0,6,4,7,1,3,5,},{2,0,6,4,7,1,5,3,},{2,0,6,4,7,3,1,5,},{2,0,6,4,7,3,5,1,},{2,0,6,5,1,3,7,4,},{2,0,6,5,1,4,7,3,},{2,0,6,5,1,7,3,4,},
		{2,0,6,5,1,7,4,3,},{2,0,6,5,3,1,7,4,},{2,0,6,5,3,4,7,1,},{2,0,6,5,3,7,1,4,},{2,0,6,5,3,7,4,1,},{2,0,6,5,7,1,3,4,},{2,0,6,5,7,1,4,3,},{2,0,6,5,7,3,1,4,},{2,0,6,5,7,3,4,1,},{2,0,6,5,7,4,1,3,},
		{2,0,6,5,7,4,3,1,},{2,0,6,7,1,3,4,5,},{2,0,6,7,1,3,5,4,},{2,0,6,7,1,4,3,5,},{2,0,6,7,1,4,5,3,},{2,0,6,7,3,1,4,5,},{2,0,6,7,3,1,5,4,},{2,0,6,7,3,4,1,5,},{2,0,6,7,3,4,5,1,},{2,0,6,7,5,1,3,4,},
		{2,0,6,7,5,1,4,3,},{2,0,6,7,5,3,1,4,},{2,0,6,7,5,3,4,1,},{2,0,6,7,5,4,1,3,},{2,0,6,7,5,4,3,1,},{2,0,7,1,3,4,5,6,},{2,0,7,1,3,6,4,5,},{2,0,7,1,3,6,5,4,},{2,0,7,1,5,3,4,6,},{2,0,7,1,5,4,3,6,},
		{2,0,7,1,5,6,3,4,},{2,0,7,1,5,6,4,3,},{2,0,7,1,6,3,4,5,},{2,0,7,1,6,3,5,4,},{2,0,7,1,6,4,3,5,},{2,0,7,1,6,4,5,3,},{2,0,7,4,1,3,5,6,},{2,0,7,4,1,6,3,5,},{2,0,7,4,1,6,5,3,},{2,0,7,4,3,1,5,6,},
		{2,0,7,4,3,6,1,5,},{2,0,7,4,3,6,5,1,},{2,0,7,4,5,1,3,6,},{2,0,7,4,5,3,1,6,},{2,0,7,4,5,6,1,3,},{2,0,7,4,5,6,3,1,},{2,0,7,4,6,1,3,5,},{2,0,7,4,6,1,5,3,},{2,0,7,4,6,3,1,5,},{2,0,7,4,6,3,5,1,},
		{2,0,7,5,1,3,4,6,},{2,0,7,5,1,4,3,6,},{2,0,7,5,1,6,3,4,},{2,0,7,5,1,6,4,3,},{2,0,7,5,3,1,4,6,},{2,0,7,5,3,4,1,6,},{2,0,7,5,3,6,1,4,},{2,0,7,5,3,6,4,1,},{2,0,7,5,6,1,3,4,},{2,0,7,5,6,1,4,3,},
		{2,0,7,5,6,3,1,4,},{2,0,7,5,6,3,4,1,},{2,0,7,5,6,4,1,3,},{2,0,7,5,6,4,3,1,},{2,0,7,6,1,3,4,5,},{2,0,7,6,1,3,5,4,},{2,0,7,6,1,4,3,5,},{2,0,7,6,1,4,5,3,},{2,0,7,6,3,1,4,5,},{2,0,7,6,3,1,5,4,},
		{2,0,7,6,3,4,1,5,},{2,0,7,6,3,4,5,1,},{2,0,7,6,5,1,3,4,},{2,0,7,6,5,1,4,3,},{2,0,7,6,5,3,1,4,},{2,0,7,6,5,3,4,1,},{2,0,7,6,5,4,1,3,},{2,0,7,6,5,4,3,1,},{2,3,0,1,5,4,7,6,},{2,3,0,1,5,6,7,4,},
		{2,3,0,1,5,7,4,6,},{2,3,0,1,6,4,7,5,},{2,3,0,1,6,7,4,5,},{2,3,0,1,6,7,5,4,},{2,3,0,1,7,4,5,6,},{2,3,0,1,7,6,4,5,},{2,3,0,1,7,6,5,4,},{2,3,0,4,1,6,7,5,},{2,3,0,4,1,7,5,6,},{2,3,0,4,5,1,7,6,},
		{2,3,0,4,5,6,7,1,},{2,3,0,4,5,7,1,6,},{2,3,0,4,6,1,7,5,},{2,3,0,4,6,7,1,5,},{2,3,0,4,6,7,5,1,},{2,3,0,4,7,1,5,6,},{2,3,0,4,7,6,1,5,},{2,3,0,4,7,6,5,1,},{2,3,0,5,1,4,7,6,},{2,3,0,5,1,6,7,4,},
		{2,3,0,5,1,7,4,6,},{2,3,0,5,6,1,7,4,},{2,3,0,5,6,4,7,1,},{2,3,0,5,6,7,1,4,},{2,3,0,5,6,7,4,1,},{2,3,0,5,7,1,4,6,},{2,3,0,5,7,4,1,6,},{2,3,0,5,7,6,1,4,},{2,3,0,5,7,6,4,1,},{2,3,0,6,1,4,7,5,},
		{2,3,0,6,1,7,4,5,},{2,3,0,6,1,7,5,4,},{2,3,0,6,5,1,7,4,},{2,3,0,6,5,4,7,1,},{2,3,0,6,5,7,1,4,},{2,3,0,6,5,7,4,1,},{2,3,0,6,7,1,4,5,},{2,3,0,6,7,1,5,4,},{2,3,0,6,7,4,1,5,},{2,3,0,6,7,4,5,1,},
		{2,3,0,7,1,4,5,6,},{2,3,0,7,1,6,4,5,},{2,3,0,7,1,6,5,4,},{2,3,0,7,5,1,4,6,},{2,3,0,7,5,4,1,6,},{2,3,0,7,5,6,1,4,},{2,3,0,7,5,6,4,1,},{2,3,0,7,6,1,4,5,},{2,3,0,7,6,1,5,4,},{2,3,0,7,6,4,1,5,},
		{2,3,0,7,6,4,5,1,},{2,3,1,0,5,4,7,6,},{2,3,1,0,5,6,7,4,},{2,3,1,0,5,7,4,6,},{2,3,1,0,6,4,7,5,},{2,3,1,0,6,7,4,5,},{2,3,1,0,6,7,5,4,},{2,3,1,0,7,4,5,6,},{2,3,1,0,7,6,4,5,},{2,3,1,0,7,6,5,4,},
		{2,3,1,4,0,6,7,5,},{2,3,1,4,0,7,5,6,},{2,3,1,4,5,0,7,6,},{2,3,1,4,5,6,7,0,},{2,3,1,4,5,7,0,6,},{2,3,1,4,6,0,7,5,},{2,3,1,4,6,7,0,5,},{2,3,1,4,6,7,5,0,},{2,3,1,4,7,0,5,6,},{2,3,1,4,7,6,0,5,},
		{2,3,1,4,7,6,5,0,},{2,3,1,5,0,4,7,6,},{2,3,1,5,0,6,7,4,},{2,3,1,5,0,7,4,6,},{2,3,1,5,6,0,7,4,},{2,3,1,5,6,4,7,0,},{2,3,1,5,6,7,0,4,},{2,3,1,5,6,7,4,0,},{2,3,1,5,7,0,4,6,},{2,3,1,5,7,4,0,6,},
		{2,3,1,5,7,6,0,4,},{2,3,1,5,7,6,4,0,},{2,3,1,6,0,4,7,5,},{2,3,1,6,0,7,4,5,},{2,3,1,6,0,7,5,4,},{2,3,1,6,5,0,7,4,},{2,3,1,6,5,4,7,0,},{2,3,1,6,5,7,0,4,},{2,3,1,6,5,7,4,0,},{2,3,1,6,7,0,4,5,},
		{2,3,1,6,7,0,5,4,},{2,3,1,6,7,4,0,5,},{2,3,1,6,7,4,5,0,},{2,3,1,7,0,4,5,6,},{2,3,1,7,0,6,4,5,},{2,3,1,7,0,6,5,4,},{2,3,1,7,5,0,4,6,},{2,3,1,7,5,4,0,6,},{2,3,1,7,5,6,0,4,},{2,3,1,7,5,6,4,0,},
		{2,3,1,7,6,0,4,5,},{2,3,1,7,6,0,5,4,},{2,3,1,7,6,4,0,5,},{2,3,1,7,6,4,5,0,},{2,3,4,0,1,6,7,5,},{2,3,4,0,1,7,5,6,},{2,3,4,0,5,1,7,6,},{2,3,4,0,5,6,7,1,},{2,3,4,0,5,7,1,6,},{2,3,4,0,6,1,7,5,},
		{2,3,4,0,6,7,1,5,},{2,3,4,0,6,7,5,1,},{2,3,4,0,7,1,5,6,},{2,3,4,0,7,6,1,5,},{2,3,4,0,7,6,5,1,},{2,3,4,1,0,6,7,5,},{2,3,4,1,0,7,5,6,},{2,3,4,1,5,0,7,6,},{2,3,4,1,5,6,7,0,},{2,3,4,1,5,7,0,6,},
		{2,3,4,1,6,0,7,5,},{2,3,4,1,6,7,0,5,},{2,3,4,1,6,7,5,0,},{2,3,4,1,7,0,5,6,},{2,3,4,1,7,6,0,5,},{2,3,4,1,7,6,5,0,},{2,3,4,5,0,1,7,6,},{2,3,4,5,0,6,7,1,},{2,3,4,5,0,7,1,6,},{2,3,4,5,1,0,7,6,},
		{2,3,4,5,1,6,7,0,},{2,3,4,5,1,7,0,6,},{2,3,4,5,6,0,7,1,},{2,3,4,5,6,1,7,0,},{2,3,4,5,6,7,0,1,},{2,3,4,5,6,7,1,0,},{2,3,4,5,7,0,1,6,},{2,3,4,5,7,1,0,6,},{2,3,4,5,7,6,0,1,},{2,3,4,5,7,6,1,0,},
		{2,3,4,6,0,1,7,5,},{2,3,4,6,0,7,1,5,},{2,3,4,6,0,7,5,1,},{2,3,4,6,1,0,7,5,},{2,3,4,6,1,7,0,5,},{2,3,4,6,1,7,5,0,},{2,3,4,6,5,0,7,1,},{2,3,4,6,5,1,7,0,},{2,3,4,6,5,7,0,1,},{2,3,4,6,5,7,1,0,},
		{2,3,4,6,7,0,1,5,},{2,3,4,6,7,0,5,1,},{2,3,4,6,7,1,0,5,},{2,3,4,6,7,1,5,0,},{2,3,4,7,0,1,5,6,},{2,3,4,7,0,6,1,5,},{2,3,4,7,0,6,5,1,},{2,3,4,7,1,0,5,6,},{2,3,4,7,1,6,0,5,},{2,3,4,7,1,6,5,0,},
		{2,3,4,7,5,0,1,6,},{2,3,4,7,5,1,0,6,},{2,3,4,7,5,6,0,1,},{2,3,4,7,5,6,1,0,},{2,3,4,7,6,0,1,5,},{2,3,4,7,6,0,5,1,},{2,3,4,7,6,1,0,5,},{2,3,4,7,6,1,5,0,},{2,3,5,0,1,4,7,6,},{2,3,5,0,1,6,7,4,},
		{2,3,5,0,1,7,4,6,},{2,3,5,0,6,1,7,4,},{2,3,5,0,6,4,7,1,},{2,3,5,0,6,7,1,4,},{2,3,5,0,6,7,4,1,},{2,3,5,0,7,1,4,6,},{2,3,5,0,7,4,1,6,},{2,3,5,0,7,6,1,4,},{2,3,5,0,7,6,4,1,},{2,3,5,1,0,4,7,6,},
		{2,3,5,1,0,6,7,4,},{2,3,5,1,0,7,4,6,},{2,3,5,1,6,0,7,4,},{2,3,5,1,6,4,7,0,},{2,3,5,1,6,7,0,4,},{2,3,5,1,6,7,4,0,},{2,3,5,1,7,0,4,6,},{2,3,5,1,7,4,0,6,},{2,3,5,1,7,6,0,4,},{2,3,5,1,7,6,4,0,},
		{2,3,5,4,0,1,7,6,},{2,3,5,4,0,6,7,1,},{2,3,5,4,0,7,1,6,},{2,3,5,4,1,0,7,6,},{2,3,5,4,1,6,7,0,},{2,3,5,4,1,7,0,6,},{2,3,5,4,6,0,7,1,},{2,3,5,4,6,1,7,0,},{2,3,5,4,6,7,0,1,},{2,3,5,4,6,7,1,0,},
		{2,3,5,4,7,0,1,6,},{2,3,5,4,7,1,0,6,},{2,3,5,4,7,6,0,1,},{2,3,5,4,7,6,1,0,},{2,3,5,6,0,1,7,4,},{2,3,5,6,0,4,7,1,},{2,3,5,6,0,7,1,4,},{2,3,5,6,0,7,4,1,},{2,3,5,6,1,0,7,4,},{2,3,5,6,1,4,7,0,},
		{2,3,5,6,1,7,0,4,},{2,3,5,6,1,7,4,0,},{2,3,5,6,7,0,1,4,},{2,3,5,6,7,0,4,1,},{2,3,5,6,7,1,0,4,},{2,3,5,6,7,1,4,0,},{2,3,5,6,7,4,0,1,},{2,3,5,6,7,4,1,0,},{2,3,5,7,0,1,4,6,},{2,3,5,7,0,4,1,6,},
		{2,3,5,7,0,6,1,4,},{2,3,5,7,0,6,4,1,},{2,3,5,7,1,0,4,6,},{2,3,5,7,1,4,0,6,},{2,3,5,7,1,6,0,4,},{2,3,5,7,1,6,4,0,},{2,3,5,7,6,0,1,4,},{2,3,5,7,6,0,4,1,},{2,3,5,7,6,1,0,4,},{2,3,5,7,6,1,4,0,},
		{2,3,5,7,6,4,0,1,},{2,3,5,7,6,4,1,0,},{2,3,6,0,1,4,7,5,},{2,3,6,0,1,7,4,5,},{2,3,6,0,1,7,5,4,},{2,3,6,0,5,1,7,4,},{2,3,6,0,5,4,7,1,},{2,3,6,0,5,7,1,4,},{2,3,6,0,5,7,4,1,},{2,3,6,0,7,1,4,5,},
		{2,3,6,0,7,1,5,4,},{2,3,6,0,7,4,1,5,},{2,3,6,0,7,4,5,1,},{2,3,6,1,0,4,7,5,},{2,3,6,1,0,7,4,5,},{2,3,6,1,0,7,5,4,},{2,3,6,1,5,0,7,4,},{2,3,6,1,5,4,7,0,},{2,3,6,1,5,7,0,4,},{2,3,6,1,5,7,4,0,},
		{2,3,6,1,7,0,4,5,},{2,3,6,1,7,0,5,4,},{2,3,6,1,7,4,0,5,},{2,3,6,1,7,4,5,0,},{2,3,6,4,0,1,7,5,},{2,3,6,4,0,7,1,5,},{2,3,6,4,0,7,5,1,},{2,3,6,4,1,0,7,5,},{2,3,6,4,1,7,0,5,},{2,3,6,4,1,7,5,0,},
		{2,3,6,4,5,0,7,1,},{2,3,6,4,5,1,7,0,},{2,3,6,4,5,7,0,1,},{2,3,6,4,5,7,1,0,},{2,3,6,4,7,0,1,5,},{2,3,6,4,7,0,5,1,},{2,3,6,4,7,1,0,5,},{2,3,6,4,7,1,5,0,},{2,3,6,5,0,1,7,4,},{2,3,6,5,0,4,7,1,},
		{2,3,6,5,0,7,1,4,},{2,3,6,5,0,7,4,1,},{2,3,6,5,1,0,7,4,},{2,3,6,5,1,4,7,0,},{2,3,6,5,1,7,0,4,},{2,3,6,5,1,7,4,0,},{2,3,6,5,7,0,1,4,},{2,3,6,5,7,0,4,1,},{2,3,6,5,7,1,0,4,},{2,3,6,5,7,1,4,0,},
		{2,3,6,5,7,4,0,1,},{2,3,6,5,7,4,1,0,},{2,3,6,7,0,1,4,5,},{2,3,6,7,0,1,5,4,},{2,3,6,7,0,4,1,5,},{2,3,6,7,0,4,5,1,},{2,3,6,7,1,0,4,5,},{2,3,6,7,1,0,5,4,},{2,3,6,7,1,4,0,5,},{2,3,6,7,1,4,5,0,},
		{2,3,6,7,5,0,1,4,},{2,3,6,7,5,0,4,1,},{2,3,6,7,5,1,0,4,},{2,3,6,7,5,1,4,0,},{2,3,6,7,5,4,0,1,},{2,3,6,7,5,4,1,0,},{2,3,7,0,1,4,5,6,},{2,3,7,0,1,6,4,5,},{2,3,7,0,1,6,5,4,},{2,3,7,0,5,1,4,6,},
		{2,3,7,0,5,4,1,6,},{2,3,7,0,5,6,1,4,},{2,3,7,0,5,6,4,1,},{2,3,7,0,6,1,4,5,},{2,3,7,0,6,1,5,4,},{2,3,7,0,6,4,1,5,},{2,3,7,0,6,4,5,1,},{2,3,7,1,0,4,5,6,},{2,3,7,1,0,6,4,5,},{2,3,7,1,0,6,5,4,},
		{2,3,7,1,5,0,4,6,},{2,3,7,1,5,4,0,6,},{2,3,7,1,5,6,0,4,},{2,3,7,1,5,6,4,0,},{2,3,7,1,6,0,4,5,},{2,3,7,1,6,0,5,4,},{2,3,7,1,6,4,0,5,},{2,3,7,1,6,4,5,0,},{2,3,7,4,0,1,5,6,},{2,3,7,4,0,6,1,5,},
		{2,3,7,4,0,6,5,1,},{2,3,7,4,1,0,5,6,},{2,3,7,4,1,6,0,5,},{2,3,7,4,1,6,5,0,},{2,3,7,4,5,0,1,6,},{2,3,7,4,5,1,0,6,},{2,3,7,4,5,6,0,1,},{2,3,7,4,5,6,1,0,},{2,3,7,4,6,0,1,5,},{2,3,7,4,6,0,5,1,},
		{2,3,7,4,6,1,0,5,},{2,3,7,4,6,1,5,0,},{2,3,7,5,0,1,4,6,},{2,3,7,5,0,4,1,6,},{2,3,7,5,0,6,1,4,},{2,3,7,5,0,6,4,1,},{2,3,7,5,1,0,4,6,},{2,3,7,5,1,4,0,6,},{2,3,7,5,1,6,0,4,},{2,3,7,5,1,6,4,0,},
		{2,3,7,5,6,0,1,4,},{2,3,7,5,6,0,4,1,},{2,3,7,5,6,1,0,4,},{2,3,7,5,6,1,4,0,},{2,3,7,5,6,4,0,1,},{2,3,7,5,6,4,1,0,},{2,3,7,6,0,1,4,5,},{2,3,7,6,0,1,5,4,},{2,3,7,6,0,4,1,5,},{2,3,7,6,0,4,5,1,},
		{2,3,7,6,1,0,4,5,},{2,3,7,6,1,0,5,4,},{2,3,7,6,1,4,0,5,},{2,3,7,6,1,4,5,0,},{2,3,7,6,5,0,1,4,},{2,3,7,6,5,0,4,1,},{2,3,7,6,5,1,0,4,},{2,3,7,6,5,1,4,0,},{2,3,7,6,5,4,0,1,},{2,3,7,6,5,4,1,0,},
		{2,4,0,1,3,6,7,5,},{2,4,0,1,3,7,5,6,},{2,4,0,1,5,3,7,6,},{2,4,0,1,5,6,7,3,},{2,4,0,1,5,7,3,6,},{2,4,0,1,6,3,7,5,},{2,4,0,1,6,7,3,5,},{2,4,0,1,6,7,5,3,},{2,4,0,1,7,3,5,6,},{2,4,0,1,7,6,3,5,},
		{2,4,0,1,7,6,5,3,},{2,4,0,5,1,3,7,6,},{2,4,0,5,1,6,7,3,},{2,4,0,5,1,7,3,6,},{2,4,0,5,3,1,7,6,},{2,4,0,5,3,6,7,1,},{2,4,0,5,3,7,1,6,},{2,4,0,5,6,1,7,3,},{2,4,0,5,6,3,7,1,},{2,4,0,5,6,7,1,3,},
		{2,4,0,5,6,7,3,1,},{2,4,0,5,7,1,3,6,},{2,4,0,5,7,3,1,6,},{2,4,0,5,7,6,1,3,},{2,4,0,5,7,6,3,1,},{2,4,0,6,1,3,7,5,},{2,4,0,6,1,7,3,5,},{2,4,0,6,1,7,5,3,},{2,4,0,6,3,1,7,5,},{2,4,0,6,3,7,1,5,},
		{2,4,0,6,3,7,5,1,},{2,4,0,6,5,1,7,3,},{2,4,0,6,5,3,7,1,},{2,4,0,6,5,7,1,3,},{2,4,0,6,5,7,3,1,},{2,4,0,6,7,1,3,5,},{2,4,0,6,7,1,5,3,},{2,4,0,6,7,3,1,5,},{2,4,0,6,7,3,5,1,},{2,4,0,7,1,3,5,6,},
		{2,4,0,7,1,6,3,5,},{2,4,0,7,1,6,5,3,},{2,4,0,7,3,1,5,6,},{2,4,0,7,3,6,1,5,},{2,4,0,7,3,6,5,1,},{2,4,0,7,5,1,3,6,},{2,4,0,7,5,3,1,6,},{2,4,0,7,5,6,1,3,},{2,4,0,7,5,6,3,1,},{2,4,0,7,6,1,3,5,},
		{2,4,0,7,6,1,5,3,},{2,4,0,7,6,3,1,5,},{2,4,0,7,6,3,5,1,},{2,4,1,0,3,6,7,5,},{2,4,1,0,3,7,5,6,},{2,4,1,0,5,3,7,6,},{2,4,1,0,5,6,7,3,},{2,4,1,0,5,7,3,6,},{2,4,1,0,6,3,7,5,},{2,4,1,0,6,7,3,5,},
		{2,4,1,0,6,7,5,3,},{2,4,1,0,7,3,5,6,},{2,4,1,0,7,6,3,5,},{2,4,1,0,7,6,5,3,},{2,4,1,5,0,3,7,6,},{2,4,1,5,0,6,7,3,},{2,4,1,5,0,7,3,6,},{2,4,1,5,3,0,7,6,},{2,4,1,5,3,6,7,0,},{2,4,1,5,3,7,0,6,},
		{2,4,1,5,6,0,7,3,},{2,4,1,5,6,3,7,0,},{2,4,1,5,6,7,0,3,},{2,4,1,5,6,7,3,0,},{2,4,1,5,7,0,3,6,},{2,4,1,5,7,3,0,6,},{2,4,1,5,7,6,0,3,},{2,4,1,5,7,6,3,0,},{2,4,1,6,0,3,7,5,},{2,4,1,6,0,7,3,5,},
		{2,4,1,6,0,7,5,3,},{2,4,1,6,3,0,7,5,},{2,4,1,6,3,7,0,5,},{2,4,1,6,3,7,5,0,},{2,4,1,6,5,0,7,3,},{2,4,1,6,5,3,7,0,},{2,4,1,6,5,7,0,3,},{2,4,1,6,5,7,3,0,},{2,4,1,6,7,0,3,5,},{2,4,1,6,7,0,5,3,},
		{2,4,1,6,7,3,0,5,},{2,4,1,6,7,3,5,0,},{2,4,1,7,0,3,5,6,},{2,4,1,7,0,6,3,5,},{2,4,1,7,0,6,5,3,},{2,4,1,7,3,0,5,6,},{2,4,1,7,3,6,0,5,},{2,4,1,7,3,6,5,0,},{2,4,1,7,5,0,3,6,},{2,4,1,7,5,3,0,6,},
		{2,4,1,7,5,6,0,3,},{2,4,1,7,5,6,3,0,},{2,4,1,7,6,0,3,5,},{2,4,1,7,6,0,5,3,},{2,4,1,7,6,3,0,5,},{2,4,1,7,6,3,5,0,},{2,4,3,0,1,6,7,5,},{2,4,3,0,1,7,5,6,},{2,4,3,0,5,1,7,6,},{2,4,3,0,5,6,7,1,},
		{2,4,3,0,5,7,1,6,},{2,4,3,0,6,1,7,5,},{2,4,3,0,6,7,1,5,},{2,4,3,0,6,7,5,1,},{2,4,3,0,7,1,5,6,},{2,4,3,0,7,6,1,5,},{2,4,3,0,7,6,5,1,},{2,4,3,1,0,6,7,5,},{2,4,3,1,0,7,5,6,},{2,4,3,1,5,0,7,6,},
		{2,4,3,1,5,6,7,0,},{2,4,3,1,5,7,0,6,},{2,4,3,1,6,0,7,5,},{2,4,3,1,6,7,0,5,},{2,4,3,1,6,7,5,0,},{2,4,3,1,7,0,5,6,},{2,4,3,1,7,6,0,5,},{2,4,3,1,7,6,5,0,},{2,4,3,5,0,1,7,6,},{2,4,3,5,0,6,7,1,},
		{2,4,3,5,0,7,1,6,},{2,4,3,5,1,0,7,6,},{2,4,3,5,1,6,7,0,},{2,4,3,5,1,7,0,6,},{2,4,3,5,6,0,7,1,},{2,4,3,5,6,1,7,0,},{2,4,3,5,6,7,0,1,},{2,4,3,5,6,7,1,0,},{2,4,3,5,7,0,1,6,},{2,4,3,5,7,1,0,6,},
		{2,4,3,5,7,6,0,1,},{2,4,3,5,7,6,1,0,},{2,4,3,6,0,1,7,5,},{2,4,3,6,0,7,1,5,},{2,4,3,6,0,7,5,1,},{2,4,3,6,1,0,7,5,},{2,4,3,6,1,7,0,5,},{2,4,3,6,1,7,5,0,},{2,4,3,6,5,0,7,1,},{2,4,3,6,5,1,7,0,},
		{2,4,3,6,5,7,0,1,},{2,4,3,6,5,7,1,0,},{2,4,3,6,7,0,1,5,},{2,4,3,6,7,0,5,1,},{2,4,3,6,7,1,0,5,},{2,4,3,6,7,1,5,0,},{2,4,3,7,0,1,5,6,},{2,4,3,7,0,6,1,5,},{2,4,3,7,0,6,5,1,},{2,4,3,7,1,0,5,6,},
		{2,4,3,7,1,6,0,5,},{2,4,3,7,1,6,5,0,},{2,4,3,7,5,0,1,6,},{2,4,3,7,5,1,0,6,},{2,4,3,7,5,6,0,1,},{2,4,3,7,5,6,1,0,},{2,4,3,7,6,0,1,5,},{2,4,3,7,6,0,5,1,},{2,4,3,7,6,1,0,5,},{2,4,3,7,6,1,5,0,},
		{2,4,5,0,1,3,7,6,},{2,4,5,0,1,6,7,3,},{2,4,5,0,1,7,3,6,},{2,4,5,0,3,1,7,6,},{2,4,5,0,3,6,7,1,},{2,4,5,0,3,7,1,6,},{2,4,5,0,6,1,7,3,},{2,4,5,0,6,3,7,1,},{2,4,5,0,6,7,1,3,},{2,4,5,0,6,7,3,1,},
		{2,4,5,0,7,1,3,6,},{2,4,5,0,7,3,1,6,},{2,4,5,0,7,6,1,3,},{2,4,5,0,7,6,3,1,},{2,4,5,1,0,3,7,6,},{2,4,5,1,0,6,7,3,},{2,4,5,1,0,7,3,6,},{2,4,5,1,3,0,7,6,},{2,4,5,1,3,6,7,0,},{2,4,5,1,3,7,0,6,},
		{2,4,5,1,6,0,7,3,},{2,4,5,1,6,3,7,0,},{2,4,5,1,6,7,0,3,},{2,4,5,1,6,7,3,0,},{2,4,5,1,7,0,3,6,},{2,4,5,1,7,3,0,6,},{2,4,5,1,7,6,0,3,},{2,4,5,1,7,6,3,0,},{2,4,5,6,0,1,7,3,},{2,4,5,6,0,3,7,1,},
		{2,4,5,6,0,7,1,3,},{2,4,5,6,0,7,3,1,},{2,4,5,6,1,0,7,3,},{2,4,5,6,1,3,7,0,},{2,4,5,6,1,7,0,3,},{2,4,5,6,1,7,3,0,},{2,4,5,6,3,0,7,1,},{2,4,5,6,3,1,7,0,},{2,4,5,6,3,7,0,1,},{2,4,5,6,3,7,1,0,},
		{2,4,5,6,7,0,1,3,},{2,4,5,6,7,0,3,1,},{2,4,5,6,7,1,0,3,},{2,4,5,6,7,1,3,0,},{2,4,5,6,7,3,0,1,},{2,4,5,6,7,3,1,0,},{2,4,5,7,0,1,3,6,},{2,4,5,7,0,3,1,6,},{2,4,5,7,0,6,1,3,},{2,4,5,7,0,6,3,1,},
		{2,4,5,7,1,0,3,6,},{2,4,5,7,1,3,0,6,},{2,4,5,7,1,6,0,3,},{2,4,5,7,1,6,3,0,},{2,4,5,7,3,0,1,6,},{2,4,5,7,3,1,0,6,},{2,4,5,7,3,6,0,1,},{2,4,5,7,3,6,1,0,},{2,4,5,7,6,0,1,3,},{2,4,5,7,6,0,3,1,},
		{2,4,5,7,6,1,0,3,},{2,4,5,7,6,1,3,0,},{2,4,5,7,6,3,0,1,},{2,4,5,7,6,3,1,0,},{2,4,6,0,1,3,7,5,},{2,4,6,0,1,7,3,5,},{2,4,6,0,1,7,5,3,},{2,4,6,0,3,1,7,5,},{2,4,6,0,3,7,1,5,},{2,4,6,0,3,7,5,1,},
		{2,4,6,0,5,1,7,3,},{2,4,6,0,5,3,7,1,},{2,4,6,0,5,7,1,3,},{2,4,6,0,5,7,3,1,},{2,4,6,0,7,1,3,5,},{2,4,6,0,7,1,5,3,},{2,4,6,0,7,3,1,5,},{2,4,6,0,7,3,5,1,},{2,4,6,1,0,3,7,5,},{2,4,6,1,0,7,3,5,},
		{2,4,6,1,0,7,5,3,},{2,4,6,1,3,0,7,5,},{2,4,6,1,3,7,0,5,},{2,4,6,1,3,7,5,0,},{2,4,6,1,5,0,7,3,},{2,4,6,1,5,3,7,0,},{2,4,6,1,5,7,0,3,},{2,4,6,1,5,7,3,0,},{2,4,6,1,7,0,3,5,},{2,4,6,1,7,0,5,3,},
		{2,4,6,1,7,3,0,5,},{2,4,6,1,7,3,5,0,},{2,4,6,5,0,1,7,3,},{2,4,6,5,0,3,7,1,},{2,4,6,5,0,7,1,3,},{2,4,6,5,0,7,3,1,},{2,4,6,5,1,0,7,3,},{2,4,6,5,1,3,7,0,},{2,4,6,5,1,7,0,3,},{2,4,6,5,1,7,3,0,},
		{2,4,6,5,3,0,7,1,},{2,4,6,5,3,1,7,0,},{2,4,6,5,3,7,0,1,},{2,4,6,5,3,7,1,0,},{2,4,6,5,7,0,1,3,},{2,4,6,5,7,0,3,1,},{2,4,6,5,7,1,0,3,},{2,4,6,5,7,1,3,0,},{2,4,6,5,7,3,0,1,},{2,4,6,5,7,3,1,0,},
		{2,4,6,7,0,1,3,5,},{2,4,6,7,0,1,5,3,},{2,4,6,7,0,3,1,5,},{2,4,6,7,0,3,5,1,},{2,4,6,7,1,0,3,5,},{2,4,6,7,1,0,5,3,},{2,4,6,7,1,3,0,5,},{2,4,6,7,1,3,5,0,},{2,4,6,7,3,0,1,5,},{2,4,6,7,3,0,5,1,},
		{2,4,6,7,3,1,0,5,},{2,4,6,7,3,1,5,0,},{2,4,6,7,5,0,1,3,},{2,4,6,7,5,0,3,1,},{2,4,6,7,5,1,0,3,},{2,4,6,7,5,1,3,0,},{2,4,6,7,5,3,0,1,},{2,4,6,7,5,3,1,0,},{2,4,7,0,1,3,5,6,},{2,4,7,0,1,6,3,5,},
		{2,4,7,0,1,6,5,3,},{2,4,7,0,3,1,5,6,},{2,4,7,0,3,6,1,5,},{2,4,7,0,3,6,5,1,},{2,4,7,0,5,1,3,6,},{2,4,7,0,5,3,1,6,},{2,4,7,0,5,6,1,3,},{2,4,7,0,5,6,3,1,},{2,4,7,0,6,1,3,5,},{2,4,7,0,6,1,5,3,},
		{2,4,7,0,6,3,1,5,},{2,4,7,0,6,3,5,1,},{2,4,7,1,0,3,5,6,},{2,4,7,1,0,6,3,5,},{2,4,7,1,0,6,5,3,},{2,4,7,1,3,0,5,6,},{2,4,7,1,3,6,0,5,},{2,4,7,1,3,6,5,0,},{2,4,7,1,5,0,3,6,},{2,4,7,1,5,3,0,6,},
		{2,4,7,1,5,6,0,3,},{2,4,7,1,5,6,3,0,},{2,4,7,1,6,0,3,5,},{2,4,7,1,6,0,5,3,},{2,4,7,1,6,3,0,5,},{2,4,7,1,6,3,5,0,},{2,4,7,5,0,1,3,6,},{2,4,7,5,0,3,1,6,},{2,4,7,5,0,6,1,3,},{2,4,7,5,0,6,3,1,},
		{2,4,7,5,1,0,3,6,},{2,4,7,5,1,3,0,6,},{2,4,7,5,1,6,0,3,},{2,4,7,5,1,6,3,0,},{2,4,7,5,3,0,1,6,},{2,4,7,5,3,1,0,6,},{2,4,7,5,3,6,0,1,},{2,4,7,5,3,6,1,0,},{2,4,7,5,6,0,1,3,},{2,4,7,5,6,0,3,1,},
		{2,4,7,5,6,1,0,3,},{2,4,7,5,6,1,3,0,},{2,4,7,5,6,3,0,1,},{2,4,7,5,6,3,1,0,},{2,4,7,6,0,1,3,5,},{2,4,7,6,0,1,5,3,},{2,4,7,6,0,3,1,5,},{2,4,7,6,0,3,5,1,},{2,4,7,6,1,0,3,5,},{2,4,7,6,1,0,5,3,},
		{2,4,7,6,1,3,0,5,},{2,4,7,6,1,3,5,0,},{2,4,7,6,3,0,1,5,},{2,4,7,6,3,0,5,1,},{2,4,7,6,3,1,0,5,},{2,4,7,6,3,1,5,0,},{2,4,7,6,5,0,1,3,},{2,4,7,6,5,0,3,1,},{2,4,7,6,5,1,0,3,},{2,4,7,6,5,1,3,0,},
		{2,4,7,6,5,3,0,1,},{2,4,7,6,5,3,1,0,},{2,5,0,1,3,4,7,6,},{2,5,0,1,3,6,7,4,},{2,5,0,1,3,7,4,6,},{2,5,0,1,6,3,7,4,},{2,5,0,1,6,4,7,3,},{2,5,0,1,6,7,3,4,},{2,5,0,1,6,7,4,3,},{2,5,0,1,7,3,4,6,},
		{2,5,0,1,7,4,3,6,},{2,5,0,1,7,6,3,4,},{2,5,0,1,7,6,4,3,},{2,5,0,4,1,3,7,6,},{2,5,0,4,1,6,7,3,},{2,5,0,4,1,7,3,6,},{2,5,0,4,3,1,7,6,},{2,5,0,4,3,6,7,1,},{2,5,0,4,3,7,1,6,},{2,5,0,4,6,1,7,3,},
		{2,5,0,4,6,3,7,1,},{2,5,0,4,6,7,1,3,},{2,5,0,4,6,7,3,1,},{2,5,0,4,7,1,3,6,},{2,5,0,4,7,3,1,6,},{2,5,0,4,7,6,1,3,},{2,5,0,4,7,6,3,1,},{2,5,0,6,1,3,7,4,},{2,5,0,6,1,4,7,3,},{2,5,0,6,1,7,3,4,},
		{2,5,0,6,1,7,4,3,},{2,5,0,6,3,1,7,4,},{2,5,0,6,3,4,7,1,},{2,5,0,6,3,7,1,4,},{2,5,0,6,3,7,4,1,},{2,5,0,6,7,1,3,4,},{2,5,0,6,7,1,4,3,},{2,5,0,6,7,3,1,4,},{2,5,0,6,7,3,4,1,},{2,5,0,6,7,4,1,3,},
		{2,5,0,6,7,4,3,1,},{2,5,0,7,1,3,4,6,},{2,5,0,7,1,4,3,6,},{2,5,0,7,1,6,3,4,},{2,5,0,7,1,6,4,3,},{2,5,0,7,3,1,4,6,},{2,5,0,7,3,4,1,6,},{2,5,0,7,3,6,1,4,},{2,5,0,7,3,6,4,1,},{2,5,0,7,6,1,3,4,},
		{2,5,0,7,6,1,4,3,},{2,5,0,7,6,3,1,4,},{2,5,0,7,6,3,4,1,},{2,5,0,7,6,4,1,3,},{2,5,0,7,6,4,3,1,},{2,5,1,0,3,4,7,6,},{2,5,1,0,3,6,7,4,},{2,5,1,0,3,7,4,6,},{2,5,1,0,6,3,7,4,},{2,5,1,0,6,4,7,3,},
		{2,5,1,0,6,7,3,4,},{2,5,1,0,6,7,4,3,},{2,5,1,0,7,3,4,6,},{2,5,1,0,7,4,3,6,},{2,5,1,0,7,6,3,4,},{2,5,1,0,7,6,4,3,},{2,5,1,4,0,3,7,6,},{2,5,1,4,0,6,7,3,},{2,5,1,4,0,7,3,6,},{2,5,1,4,3,0,7,6,},
		{2,5,1,4,3,6,7,0,},{2,5,1,4,3,7,0,6,},{2,5,1,4,6,0,7,3,},{2,5,1,4,6,3,7,0,},{2,5,1,4,6,7,0,3,},{2,5,1,4,6,7,3,0,},{2,5,1,4,7,0,3,6,},{2,5,1,4,7,3,0,6,},{2,5,1,4,7,6,0,3,},{2,5,1,4,7,6,3,0,},
		{2,5,1,6,0,3,7,4,},{2,5,1,6,0,4,7,3,},{2,5,1,6,0,7,3,4,},{2,5,1,6,0,7,4,3,},{2,5,1,6,3,0,7,4,},{2,5,1,6,3,4,7,0,},{2,5,1,6,3,7,0,4,},{2,5,1,6,3,7,4,0,},{2,5,1,6,7,0,3,4,},{2,5,1,6,7,0,4,3,},
		{2,5,1,6,7,3,0,4,},{2,5,1,6,7,3,4,0,},{2,5,1,6,7,4,0,3,},{2,5,1,6,7,4,3,0,},{2,5,1,7,0,3,4,6,},{2,5,1,7,0,4,3,6,},{2,5,1,7,0,6,3,4,},{2,5,1,7,0,6,4,3,},{2,5,1,7,3,0,4,6,},{2,5,1,7,3,4,0,6,},
		{2,5,1,7,3,6,0,4,},{2,5,1,7,3,6,4,0,},{2,5,1,7,6,0,3,4,},{2,5,1,7,6,0,4,3,},{2,5,1,7,6,3,0,4,},{2,5,1,7,6,3,4,0,},{2,5,1,7,6,4,0,3,},{2,5,1,7,6,4,3,0,},{2,5,3,0,1,4,7,6,},{2,5,3,0,1,6,7,4,},
		{2,5,3,0,1,7,4,6,},{2,5,3,0,6,1,7,4,},{2,5,3,0,6,4,7,1,},{2,5,3,0,6,7,1,4,},{2,5,3,0,6,7,4,1,},{2,5,3,0,7,1,4,6,},{2,5,3,0,7,4,1,6,},{2,5,3,0,7,6,1,4,},{2,5,3,0,7,6,4,1,},{2,5,3,1,0,4,7,6,},
		{2,5,3,1,0,6,7,4,},{2,5,3,1,0,7,4,6,},{2,5,3,1,6,0,7,4,},{2,5,3,1,6,4,7,0,},{2,5,3,1,6,7,0,4,},{2,5,3,1,6,7,4,0,},{2,5,3,1,7,0,4,6,},{2,5,3,1,7,4,0,6,},{2,5,3,1,7,6,0,4,},{2,5,3,1,7,6,4,0,},
		{2,5,3,4,0,1,7,6,},{2,5,3,4,0,6,7,1,},{2,5,3,4,0,7,1,6,},{2,5,3,4,1,0,7,6,},{2,5,3,4,1,6,7,0,},{2,5,3,4,1,7,0,6,},{2,5,3,4,6,0,7,1,},{2,5,3,4,6,1,7,0,},{2,5,3,4,6,7,0,1,},{2,5,3,4,6,7,1,0,},
		{2,5,3,4,7,0,1,6,},{2,5,3,4,7,1,0,6,},{2,5,3,4,7,6,0,1,},{2,5,3,4,7,6,1,0,},{2,5,3,6,0,1,7,4,},{2,5,3,6,0,4,7,1,},{2,5,3,6,0,7,1,4,},{2,5,3,6,0,7,4,1,},{2,5,3,6,1,0,7,4,},{2,5,3,6,1,4,7,0,},
		{2,5,3,6,1,7,0,4,},{2,5,3,6,1,7,4,0,},{2,5,3,6,7,0,1,4,},{2,5,3,6,7,0,4,1,},{2,5,3,6,7,1,0,4,},{2,5,3,6,7,1,4,0,},{2,5,3,6,7,4,0,1,},{2,5,3,6,7,4,1,0,},{2,5,3,7,0,1,4,6,},{2,5,3,7,0,4,1,6,},
		{2,5,3,7,0,6,1,4,},{2,5,3,7,0,6,4,1,},{2,5,3,7,1,0,4,6,},{2,5,3,7,1,4,0,6,},{2,5,3,7,1,6,0,4,},{2,5,3,7,1,6,4,0,},{2,5,3,7,6,0,1,4,},{2,5,3,7,6,0,4,1,},{2,5,3,7,6,1,0,4,},{2,5,3,7,6,1,4,0,},
		{2,5,3,7,6,4,0,1,},{2,5,3,7,6,4,1,0,},{2,5,4,0,1,3,7,6,},{2,5,4,0,1,6,7,3,},{2,5,4,0,1,7,3,6,},{2,5,4,0,3,1,7,6,},{2,5,4,0,3,6,7,1,},{2,5,4,0,3,7,1,6,},{2,5,4,0,6,1,7,3,},{2,5,4,0,6,3,7,1,},
		{2,5,4,0,6,7,1,3,},{2,5,4,0,6,7,3,1,},{2,5,4,0,7,1,3,6,},{2,5,4,0,7,3,1,6,},{2,5,4,0,7,6,1,3,},{2,5,4,0,7,6,3,1,},{2,5,4,1,0,3,7,6,},{2,5,4,1,0,6,7,3,},{2,5,4,1,0,7,3,6,},{2,5,4,1,3,0,7,6,},
		{2,5,4,1,3,6,7,0,},{2,5,4,1,3,7,0,6,},{2,5,4,1,6,0,7,3,},{2,5,4,1,6,3,7,0,},{2,5,4,1,6,7,0,3,},{2,5,4,1,6,7,3,0,},{2,5,4,1,7,0,3,6,},{2,5,4,1,7,3,0,6,},{2,5,4,1,7,6,0,3,},{2,5,4,1,7,6,3,0,},
		{2,5,4,6,0,1,7,3,},{2,5,4,6,0,3,7,1,},{2,5,4,6,0,7,1,3,},{2,5,4,6,0,7,3,1,},{2,5,4,6,1,0,7,3,},{2,5,4,6,1,3,7,0,},{2,5,4,6,1,7,0,3,},{2,5,4,6,1,7,3,0,},{2,5,4,6,3,0,7,1,},{2,5,4,6,3,1,7,0,},
		{2,5,4,6,3,7,0,1,},{2,5,4,6,3,7,1,0,},{2,5,4,6,7,0,1,3,},{2,5,4,6,7,0,3,1,},{2,5,4,6,7,1,0,3,},{2,5,4,6,7,1,3,0,},{2,5,4,6,7,3,0,1,},{2,5,4,6,7,3,1,0,},{2,5,4,7,0,1,3,6,},{2,5,4,7,0,3,1,6,},
		{2,5,4,7,0,6,1,3,},{2,5,4,7,0,6,3,1,},{2,5,4,7,1,0,3,6,},{2,5,4,7,1,3,0,6,},{2,5,4,7,1,6,0,3,},{2,5,4,7,1,6,3,0,},{2,5,4,7,3,0,1,6,},{2,5,4,7,3,1,0,6,},{2,5,4,7,3,6,0,1,},{2,5,4,7,3,6,1,0,},
		{2,5,4,7,6,0,1,3,},{2,5,4,7,6,0,3,1,},{2,5,4,7,6,1,0,3,},{2,5,4,7,6,1,3,0,},{2,5,4,7,6,3,0,1,},{2,5,4,7,6,3,1,0,},{2,5,6,0,1,3,7,4,},{2,5,6,0,1,4,7,3,},{2,5,6,0,1,7,3,4,},{2,5,6,0,1,7,4,3,},
		{2,5,6,0,3,1,7,4,},{2,5,6,0,3,4,7,1,},{2,5,6,0,3,7,1,4,},{2,5,6,0,3,7,4,1,},{2,5,6,0,7,1,3,4,},{2,5,6,0,7,1,4,3,},{2,5,6,0,7,3,1,4,},{2,5,6,0,7,3,4,1,},{2,5,6,0,7,4,1,3,},{2,5,6,0,7,4,3,1,},
		{2,5,6,1,0,3,7,4,},{2,5,6,1,0,4,7,3,},{2,5,6,1,0,7,3,4,},{2,5,6,1,0,7,4,3,},{2,5,6,1,3,0,7,4,},{2,5,6,1,3,4,7,0,},{2,5,6,1,3,7,0,4,},{2,5,6,1,3,7,4,0,},{2,5,6,1,7,0,3,4,},{2,5,6,1,7,0,4,3,},
		{2,5,6,1,7,3,0,4,},{2,5,6,1,7,3,4,0,},{2,5,6,1,7,4,0,3,},{2,5,6,1,7,4,3,0,},{2,5,6,4,0,1,7,3,},{2,5,6,4,0,3,7,1,},{2,5,6,4,0,7,1,3,},{2,5,6,4,0,7,3,1,},{2,5,6,4,1,0,7,3,},{2,5,6,4,1,3,7,0,},
		{2,5,6,4,1,7,0,3,},{2,5,6,4,1,7,3,0,},{2,5,6,4,3,0,7,1,},{2,5,6,4,3,1,7,0,},{2,5,6,4,3,7,0,1,},{2,5,6,4,3,7,1,0,},{2,5,6,4,7,0,1,3,},{2,5,6,4,7,0,3,1,},{2,5,6,4,7,1,0,3,},{2,5,6,4,7,1,3,0,},
		{2,5,6,4,7,3,0,1,},{2,5,6,4,7,3,1,0,},{2,5,6,7,0,1,3,4,},{2,5,6,7,0,1,4,3,},{2,5,6,7,0,3,1,4,},{2,5,6,7,0,3,4,1,},{2,5,6,7,0,4,1,3,},{2,5,6,7,0,4,3,1,},{2,5,6,7,1,0,3,4,},{2,5,6,7,1,0,4,3,},
		{2,5,6,7,1,3,0,4,},{2,5,6,7,1,3,4,0,},{2,5,6,7,1,4,0,3,},{2,5,6,7,1,4,3,0,},{2,5,6,7,3,0,1,4,},{2,5,6,7,3,0,4,1,},{2,5,6,7,3,1,0,4,},{2,5,6,7,3,1,4,0,},{2,5,6,7,3,4,0,1,},{2,5,6,7,3,4,1,0,},
		{2,5,7,0,1,3,4,6,},{2,5,7,0,1,4,3,6,},{2,5,7,0,1,6,3,4,},{2,5,7,0,1,6,4,3,},{2,5,7,0,3,1,4,6,},{2,5,7,0,3,4,1,6,},{2,5,7,0,3,6,1,4,},{2,5,7,0,3,6,4,1,},{2,5,7,0,6,1,3,4,},{2,5,7,0,6,1,4,3,},
		{2,5,7,0,6,3,1,4,},{2,5,7,0,6,3,4,1,},{2,5,7,0,6,4,1,3,},{2,5,7,0,6,4,3,1,},{2,5,7,1,0,3,4,6,},{2,5,7,1,0,4,3,6,},{2,5,7,1,0,6,3,4,},{2,5,7,1,0,6,4,3,},{2,5,7,1,3,0,4,6,},{2,5,7,1,3,4,0,6,},
		{2,5,7,1,3,6,0,4,},{2,5,7,1,3,6,4,0,},{2,5,7,1,6,0,3,4,},{2,5,7,1,6,0,4,3,},{2,5,7,1,6,3,0,4,},{2,5,7,1,6,3,4,0,},{2,5,7,1,6,4,0,3,},{2,5,7,1,6,4,3,0,},{2,5,7,4,0,1,3,6,},{2,5,7,4,0,3,1,6,},
		{2,5,7,4,0,6,1,3,},{2,5,7,4,0,6,3,1,},{2,5,7,4,1,0,3,6,},{2,5,7,4,1,3,0,6,},{2,5,7,4,1,6,0,3,},{2,5,7,4,1,6,3,0,},{2,5,7,4,3,0,1,6,},{2,5,7,4,3,1,0,6,},{2,5,7,4,3,6,0,1,},{2,5,7,4,3,6,1,0,},
		{2,5,7,4,6,0,1,3,},{2,5,7,4,6,0,3,1,},{2,5,7,4,6,1,0,3,},{2,5,7,4,6,1,3,0,},{2,5,7,4,6,3,0,1,},{2,5,7,4,6,3,1,0,},{2,5,7,6,0,1,3,4,},{2,5,7,6,0,1,4,3,},{2,5,7,6,0,3,1,4,},{2,5,7,6,0,3,4,1,},
		{2,5,7,6,0,4,1,3,},{2,5,7,6,0,4,3,1,},{2,5,7,6,1,0,3,4,},{2,5,7,6,1,0,4,3,},{2,5,7,6,1,3,0,4,},{2,5,7,6,1,3,4,0,},{2,5,7,6,1,4,0,3,},{2,5,7,6,1,4,3,0,},{2,5,7,6,3,0,1,4,},{2,5,7,6,3,0,4,1,},
		{2,5,7,6,3,1,0,4,},{2,5,7,6,3,1,4,0,},{2,5,7,6,3,4,0,1,},{2,5,7,6,3,4,1,0,},{2,6,0,1,3,4,7,5,},{2,6,0,1,3,7,4,5,},{2,6,0,1,3,7,5,4,},{2,6,0,1,5,3,7,4,},{2,6,0,1,5,4,7,3,},{2,6,0,1,5,7,3,4,},
		{2,6,0,1,5,7,4,3,},{2,6,0,1,7,3,4,5,},{2,6,0,1,7,3,5,4,},{2,6,0,1,7,4,3,5,},{2,6,0,1,7,4,5,3,},{2,6,0,4,1,3,7,5,},{2,6,0,4,1,7,3,5,},{2,6,0,4,1,7,5,3,},{2,6,0,4,3,1,7,5,},{2,6,0,4,3,7,1,5,},
		{2,6,0,4,3,7,5,1,},{2,6,0,4,5,1,7,3,},{2,6,0,4,5,3,7,1,},{2,6,0,4,5,7,1,3,},{2,6,0,4,5,7,3,1,},{2,6,0,4,7,1,3,5,},{2,6,0,4,7,1,5,3,},{2,6,0,4,7,3,1,5,},{2,6,0,4,7,3,5,1,},{2,6,0,5,1,3,7,4,},
		{2,6,0,5,1,4,7,3,},{2,6,0,5,1,7,3,4,},{2,6,0,5,1,7,4,3,},{2,6,0,5,3,1,7,4,},{2,6,0,5,3,4,7,1,},{2,6,0,5,3,7,1,4,},{2,6,0,5,3,7,4,1,},{2,6,0,5,7,1,3,4,},{2,6,0,5,7,1,4,3,},{2,6,0,5,7,3,1,4,},
		{2,6,0,5,7,3,4,1,},{2,6,0,5,7,4,1,3,},{2,6,0,5,7,4,3,1,},{2,6,0,7,1,3,4,5,},{2,6,0,7,1,3,5,4,},{2,6,0,7,1,4,3,5,},{2,6,0,7,1,4,5,3,},{2,6,0,7,3,1,4,5,},{2,6,0,7,3,1,5,4,},{2,6,0,7,3,4,1,5,},
		{2,6,0,7,3,4,5,1,},{2,6,0,7,5,1,3,4,},{2,6,0,7,5,1,4,3,},{2,6,0,7,5,3,1,4,},{2,6,0,7,5,3,4,1,},{2,6,0,7,5,4,1,3,},{2,6,0,7,5,4,3,1,},{2,6,1,0,3,4,7,5,},{2,6,1,0,3,7,4,5,},{2,6,1,0,3,7,5,4,},
		{2,6,1,0,5,3,7,4,},{2,6,1,0,5,4,7,3,},{2,6,1,0,5,7,3,4,},{2,6,1,0,5,7,4,3,},{2,6,1,0,7,3,4,5,},{2,6,1,0,7,3,5,4,},{2,6,1,0,7,4,3,5,},{2,6,1,0,7,4,5,3,},{2,6,1,4,0,3,7,5,},{2,6,1,4,0,7,3,5,},
		{2,6,1,4,0,7,5,3,},{2,6,1,4,3,0,7,5,},{2,6,1,4,3,7,0,5,},{2,6,1,4,3,7,5,0,},{2,6,1,4,5,0,7,3,},{2,6,1,4,5,3,7,0,},{2,6,1,4,5,7,0,3,},{2,6,1,4,5,7,3,0,},{2,6,1,4,7,0,3,5,},{2,6,1,4,7,0,5,3,},
		{2,6,1,4,7,3,0,5,},{2,6,1,4,7,3,5,0,},{2,6,1,5,0,3,7,4,},{2,6,1,5,0,4,7,3,},{2,6,1,5,0,7,3,4,},{2,6,1,5,0,7,4,3,},{2,6,1,5,3,0,7,4,},{2,6,1,5,3,4,7,0,},{2,6,1,5,3,7,0,4,},{2,6,1,5,3,7,4,0,},
		{2,6,1,5,7,0,3,4,},{2,6,1,5,7,0,4,3,},{2,6,1,5,7,3,0,4,},{2,6,1,5,7,3,4,0,},{2,6,1,5,7,4,0,3,},{2,6,1,5,7,4,3,0,},{2,6,1,7,0,3,4,5,},{2,6,1,7,0,3,5,4,},{2,6,1,7,0,4,3,5,},{2,6,1,7,0,4,5,3,},
		{2,6,1,7,3,0,4,5,},{2,6,1,7,3,0,5,4,},{2,6,1,7,3,4,0,5,},{2,6,1,7,3,4,5,0,},{2,6,1,7,5,0,3,4,},{2,6,1,7,5,0,4,3,},{2,6,1,7,5,3,0,4,},{2,6,1,7,5,3,4,0,},{2,6,1,7,5,4,0,3,},{2,6,1,7,5,4,3,0,},
		{2,6,3,0,1,4,7,5,},{2,6,3,0,1,7,4,5,},{2,6,3,0,1,7,5,4,},{2,6,3,0,5,1,7,4,},{2,6,3,0,5,4,7,1,},{2,6,3,0,5,7,1,4,},{2,6,3,0,5,7,4,1,},{2,6,3,0,7,1,4,5,},{2,6,3,0,7,1,5,4,},{2,6,3,0,7,4,1,5,},
		{2,6,3,0,7,4,5,1,},{2,6,3,1,0,4,7,5,},{2,6,3,1,0,7,4,5,},{2,6,3,1,0,7,5,4,},{2,6,3,1,5,0,7,4,},{2,6,3,1,5,4,7,0,},{2,6,3,1,5,7,0,4,},{2,6,3,1,5,7,4,0,},{2,6,3,1,7,0,4,5,},{2,6,3,1,7,0,5,4,},
		{2,6,3,1,7,4,0,5,},{2,6,3,1,7,4,5,0,},{2,6,3,4,0,1,7,5,},{2,6,3,4,0,7,1,5,},{2,6,3,4,0,7,5,1,},{2,6,3,4,1,0,7,5,},{2,6,3,4,1,7,0,5,},{2,6,3,4,1,7,5,0,},{2,6,3,4,5,0,7,1,},{2,6,3,4,5,1,7,0,},
		{2,6,3,4,5,7,0,1,},{2,6,3,4,5,7,1,0,},{2,6,3,4,7,0,1,5,},{2,6,3,4,7,0,5,1,},{2,6,3,4,7,1,0,5,},{2,6,3,4,7,1,5,0,},{2,6,3,5,0,1,7,4,},{2,6,3,5,0,4,7,1,},{2,6,3,5,0,7,1,4,},{2,6,3,5,0,7,4,1,},
		{2,6,3,5,1,0,7,4,},{2,6,3,5,1,4,7,0,},{2,6,3,5,1,7,0,4,},{2,6,3,5,1,7,4,0,},{2,6,3,5,7,0,1,4,},{2,6,3,5,7,0,4,1,},{2,6,3,5,7,1,0,4,},{2,6,3,5,7,1,4,0,},{2,6,3,5,7,4,0,1,},{2,6,3,5,7,4,1,0,},
		{2,6,3,7,0,1,4,5,},{2,6,3,7,0,1,5,4,},{2,6,3,7,0,4,1,5,},{2,6,3,7,0,4,5,1,},{2,6,3,7,1,0,4,5,},{2,6,3,7,1,0,5,4,},{2,6,3,7,1,4,0,5,},{2,6,3,7,1,4,5,0,},{2,6,3,7,5,0,1,4,},{2,6,3,7,5,0,4,1,},
		{2,6,3,7,5,1,0,4,},{2,6,3,7,5,1,4,0,},{2,6,3,7,5,4,0,1,},{2,6,3,7,5,4,1,0,},{2,6,4,0,1,3,7,5,},{2,6,4,0,1,7,3,5,},{2,6,4,0,1,7,5,3,},{2,6,4,0,3,1,7,5,},{2,6,4,0,3,7,1,5,},{2,6,4,0,3,7,5,1,},
		{2,6,4,0,5,1,7,3,},{2,6,4,0,5,3,7,1,},{2,6,4,0,5,7,1,3,},{2,6,4,0,5,7,3,1,},{2,6,4,0,7,1,3,5,},{2,6,4,0,7,1,5,3,},{2,6,4,0,7,3,1,5,},{2,6,4,0,7,3,5,1,},{2,6,4,1,0,3,7,5,},{2,6,4,1,0,7,3,5,},
		{2,6,4,1,0,7,5,3,},{2,6,4,1,3,0,7,5,},{2,6,4,1,3,7,0,5,},{2,6,4,1,3,7,5,0,},{2,6,4,1,5,0,7,3,},{2,6,4,1,5,3,7,0,},{2,6,4,1,5,7,0,3,},{2,6,4,1,5,7,3,0,},{2,6,4,1,7,0,3,5,},{2,6,4,1,7,0,5,3,},
		{2,6,4,1,7,3,0,5,},{2,6,4,1,7,3,5,0,},{2,6,4,5,0,1,7,3,},{2,6,4,5,0,3,7,1,},{2,6,4,5,0,7,1,3,},{2,6,4,5,0,7,3,1,},{2,6,4,5,1,0,7,3,},{2,6,4,5,1,3,7,0,},{2,6,4,5,1,7,0,3,},{2,6,4,5,1,7,3,0,},
		{2,6,4,5,3,0,7,1,},{2,6,4,5,3,1,7,0,},{2,6,4,5,3,7,0,1,},{2,6,4,5,3,7,1,0,},{2,6,4,5,7,0,1,3,},{2,6,4,5,7,0,3,1,},{2,6,4,5,7,1,0,3,},{2,6,4,5,7,1,3,0,},{2,6,4,5,7,3,0,1,},{2,6,4,5,7,3,1,0,},
		{2,6,4,7,0,1,3,5,},{2,6,4,7,0,1,5,3,},{2,6,4,7,0,3,1,5,},{2,6,4,7,0,3,5,1,},{2,6,4,7,1,0,3,5,},{2,6,4,7,1,0,5,3,},{2,6,4,7,1,3,0,5,},{2,6,4,7,1,3,5,0,},{2,6,4,7,3,0,1,5,},{2,6,4,7,3,0,5,1,},
		{2,6,4,7,3,1,0,5,},{2,6,4,7,3,1,5,0,},{2,6,4,7,5,0,1,3,},{2,6,4,7,5,0,3,1,},{2,6,4,7,5,1,0,3,},{2,6,4,7,5,1,3,0,},{2,6,4,7,5,3,0,1,},{2,6,4,7,5,3,1,0,},{2,6,5,0,1,3,7,4,},{2,6,5,0,1,4,7,3,},
		{2,6,5,0,1,7,3,4,},{2,6,5,0,1,7,4,3,},{2,6,5,0,3,1,7,4,},{2,6,5,0,3,4,7,1,},{2,6,5,0,3,7,1,4,},{2,6,5,0,3,7,4,1,},{2,6,5,0,7,1,3,4,},{2,6,5,0,7,1,4,3,},{2,6,5,0,7,3,1,4,},{2,6,5,0,7,3,4,1,},
		{2,6,5,0,7,4,1,3,},{2,6,5,0,7,4,3,1,},{2,6,5,1,0,3,7,4,},{2,6,5,1,0,4,7,3,},{2,6,5,1,0,7,3,4,},{2,6,5,1,0,7,4,3,},{2,6,5,1,3,0,7,4,},{2,6,5,1,3,4,7,0,},{2,6,5,1,3,7,0,4,},{2,6,5,1,3,7,4,0,},
		{2,6,5,1,7,0,3,4,},{2,6,5,1,7,0,4,3,},{2,6,5,1,7,3,0,4,},{2,6,5,1,7,3,4,0,},{2,6,5,1,7,4,0,3,},{2,6,5,1,7,4,3,0,},{2,6,5,4,0,1,7,3,},{2,6,5,4,0,3,7,1,},{2,6,5,4,0,7,1,3,},{2,6,5,4,0,7,3,1,},
		{2,6,5,4,1,0,7,3,},{2,6,5,4,1,3,7,0,},{2,6,5,4,1,7,0,3,},{2,6,5,4,1,7,3,0,},{2,6,5,4,3,0,7,1,},{2,6,5,4,3,1,7,0,},{2,6,5,4,3,7,0,1,},{2,6,5,4,3,7,1,0,},{2,6,5,4,7,0,1,3,},{2,6,5,4,7,0,3,1,},
		{2,6,5,4,7,1,0,3,},{2,6,5,4,7,1,3,0,},{2,6,5,4,7,3,0,1,},{2,6,5,4,7,3,1,0,},{2,6,5,7,0,1,3,4,},{2,6,5,7,0,1,4,3,},{2,6,5,7,0,3,1,4,},{2,6,5,7,0,3,4,1,},{2,6,5,7,0,4,1,3,},{2,6,5,7,0,4,3,1,},
		{2,6,5,7,1,0,3,4,},{2,6,5,7,1,0,4,3,},{2,6,5,7,1,3,0,4,},{2,6,5,7,1,3,4,0,},{2,6,5,7,1,4,0,3,},{2,6,5,7,1,4,3,0,},{2,6,5,7,3,0,1,4,},{2,6,5,7,3,0,4,1,},{2,6,5,7,3,1,0,4,},{2,6,5,7,3,1,4,0,},
		{2,6,5,7,3,4,0,1,},{2,6,5,7,3,4,1,0,},{2,6,7,0,1,3,4,5,},{2,6,7,0,1,3,5,4,},{2,6,7,0,1,4,3,5,},{2,6,7,0,1,4,5,3,},{2,6,7,0,3,1,4,5,},{2,6,7,0,3,1,5,4,},{2,6,7,0,3,4,1,5,},{2,6,7,0,3,4,5,1,},
		{2,6,7,0,5,1,3,4,},{2,6,7,0,5,1,4,3,},{2,6,7,0,5,3,1,4,},{2,6,7,0,5,3,4,1,},{2,6,7,0,5,4,1,3,},{2,6,7,0,5,4,3,1,},{2,6,7,1,0,3,4,5,},{2,6,7,1,0,3,5,4,},{2,6,7,1,0,4,3,5,},{2,6,7,1,0,4,5,3,},
		{2,6,7,1,3,0,4,5,},{2,6,7,1,3,0,5,4,},{2,6,7,1,3,4,0,5,},{2,6,7,1,3,4,5,0,},{2,6,7,1,5,0,3,4,},{2,6,7,1,5,0,4,3,},{2,6,7,1,5,3,0,4,},{2,6,7,1,5,3,4,0,},{2,6,7,1,5,4,0,3,},{2,6,7,1,5,4,3,0,},
		{2,6,7,4,0,1,3,5,},{2,6,7,4,0,1,5,3,},{2,6,7,4,0,3,1,5,},{2,6,7,4,0,3,5,1,},{2,6,7,4,1,0,3,5,},{2,6,7,4,1,0,5,3,},{2,6,7,4,1,3,0,5,},{2,6,7,4,1,3,5,0,},{2,6,7,4,3,0,1,5,},{2,6,7,4,3,0,5,1,},
		{2,6,7,4,3,1,0,5,},{2,6,7,4,3,1,5,0,},{2,6,7,4,5,0,1,3,},{2,6,7,4,5,0,3,1,},{2,6,7,4,5,1,0,3,},{2,6,7,4,5,1,3,0,},{2,6,7,4,5,3,0,1,},{2,6,7,4,5,3,1,0,},{2,6,7,5,0,1,3,4,},{2,6,7,5,0,1,4,3,},
		{2,6,7,5,0,3,1,4,},{2,6,7,5,0,3,4,1,},{2,6,7,5,0,4,1,3,},{2,6,7,5,0,4,3,1,},{2,6,7,5,1,0,3,4,},{2,6,7,5,1,0,4,3,},{2,6,7,5,1,3,0,4,},{2,6,7,5,1,3,4,0,},{2,6,7,5,1,4,0,3,},{2,6,7,5,1,4,3,0,},
		{2,6,7,5,3,0,1,4,},{2,6,7,5,3,0,4,1,},{2,6,7,5,3,1,0,4,},{2,6,7,5,3,1,4,0,},{2,6,7,5,3,4,0,1,},{2,6,7,5,3,4,1,0,},{2,7,0,1,3,4,5,6,},{2,7,0,1,3,6,4,5,},{2,7,0,1,3,6,5,4,},{2,7,0,1,5,3,4,6,},
		{2,7,0,1,5,4,3,6,},{2,7,0,1,5,6,3,4,},{2,7,0,1,5,6,4,3,},{2,7,0,1,6,3,4,5,},{2,7,0,1,6,3,5,4,},{2,7,0,1,6,4,3,5,},{2,7,0,1,6,4,5,3,},{2,7,0,4,1,3,5,6,},{2,7,0,4,1,6,3,5,},{2,7,0,4,1,6,5,3,},
		{2,7,0,4,3,1,5,6,},{2,7,0,4,3,6,1,5,},{2,7,0,4,3,6,5,1,},{2,7,0,4,5,1,3,6,},{2,7,0,4,5,3,1,6,},{2,7,0,4,5,6,1,3,},{2,7,0,4,5,6,3,1,},{2,7,0,4,6,1,3,5,},{2,7,0,4,6,1,5,3,},{2,7,0,4,6,3,1,5,},
		{2,7,0,4,6,3,5,1,},{2,7,0,5,1,3,4,6,},{2,7,0,5,1,4,3,6,},{2,7,0,5,1,6,3,4,},{2,7,0,5,1,6,4,3,},{2,7,0,5,3,1,4,6,},{2,7,0,5,3,4,1,6,},{2,7,0,5,3,6,1,4,},{2,7,0,5,3,6,4,1,},{2,7,0,5,6,1,3,4,},
		{2,7,0,5,6,1,4,3,},{2,7,0,5,6,3,1,4,},{2,7,0,5,6,3,4,1,},{2,7,0,5,6,4,1,3,},{2,7,0,5,6,4,3,1,},{2,7,0,6,1,3,4,5,},{2,7,0,6,1,3,5,4,},{2,7,0,6,1,4,3,5,},{2,7,0,6,1,4,5,3,},{2,7,0,6,3,1,4,5,},
		{2,7,0,6,3,1,5,4,},{2,7,0,6,3,4,1,5,},{2,7,0,6,3,4,5,1,},{2,7,0,6,5,1,3,4,},{2,7,0,6,5,1,4,3,},{2,7,0,6,5,3,1,4,},{2,7,0,6,5,3,4,1,},{2,7,0,6,5,4,1,3,},{2,7,0,6,5,4,3,1,},{2,7,1,0,3,4,5,6,},
		{2,7,1,0,3,6,4,5,},{2,7,1,0,3,6,5,4,},{2,7,1,0,5,3,4,6,},{2,7,1,0,5,4,3,6,},{2,7,1,0,5,6,3,4,},{2,7,1,0,5,6,4,3,},{2,7,1,0,6,3,4,5,},{2,7,1,0,6,3,5,4,},{2,7,1,0,6,4,3,5,},{2,7,1,0,6,4,5,3,},
		{2,7,1,4,0,3,5,6,},{2,7,1,4,0,6,3,5,},{2,7,1,4,0,6,5,3,},{2,7,1,4,3,0,5,6,},{2,7,1,4,3,6,0,5,},{2,7,1,4,3,6,5,0,},{2,7,1,4,5,0,3,6,},{2,7,1,4,5,3,0,6,},{2,7,1,4,5,6,0,3,},{2,7,1,4,5,6,3,0,},
		{2,7,1,4,6,0,3,5,},{2,7,1,4,6,0,5,3,},{2,7,1,4,6,3,0,5,},{2,7,1,4,6,3,5,0,},{2,7,1,5,0,3,4,6,},{2,7,1,5,0,4,3,6,},{2,7,1,5,0,6,3,4,},{2,7,1,5,0,6,4,3,},{2,7,1,5,3,0,4,6,},{2,7,1,5,3,4,0,6,},
		{2,7,1,5,3,6,0,4,},{2,7,1,5,3,6,4,0,},{2,7,1,5,6,0,3,4,},{2,7,1,5,6,0,4,3,},{2,7,1,5,6,3,0,4,},{2,7,1,5,6,3,4,0,},{2,7,1,5,6,4,0,3,},{2,7,1,5,6,4,3,0,},{2,7,1,6,0,3,4,5,},{2,7,1,6,0,3,5,4,},
		{2,7,1,6,0,4,3,5,},{2,7,1,6,0,4,5,3,},{2,7,1,6,3,0,4,5,},{2,7,1,6,3,0,5,4,},{2,7,1,6,3,4,0,5,},{2,7,1,6,3,4,5,0,},{2,7,1,6,5,0,3,4,},{2,7,1,6,5,0,4,3,},{2,7,1,6,5,3,0,4,},{2,7,1,6,5,3,4,0,},
		{2,7,1,6,5,4,0,3,},{2,7,1,6,5,4,3,0,},{2,7,3,0,1,4,5,6,},{2,7,3,0,1,6,4,5,},{2,7,3,0,1,6,5,4,},{2,7,3,0,5,1,4,6,},{2,7,3,0,5,4,1,6,},{2,7,3,0,5,6,1,4,},{2,7,3,0,5,6,4,1,},{2,7,3,0,6,1,4,5,},
		{2,7,3,0,6,1,5,4,},{2,7,3,0,6,4,1,5,},{2,7,3,0,6,4,5,1,},{2,7,3,1,0,4,5,6,},{2,7,3,1,0,6,4,5,},{2,7,3,1,0,6,5,4,},{2,7,3,1,5,0,4,6,},{2,7,3,1,5,4,0,6,},{2,7,3,1,5,6,0,4,},{2,7,3,1,5,6,4,0,},
		{2,7,3,1,6,0,4,5,},{2,7,3,1,6,0,5,4,},{2,7,3,1,6,4,0,5,},{2,7,3,1,6,4,5,0,},{2,7,3,4,0,1,5,6,},{2,7,3,4,0,6,1,5,},{2,7,3,4,0,6,5,1,},{2,7,3,4,1,0,5,6,},{2,7,3,4,1,6,0,5,},{2,7,3,4,1,6,5,0,},
		{2,7,3,4,5,0,1,6,},{2,7,3,4,5,1,0,6,},{2,7,3,4,5,6,0,1,},{2,7,3,4,5,6,1,0,},{2,7,3,4,6,0,1,5,},{2,7,3,4,6,0,5,1,},{2,7,3,4,6,1,0,5,},{2,7,3,4,6,1,5,0,},{2,7,3,5,0,1,4,6,},{2,7,3,5,0,4,1,6,},
		{2,7,3,5,0,6,1,4,},{2,7,3,5,0,6,4,1,},{2,7,3,5,1,0,4,6,},{2,7,3,5,1,4,0,6,},{2,7,3,5,1,6,0,4,},{2,7,3,5,1,6,4,0,},{2,7,3,5,6,0,1,4,},{2,7,3,5,6,0,4,1,},{2,7,3,5,6,1,0,4,},{2,7,3,5,6,1,4,0,},
		{2,7,3,5,6,4,0,1,},{2,7,3,5,6,4,1,0,},{2,7,3,6,0,1,4,5,},{2,7,3,6,0,1,5,4,},{2,7,3,6,0,4,1,5,},{2,7,3,6,0,4,5,1,},{2,7,3,6,1,0,4,5,},{2,7,3,6,1,0,5,4,},{2,7,3,6,1,4,0,5,},{2,7,3,6,1,4,5,0,},
		{2,7,3,6,5,0,1,4,},{2,7,3,6,5,0,4,1,},{2,7,3,6,5,1,0,4,},{2,7,3,6,5,1,4,0,},{2,7,3,6,5,4,0,1,},{2,7,3,6,5,4,1,0,},{2,7,4,0,1,3,5,6,},{2,7,4,0,1,6,3,5,},{2,7,4,0,1,6,5,3,},{2,7,4,0,3,1,5,6,},
		{2,7,4,0,3,6,1,5,},{2,7,4,0,3,6,5,1,},{2,7,4,0,5,1,3,6,},{2,7,4,0,5,3,1,6,},{2,7,4,0,5,6,1,3,},{2,7,4,0,5,6,3,1,},{2,7,4,0,6,1,3,5,},{2,7,4,0,6,1,5,3,},{2,7,4,0,6,3,1,5,},{2,7,4,0,6,3,5,1,},
		{2,7,4,1,0,3,5,6,},{2,7,4,1,0,6,3,5,},{2,7,4,1,0,6,5,3,},{2,7,4,1,3,0,5,6,},{2,7,4,1,3,6,0,5,},{2,7,4,1,3,6,5,0,},{2,7,4,1,5,0,3,6,},{2,7,4,1,5,3,0,6,},{2,7,4,1,5,6,0,3,},{2,7,4,1,5,6,3,0,},
		{2,7,4,1,6,0,3,5,},{2,7,4,1,6,0,5,3,},{2,7,4,1,6,3,0,5,},{2,7,4,1,6,3,5,0,},{2,7,4,5,0,1,3,6,},{2,7,4,5,0,3,1,6,},{2,7,4,5,0,6,1,3,},{2,7,4,5,0,6,3,1,},{2,7,4,5,1,0,3,6,},{2,7,4,5,1,3,0,6,},
		{2,7,4,5,1,6,0,3,},{2,7,4,5,1,6,3,0,},{2,7,4,5,3,0,1,6,},{2,7,4,5,3,1,0,6,},{2,7,4,5,3,6,0,1,},{2,7,4,5,3,6,1,0,},{2,7,4,5,6,0,1,3,},{2,7,4,5,6,0,3,1,},{2,7,4,5,6,1,0,3,},{2,7,4,5,6,1,3,0,},
		{2,7,4,5,6,3,0,1,},{2,7,4,5,6,3,1,0,},{2,7,4,6,0,1,3,5,},{2,7,4,6,0,1,5,3,},{2,7,4,6,0,3,1,5,},{2,7,4,6,0,3,5,1,},{2,7,4,6,1,0,3,5,},{2,7,4,6,1,0,5,3,},{2,7,4,6,1,3,0,5,},{2,7,4,6,1,3,5,0,},
		{2,7,4,6,3,0,1,5,},{2,7,4,6,3,0,5,1,},{2,7,4,6,3,1,0,5,},{2,7,4,6,3,1,5,0,},{2,7,4,6,5,0,1,3,},{2,7,4,6,5,0,3,1,},{2,7,4,6,5,1,0,3,},{2,7,4,6,5,1,3,0,},{2,7,4,6,5,3,0,1,},{2,7,4,6,5,3,1,0,},
		{2,7,5,0,1,3,4,6,},{2,7,5,0,1,4,3,6,},{2,7,5,0,1,6,3,4,},{2,7,5,0,1,6,4,3,},{2,7,5,0,3,1,4,6,},{2,7,5,0,3,4,1,6,},{2,7,5,0,3,6,1,4,},{2,7,5,0,3,6,4,1,},{2,7,5,0,6,1,3,4,},{2,7,5,0,6,1,4,3,},
		{2,7,5,0,6,3,1,4,},{2,7,5,0,6,3,4,1,},{2,7,5,0,6,4,1,3,},{2,7,5,0,6,4,3,1,},{2,7,5,1,0,3,4,6,},{2,7,5,1,0,4,3,6,},{2,7,5,1,0,6,3,4,},{2,7,5,1,0,6,4,3,},{2,7,5,1,3,0,4,6,},{2,7,5,1,3,4,0,6,},
		{2,7,5,1,3,6,0,4,},{2,7,5,1,3,6,4,0,},{2,7,5,1,6,0,3,4,},{2,7,5,1,6,0,4,3,},{2,7,5,1,6,3,0,4,},{2,7,5,1,6,3,4,0,},{2,7,5,1,6,4,0,3,},{2,7,5,1,6,4,3,0,},{2,7,5,4,0,1,3,6,},{2,7,5,4,0,3,1,6,},
		{2,7,5,4,0,6,1,3,},{2,7,5,4,0,6,3,1,},{2,7,5,4,1,0,3,6,},{2,7,5,4,1,3,0,6,},{2,7,5,4,1,6,0,3,},{2,7,5,4,1,6,3,0,},{2,7,5,4,3,0,1,6,},{2,7,5,4,3,1,0,6,},{2,7,5,4,3,6,0,1,},{2,7,5,4,3,6,1,0,},
		{2,7,5,4,6,0,1,3,},{2,7,5,4,6,0,3,1,},{2,7,5,4,6,1,0,3,},{2,7,5,4,6,1,3,0,},{2,7,5,4,6,3,0,1,},{2,7,5,4,6,3,1,0,},{2,7,5,6,0,1,3,4,},{2,7,5,6,0,1,4,3,},{2,7,5,6,0,3,1,4,},{2,7,5,6,0,3,4,1,},
		{2,7,5,6,0,4,1,3,},{2,7,5,6,0,4,3,1,},{2,7,5,6,1,0,3,4,},{2,7,5,6,1,0,4,3,},{2,7,5,6,1,3,0,4,},{2,7,5,6,1,3,4,0,},{2,7,5,6,1,4,0,3,},{2,7,5,6,1,4,3,0,},{2,7,5,6,3,0,1,4,},{2,7,5,6,3,0,4,1,},
		{2,7,5,6,3,1,0,4,},{2,7,5,6,3,1,4,0,},{2,7,5,6,3,4,0,1,},{2,7,5,6,3,4,1,0,},{2,7,6,0,1,3,4,5,},{2,7,6,0,1,3,5,4,},{2,7,6,0,1,4,3,5,},{2,7,6,0,1,4,5,3,},{2,7,6,0,3,1,4,5,},{2,7,6,0,3,1,5,4,},
		{2,7,6,0,3,4,1,5,},{2,7,6,0,3,4,5,1,},{2,7,6,0,5,1,3,4,},{2,7,6,0,5,1,4,3,},{2,7,6,0,5,3,1,4,},{2,7,6,0,5,3,4,1,},{2,7,6,0,5,4,1,3,},{2,7,6,0,5,4,3,1,},{2,7,6,1,0,3,4,5,},{2,7,6,1,0,3,5,4,},
		{2,7,6,1,0,4,3,5,},{2,7,6,1,0,4,5,3,},{2,7,6,1,3,0,4,5,},{2,7,6,1,3,0,5,4,},{2,7,6,1,3,4,0,5,},{2,7,6,1,3,4,5,0,},{2,7,6,1,5,0,3,4,},{2,7,6,1,5,0,4,3,},{2,7,6,1,5,3,0,4,},{2,7,6,1,5,3,4,0,},
		{2,7,6,1,5,4,0,3,},{2,7,6,1,5,4,3,0,},{2,7,6,4,0,1,3,5,},{2,7,6,4,0,1,5,3,},{2,7,6,4,0,3,1,5,},{2,7,6,4,0,3,5,1,},{2,7,6,4,1,0,3,5,},{2,7,6,4,1,0,5,3,},{2,7,6,4,1,3,0,5,},{2,7,6,4,1,3,5,0,},
		{2,7,6,4,3,0,1,5,},{2,7,6,4,3,0,5,1,},{2,7,6,4,3,1,0,5,},{2,7,6,4,3,1,5,0,},{2,7,6,4,5,0,1,3,},{2,7,6,4,5,0,3,1,},{2,7,6,4,5,1,0,3,},{2,7,6,4,5,1,3,0,},{2,7,6,4,5,3,0,1,},{2,7,6,4,5,3,1,0,},
		{2,7,6,5,0,1,3,4,},{2,7,6,5,0,1,4,3,},{2,7,6,5,0,3,1,4,},{2,7,6,5,0,3,4,1,},{2,7,6,5,0,4,1,3,},{2,7,6,5,0,4,3,1,},{2,7,6,5,1,0,3,4,},{2,7,6,5,1,0,4,3,},{2,7,6,5,1,3,0,4,},{2,7,6,5,1,3,4,0,},
		{2,7,6,5,1,4,0,3,},{2,7,6,5,1,4,3,0,},{2,7,6,5,3,0,1,4,},{2,7,6,5,3,0,4,1,},{2,7,6,5,3,1,0,4,},{2,7,6,5,3,1,4,0,},{2,7,6,5,3,4,0,1,},{2,7,6,5,3,4,1,0,},{3,0,1,2,5,4,7,6,},{3,0,1,2,5,6,7,4,},
		{3,0,1,2,5,7,4,6,},{3,0,1,2,6,4,7,5,},{3,0,1,2,6,7,4,5,},{3,0,1,2,6,7,5,4,},{3,0,1,2,7,4,5,6,},{3,0,1,2,7,6,4,5,},{3,0,1,2,7,6,5,4,},{3,0,1,4,2,6,7,5,},{3,0,1,4,2,7,5,6,},{3,0,1,4,5,2,7,6,},
		{3,0,1,4,5,6,7,2,},{3,0,1,4,5,7,2,6,},{3,0,1,4,6,2,7,5,},{3,0,1,4,6,7,2,5,},{3,0,1,4,6,7,5,2,},{3,0,1,4,7,2,5,6,},{3,0,1,4,7,6,2,5,},{3,0,1,4,7,6,5,2,},{3,0,1,5,2,4,7,6,},{3,0,1,5,2,6,7,4,},
		{3,0,1,5,2,7,4,6,},{3,0,1,5,6,2,7,4,},{3,0,1,5,6,4,7,2,},{3,0,1,5,6,7,2,4,},{3,0,1,5,6,7,4,2,},{3,0,1,5,7,2,4,6,},{3,0,1,5,7,4,2,6,},{3,0,1,5,7,6,2,4,},{3,0,1,5,7,6,4,2,},{3,0,1,6,2,4,7,5,},
		{3,0,1,6,2,7,4,5,},{3,0,1,6,2,7,5,4,},{3,0,1,6,5,2,7,4,},{3,0,1,6,5,4,7,2,},{3,0,1,6,5,7,2,4,},{3,0,1,6,5,7,4,2,},{3,0,1,6,7,2,4,5,},{3,0,1,6,7,2,5,4,},{3,0,1,6,7,4,2,5,},{3,0,1,6,7,4,5,2,},
		{3,0,1,7,2,4,5,6,},{3,0,1,7,2,6,4,5,},{3,0,1,7,2,6,5,4,},{3,0,1,7,5,2,4,6,},{3,0,1,7,5,4,2,6,},{3,0,1,7,5,6,2,4,},{3,0,1,7,5,6,4,2,},{3,0,1,7,6,2,4,5,},{3,0,1,7,6,2,5,4,},{3,0,1,7,6,4,2,5,},
		{3,0,1,7,6,4,5,2,},{3,0,4,1,2,6,7,5,},{3,0,4,1,2,7,5,6,},{3,0,4,1,5,2,7,6,},{3,0,4,1,5,6,7,2,},{3,0,4,1,5,7,2,6,},{3,0,4,1,6,2,7,5,},{3,0,4,1,6,7,2,5,},{3,0,4,1,6,7,5,2,},{3,0,4,1,7,2,5,6,},
		{3,0,4,1,7,6,2,5,},{3,0,4,1,7,6,5,2,},{3,0,4,2,1,6,7,5,},{3,0,4,2,1,7,5,6,},{3,0,4,2,5,1,7,6,},{3,0,4,2,5,6,7,1,},{3,0,4,2,5,7,1,6,},{3,0,4,2,6,1,7,5,},{3,0,4,2,6,7,1,5,},{3,0,4,2,6,7,5,1,},
		{3,0,4,2,7,1,5,6,},{3,0,4,2,7,6,1,5,},{3,0,4,2,7,6,5,1,},{3,0,4,5,1,2,7,6,},{3,0,4,5,1,6,7,2,},{3,0,4,5,1,7,2,6,},{3,0,4,5,2,1,7,6,},{3,0,4,5,2,6,7,1,},{3,0,4,5,2,7,1,6,},{3,0,4,5,6,1,7,2,},
		{3,0,4,5,6,2,7,1,},{3,0,4,5,6,7,1,2,},{3,0,4,5,6,7,2,1,},{3,0,4,5,7,1,2,6,},{3,0,4,5,7,2,1,6,},{3,0,4,5,7,6,1,2,},{3,0,4,5,7,6,2,1,},{3,0,4,6,1,2,7,5,},{3,0,4,6,1,7,2,5,},{3,0,4,6,1,7,5,2,},
		{3,0,4,6,2,1,7,5,},{3,0,4,6,2,7,1,5,},{3,0,4,6,2,7,5,1,},{3,0,4,6,5,1,7,2,},{3,0,4,6,5,2,7,1,},{3,0,4,6,5,7,1,2,},{3,0,4,6,5,7,2,1,},{3,0,4,6,7,1,2,5,},{3,0,4,6,7,1,5,2,},{3,0,4,6,7,2,1,5,},
		{3,0,4,6,7,2,5,1,},{3,0,4,7,1,2,5,6,},{3,0,4,7,1,6,2,5,},{3,0,4,7,1,6,5,2,},{3,0,4,7,2,1,5,6,},{3,0,4,7,2,6,1,5,},{3,0,4,7,2,6,5,1,},{3,0,4,7,5,1,2,6,},{3,0,4,7,5,2,1,6,},{3,0,4,7,5,6,1,2,},
		{3,0,4,7,5,6,2,1,},{3,0,4,7,6,1,2,5,},{3,0,4,7,6,1,5,2,},{3,0,4,7,6,2,1,5,},{3,0,4,7,6,2,5,1,},{3,0,5,1,2,4,7,6,},{3,0,5,1,2,6,7,4,},{3,0,5,1,2,7,4,6,},{3,0,5,1,6,2,7,4,},{3,0,5,1,6,4,7,2,},
		{3,0,5,1,6,7,2,4,},{3,0,5,1,6,7,4,2,},{3,0,5,1,7,2,4,6,},{3,0,5,1,7,4,2,6,},{3,0,5,1,7,6,2,4,},{3,0,5,1,7,6,4,2,},{3,0,5,2,1,4,7,6,},{3,0,5,2,1,6,7,4,},{3,0,5,2,1,7,4,6,},{3,0,5,2,6,1,7,4,},
		{3,0,5,2,6,4,7,1,},{3,0,5,2,6,7,1,4,},{3,0,5,2,6,7,4,1,},{3,0,5,2,7,1,4,6,},{3,0,5,2,7,4,1,6,},{3,0,5,2,7,6,1,4,},{3,0,5,2,7,6,4,1,},{3,0,5,4,1,2,7,6,},{3,0,5,4,1,6,7,2,},{3,0,5,4,1,7,2,6,},
		{3,0,5,4,2,1,7,6,},{3,0,5,4,2,6,7,1,},{3,0,5,4,2,7,1,6,},{3,0,5,4,6,1,7,2,},{3,0,5,4,6,2,7,1,},{3,0,5,4,6,7,1,2,},{3,0,5,4,6,7,2,1,},{3,0,5,4,7,1,2,6,},{3,0,5,4,7,2,1,6,},{3,0,5,4,7,6,1,2,},
		{3,0,5,4,7,6,2,1,},{3,0,5,6,1,2,7,4,},{3,0,5,6,1,4,7,2,},{3,0,5,6,1,7,2,4,},{3,0,5,6,1,7,4,2,},{3,0,5,6,2,1,7,4,},{3,0,5,6,2,4,7,1,},{3,0,5,6,2,7,1,4,},{3,0,5,6,2,7,4,1,},{3,0,5,6,7,1,2,4,},
		{3,0,5,6,7,1,4,2,},{3,0,5,6,7,2,1,4,},{3,0,5,6,7,2,4,1,},{3,0,5,6,7,4,1,2,},{3,0,5,6,7,4,2,1,},{3,0,5,7,1,2,4,6,},{3,0,5,7,1,4,2,6,},{3,0,5,7,1,6,2,4,},{3,0,5,7,1,6,4,2,},{3,0,5,7,2,1,4,6,},
		{3,0,5,7,2,4,1,6,},{3,0,5,7,2,6,1,4,},{3,0,5,7,2,6,4,1,},{3,0,5,7,6,1,2,4,},{3,0,5,7,6,1,4,2,},{3,0,5,7,6,2,1,4,},{3,0,5,7,6,2,4,1,},{3,0,5,7,6,4,1,2,},{3,0,5,7,6,4,2,1,},{3,0,6,1,2,4,7,5,},
		{3,0,6,1,2,7,4,5,},{3,0,6,1,2,7,5,4,},{3,0,6,1,5,2,7,4,},{3,0,6,1,5,4,7,2,},{3,0,6,1,5,7,2,4,},{3,0,6,1,5,7,4,2,},{3,0,6,1,7,2,4,5,},{3,0,6,1,7,2,5,4,},{3,0,6,1,7,4,2,5,},{3,0,6,1,7,4,5,2,},
		{3,0,6,2,1,4,7,5,},{3,0,6,2,1,7,4,5,},{3,0,6,2,1,7,5,4,},{3,0,6,2,5,1,7,4,},{3,0,6,2,5,4,7,1,},{3,0,6,2,5,7,1,4,},{3,0,6,2,5,7,4,1,},{3,0,6,2,7,1,4,5,},{3,0,6,2,7,1,5,4,},{3,0,6,2,7,4,1,5,},
		{3,0,6,2,7,4,5,1,},{3,0,6,4,1,2,7,5,},{3,0,6,4,1,7,2,5,},{3,0,6,4,1,7,5,2,},{3,0,6,4,2,1,7,5,},{3,0,6,4,2,7,1,5,},{3,0,6,4,2,7,5,1,},{3,0,6,4,5,1,7,2,},{3,0,6,4,5,2,7,1,},{3,0,6,4,5,7,1,2,},
		{3,0,6,4,5,7,2,1,},{3,0,6,4,7,1,2,5,},{3,0,6,4,7,1,5,2,},{3,0,6,4,7,2,1,5,},{3,0,6,4,7,2,5,1,},{3,0,6,5,1,2,7,4,},{3,0,6,5,1,4,7,2,},{3,0,6,5,1,7,2,4,},{3,0,6,5,1,7,4,2,},{3,0,6,5,2,1,7,4,},
		{3,0,6,5,2,4,7,1,},{3,0,6,5,2,7,1,4,},{3,0,6,5,2,7,4,1,},{3,0,6,5,7,1,2,4,},{3,0,6,5,7,1,4,2,},{3,0,6,5,7,2,1,4,},{3,0,6,5,7,2,4,1,},{3,0,6,5,7,4,1,2,},{3,0,6,5,7,4,2,1,},{3,0,6,7,1,2,4,5,},
		{3,0,6,7,1,2,5,4,},{3,0,6,7,1,4,2,5,},{3,0,6,7,1,4,5,2,},{3,0,6,7,2,1,4,5,},{3,0,6,7,2,1,5,4,},{3,0,6,7,2,4,1,5,},{3,0,6,7,2,4,5,1,},{3,0,6,7,5,1,2,4,},{3,0,6,7,5,1,4,2,},{3,0,6,7,5,2,1,4,},
		{3,0,6,7,5,2,4,1,},{3,0,6,7,5,4,1,2,},{3,0,6,7,5,4,2,1,},{3,0,7,1,2,4,5,6,},{3,0,7,1,2,6,4,5,},{3,0,7,1,2,6,5,4,},{3,0,7,1,5,2,4,6,},{3,0,7,1,5,4,2,6,},{3,0,7,1,5,6,2,4,},{3,0,7,1,5,6,4,2,},
		{3,0,7,1,6,2,4,5,},{3,0,7,1,6,2,5,4,},{3,0,7,1,6,4,2,5,},{3,0,7,1,6,4,5,2,},{3,0,7,2,1,4,5,6,},{3,0,7,2,1,6,4,5,},{3,0,7,2,1,6,5,4,},{3,0,7,2,5,1,4,6,},{3,0,7,2,5,4,1,6,},{3,0,7,2,5,6,1,4,},
		{3,0,7,2,5,6,4,1,},{3,0,7,2,6,1,4,5,},{3,0,7,2,6,1,5,4,},{3,0,7,2,6,4,1,5,},{3,0,7,2,6,4,5,1,},{3,0,7,4,1,2,5,6,},{3,0,7,4,1,6,2,5,},{3,0,7,4,1,6,5,2,},{3,0,7,4,2,1,5,6,},{3,0,7,4,2,6,1,5,},
		{3,0,7,4,2,6,5,1,},{3,0,7,4,5,1,2,6,},{3,0,7,4,5,2,1,6,},{3,0,7,4,5,6,1,2,},{3,0,7,4,5,6,2,1,},{3,0,7,4,6,1,2,5,},{3,0,7,4,6,1,5,2,},{3,0,7,4,6,2,1,5,},{3,0,7,4,6,2,5,1,},{3,0,7,5,1,2,4,6,},
		{3,0,7,5,1,4,2,6,},{3,0,7,5,1,6,2,4,},{3,0,7,5,1,6,4,2,},{3,0,7,5,2,1,4,6,},{3,0,7,5,2,4,1,6,},{3,0,7,5,2,6,1,4,},{3,0,7,5,2,6,4,1,},{3,0,7,5,6,1,2,4,},{3,0,7,5,6,1,4,2,},{3,0,7,5,6,2,1,4,},
		{3,0,7,5,6,2,4,1,},{3,0,7,5,6,4,1,2,},{3,0,7,5,6,4,2,1,},{3,0,7,6,1,2,4,5,},{3,0,7,6,1,2,5,4,},{3,0,7,6,1,4,2,5,},{3,0,7,6,1,4,5,2,},{3,0,7,6,2,1,4,5,},{3,0,7,6,2,1,5,4,},{3,0,7,6,2,4,1,5,},
		{3,0,7,6,2,4,5,1,},{3,0,7,6,5,1,2,4,},{3,0,7,6,5,1,4,2,},{3,0,7,6,5,2,1,4,},{3,0,7,6,5,2,4,1,},{3,0,7,6,5,4,1,2,},{3,0,7,6,5,4,2,1,},{3,2,0,1,5,4,7,6,},{3,2,0,1,5,6,7,4,},{3,2,0,1,5,7,4,6,},
		{3,2,0,1,6,4,7,5,},{3,2,0,1,6,7,4,5,},{3,2,0,1,6,7,5,4,},{3,2,0,1,7,4,5,6,},{3,2,0,1,7,6,4,5,},{3,2,0,1,7,6,5,4,},{3,2,0,4,1,6,7,5,},{3,2,0,4,1,7,5,6,},{3,2,0,4,5,1,7,6,},{3,2,0,4,5,6,7,1,},
		{3,2,0,4,5,7,1,6,},{3,2,0,4,6,1,7,5,},{3,2,0,4,6,7,1,5,},{3,2,0,4,6,7,5,1,},{3,2,0,4,7,1,5,6,},{3,2,0,4,7,6,1,5,},{3,2,0,4,7,6,5,1,},{3,2,0,5,1,4,7,6,},{3,2,0,5,1,6,7,4,},{3,2,0,5,1,7,4,6,},
		{3,2,0,5,6,1,7,4,},{3,2,0,5,6,4,7,1,},{3,2,0,5,6,7,1,4,},{3,2,0,5,6,7,4,1,},{3,2,0,5,7,1,4,6,},{3,2,0,5,7,4,1,6,},{3,2,0,5,7,6,1,4,},{3,2,0,5,7,6,4,1,},{3,2,0,6,1,4,7,5,},{3,2,0,6,1,7,4,5,},
		{3,2,0,6,1,7,5,4,},{3,2,0,6,5,1,7,4,},{3,2,0,6,5,4,7,1,},{3,2,0,6,5,7,1,4,},{3,2,0,6,5,7,4,1,},{3,2,0,6,7,1,4,5,},{3,2,0,6,7,1,5,4,},{3,2,0,6,7,4,1,5,},{3,2,0,6,7,4,5,1,},{3,2,0,7,1,4,5,6,},
		{3,2,0,7,1,6,4,5,},{3,2,0,7,1,6,5,4,},{3,2,0,7,5,1,4,6,},{3,2,0,7,5,4,1,6,},{3,2,0,7,5,6,1,4,},{3,2,0,7,5,6,4,1,},{3,2,0,7,6,1,4,5,},{3,2,0,7,6,1,5,4,},{3,2,0,7,6,4,1,5,},{3,2,0,7,6,4,5,1,},
		{3,2,1,0,5,4,7,6,},{3,2,1,0,5,6,7,4,},{3,2,1,0,5,7,4,6,},{3,2,1,0,6,4,7,5,},{3,2,1,0,6,7,4,5,},{3,2,1,0,6,7,5,4,},{3,2,1,0,7,4,5,6,},{3,2,1,0,7,6,4,5,},{3,2,1,0,7,6,5,4,},{3,2,1,4,0,6,7,5,},
		{3,2,1,4,0,7,5,6,},{3,2,1,4,5,0,7,6,},{3,2,1,4,5,6,7,0,},{3,2,1,4,5,7,0,6,},{3,2,1,4,6,0,7,5,},{3,2,1,4,6,7,0,5,},{3,2,1,4,6,7,5,0,},{3,2,1,4,7,0,5,6,},{3,2,1,4,7,6,0,5,},{3,2,1,4,7,6,5,0,},
		{3,2,1,5,0,4,7,6,},{3,2,1,5,0,6,7,4,},{3,2,1,5,0,7,4,6,},{3,2,1,5,6,0,7,4,},{3,2,1,5,6,4,7,0,},{3,2,1,5,6,7,0,4,},{3,2,1,5,6,7,4,0,},{3,2,1,5,7,0,4,6,},{3,2,1,5,7,4,0,6,},{3,2,1,5,7,6,0,4,},
		{3,2,1,5,7,6,4,0,},{3,2,1,6,0,4,7,5,},{3,2,1,6,0,7,4,5,},{3,2,1,6,0,7,5,4,},{3,2,1,6,5,0,7,4,},{3,2,1,6,5,4,7,0,},{3,2,1,6,5,7,0,4,},{3,2,1,6,5,7,4,0,},{3,2,1,6,7,0,4,5,},{3,2,1,6,7,0,5,4,},
		{3,2,1,6,7,4,0,5,},{3,2,1,6,7,4,5,0,},{3,2,1,7,0,4,5,6,},{3,2,1,7,0,6,4,5,},{3,2,1,7,0,6,5,4,},{3,2,1,7,5,0,4,6,},{3,2,1,7,5,4,0,6,},{3,2,1,7,5,6,0,4,},{3,2,1,7,5,6,4,0,},{3,2,1,7,6,0,4,5,},
		{3,2,1,7,6,0,5,4,},{3,2,1,7,6,4,0,5,},{3,2,1,7,6,4,5,0,},{3,2,4,0,1,6,7,5,},{3,2,4,0,1,7,5,6,},{3,2,4,0,5,1,7,6,},{3,2,4,0,5,6,7,1,},{3,2,4,0,5,7,1,6,},{3,2,4,0,6,1,7,5,},{3,2,4,0,6,7,1,5,},
		{3,2,4,0,6,7,5,1,},{3,2,4,0,7,1,5,6,},{3,2,4,0,7,6,1,5,},{3,2,4,0,7,6,5,1,},{3,2,4,1,0,6,7,5,},{3,2,4,1,0,7,5,6,},{3,2,4,1,5,0,7,6,},{3,2,4,1,5,6,7,0,},{3,2,4,1,5,7,0,6,},{3,2,4,1,6,0,7,5,},
		{3,2,4,1,6,7,0,5,},{3,2,4,1,6,7,5,0,},{3,2,4,1,7,0,5,6,},{3,2,4,1,7,6,0,5,},{3,2,4,1,7,6,5,0,},{3,2,4,5,0,1,7,6,},{3,2,4,5,0,6,7,1,},{3,2,4,5,0,7,1,6,},{3,2,4,5,1,0,7,6,},{3,2,4,5,1,6,7,0,},
		{3,2,4,5,1,7,0,6,},{3,2,4,5,6,0,7,1,},{3,2,4,5,6,1,7,0,},{3,2,4,5,6,7,0,1,},{3,2,4,5,6,7,1,0,},{3,2,4,5,7,0,1,6,},{3,2,4,5,7,1,0,6,},{3,2,4,5,7,6,0,1,},{3,2,4,5,7,6,1,0,},{3,2,4,6,0,1,7,5,},
		{3,2,4,6,0,7,1,5,},{3,2,4,6,0,7,5,1,},{3,2,4,6,1,0,7,5,},{3,2,4,6,1,7,0,5,},{3,2,4,6,1,7,5,0,},{3,2,4,6,5,0,7,1,},{3,2,4,6,5,1,7,0,},{3,2,4,6,5,7,0,1,},{3,2,4,6,5,7,1,0,},{3,2,4,6,7,0,1,5,},
		{3,2,4,6,7,0,5,1,},{3,2,4,6,7,1,0,5,},{3,2,4,6,7,1,5,0,},{3,2,4,7,0,1,5,6,},{3,2,4,7,0,6,1,5,},{3,2,4,7,0,6,5,1,},{3,2,4,7,1,0,5,6,},{3,2,4,7,1,6,0,5,},{3,2,4,7,1,6,5,0,},{3,2,4,7,5,0,1,6,},
		{3,2,4,7,5,1,0,6,},{3,2,4,7,5,6,0,1,},{3,2,4,7,5,6,1,0,},{3,2,4,7,6,0,1,5,},{3,2,4,7,6,0,5,1,},{3,2,4,7,6,1,0,5,},{3,2,4,7,6,1,5,0,},{3,2,5,0,1,4,7,6,},{3,2,5,0,1,6,7,4,},{3,2,5,0,1,7,4,6,},
		{3,2,5,0,6,1,7,4,},{3,2,5,0,6,4,7,1,},{3,2,5,0,6,7,1,4,},{3,2,5,0,6,7,4,1,},{3,2,5,0,7,1,4,6,},{3,2,5,0,7,4,1,6,},{3,2,5,0,7,6,1,4,},{3,2,5,0,7,6,4,1,},{3,2,5,1,0,4,7,6,},{3,2,5,1,0,6,7,4,},
		{3,2,5,1,0,7,4,6,},{3,2,5,1,6,0,7,4,},{3,2,5,1,6,4,7,0,},{3,2,5,1,6,7,0,4,},{3,2,5,1,6,7,4,0,},{3,2,5,1,7,0,4,6,},{3,2,5,1,7,4,0,6,},{3,2,5,1,7,6,0,4,},{3,2,5,1,7,6,4,0,},{3,2,5,4,0,1,7,6,},
		{3,2,5,4,0,6,7,1,},{3,2,5,4,0,7,1,6,},{3,2,5,4,1,0,7,6,},{3,2,5,4,1,6,7,0,},{3,2,5,4,1,7,0,6,},{3,2,5,4,6,0,7,1,},{3,2,5,4,6,1,7,0,},{3,2,5,4,6,7,0,1,},{3,2,5,4,6,7,1,0,},{3,2,5,4,7,0,1,6,},
		{3,2,5,4,7,1,0,6,},{3,2,5,4,7,6,0,1,},{3,2,5,4,7,6,1,0,},{3,2,5,6,0,1,7,4,},{3,2,5,6,0,4,7,1,},{3,2,5,6,0,7,1,4,},{3,2,5,6,0,7,4,1,},{3,2,5,6,1,0,7,4,},{3,2,5,6,1,4,7,0,},{3,2,5,6,1,7,0,4,},
		{3,2,5,6,1,7,4,0,},{3,2,5,6,7,0,1,4,},{3,2,5,6,7,0,4,1,},{3,2,5,6,7,1,0,4,},{3,2,5,6,7,1,4,0,},{3,2,5,6,7,4,0,1,},{3,2,5,6,7,4,1,0,},{3,2,5,7,0,1,4,6,},{3,2,5,7,0,4,1,6,},{3,2,5,7,0,6,1,4,},
		{3,2,5,7,0,6,4,1,},{3,2,5,7,1,0,4,6,},{3,2,5,7,1,4,0,6,},{3,2,5,7,1,6,0,4,},{3,2,5,7,1,6,4,0,},{3,2,5,7,6,0,1,4,},{3,2,5,7,6,0,4,1,},{3,2,5,7,6,1,0,4,},{3,2,5,7,6,1,4,0,},{3,2,5,7,6,4,0,1,},
		{3,2,5,7,6,4,1,0,},{3,2,6,0,1,4,7,5,},{3,2,6,0,1,7,4,5,},{3,2,6,0,1,7,5,4,},{3,2,6,0,5,1,7,4,},{3,2,6,0,5,4,7,1,},{3,2,6,0,5,7,1,4,},{3,2,6,0,5,7,4,1,},{3,2,6,0,7,1,4,5,},{3,2,6,0,7,1,5,4,},
		{3,2,6,0,7,4,1,5,},{3,2,6,0,7,4,5,1,},{3,2,6,1,0,4,7,5,},{3,2,6,1,0,7,4,5,},{3,2,6,1,0,7,5,4,},{3,2,6,1,5,0,7,4,},{3,2,6,1,5,4,7,0,},{3,2,6,1,5,7,0,4,},{3,2,6,1,5,7,4,0,},{3,2,6,1,7,0,4,5,},
		{3,2,6,1,7,0,5,4,},{3,2,6,1,7,4,0,5,},{3,2,6,1,7,4,5,0,},{3,2,6,4,0,1,7,5,},{3,2,6,4,0,7,1,5,},{3,2,6,4,0,7,5,1,},{3,2,6,4,1,0,7,5,},{3,2,6,4,1,7,0,5,},{3,2,6,4,1,7,5,0,},{3,2,6,4,5,0,7,1,},
		{3,2,6,4,5,1,7,0,},{3,2,6,4,5,7,0,1,},{3,2,6,4,5,7,1,0,},{3,2,6,4,7,0,1,5,},{3,2,6,4,7,0,5,1,},{3,2,6,4,7,1,0,5,},{3,2,6,4,7,1,5,0,},{3,2,6,5,0,1,7,4,},{3,2,6,5,0,4,7,1,},{3,2,6,5,0,7,1,4,},
		{3,2,6,5,0,7,4,1,},{3,2,6,5,1,0,7,4,},{3,2,6,5,1,4,7,0,},{3,2,6,5,1,7,0,4,},{3,2,6,5,1,7,4,0,},{3,2,6,5,7,0,1,4,},{3,2,6,5,7,0,4,1,},{3,2,6,5,7,1,0,4,},{3,2,6,5,7,1,4,0,},{3,2,6,5,7,4,0,1,},
		{3,2,6,5,7,4,1,0,},{3,2,6,7,0,1,4,5,},{3,2,6,7,0,1,5,4,},{3,2,6,7,0,4,1,5,},{3,2,6,7,0,4,5,1,},{3,2,6,7,1,0,4,5,},{3,2,6,7,1,0,5,4,},{3,2,6,7,1,4,0,5,},{3,2,6,7,1,4,5,0,},{3,2,6,7,5,0,1,4,},
		{3,2,6,7,5,0,4,1,},{3,2,6,7,5,1,0,4,},{3,2,6,7,5,1,4,0,},{3,2,6,7,5,4,0,1,},{3,2,6,7,5,4,1,0,},{3,2,7,0,1,4,5,6,},{3,2,7,0,1,6,4,5,},{3,2,7,0,1,6,5,4,},{3,2,7,0,5,1,4,6,},{3,2,7,0,5,4,1,6,},
		{3,2,7,0,5,6,1,4,},{3,2,7,0,5,6,4,1,},{3,2,7,0,6,1,4,5,},{3,2,7,0,6,1,5,4,},{3,2,7,0,6,4,1,5,},{3,2,7,0,6,4,5,1,},{3,2,7,1,0,4,5,6,},{3,2,7,1,0,6,4,5,},{3,2,7,1,0,6,5,4,},{3,2,7,1,5,0,4,6,},
		{3,2,7,1,5,4,0,6,},{3,2,7,1,5,6,0,4,},{3,2,7,1,5,6,4,0,},{3,2,7,1,6,0,4,5,},{3,2,7,1,6,0,5,4,},{3,2,7,1,6,4,0,5,},{3,2,7,1,6,4,5,0,},{3,2,7,4,0,1,5,6,},{3,2,7,4,0,6,1,5,},{3,2,7,4,0,6,5,1,},
		{3,2,7,4,1,0,5,6,},{3,2,7,4,1,6,0,5,},{3,2,7,4,1,6,5,0,},{3,2,7,4,5,0,1,6,},{3,2,7,4,5,1,0,6,},{3,2,7,4,5,6,0,1,},{3,2,7,4,5,6,1,0,},{3,2,7,4,6,0,1,5,},{3,2,7,4,6,0,5,1,},{3,2,7,4,6,1,0,5,},
		{3,2,7,4,6,1,5,0,},{3,2,7,5,0,1,4,6,},{3,2,7,5,0,4,1,6,},{3,2,7,5,0,6,1,4,},{3,2,7,5,0,6,4,1,},{3,2,7,5,1,0,4,6,},{3,2,7,5,1,4,0,6,},{3,2,7,5,1,6,0,4,},{3,2,7,5,1,6,4,0,},{3,2,7,5,6,0,1,4,},
		{3,2,7,5,6,0,4,1,},{3,2,7,5,6,1,0,4,},{3,2,7,5,6,1,4,0,},{3,2,7,5,6,4,0,1,},{3,2,7,5,6,4,1,0,},{3,2,7,6,0,1,4,5,},{3,2,7,6,0,1,5,4,},{3,2,7,6,0,4,1,5,},{3,2,7,6,0,4,5,1,},{3,2,7,6,1,0,4,5,},
		{3,2,7,6,1,0,5,4,},{3,2,7,6,1,4,0,5,},{3,2,7,6,1,4,5,0,},{3,2,7,6,5,0,1,4,},{3,2,7,6,5,0,4,1,},{3,2,7,6,5,1,0,4,},{3,2,7,6,5,1,4,0,},{3,2,7,6,5,4,0,1,},{3,2,7,6,5,4,1,0,},{3,4,0,1,2,6,7,5,},
		{3,4,0,1,2,7,5,6,},{3,4,0,1,5,2,7,6,},{3,4,0,1,5,6,7,2,},{3,4,0,1,5,7,2,6,},{3,4,0,1,6,2,7,5,},{3,4,0,1,6,7,2,5,},{3,4,0,1,6,7,5,2,},{3,4,0,1,7,2,5,6,},{3,4,0,1,7,6,2,5,},{3,4,0,1,7,6,5,2,},
		{3,4,0,2,1,6,7,5,},{3,4,0,2,1,7,5,6,},{3,4,0,2,5,1,7,6,},{3,4,0,2,5,6,7,1,},{3,4,0,2,5,7,1,6,},{3,4,0,2,6,1,7,5,},{3,4,0,2,6,7,1,5,},{3,4,0,2,6,7,5,1,},{3,4,0,2,7,1,5,6,},{3,4,0,2,7,6,1,5,},
		{3,4,0,2,7,6,5,1,},{3,4,0,5,1,2,7,6,},{3,4,0,5,1,6,7,2,},{3,4,0,5,1,7,2,6,},{3,4,0,5,2,1,7,6,},{3,4,0,5,2,6,7,1,},{3,4,0,5,2,7,1,6,},{3,4,0,5,6,1,7,2,},{3,4,0,5,6,2,7,1,},{3,4,0,5,6,7,1,2,},
		{3,4,0,5,6,7,2,1,},{3,4,0,5,7,1,2,6,},{3,4,0,5,7,2,1,6,},{3,4,0,5,7,6,1,2,},{3,4,0,5,7,6,2,1,},{3,4,0,6,1,2,7,5,},{3,4,0,6,1,7,2,5,},{3,4,0,6,1,7,5,2,},{3,4,0,6,2,1,7,5,},{3,4,0,6,2,7,1,5,},
		{3,4,0,6,2,7,5,1,},{3,4,0,6,5,1,7,2,},{3,4,0,6,5,2,7,1,},{3,4,0,6,5,7,1,2,},{3,4,0,6,5,7,2,1,},{3,4,0,6,7,1,2,5,},{3,4,0,6,7,1,5,2,},{3,4,0,6,7,2,1,5,},{3,4,0,6,7,2,5,1,},{3,4,0,7,1,2,5,6,},
		{3,4,0,7,1,6,2,5,},{3,4,0,7,1,6,5,2,},{3,4,0,7,2,1,5,6,},{3,4,0,7,2,6,1,5,},{3,4,0,7,2,6,5,1,},{3,4,0,7,5,1,2,6,},{3,4,0,7,5,2,1,6,},{3,4,0,7,5,6,1,2,},{3,4,0,7,5,6,2,1,},{3,4,0,7,6,1,2,5,},
		{3,4,0,7,6,1,5,2,},{3,4,0,7,6,2,1,5,},{3,4,0,7,6,2,5,1,},{3,4,1,0,2,6,7,5,},{3,4,1,0,2,7,5,6,},{3,4,1,0,5,2,7,6,},{3,4,1,0,5,6,7,2,},{3,4,1,0,5,7,2,6,},{3,4,1,0,6,2,7,5,},{3,4,1,0,6,7,2,5,},
		{3,4,1,0,6,7,5,2,},{3,4,1,0,7,2,5,6,},{3,4,1,0,7,6,2,5,},{3,4,1,0,7,6,5,2,},{3,4,1,2,0,6,7,5,},{3,4,1,2,0,7,5,6,},{3,4,1,2,5,0,7,6,},{3,4,1,2,5,6,7,0,},{3,4,1,2,5,7,0,6,},{3,4,1,2,6,0,7,5,},
		{3,4,1,2,6,7,0,5,},{3,4,1,2,6,7,5,0,},{3,4,1,2,7,0,5,6,},{3,4,1,2,7,6,0,5,},{3,4,1,2,7,6,5,0,},{3,4,1,5,0,2,7,6,},{3,4,1,5,0,6,7,2,},{3,4,1,5,0,7,2,6,},{3,4,1,5,2,0,7,6,},{3,4,1,5,2,6,7,0,},
		{3,4,1,5,2,7,0,6,},{3,4,1,5,6,0,7,2,},{3,4,1,5,6,2,7,0,},{3,4,1,5,6,7,0,2,},{3,4,1,5,6,7,2,0,},{3,4,1,5,7,0,2,6,},{3,4,1,5,7,2,0,6,},{3,4,1,5,7,6,0,2,},{3,4,1,5,7,6,2,0,},{3,4,1,6,0,2,7,5,},
		{3,4,1,6,0,7,2,5,},{3,4,1,6,0,7,5,2,},{3,4,1,6,2,0,7,5,},{3,4,1,6,2,7,0,5,},{3,4,1,6,2,7,5,0,},{3,4,1,6,5,0,7,2,},{3,4,1,6,5,2,7,0,},{3,4,1,6,5,7,0,2,},{3,4,1,6,5,7,2,0,},{3,4,1,6,7,0,2,5,},
		{3,4,1,6,7,0,5,2,},{3,4,1,6,7,2,0,5,},{3,4,1,6,7,2,5,0,},{3,4,1,7,0,2,5,6,},{3,4,1,7,0,6,2,5,},{3,4,1,7,0,6,5,2,},{3,4,1,7,2,0,5,6,},{3,4,1,7,2,6,0,5,},{3,4,1,7,2,6,5,0,},{3,4,1,7,5,0,2,6,},
		{3,4,1,7,5,2,0,6,},{3,4,1,7,5,6,0,2,},{3,4,1,7,5,6,2,0,},{3,4,1,7,6,0,2,5,},{3,4,1,7,6,0,5,2,},{3,4,1,7,6,2,0,5,},{3,4,1,7,6,2,5,0,},{3,4,5,0,1,2,7,6,},{3,4,5,0,1,6,7,2,},{3,4,5,0,1,7,2,6,},
		{3,4,5,0,2,1,7,6,},{3,4,5,0,2,6,7,1,},{3,4,5,0,2,7,1,6,},{3,4,5,0,6,1,7,2,},{3,4,5,0,6,2,7,1,},{3,4,5,0,6,7,1,2,},{3,4,5,0,6,7,2,1,},{3,4,5,0,7,1,2,6,},{3,4,5,0,7,2,1,6,},{3,4,5,0,7,6,1,2,},
		{3,4,5,0,7,6,2,1,},{3,4,5,1,0,2,7,6,},{3,4,5,1,0,6,7,2,},{3,4,5,1,0,7,2,6,},{3,4,5,1,2,0,7,6,},{3,4,5,1,2,6,7,0,},{3,4,5,1,2,7,0,6,},{3,4,5,1,6,0,7,2,},{3,4,5,1,6,2,7,0,},{3,4,5,1,6,7,0,2,},
		{3,4,5,1,6,7,2,0,},{3,4,5,1,7,0,2,6,},{3,4,5,1,7,2,0,6,},{3,4,5,1,7,6,0,2,},{3,4,5,1,7,6,2,0,},{3,4,5,2,0,1,7,6,},{3,4,5,2,0,6,7,1,},{3,4,5,2,0,7,1,6,},{3,4,5,2,1,0,7,6,},{3,4,5,2,1,6,7,0,},
		{3,4,5,2,1,7,0,6,},{3,4,5,2,6,0,7,1,},{3,4,5,2,6,1,7,0,},{3,4,5,2,6,7,0,1,},{3,4,5,2,6,7,1,0,},{3,4,5,2,7,0,1,6,},{3,4,5,2,7,1,0,6,},{3,4,5,2,7,6,0,1,},{3,4,5,2,7,6,1,0,},{3,4,5,6,0,1,7,2,},
		{3,4,5,6,0,2,7,1,},{3,4,5,6,0,7,1,2,},{3,4,5,6,0,7,2,1,},{3,4,5,6,1,0,7,2,},{3,4,5,6,1,2,7,0,},{3,4,5,6,1,7,0,2,},{3,4,5,6,1,7,2,0,},{3,4,5,6,2,0,7,1,},{3,4,5,6,2,1,7,0,},{3,4,5,6,2,7,0,1,},
		{3,4,5,6,2,7,1,0,},{3,4,5,6,7,0,1,2,},{3,4,5,6,7,0,2,1,},{3,4,5,6,7,1,0,2,},{3,4,5,6,7,1,2,0,},{3,4,5,6,7,2,0,1,},{3,4,5,6,7,2,1,0,},{3,4,5,7,0,1,2,6,},{3,4,5,7,0,2,1,6,},{3,4,5,7,0,6,1,2,},
		{3,4,5,7,0,6,2,1,},{3,4,5,7,1,0,2,6,},{3,4,5,7,1,2,0,6,},{3,4,5,7,1,6,0,2,},{3,4,5,7,1,6,2,0,},{3,4,5,7,2,0,1,6,},{3,4,5,7,2,1,0,6,},{3,4,5,7,2,6,0,1,},{3,4,5,7,2,6,1,0,},{3,4,5,7,6,0,1,2,},
		{3,4,5,7,6,0,2,1,},{3,4,5,7,6,1,0,2,},{3,4,5,7,6,1,2,0,},{3,4,5,7,6,2,0,1,},{3,4,5,7,6,2,1,0,},{3,4,6,0,1,2,7,5,},{3,4,6,0,1,7,2,5,},{3,4,6,0,1,7,5,2,},{3,4,6,0,2,1,7,5,},{3,4,6,0,2,7,1,5,},
		{3,4,6,0,2,7,5,1,},{3,4,6,0,5,1,7,2,},{3,4,6,0,5,2,7,1,},{3,4,6,0,5,7,1,2,},{3,4,6,0,5,7,2,1,},{3,4,6,0,7,1,2,5,},{3,4,6,0,7,1,5,2,},{3,4,6,0,7,2,1,5,},{3,4,6,0,7,2,5,1,},{3,4,6,1,0,2,7,5,},
		{3,4,6,1,0,7,2,5,},{3,4,6,1,0,7,5,2,},{3,4,6,1,2,0,7,5,},{3,4,6,1,2,7,0,5,},{3,4,6,1,2,7,5,0,},{3,4,6,1,5,0,7,2,},{3,4,6,1,5,2,7,0,},{3,4,6,1,5,7,0,2,},{3,4,6,1,5,7,2,0,},{3,4,6,1,7,0,2,5,},
		{3,4,6,1,7,0,5,2,},{3,4,6,1,7,2,0,5,},{3,4,6,1,7,2,5,0,},{3,4,6,2,0,1,7,5,},{3,4,6,2,0,7,1,5,},{3,4,6,2,0,7,5,1,},{3,4,6,2,1,0,7,5,},{3,4,6,2,1,7,0,5,},{3,4,6,2,1,7,5,0,},{3,4,6,2,5,0,7,1,},
		{3,4,6,2,5,1,7,0,},{3,4,6,2,5,7,0,1,},{3,4,6,2,5,7,1,0,},{3,4,6,2,7,0,1,5,},{3,4,6,2,7,0,5,1,},{3,4,6,2,7,1,0,5,},{3,4,6,2,7,1,5,0,},{3,4,6,5,0,1,7,2,},{3,4,6,5,0,2,7,1,},{3,4,6,5,0,7,1,2,},
		{3,4,6,5,0,7,2,1,},{3,4,6,5,1,0,7,2,},{3,4,6,5,1,2,7,0,},{3,4,6,5,1,7,0,2,},{3,4,6,5,1,7,2,0,},{3,4,6,5,2,0,7,1,},{3,4,6,5,2,1,7,0,},{3,4,6,5,2,7,0,1,},{3,4,6,5,2,7,1,0,},{3,4,6,5,7,0,1,2,},
		{3,4,6,5,7,0,2,1,},{3,4,6,5,7,1,0,2,},{3,4,6,5,7,1,2,0,},{3,4,6,5,7,2,0,1,},{3,4,6,5,7,2,1,0,},{3,4,6,7,0,1,2,5,},{3,4,6,7,0,1,5,2,},{3,4,6,7,0,2,1,5,},{3,4,6,7,0,2,5,1,},{3,4,6,7,1,0,2,5,},
		{3,4,6,7,1,0,5,2,},{3,4,6,7,1,2,0,5,},{3,4,6,7,1,2,5,0,},{3,4,6,7,2,0,1,5,},{3,4,6,7,2,0,5,1,},{3,4,6,7,2,1,0,5,},{3,4,6,7,2,1,5,0,},{3,4,6,7,5,0,1,2,},{3,4,6,7,5,0,2,1,},{3,4,6,7,5,1,0,2,},
		{3,4,6,7,5,1,2,0,},{3,4,6,7,5,2,0,1,},{3,4,6,7,5,2,1,0,},{3,4,7,0,1,2,5,6,},{3,4,7,0,1,6,2,5,},{3,4,7,0,1,6,5,2,},{3,4,7,0,2,1,5,6,},{3,4,7,0,2,6,1,5,},{3,4,7,0,2,6,5,1,},{3,4,7,0,5,1,2,6,},
		{3,4,7,0,5,2,1,6,},{3,4,7,0,5,6,1,2,},{3,4,7,0,5,6,2,1,},{3,4,7,0,6,1,2,5,},{3,4,7,0,6,1,5,2,},{3,4,7,0,6,2,1,5,},{3,4,7,0,6,2,5,1,},{3,4,7,1,0,2,5,6,},{3,4,7,1,0,6,2,5,},{3,4,7,1,0,6,5,2,},
		{3,4,7,1,2,0,5,6,},{3,4,7,1,2,6,0,5,},{3,4,7,1,2,6,5,0,},{3,4,7,1,5,0,2,6,},{3,4,7,1,5,2,0,6,},{3,4,7,1,5,6,0,2,},{3,4,7,1,5,6,2,0,},{3,4,7,1,6,0,2,5,},{3,4,7,1,6,0,5,2,},{3,4,7,1,6,2,0,5,},
		{3,4,7,1,6,2,5,0,},{3,4,7,2,0,1,5,6,},{3,4,7,2,0,6,1,5,},{3,4,7,2,0,6,5,1,},{3,4,7,2,1,0,5,6,},{3,4,7,2,1,6,0,5,},{3,4,7,2,1,6,5,0,},{3,4,7,2,5,0,1,6,},{3,4,7,2,5,1,0,6,},{3,4,7,2,5,6,0,1,},
		{3,4,7,2,5,6,1,0,},{3,4,7,2,6,0,1,5,},{3,4,7,2,6,0,5,1,},{3,4,7,2,6,1,0,5,},{3,4,7,2,6,1,5,0,},{3,4,7,5,0,1,2,6,},{3,4,7,5,0,2,1,6,},{3,4,7,5,0,6,1,2,},{3,4,7,5,0,6,2,1,},{3,4,7,5,1,0,2,6,},
		{3,4,7,5,1,2,0,6,},{3,4,7,5,1,6,0,2,},{3,4,7,5,1,6,2,0,},{3,4,7,5,2,0,1,6,},{3,4,7,5,2,1,0,6,},{3,4,7,5,2,6,0,1,},{3,4,7,5,2,6,1,0,},{3,4,7,5,6,0,1,2,},{3,4,7,5,6,0,2,1,},{3,4,7,5,6,1,0,2,},
		{3,4,7,5,6,1,2,0,},{3,4,7,5,6,2,0,1,},{3,4,7,5,6,2,1,0,},{3,4,7,6,0,1,2,5,},{3,4,7,6,0,1,5,2,},{3,4,7,6,0,2,1,5,},{3,4,7,6,0,2,5,1,},{3,4,7,6,1,0,2,5,},{3,4,7,6,1,0,5,2,},{3,4,7,6,1,2,0,5,},
		{3,4,7,6,1,2,5,0,},{3,4,7,6,2,0,1,5,},{3,4,7,6,2,0,5,1,},{3,4,7,6,2,1,0,5,},{3,4,7,6,2,1,5,0,},{3,4,7,6,5,0,1,2,},{3,4,7,6,5,0,2,1,},{3,4,7,6,5,1,0,2,},{3,4,7,6,5,1,2,0,},{3,4,7,6,5,2,0,1,},
		{3,4,7,6,5,2,1,0,},{3,5,0,1,2,4,7,6,},{3,5,0,1,2,6,7,4,},{3,5,0,1,2,7,4,6,},{3,5,0,1,6,2,7,4,},{3,5,0,1,6,4,7,2,},{3,5,0,1,6,7,2,4,},{3,5,0,1,6,7,4,2,},{3,5,0,1,7,2,4,6,},{3,5,0,1,7,4,2,6,},
		{3,5,0,1,7,6,2,4,},{3,5,0,1,7,6,4,2,},{3,5,0,2,1,4,7,6,},{3,5,0,2,1,6,7,4,},{3,5,0,2,1,7,4,6,},{3,5,0,2,6,1,7,4,},{3,5,0,2,6,4,7,1,},{3,5,0,2,6,7,1,4,},{3,5,0,2,6,7,4,1,},{3,5,0,2,7,1,4,6,},
		{3,5,0,2,7,4,1,6,},{3,5,0,2,7,6,1,4,},{3,5,0,2,7,6,4,1,},{3,5,0,4,1,2,7,6,},{3,5,0,4,1,6,7,2,},{3,5,0,4,1,7,2,6,},{3,5,0,4,2,1,7,6,},{3,5,0,4,2,6,7,1,},{3,5,0,4,2,7,1,6,},{3,5,0,4,6,1,7,2,},
		{3,5,0,4,6,2,7,1,},{3,5,0,4,6,7,1,2,},{3,5,0,4,6,7,2,1,},{3,5,0,4,7,1,2,6,},{3,5,0,4,7,2,1,6,},{3,5,0,4,7,6,1,2,},{3,5,0,4,7,6,2,1,},{3,5,0,6,1,2,7,4,},{3,5,0,6,1,4,7,2,},{3,5,0,6,1,7,2,4,},
		{3,5,0,6,1,7,4,2,},{3,5,0,6,2,1,7,4,},{3,5,0,6,2,4,7,1,},{3,5,0,6,2,7,1,4,},{3,5,0,6,2,7,4,1,},{3,5,0,6,7,1,2,4,},{3,5,0,6,7,1,4,2,},{3,5,0,6,7,2,1,4,},{3,5,0,6,7,2,4,1,},{3,5,0,6,7,4,1,2,},
		{3,5,0,6,7,4,2,1,},{3,5,0,7,1,2,4,6,},{3,5,0,7,1,4,2,6,},{3,5,0,7,1,6,2,4,},{3,5,0,7,1,6,4,2,},{3,5,0,7,2,1,4,6,},{3,5,0,7,2,4,1,6,},{3,5,0,7,2,6,1,4,},{3,5,0,7,2,6,4,1,},{3,5,0,7,6,1,2,4,},
		{3,5,0,7,6,1,4,2,},{3,5,0,7,6,2,1,4,},{3,5,0,7,6,2,4,1,},{3,5,0,7,6,4,1,2,},{3,5,0,7,6,4,2,1,},{3,5,1,0,2,4,7,6,},{3,5,1,0,2,6,7,4,},{3,5,1,0,2,7,4,6,},{3,5,1,0,6,2,7,4,},{3,5,1,0,6,4,7,2,},
		{3,5,1,0,6,7,2,4,},{3,5,1,0,6,7,4,2,},{3,5,1,0,7,2,4,6,},{3,5,1,0,7,4,2,6,},{3,5,1,0,7,6,2,4,},{3,5,1,0,7,6,4,2,},{3,5,1,2,0,4,7,6,},{3,5,1,2,0,6,7,4,},{3,5,1,2,0,7,4,6,},{3,5,1,2,6,0,7,4,},
		{3,5,1,2,6,4,7,0,},{3,5,1,2,6,7,0,4,},{3,5,1,2,6,7,4,0,},{3,5,1,2,7,0,4,6,},{3,5,1,2,7,4,0,6,},{3,5,1,2,7,6,0,4,},{3,5,1,2,7,6,4,0,},{3,5,1,4,0,2,7,6,},{3,5,1,4,0,6,7,2,},{3,5,1,4,0,7,2,6,},
		{3,5,1,4,2,0,7,6,},{3,5,1,4,2,6,7,0,},{3,5,1,4,2,7,0,6,},{3,5,1,4,6,0,7,2,},{3,5,1,4,6,2,7,0,},{3,5,1,4,6,7,0,2,},{3,5,1,4,6,7,2,0,},{3,5,1,4,7,0,2,6,},{3,5,1,4,7,2,0,6,},{3,5,1,4,7,6,0,2,},
		{3,5,1,4,7,6,2,0,},{3,5,1,6,0,2,7,4,},{3,5,1,6,0,4,7,2,},{3,5,1,6,0,7,2,4,},{3,5,1,6,0,7,4,2,},{3,5,1,6,2,0,7,4,},{3,5,1,6,2,4,7,0,},{3,5,1,6,2,7,0,4,},{3,5,1,6,2,7,4,0,},{3,5,1,6,7,0,2,4,},
		{3,5,1,6,7,0,4,2,},{3,5,1,6,7,2,0,4,},{3,5,1,6,7,2,4,0,},{3,5,1,6,7,4,0,2,},{3,5,1,6,7,4,2,0,},{3,5,1,7,0,2,4,6,},{3,5,1,7,0,4,2,6,},{3,5,1,7,0,6,2,4,},{3,5,1,7,0,6,4,2,},{3,5,1,7,2,0,4,6,},
		{3,5,1,7,2,4,0,6,},{3,5,1,7,2,6,0,4,},{3,5,1,7,2,6,4,0,},{3,5,1,7,6,0,2,4,},{3,5,1,7,6,0,4,2,},{3,5,1,7,6,2,0,4,},{3,5,1,7,6,2,4,0,},{3,5,1,7,6,4,0,2,},{3,5,1,7,6,4,2,0,},{3,5,4,0,1,2,7,6,},
		{3,5,4,0,1,6,7,2,},{3,5,4,0,1,7,2,6,},{3,5,4,0,2,1,7,6,},{3,5,4,0,2,6,7,1,},{3,5,4,0,2,7,1,6,},{3,5,4,0,6,1,7,2,},{3,5,4,0,6,2,7,1,},{3,5,4,0,6,7,1,2,},{3,5,4,0,6,7,2,1,},{3,5,4,0,7,1,2,6,},
		{3,5,4,0,7,2,1,6,},{3,5,4,0,7,6,1,2,},{3,5,4,0,7,6,2,1,},{3,5,4,1,0,2,7,6,},{3,5,4,1,0,6,7,2,},{3,5,4,1,0,7,2,6,},{3,5,4,1,2,0,7,6,},{3,5,4,1,2,6,7,0,},{3,5,4,1,2,7,0,6,},{3,5,4,1,6,0,7,2,},
		{3,5,4,1,6,2,7,0,},{3,5,4,1,6,7,0,2,},{3,5,4,1,6,7,2,0,},{3,5,4,1,7,0,2,6,},{3,5,4,1,7,2,0,6,},{3,5,4,1,7,6,0,2,},{3,5,4,1,7,6,2,0,},{3,5,4,2,0,1,7,6,},{3,5,4,2,0,6,7,1,},{3,5,4,2,0,7,1,6,},
		{3,5,4,2,1,0,7,6,},{3,5,4,2,1,6,7,0,},{3,5,4,2,1,7,0,6,},{3,5,4,2,6,0,7,1,},{3,5,4,2,6,1,7,0,},{3,5,4,2,6,7,0,1,},{3,5,4,2,6,7,1,0,},{3,5,4,2,7,0,1,6,},{3,5,4,2,7,1,0,6,},{3,5,4,2,7,6,0,1,},
		{3,5,4,2,7,6,1,0,},{3,5,4,6,0,1,7,2,},{3,5,4,6,0,2,7,1,},{3,5,4,6,0,7,1,2,},{3,5,4,6,0,7,2,1,},{3,5,4,6,1,0,7,2,},{3,5,4,6,1,2,7,0,},{3,5,4,6,1,7,0,2,},{3,5,4,6,1,7,2,0,},{3,5,4,6,2,0,7,1,},
		{3,5,4,6,2,1,7,0,},{3,5,4,6,2,7,0,1,},{3,5,4,6,2,7,1,0,},{3,5,4,6,7,0,1,2,},{3,5,4,6,7,0,2,1,},{3,5,4,6,7,1,0,2,},{3,5,4,6,7,1,2,0,},{3,5,4,6,7,2,0,1,},{3,5,4,6,7,2,1,0,},{3,5,4,7,0,1,2,6,},
		{3,5,4,7,0,2,1,6,},{3,5,4,7,0,6,1,2,},{3,5,4,7,0,6,2,1,},{3,5,4,7,1,0,2,6,},{3,5,4,7,1,2,0,6,},{3,5,4,7,1,6,0,2,},{3,5,4,7,1,6,2,0,},{3,5,4,7,2,0,1,6,},{3,5,4,7,2,1,0,6,},{3,5,4,7,2,6,0,1,},
		{3,5,4,7,2,6,1,0,},{3,5,4,7,6,0,1,2,},{3,5,4,7,6,0,2,1,},{3,5,4,7,6,1,0,2,},{3,5,4,7,6,1,2,0,},{3,5,4,7,6,2,0,1,},{3,5,4,7,6,2,1,0,},{3,5,6,0,1,2,7,4,},{3,5,6,0,1,4,7,2,},{3,5,6,0,1,7,2,4,},
		{3,5,6,0,1,7,4,2,},{3,5,6,0,2,1,7,4,},{3,5,6,0,2,4,7,1,},{3,5,6,0,2,7,1,4,},{3,5,6,0,2,7,4,1,},{3,5,6,0,7,1,2,4,},{3,5,6,0,7,1,4,2,},{3,5,6,0,7,2,1,4,},{3,5,6,0,7,2,4,1,},{3,5,6,0,7,4,1,2,},
		{3,5,6,0,7,4,2,1,},{3,5,6,1,0,2,7,4,},{3,5,6,1,0,4,7,2,},{3,5,6,1,0,7,2,4,},{3,5,6,1,0,7,4,2,},{3,5,6,1,2,0,7,4,},{3,5,6,1,2,4,7,0,},{3,5,6,1,2,7,0,4,},{3,5,6,1,2,7,4,0,},{3,5,6,1,7,0,2,4,},
		{3,5,6,1,7,0,4,2,},{3,5,6,1,7,2,0,4,},{3,5,6,1,7,2,4,0,},{3,5,6,1,7,4,0,2,},{3,5,6,1,7,4,2,0,},{3,5,6,2,0,1,7,4,},{3,5,6,2,0,4,7,1,},{3,5,6,2,0,7,1,4,},{3,5,6,2,0,7,4,1,},{3,5,6,2,1,0,7,4,},
		{3,5,6,2,1,4,7,0,},{3,5,6,2,1,7,0,4,},{3,5,6,2,1,7,4,0,},{3,5,6,2,7,0,1,4,},{3,5,6,2,7,0,4,1,},{3,5,6,2,7,1,0,4,},{3,5,6,2,7,1,4,0,},{3,5,6,2,7,4,0,1,},{3,5,6,2,7,4,1,0,},{3,5,6,4,0,1,7,2,},
		{3,5,6,4,0,2,7,1,},{3,5,6,4,0,7,1,2,},{3,5,6,4,0,7,2,1,},{3,5,6,4,1,0,7,2,},{3,5,6,4,1,2,7,0,},{3,5,6,4,1,7,0,2,},{3,5,6,4,1,7,2,0,},{3,5,6,4,2,0,7,1,},{3,5,6,4,2,1,7,0,},{3,5,6,4,2,7,0,1,},
		{3,5,6,4,2,7,1,0,},{3,5,6,4,7,0,1,2,},{3,5,6,4,7,0,2,1,},{3,5,6,4,7,1,0,2,},{3,5,6,4,7,1,2,0,},{3,5,6,4,7,2,0,1,},{3,5,6,4,7,2,1,0,},{3,5,6,7,0,1,2,4,},{3,5,6,7,0,1,4,2,},{3,5,6,7,0,2,1,4,},
		{3,5,6,7,0,2,4,1,},{3,5,6,7,0,4,1,2,},{3,5,6,7,0,4,2,1,},{3,5,6,7,1,0,2,4,},{3,5,6,7,1,0,4,2,},{3,5,6,7,1,2,0,4,},{3,5,6,7,1,2,4,0,},{3,5,6,7,1,4,0,2,},{3,5,6,7,1,4,2,0,},{3,5,6,7,2,0,1,4,},
		{3,5,6,7,2,0,4,1,},{3,5,6,7,2,1,0,4,},{3,5,6,7,2,1,4,0,},{3,5,6,7,2,4,0,1,},{3,5,6,7,2,4,1,0,},{3,5,7,0,1,2,4,6,},{3,5,7,0,1,4,2,6,},{3,5,7,0,1,6,2,4,},{3,5,7,0,1,6,4,2,},{3,5,7,0,2,1,4,6,},
		{3,5,7,0,2,4,1,6,},{3,5,7,0,2,6,1,4,},{3,5,7,0,2,6,4,1,},{3,5,7,0,6,1,2,4,},{3,5,7,0,6,1,4,2,},{3,5,7,0,6,2,1,4,},{3,5,7,0,6,2,4,1,},{3,5,7,0,6,4,1,2,},{3,5,7,0,6,4,2,1,},{3,5,7,1,0,2,4,6,},
		{3,5,7,1,0,4,2,6,},{3,5,7,1,0,6,2,4,},{3,5,7,1,0,6,4,2,},{3,5,7,1,2,0,4,6,},{3,5,7,1,2,4,0,6,},{3,5,7,1,2,6,0,4,},{3,5,7,1,2,6,4,0,},{3,5,7,1,6,0,2,4,},{3,5,7,1,6,0,4,2,},{3,5,7,1,6,2,0,4,},
		{3,5,7,1,6,2,4,0,},{3,5,7,1,6,4,0,2,},{3,5,7,1,6,4,2,0,},{3,5,7,2,0,1,4,6,},{3,5,7,2,0,4,1,6,},{3,5,7,2,0,6,1,4,},{3,5,7,2,0,6,4,1,},{3,5,7,2,1,0,4,6,},{3,5,7,2,1,4,0,6,},{3,5,7,2,1,6,0,4,},
		{3,5,7,2,1,6,4,0,},{3,5,7,2,6,0,1,4,},{3,5,7,2,6,0,4,1,},{3,5,7,2,6,1,0,4,},{3,5,7,2,6,1,4,0,},{3,5,7,2,6,4,0,1,},{3,5,7,2,6,4,1,0,},{3,5,7,4,0,1,2,6,},{3,5,7,4,0,2,1,6,},{3,5,7,4,0,6,1,2,},
		{3,5,7,4,0,6,2,1,},{3,5,7,4,1,0,2,6,},{3,5,7,4,1,2,0,6,},{3,5,7,4,1,6,0,2,},{3,5,7,4,1,6,2,0,},{3,5,7,4,2,0,1,6,},{3,5,7,4,2,1,0,6,},{3,5,7,4,2,6,0,1,},{3,5,7,4,2,6,1,0,},{3,5,7,4,6,0,1,2,},
		{3,5,7,4,6,0,2,1,},{3,5,7,4,6,1,0,2,},{3,5,7,4,6,1,2,0,},{3,5,7,4,6,2,0,1,},{3,5,7,4,6,2,1,0,},{3,5,7,6,0,1,2,4,},{3,5,7,6,0,1,4,2,},{3,5,7,6,0,2,1,4,},{3,5,7,6,0,2,4,1,},{3,5,7,6,0,4,1,2,},
		{3,5,7,6,0,4,2,1,},{3,5,7,6,1,0,2,4,},{3,5,7,6,1,0,4,2,},{3,5,7,6,1,2,0,4,},{3,5,7,6,1,2,4,0,},{3,5,7,6,1,4,0,2,},{3,5,7,6,1,4,2,0,},{3,5,7,6,2,0,1,4,},{3,5,7,6,2,0,4,1,},{3,5,7,6,2,1,0,4,},
		{3,5,7,6,2,1,4,0,},{3,5,7,6,2,4,0,1,},{3,5,7,6,2,4,1,0,},{3,6,0,1,2,4,7,5,},{3,6,0,1,2,7,4,5,},{3,6,0,1,2,7,5,4,},{3,6,0,1,5,2,7,4,},{3,6,0,1,5,4,7,2,},{3,6,0,1,5,7,2,4,},{3,6,0,1,5,7,4,2,},
		{3,6,0,1,7,2,4,5,},{3,6,0,1,7,2,5,4,},{3,6,0,1,7,4,2,5,},{3,6,0,1,7,4,5,2,},{3,6,0,2,1,4,7,5,},{3,6,0,2,1,7,4,5,},{3,6,0,2,1,7,5,4,},{3,6,0,2,5,1,7,4,},{3,6,0,2,5,4,7,1,},{3,6,0,2,5,7,1,4,},
		{3,6,0,2,5,7,4,1,},{3,6,0,2,7,1,4,5,},{3,6,0,2,7,1,5,4,},{3,6,0,2,7,4,1,5,},{3,6,0,2,7,4,5,1,},{3,6,0,4,1,2,7,5,},{3,6,0,4,1,7,2,5,},{3,6,0,4,1,7,5,2,},{3,6,0,4,2,1,7,5,},{3,6,0,4,2,7,1,5,},
		{3,6,0,4,2,7,5,1,},{3,6,0,4,5,1,7,2,},{3,6,0,4,5,2,7,1,},{3,6,0,4,5,7,1,2,},{3,6,0,4,5,7,2,1,},{3,6,0,4,7,1,2,5,},{3,6,0,4,7,1,5,2,},{3,6,0,4,7,2,1,5,},{3,6,0,4,7,2,5,1,},{3,6,0,5,1,2,7,4,},
		{3,6,0,5,1,4,7,2,},{3,6,0,5,1,7,2,4,},{3,6,0,5,1,7,4,2,},{3,6,0,5,2,1,7,4,},{3,6,0,5,2,4,7,1,},{3,6,0,5,2,7,1,4,},{3,6,0,5,2,7,4,1,},{3,6,0,5,7,1,2,4,},{3,6,0,5,7,1,4,2,},{3,6,0,5,7,2,1,4,},
		{3,6,0,5,7,2,4,1,},{3,6,0,5,7,4,1,2,},{3,6,0,5,7,4,2,1,},{3,6,0,7,1,2,4,5,},{3,6,0,7,1,2,5,4,},{3,6,0,7,1,4,2,5,},{3,6,0,7,1,4,5,2,},{3,6,0,7,2,1,4,5,},{3,6,0,7,2,1,5,4,},{3,6,0,7,2,4,1,5,},
		{3,6,0,7,2,4,5,1,},{3,6,0,7,5,1,2,4,},{3,6,0,7,5,1,4,2,},{3,6,0,7,5,2,1,4,},{3,6,0,7,5,2,4,1,},{3,6,0,7,5,4,1,2,},{3,6,0,7,5,4,2,1,},{3,6,1,0,2,4,7,5,},{3,6,1,0,2,7,4,5,},{3,6,1,0,2,7,5,4,},
		{3,6,1,0,5,2,7,4,},{3,6,1,0,5,4,7,2,},{3,6,1,0,5,7,2,4,},{3,6,1,0,5,7,4,2,},{3,6,1,0,7,2,4,5,},{3,6,1,0,7,2,5,4,},{3,6,1,0,7,4,2,5,},{3,6,1,0,7,4,5,2,},{3,6,1,2,0,4,7,5,},{3,6,1,2,0,7,4,5,},
		{3,6,1,2,0,7,5,4,},{3,6,1,2,5,0,7,4,},{3,6,1,2,5,4,7,0,},{3,6,1,2,5,7,0,4,},{3,6,1,2,5,7,4,0,},{3,6,1,2,7,0,4,5,},{3,6,1,2,7,0,5,4,},{3,6,1,2,7,4,0,5,},{3,6,1,2,7,4,5,0,},{3,6,1,4,0,2,7,5,},
		{3,6,1,4,0,7,2,5,},{3,6,1,4,0,7,5,2,},{3,6,1,4,2,0,7,5,},{3,6,1,4,2,7,0,5,},{3,6,1,4,2,7,5,0,},{3,6,1,4,5,0,7,2,},{3,6,1,4,5,2,7,0,},{3,6,1,4,5,7,0,2,},{3,6,1,4,5,7,2,0,},{3,6,1,4,7,0,2,5,},
		{3,6,1,4,7,0,5,2,},{3,6,1,4,7,2,0,5,},{3,6,1,4,7,2,5,0,},{3,6,1,5,0,2,7,4,},{3,6,1,5,0,4,7,2,},{3,6,1,5,0,7,2,4,},{3,6,1,5,0,7,4,2,},{3,6,1,5,2,0,7,4,},{3,6,1,5,2,4,7,0,},{3,6,1,5,2,7,0,4,},
		{3,6,1,5,2,7,4,0,},{3,6,1,5,7,0,2,4,},{3,6,1,5,7,0,4,2,},{3,6,1,5,7,2,0,4,},{3,6,1,5,7,2,4,0,},{3,6,1,5,7,4,0,2,},{3,6,1,5,7,4,2,0,},{3,6,1,7,0,2,4,5,},{3,6,1,7,0,2,5,4,},{3,6,1,7,0,4,2,5,},
		{3,6,1,7,0,4,5,2,},{3,6,1,7,2,0,4,5,},{3,6,1,7,2,0,5,4,},{3,6,1,7,2,4,0,5,},{3,6,1,7,2,4,5,0,},{3,6,1,7,5,0,2,4,},{3,6,1,7,5,0,4,2,},{3,6,1,7,5,2,0,4,},{3,6,1,7,5,2,4,0,},{3,6,1,7,5,4,0,2,},
		{3,6,1,7,5,4,2,0,},{3,6,4,0,1,2,7,5,},{3,6,4,0,1,7,2,5,},{3,6,4,0,1,7,5,2,},{3,6,4,0,2,1,7,5,},{3,6,4,0,2,7,1,5,},{3,6,4,0,2,7,5,1,},{3,6,4,0,5,1,7,2,},{3,6,4,0,5,2,7,1,},{3,6,4,0,5,7,1,2,},
		{3,6,4,0,5,7,2,1,},{3,6,4,0,7,1,2,5,},{3,6,4,0,7,1,5,2,},{3,6,4,0,7,2,1,5,},{3,6,4,0,7,2,5,1,},{3,6,4,1,0,2,7,5,},{3,6,4,1,0,7,2,5,},{3,6,4,1,0,7,5,2,},{3,6,4,1,2,0,7,5,},{3,6,4,1,2,7,0,5,},
		{3,6,4,1,2,7,5,0,},{3,6,4,1,5,0,7,2,},{3,6,4,1,5,2,7,0,},{3,6,4,1,5,7,0,2,},{3,6,4,1,5,7,2,0,},{3,6,4,1,7,0,2,5,},{3,6,4,1,7,0,5,2,},{3,6,4,1,7,2,0,5,},{3,6,4,1,7,2,5,0,},{3,6,4,2,0,1,7,5,},
		{3,6,4,2,0,7,1,5,},{3,6,4,2,0,7,5,1,},{3,6,4,2,1,0,7,5,},{3,6,4,2,1,7,0,5,},{3,6,4,2,1,7,5,0,},{3,6,4,2,5,0,7,1,},{3,6,4,2,5,1,7,0,},{3,6,4,2,5,7,0,1,},{3,6,4,2,5,7,1,0,},{3,6,4,2,7,0,1,5,},
		{3,6,4,2,7,0,5,1,},{3,6,4,2,7,1,0,5,},{3,6,4,2,7,1,5,0,},{3,6,4,5,0,1,7,2,},{3,6,4,5,0,2,7,1,},{3,6,4,5,0,7,1,2,},{3,6,4,5,0,7,2,1,},{3,6,4,5,1,0,7,2,},{3,6,4,5,1,2,7,0,},{3,6,4,5,1,7,0,2,},
		{3,6,4,5,1,7,2,0,},{3,6,4,5,2,0,7,1,},{3,6,4,5,2,1,7,0,},{3,6,4,5,2,7,0,1,},{3,6,4,5,2,7,1,0,},{3,6,4,5,7,0,1,2,},{3,6,4,5,7,0,2,1,},{3,6,4,5,7,1,0,2,},{3,6,4,5,7,1,2,0,},{3,6,4,5,7,2,0,1,},
		{3,6,4,5,7,2,1,0,},{3,6,4,7,0,1,2,5,},{3,6,4,7,0,1,5,2,},{3,6,4,7,0,2,1,5,},{3,6,4,7,0,2,5,1,},{3,6,4,7,1,0,2,5,},{3,6,4,7,1,0,5,2,},{3,6,4,7,1,2,0,5,},{3,6,4,7,1,2,5,0,},{3,6,4,7,2,0,1,5,},
		{3,6,4,7,2,0,5,1,},{3,6,4,7,2,1,0,5,},{3,6,4,7,2,1,5,0,},{3,6,4,7,5,0,1,2,},{3,6,4,7,5,0,2,1,},{3,6,4,7,5,1,0,2,},{3,6,4,7,5,1,2,0,},{3,6,4,7,5,2,0,1,},{3,6,4,7,5,2,1,0,},{3,6,5,0,1,2,7,4,},
		{3,6,5,0,1,4,7,2,},{3,6,5,0,1,7,2,4,},{3,6,5,0,1,7,4,2,},{3,6,5,0,2,1,7,4,},{3,6,5,0,2,4,7,1,},{3,6,5,0,2,7,1,4,},{3,6,5,0,2,7,4,1,},{3,6,5,0,7,1,2,4,},{3,6,5,0,7,1,4,2,},{3,6,5,0,7,2,1,4,},
		{3,6,5,0,7,2,4,1,},{3,6,5,0,7,4,1,2,},{3,6,5,0,7,4,2,1,},{3,6,5,1,0,2,7,4,},{3,6,5,1,0,4,7,2,},{3,6,5,1,0,7,2,4,},{3,6,5,1,0,7,4,2,},{3,6,5,1,2,0,7,4,},{3,6,5,1,2,4,7,0,},{3,6,5,1,2,7,0,4,},
		{3,6,5,1,2,7,4,0,},{3,6,5,1,7,0,2,4,},{3,6,5,1,7,0,4,2,},{3,6,5,1,7,2,0,4,},{3,6,5,1,7,2,4,0,},{3,6,5,1,7,4,0,2,},{3,6,5,1,7,4,2,0,},{3,6,5,2,0,1,7,4,},{3,6,5,2,0,4,7,1,},{3,6,5,2,0,7,1,4,},
		{3,6,5,2,0,7,4,1,},{3,6,5,2,1,0,7,4,},{3,6,5,2,1,4,7,0,},{3,6,5,2,1,7,0,4,},{3,6,5,2,1,7,4,0,},{3,6,5,2,7,0,1,4,},{3,6,5,2,7,0,4,1,},{3,6,5,2,7,1,0,4,},{3,6,5,2,7,1,4,0,},{3,6,5,2,7,4,0,1,},
		{3,6,5,2,7,4,1,0,},{3,6,5,4,0,1,7,2,},{3,6,5,4,0,2,7,1,},{3,6,5,4,0,7,1,2,},{3,6,5,4,0,7,2,1,},{3,6,5,4,1,0,7,2,},{3,6,5,4,1,2,7,0,},{3,6,5,4,1,7,0,2,},{3,6,5,4,1,7,2,0,},{3,6,5,4,2,0,7,1,},
		{3,6,5,4,2,1,7,0,},{3,6,5,4,2,7,0,1,},{3,6,5,4,2,7,1,0,},{3,6,5,4,7,0,1,2,},{3,6,5,4,7,0,2,1,},{3,6,5,4,7,1,0,2,},{3,6,5,4,7,1,2,0,},{3,6,5,4,7,2,0,1,},{3,6,5,4,7,2,1,0,},{3,6,5,7,0,1,2,4,},
		{3,6,5,7,0,1,4,2,},{3,6,5,7,0,2,1,4,},{3,6,5,7,0,2,4,1,},{3,6,5,7,0,4,1,2,},{3,6,5,7,0,4,2,1,},{3,6,5,7,1,0,2,4,},{3,6,5,7,1,0,4,2,},{3,6,5,7,1,2,0,4,},{3,6,5,7,1,2,4,0,},{3,6,5,7,1,4,0,2,},
		{3,6,5,7,1,4,2,0,},{3,6,5,7,2,0,1,4,},{3,6,5,7,2,0,4,1,},{3,6,5,7,2,1,0,4,},{3,6,5,7,2,1,4,0,},{3,6,5,7,2,4,0,1,},{3,6,5,7,2,4,1,0,},{3,6,7,0,1,2,4,5,},{3,6,7,0,1,2,5,4,},{3,6,7,0,1,4,2,5,},
		{3,6,7,0,1,4,5,2,},{3,6,7,0,2,1,4,5,},{3,6,7,0,2,1,5,4,},{3,6,7,0,2,4,1,5,},{3,6,7,0,2,4,5,1,},{3,6,7,0,5,1,2,4,},{3,6,7,0,5,1,4,2,},{3,6,7,0,5,2,1,4,},{3,6,7,0,5,2,4,1,},{3,6,7,0,5,4,1,2,},
		{3,6,7,0,5,4,2,1,},{3,6,7,1,0,2,4,5,},{3,6,7,1,0,2,5,4,},{3,6,7,1,0,4,2,5,},{3,6,7,1,0,4,5,2,},{3,6,7,1,2,0,4,5,},{3,6,7,1,2,0,5,4,},{3,6,7,1,2,4,0,5,},{3,6,7,1,2,4,5,0,},{3,6,7,1,5,0,2,4,},
		{3,6,7,1,5,0,4,2,},{3,6,7,1,5,2,0,4,},{3,6,7,1,5,2,4,0,},{3,6,7,1,5,4,0,2,},{3,6,7,1,5,4,2,0,},{3,6,7,2,0,1,4,5,},{3,6,7,2,0,1,5,4,},{3,6,7,2,0,4,1,5,},{3,6,7,2,0,4,5,1,},{3,6,7,2,1,0,4,5,},
		{3,6,7,2,1,0,5,4,},{3,6,7,2,1,4,0,5,},{3,6,7,2,1,4,5,0,},{3,6,7,2,5,0,1,4,},{3,6,7,2,5,0,4,1,},{3,6,7,2,5,1,0,4,},{3,6,7,2,5,1,4,0,},{3,6,7,2,5,4,0,1,},{3,6,7,2,5,4,1,0,},{3,6,7,4,0,1,2,5,},
		{3,6,7,4,0,1,5,2,},{3,6,7,4,0,2,1,5,},{3,6,7,4,0,2,5,1,},{3,6,7,4,1,0,2,5,},{3,6,7,4,1,0,5,2,},{3,6,7,4,1,2,0,5,},{3,6,7,4,1,2,5,0,},{3,6,7,4,2,0,1,5,},{3,6,7,4,2,0,5,1,},{3,6,7,4,2,1,0,5,},
		{3,6,7,4,2,1,5,0,},{3,6,7,4,5,0,1,2,},{3,6,7,4,5,0,2,1,},{3,6,7,4,5,1,0,2,},{3,6,7,4,5,1,2,0,},{3,6,7,4,5,2,0,1,},{3,6,7,4,5,2,1,0,},{3,6,7,5,0,1,2,4,},{3,6,7,5,0,1,4,2,},{3,6,7,5,0,2,1,4,},
		{3,6,7,5,0,2,4,1,},{3,6,7,5,0,4,1,2,},{3,6,7,5,0,4,2,1,},{3,6,7,5,1,0,2,4,},{3,6,7,5,1,0,4,2,},{3,6,7,5,1,2,0,4,},{3,6,7,5,1,2,4,0,},{3,6,7,5,1,4,0,2,},{3,6,7,5,1,4,2,0,},{3,6,7,5,2,0,1,4,},
		{3,6,7,5,2,0,4,1,},{3,6,7,5,2,1,0,4,},{3,6,7,5,2,1,4,0,},{3,6,7,5,2,4,0,1,},{3,6,7,5,2,4,1,0,},{3,7,0,1,2,4,5,6,},{3,7,0,1,2,6,4,5,},{3,7,0,1,2,6,5,4,},{3,7,0,1,5,2,4,6,},{3,7,0,1,5,4,2,6,},
		{3,7,0,1,5,6,2,4,},{3,7,0,1,5,6,4,2,},{3,7,0,1,6,2,4,5,},{3,7,0,1,6,2,5,4,},{3,7,0,1,6,4,2,5,},{3,7,0,1,6,4,5,2,},{3,7,0,2,1,4,5,6,},{3,7,0,2,1,6,4,5,},{3,7,0,2,1,6,5,4,},{3,7,0,2,5,1,4,6,},
		{3,7,0,2,5,4,1,6,},{3,7,0,2,5,6,1,4,},{3,7,0,2,5,6,4,1,},{3,7,0,2,6,1,4,5,},{3,7,0,2,6,1,5,4,},{3,7,0,2,6,4,1,5,},{3,7,0,2,6,4,5,1,},{3,7,0,4,1,2,5,6,},{3,7,0,4,1,6,2,5,},{3,7,0,4,1,6,5,2,},
		{3,7,0,4,2,1,5,6,},{3,7,0,4,2,6,1,5,},{3,7,0,4,2,6,5,1,},{3,7,0,4,5,1,2,6,},{3,7,0,4,5,2,1,6,},{3,7,0,4,5,6,1,2,},{3,7,0,4,5,6,2,1,},{3,7,0,4,6,1,2,5,},{3,7,0,4,6,1,5,2,},{3,7,0,4,6,2,1,5,},
		{3,7,0,4,6,2,5,1,},{3,7,0,5,1,2,4,6,},{3,7,0,5,1,4,2,6,},{3,7,0,5,1,6,2,4,},{3,7,0,5,1,6,4,2,},{3,7,0,5,2,1,4,6,},{3,7,0,5,2,4,1,6,},{3,7,0,5,2,6,1,4,},{3,7,0,5,2,6,4,1,},{3,7,0,5,6,1,2,4,},
		{3,7,0,5,6,1,4,2,},{3,7,0,5,6,2,1,4,},{3,7,0,5,6,2,4,1,},{3,7,0,5,6,4,1,2,},{3,7,0,5,6,4,2,1,},{3,7,0,6,1,2,4,5,},{3,7,0,6,1,2,5,4,},{3,7,0,6,1,4,2,5,},{3,7,0,6,1,4,5,2,},{3,7,0,6,2,1,4,5,},
		{3,7,0,6,2,1,5,4,},{3,7,0,6,2,4,1,5,},{3,7,0,6,2,4,5,1,},{3,7,0,6,5,1,2,4,},{3,7,0,6,5,1,4,2,},{3,7,0,6,5,2,1,4,},{3,7,0,6,5,2,4,1,},{3,7,0,6,5,4,1,2,},{3,7,0,6,5,4,2,1,},{3,7,1,0,2,4,5,6,},
		{3,7,1,0,2,6,4,5,},{3,7,1,0,2,6,5,4,},{3,7,1,0,5,2,4,6,},{3,7,1,0,5,4,2,6,},{3,7,1,0,5,6,2,4,},{3,7,1,0,5,6,4,2,},{3,7,1,0,6,2,4,5,},{3,7,1,0,6,2,5,4,},{3,7,1,0,6,4,2,5,},{3,7,1,0,6,4,5,2,},
		{3,7,1,2,0,4,5,6,},{3,7,1,2,0,6,4,5,},{3,7,1,2,0,6,5,4,},{3,7,1,2,5,0,4,6,},{3,7,1,2,5,4,0,6,},{3,7,1,2,5,6,0,4,},{3,7,1,2,5,6,4,0,},{3,7,1,2,6,0,4,5,},{3,7,1,2,6,0,5,4,},{3,7,1,2,6,4,0,5,},
		{3,7,1,2,6,4,5,0,},{3,7,1,4,0,2,5,6,},{3,7,1,4,0,6,2,5,},{3,7,1,4,0,6,5,2,},{3,7,1,4,2,0,5,6,},{3,7,1,4,2,6,0,5,},{3,7,1,4,2,6,5,0,},{3,7,1,4,5,0,2,6,},{3,7,1,4,5,2,0,6,},{3,7,1,4,5,6,0,2,},
		{3,7,1,4,5,6,2,0,},{3,7,1,4,6,0,2,5,},{3,7,1,4,6,0,5,2,},{3,7,1,4,6,2,0,5,},{3,7,1,4,6,2,5,0,},{3,7,1,5,0,2,4,6,},{3,7,1,5,0,4,2,6,},{3,7,1,5,0,6,2,4,},{3,7,1,5,0,6,4,2,},{3,7,1,5,2,0,4,6,},
		{3,7,1,5,2,4,0,6,},{3,7,1,5,2,6,0,4,},{3,7,1,5,2,6,4,0,},{3,7,1,5,6,0,2,4,},{3,7,1,5,6,0,4,2,},{3,7,1,5,6,2,0,4,},{3,7,1,5,6,2,4,0,},{3,7,1,5,6,4,0,2,},{3,7,1,5,6,4,2,0,},{3,7,1,6,0,2,4,5,},
		{3,7,1,6,0,2,5,4,},{3,7,1,6,0,4,2,5,},{3,7,1,6,0,4,5,2,},{3,7,1,6,2,0,4,5,},{3,7,1,6,2,0,5,4,},{3,7,1,6,2,4,0,5,},{3,7,1,6,2,4,5,0,},{3,7,1,6,5,0,2,4,},{3,7,1,6,5,0,4,2,},{3,7,1,6,5,2,0,4,},
		{3,7,1,6,5,2,4,0,},{3,7,1,6,5,4,0,2,},{3,7,1,6,5,4,2,0,},{3,7,4,0,1,2,5,6,},{3,7,4,0,1,6,2,5,},{3,7,4,0,1,6,5,2,},{3,7,4,0,2,1,5,6,},{3,7,4,0,2,6,1,5,},{3,7,4,0,2,6,5,1,},{3,7,4,0,5,1,2,6,},
		{3,7,4,0,5,2,1,6,},{3,7,4,0,5,6,1,2,},{3,7,4,0,5,6,2,1,},{3,7,4,0,6,1,2,5,},{3,7,4,0,6,1,5,2,},{3,7,4,0,6,2,1,5,},{3,7,4,0,6,2,5,1,},{3,7,4,1,0,2,5,6,},{3,7,4,1,0,6,2,5,},{3,7,4,1,0,6,5,2,},
		{3,7,4,1,2,0,5,6,},{3,7,4,1,2,6,0,5,},{3,7,4,1,2,6,5,0,},{3,7,4,1,5,0,2,6,},{3,7,4,1,5,2,0,6,},{3,7,4,1,5,6,0,2,},{3,7,4,1,5,6,2,0,},{3,7,4,1,6,0,2,5,},{3,7,4,1,6,0,5,2,},{3,7,4,1,6,2,0,5,},
		{3,7,4,1,6,2,5,0,},{3,7,4,2,0,1,5,6,},{3,7,4,2,0,6,1,5,},{3,7,4,2,0,6,5,1,},{3,7,4,2,1,0,5,6,},{3,7,4,2,1,6,0,5,},{3,7,4,2,1,6,5,0,},{3,7,4,2,5,0,1,6,},{3,7,4,2,5,1,0,6,},{3,7,4,2,5,6,0,1,},
		{3,7,4,2,5,6,1,0,},{3,7,4,2,6,0,1,5,},{3,7,4,2,6,0,5,1,},{3,7,4,2,6,1,0,5,},{3,7,4,2,6,1,5,0,},{3,7,4,5,0,1,2,6,},{3,7,4,5,0,2,1,6,},{3,7,4,5,0,6,1,2,},{3,7,4,5,0,6,2,1,},{3,7,4,5,1,0,2,6,},
		{3,7,4,5,1,2,0,6,},{3,7,4,5,1,6,0,2,},{3,7,4,5,1,6,2,0,},{3,7,4,5,2,0,1,6,},{3,7,4,5,2,1,0,6,},{3,7,4,5,2,6,0,1,},{3,7,4,5,2,6,1,0,},{3,7,4,5,6,0,1,2,},{3,7,4,5,6,0,2,1,},{3,7,4,5,6,1,0,2,},
		{3,7,4,5,6,1,2,0,},{3,7,4,5,6,2,0,1,},{3,7,4,5,6,2,1,0,},{3,7,4,6,0,1,2,5,},{3,7,4,6,0,1,5,2,},{3,7,4,6,0,2,1,5,},{3,7,4,6,0,2,5,1,},{3,7,4,6,1,0,2,5,},{3,7,4,6,1,0,5,2,},{3,7,4,6,1,2,0,5,},
		{3,7,4,6,1,2,5,0,},{3,7,4,6,2,0,1,5,},{3,7,4,6,2,0,5,1,},{3,7,4,6,2,1,0,5,},{3,7,4,6,2,1,5,0,},{3,7,4,6,5,0,1,2,},{3,7,4,6,5,0,2,1,},{3,7,4,6,5,1,0,2,},{3,7,4,6,5,1,2,0,},{3,7,4,6,5,2,0,1,},
		{3,7,4,6,5,2,1,0,},{3,7,5,0,1,2,4,6,},{3,7,5,0,1,4,2,6,},{3,7,5,0,1,6,2,4,},{3,7,5,0,1,6,4,2,},{3,7,5,0,2,1,4,6,},{3,7,5,0,2,4,1,6,},{3,7,5,0,2,6,1,4,},{3,7,5,0,2,6,4,1,},{3,7,5,0,6,1,2,4,},
		{3,7,5,0,6,1,4,2,},{3,7,5,0,6,2,1,4,},{3,7,5,0,6,2,4,1,},{3,7,5,0,6,4,1,2,},{3,7,5,0,6,4,2,1,},{3,7,5,1,0,2,4,6,},{3,7,5,1,0,4,2,6,},{3,7,5,1,0,6,2,4,},{3,7,5,1,0,6,4,2,},{3,7,5,1,2,0,4,6,},
		{3,7,5,1,2,4,0,6,},{3,7,5,1,2,6,0,4,},{3,7,5,1,2,6,4,0,},{3,7,5,1,6,0,2,4,},{3,7,5,1,6,0,4,2,},{3,7,5,1,6,2,0,4,},{3,7,5,1,6,2,4,0,},{3,7,5,1,6,4,0,2,},{3,7,5,1,6,4,2,0,},{3,7,5,2,0,1,4,6,},
		{3,7,5,2,0,4,1,6,},{3,7,5,2,0,6,1,4,},{3,7,5,2,0,6,4,1,},{3,7,5,2,1,0,4,6,},{3,7,5,2,1,4,0,6,},{3,7,5,2,1,6,0,4,},{3,7,5,2,1,6,4,0,},{3,7,5,2,6,0,1,4,},{3,7,5,2,6,0,4,1,},{3,7,5,2,6,1,0,4,},
		{3,7,5,2,6,1,4,0,},{3,7,5,2,6,4,0,1,},{3,7,5,2,6,4,1,0,},{3,7,5,4,0,1,2,6,},{3,7,5,4,0,2,1,6,},{3,7,5,4,0,6,1,2,},{3,7,5,4,0,6,2,1,},{3,7,5,4,1,0,2,6,},{3,7,5,4,1,2,0,6,},{3,7,5,4,1,6,0,2,},
		{3,7,5,4,1,6,2,0,},{3,7,5,4,2,0,1,6,},{3,7,5,4,2,1,0,6,},{3,7,5,4,2,6,0,1,},{3,7,5,4,2,6,1,0,},{3,7,5,4,6,0,1,2,},{3,7,5,4,6,0,2,1,},{3,7,5,4,6,1,0,2,},{3,7,5,4,6,1,2,0,},{3,7,5,4,6,2,0,1,},
		{3,7,5,4,6,2,1,0,},{3,7,5,6,0,1,2,4,},{3,7,5,6,0,1,4,2,},{3,7,5,6,0,2,1,4,},{3,7,5,6,0,2,4,1,},{3,7,5,6,0,4,1,2,},{3,7,5,6,0,4,2,1,},{3,7,5,6,1,0,2,4,},{3,7,5,6,1,0,4,2,},{3,7,5,6,1,2,0,4,},
		{3,7,5,6,1,2,4,0,},{3,7,5,6,1,4,0,2,},{3,7,5,6,1,4,2,0,},{3,7,5,6,2,0,1,4,},{3,7,5,6,2,0,4,1,},{3,7,5,6,2,1,0,4,},{3,7,5,6,2,1,4,0,},{3,7,5,6,2,4,0,1,},{3,7,5,6,2,4,1,0,},{3,7,6,0,1,2,4,5,},
		{3,7,6,0,1,2,5,4,},{3,7,6,0,1,4,2,5,},{3,7,6,0,1,4,5,2,},{3,7,6,0,2,1,4,5,},{3,7,6,0,2,1,5,4,},{3,7,6,0,2,4,1,5,},{3,7,6,0,2,4,5,1,},{3,7,6,0,5,1,2,4,},{3,7,6,0,5,1,4,2,},{3,7,6,0,5,2,1,4,},
		{3,7,6,0,5,2,4,1,},{3,7,6,0,5,4,1,2,},{3,7,6,0,5,4,2,1,},{3,7,6,1,0,2,4,5,},{3,7,6,1,0,2,5,4,},{3,7,6,1,0,4,2,5,},{3,7,6,1,0,4,5,2,},{3,7,6,1,2,0,4,5,},{3,7,6,1,2,0,5,4,},{3,7,6,1,2,4,0,5,},
		{3,7,6,1,2,4,5,0,},{3,7,6,1,5,0,2,4,},{3,7,6,1,5,0,4,2,},{3,7,6,1,5,2,0,4,},{3,7,6,1,5,2,4,0,},{3,7,6,1,5,4,0,2,},{3,7,6,1,5,4,2,0,},{3,7,6,2,0,1,4,5,},{3,7,6,2,0,1,5,4,},{3,7,6,2,0,4,1,5,},
		{3,7,6,2,0,4,5,1,},{3,7,6,2,1,0,4,5,},{3,7,6,2,1,0,5,4,},{3,7,6,2,1,4,0,5,},{3,7,6,2,1,4,5,0,},{3,7,6,2,5,0,1,4,},{3,7,6,2,5,0,4,1,},{3,7,6,2,5,1,0,4,},{3,7,6,2,5,1,4,0,},{3,7,6,2,5,4,0,1,},
		{3,7,6,2,5,4,1,0,},{3,7,6,4,0,1,2,5,},{3,7,6,4,0,1,5,2,},{3,7,6,4,0,2,1,5,},{3,7,6,4,0,2,5,1,},{3,7,6,4,1,0,2,5,},{3,7,6,4,1,0,5,2,},{3,7,6,4,1,2,0,5,},{3,7,6,4,1,2,5,0,},{3,7,6,4,2,0,1,5,},
		{3,7,6,4,2,0,5,1,},{3,7,6,4,2,1,0,5,},{3,7,6,4,2,1,5,0,},{3,7,6,4,5,0,1,2,},{3,7,6,4,5,0,2,1,},{3,7,6,4,5,1,0,2,},{3,7,6,4,5,1,2,0,},{3,7,6,4,5,2,0,1,},{3,7,6,4,5,2,1,0,},{3,7,6,5,0,1,2,4,},
		{3,7,6,5,0,1,4,2,},{3,7,6,5,0,2,1,4,},{3,7,6,5,0,2,4,1,},{3,7,6,5,0,4,1,2,},{3,7,6,5,0,4,2,1,},{3,7,6,5,1,0,2,4,},{3,7,6,5,1,0,4,2,},{3,7,6,5,1,2,0,4,},{3,7,6,5,1,2,4,0,},{3,7,6,5,1,4,0,2,},
		{3,7,6,5,1,4,2,0,},{3,7,6,5,2,0,1,4,},{3,7,6,5,2,0,4,1,},{3,7,6,5,2,1,0,4,},{3,7,6,5,2,1,4,0,},{3,7,6,5,2,4,0,1,},{3,7,6,5,2,4,1,0,},{4,0,1,2,3,6,7,5,},{4,0,1,2,3,7,5,6,},{4,0,1,2,5,3,7,6,},
		{4,0,1,2,5,6,7,3,},{4,0,1,2,5,7,3,6,},{4,0,1,2,6,3,7,5,},{4,0,1,2,6,7,3,5,},{4,0,1,2,6,7,5,3,},{4,0,1,2,7,3,5,6,},{4,0,1,2,7,6,3,5,},{4,0,1,2,7,6,5,3,},{4,0,1,5,2,3,7,6,},{4,0,1,5,2,6,7,3,},
		{4,0,1,5,2,7,3,6,},{4,0,1,5,3,2,7,6,},{4,0,1,5,3,6,7,2,},{4,0,1,5,3,7,2,6,},{4,0,1,5,6,2,7,3,},{4,0,1,5,6,3,7,2,},{4,0,1,5,6,7,2,3,},{4,0,1,5,6,7,3,2,},{4,0,1,5,7,2,3,6,},{4,0,1,5,7,3,2,6,},
		{4,0,1,5,7,6,2,3,},{4,0,1,5,7,6,3,2,},{4,0,1,6,2,3,7,5,},{4,0,1,6,2,7,3,5,},{4,0,1,6,2,7,5,3,},{4,0,1,6,3,2,7,5,},{4,0,1,6,3,7,2,5,},{4,0,1,6,3,7,5,2,},{4,0,1,6,5,2,7,3,},{4,0,1,6,5,3,7,2,},
		{4,0,1,6,5,7,2,3,},{4,0,1,6,5,7,3,2,},{4,0,1,6,7,2,3,5,},{4,0,1,6,7,2,5,3,},{4,0,1,6,7,3,2,5,},{4,0,1,6,7,3,5,2,},{4,0,1,7,2,3,5,6,},{4,0,1,7,2,6,3,5,},{4,0,1,7,2,6,5,3,},{4,0,1,7,3,2,5,6,},
		{4,0,1,7,3,6,2,5,},{4,0,1,7,3,6,5,2,},{4,0,1,7,5,2,3,6,},{4,0,1,7,5,3,2,6,},{4,0,1,7,5,6,2,3,},{4,0,1,7,5,6,3,2,},{4,0,1,7,6,2,3,5,},{4,0,1,7,6,2,5,3,},{4,0,1,7,6,3,2,5,},{4,0,1,7,6,3,5,2,},
		{4,0,3,1,2,6,7,5,},{4,0,3,1,2,7,5,6,},{4,0,3,1,5,2,7,6,},{4,0,3,1,5,6,7,2,},{4,0,3,1,5,7,2,6,},{4,0,3,1,6,2,7,5,},{4,0,3,1,6,7,2,5,},{4,0,3,1,6,7,5,2,},{4,0,3,1,7,2,5,6,},{4,0,3,1,7,6,2,5,},
		{4,0,3,1,7,6,5,2,},{4,0,3,2,1,6,7,5,},{4,0,3,2,1,7,5,6,},{4,0,3,2,5,1,7,6,},{4,0,3,2,5,6,7,1,},{4,0,3,2,5,7,1,6,},{4,0,3,2,6,1,7,5,},{4,0,3,2,6,7,1,5,},{4,0,3,2,6,7,5,1,},{4,0,3,2,7,1,5,6,},
		{4,0,3,2,7,6,1,5,},{4,0,3,2,7,6,5,1,},{4,0,3,5,1,2,7,6,},{4,0,3,5,1,6,7,2,},{4,0,3,5,1,7,2,6,},{4,0,3,5,2,1,7,6,},{4,0,3,5,2,6,7,1,},{4,0,3,5,2,7,1,6,},{4,0,3,5,6,1,7,2,},{4,0,3,5,6,2,7,1,},
		{4,0,3,5,6,7,1,2,},{4,0,3,5,6,7,2,1,},{4,0,3,5,7,1,2,6,},{4,0,3,5,7,2,1,6,},{4,0,3,5,7,6,1,2,},{4,0,3,5,7,6,2,1,},{4,0,3,6,1,2,7,5,},{4,0,3,6,1,7,2,5,},{4,0,3,6,1,7,5,2,},{4,0,3,6,2,1,7,5,},
		{4,0,3,6,2,7,1,5,},{4,0,3,6,2,7,5,1,},{4,0,3,6,5,1,7,2,},{4,0,3,6,5,2,7,1,},{4,0,3,6,5,7,1,2,},{4,0,3,6,5,7,2,1,},{4,0,3,6,7,1,2,5,},{4,0,3,6,7,1,5,2,},{4,0,3,6,7,2,1,5,},{4,0,3,6,7,2,5,1,},
		{4,0,3,7,1,2,5,6,},{4,0,3,7,1,6,2,5,},{4,0,3,7,1,6,5,2,},{4,0,3,7,2,1,5,6,},{4,0,3,7,2,6,1,5,},{4,0,3,7,2,6,5,1,},{4,0,3,7,5,1,2,6,},{4,0,3,7,5,2,1,6,},{4,0,3,7,5,6,1,2,},{4,0,3,7,5,6,2,1,},
		{4,0,3,7,6,1,2,5,},{4,0,3,7,6,1,5,2,},{4,0,3,7,6,2,1,5,},{4,0,3,7,6,2,5,1,},{4,0,5,1,2,3,7,6,},{4,0,5,1,2,6,7,3,},{4,0,5,1,2,7,3,6,},{4,0,5,1,3,2,7,6,},{4,0,5,1,3,6,7,2,},{4,0,5,1,3,7,2,6,},
		{4,0,5,1,6,2,7,3,},{4,0,5,1,6,3,7,2,},{4,0,5,1,6,7,2,3,},{4,0,5,1,6,7,3,2,},{4,0,5,1,7,2,3,6,},{4,0,5,1,7,3,2,6,},{4,0,5,1,7,6,2,3,},{4,0,5,1,7,6,3,2,},{4,0,5,2,1,3,7,6,},{4,0,5,2,1,6,7,3,},
		{4,0,5,2,1,7,3,6,},{4,0,5,2,3,1,7,6,},{4,0,5,2,3,6,7,1,},{4,0,5,2,3,7,1,6,},{4,0,5,2,6,1,7,3,},{4,0,5,2,6,3,7,1,},{4,0,5,2,6,7,1,3,},{4,0,5,2,6,7,3,1,},{4,0,5,2,7,1,3,6,},{4,0,5,2,7,3,1,6,},
		{4,0,5,2,7,6,1,3,},{4,0,5,2,7,6,3,1,},{4,0,5,6,1,2,7,3,},{4,0,5,6,1,3,7,2,},{4,0,5,6,1,7,2,3,},{4,0,5,6,1,7,3,2,},{4,0,5,6,2,1,7,3,},{4,0,5,6,2,3,7,1,},{4,0,5,6,2,7,1,3,},{4,0,5,6,2,7,3,1,},
		{4,0,5,6,3,1,7,2,},{4,0,5,6,3,2,7,1,},{4,0,5,6,3,7,1,2,},{4,0,5,6,3,7,2,1,},{4,0,5,6,7,1,2,3,},{4,0,5,6,7,1,3,2,},{4,0,5,6,7,2,1,3,},{4,0,5,6,7,2,3,1,},{4,0,5,6,7,3,1,2,},{4,0,5,6,7,3,2,1,},
		{4,0,5,7,1,2,3,6,},{4,0,5,7,1,3,2,6,},{4,0,5,7,1,6,2,3,},{4,0,5,7,1,6,3,2,},{4,0,5,7,2,1,3,6,},{4,0,5,7,2,3,1,6,},{4,0,5,7,2,6,1,3,},{4,0,5,7,2,6,3,1,},{4,0,5,7,3,1,2,6,},{4,0,5,7,3,2,1,6,},
		{4,0,5,7,3,6,1,2,},{4,0,5,7,3,6,2,1,},{4,0,5,7,6,1,2,3,},{4,0,5,7,6,1,3,2,},{4,0,5,7,6,2,1,3,},{4,0,5,7,6,2,3,1,},{4,0,5,7,6,3,1,2,},{4,0,5,7,6,3,2,1,},{4,0,6,1,2,3,7,5,},{4,0,6,1,2,7,3,5,},
		{4,0,6,1,2,7,5,3,},{4,0,6,1,3,2,7,5,},{4,0,6,1,3,7,2,5,},{4,0,6,1,3,7,5,2,},{4,0,6,1,5,2,7,3,},{4,0,6,1,5,3,7,2,},{4,0,6,1,5,7,2,3,},{4,0,6,1,5,7,3,2,},{4,0,6,1,7,2,3,5,},{4,0,6,1,7,2,5,3,},
		{4,0,6,1,7,3,2,5,},{4,0,6,1,7,3,5,2,},{4,0,6,2,1,3,7,5,},{4,0,6,2,1,7,3,5,},{4,0,6,2,1,7,5,3,},{4,0,6,2,3,1,7,5,},{4,0,6,2,3,7,1,5,},{4,0,6,2,3,7,5,1,},{4,0,6,2,5,1,7,3,},{4,0,6,2,5,3,7,1,},
		{4,0,6,2,5,7,1,3,},{4,0,6,2,5,7,3,1,},{4,0,6,2,7,1,3,5,},{4,0,6,2,7,1,5,3,},{4,0,6,2,7,3,1,5,},{4,0,6,2,7,3,5,1,},{4,0,6,5,1,2,7,3,},{4,0,6,5,1,3,7,2,},{4,0,6,5,1,7,2,3,},{4,0,6,5,1,7,3,2,},
		{4,0,6,5,2,1,7,3,},{4,0,6,5,2,3,7,1,},{4,0,6,5,2,7,1,3,},{4,0,6,5,2,7,3,1,},{4,0,6,5,3,1,7,2,},{4,0,6,5,3,2,7,1,},{4,0,6,5,3,7,1,2,},{4,0,6,5,3,7,2,1,},{4,0,6,5,7,1,2,3,},{4,0,6,5,7,1,3,2,},
		{4,0,6,5,7,2,1,3,},{4,0,6,5,7,2,3,1,},{4,0,6,5,7,3,1,2,},{4,0,6,5,7,3,2,1,},{4,0,6,7,1,2,3,5,},{4,0,6,7,1,2,5,3,},{4,0,6,7,1,3,2,5,},{4,0,6,7,1,3,5,2,},{4,0,6,7,2,1,3,5,},{4,0,6,7,2,1,5,3,},
		{4,0,6,7,2,3,1,5,},{4,0,6,7,2,3,5,1,},{4,0,6,7,3,1,2,5,},{4,0,6,7,3,1,5,2,},{4,0,6,7,3,2,1,5,},{4,0,6,7,3,2,5,1,},{4,0,6,7,5,1,2,3,},{4,0,6,7,5,1,3,2,},{4,0,6,7,5,2,1,3,},{4,0,6,7,5,2,3,1,},
		{4,0,6,7,5,3,1,2,},{4,0,6,7,5,3,2,1,},{4,0,7,1,2,3,5,6,},{4,0,7,1,2,6,3,5,},{4,0,7,1,2,6,5,3,},{4,0,7,1,3,2,5,6,},{4,0,7,1,3,6,2,5,},{4,0,7,1,3,6,5,2,},{4,0,7,1,5,2,3,6,},{4,0,7,1,5,3,2,6,},
		{4,0,7,1,5,6,2,3,},{4,0,7,1,5,6,3,2,},{4,0,7,1,6,2,3,5,},{4,0,7,1,6,2,5,3,},{4,0,7,1,6,3,2,5,},{4,0,7,1,6,3,5,2,},{4,0,7,2,1,3,5,6,},{4,0,7,2,1,6,3,5,},{4,0,7,2,1,6,5,3,},{4,0,7,2,3,1,5,6,},
		{4,0,7,2,3,6,1,5,},{4,0,7,2,3,6,5,1,},{4,0,7,2,5,1,3,6,},{4,0,7,2,5,3,1,6,},{4,0,7,2,5,6,1,3,},{4,0,7,2,5,6,3,1,},{4,0,7,2,6,1,3,5,},{4,0,7,2,6,1,5,3,},{4,0,7,2,6,3,1,5,},{4,0,7,2,6,3,5,1,},
		{4,0,7,5,1,2,3,6,},{4,0,7,5,1,3,2,6,},{4,0,7,5,1,6,2,3,},{4,0,7,5,1,6,3,2,},{4,0,7,5,2,1,3,6,},{4,0,7,5,2,3,1,6,},{4,0,7,5,2,6,1,3,},{4,0,7,5,2,6,3,1,},{4,0,7,5,3,1,2,6,},{4,0,7,5,3,2,1,6,},
		{4,0,7,5,3,6,1,2,},{4,0,7,5,3,6,2,1,},{4,0,7,5,6,1,2,3,},{4,0,7,5,6,1,3,2,},{4,0,7,5,6,2,1,3,},{4,0,7,5,6,2,3,1,},{4,0,7,5,6,3,1,2,},{4,0,7,5,6,3,2,1,},{4,0,7,6,1,2,3,5,},{4,0,7,6,1,2,5,3,},
		{4,0,7,6,1,3,2,5,},{4,0,7,6,1,3,5,2,},{4,0,7,6,2,1,3,5,},{4,0,7,6,2,1,5,3,},{4,0,7,6,2,3,1,5,},{4,0,7,6,2,3,5,1,},{4,0,7,6,3,1,2,5,},{4,0,7,6,3,1,5,2,},{4,0,7,6,3,2,1,5,},{4,0,7,6,3,2,5,1,},
		{4,0,7,6,5,1,2,3,},{4,0,7,6,5,1,3,2,},{4,0,7,6,5,2,1,3,},{4,0,7,6,5,2,3,1,},{4,0,7,6,5,3,1,2,},{4,0,7,6,5,3,2,1,},{4,2,0,1,3,6,7,5,},{4,2,0,1,3,7,5,6,},{4,2,0,1,5,3,7,6,},{4,2,0,1,5,6,7,3,},
		{4,2,0,1,5,7,3,6,},{4,2,0,1,6,3,7,5,},{4,2,0,1,6,7,3,5,},{4,2,0,1,6,7,5,3,},{4,2,0,1,7,3,5,6,},{4,2,0,1,7,6,3,5,},{4,2,0,1,7,6,5,3,},{4,2,0,5,1,3,7,6,},{4,2,0,5,1,6,7,3,},{4,2,0,5,1,7,3,6,},
		{4,2,0,5,3,1,7,6,},{4,2,0,5,3,6,7,1,},{4,2,0,5,3,7,1,6,},{4,2,0,5,6,1,7,3,},{4,2,0,5,6,3,7,1,},{4,2,0,5,6,7,1,3,},{4,2,0,5,6,7,3,1,},{4,2,0,5,7,1,3,6,},{4,2,0,5,7,3,1,6,},{4,2,0,5,7,6,1,3,},
		{4,2,0,5,7,6,3,1,},{4,2,0,6,1,3,7,5,},{4,2,0,6,1,7,3,5,},{4,2,0,6,1,7,5,3,},{4,2,0,6,3,1,7,5,},{4,2,0,6,3,7,1,5,},{4,2,0,6,3,7,5,1,},{4,2,0,6,5,1,7,3,},{4,2,0,6,5,3,7,1,},{4,2,0,6,5,7,1,3,},
		{4,2,0,6,5,7,3,1,},{4,2,0,6,7,1,3,5,},{4,2,0,6,7,1,5,3,},{4,2,0,6,7,3,1,5,},{4,2,0,6,7,3,5,1,},{4,2,0,7,1,3,5,6,},{4,2,0,7,1,6,3,5,},{4,2,0,7,1,6,5,3,},{4,2,0,7,3,1,5,6,},{4,2,0,7,3,6,1,5,},
		{4,2,0,7,3,6,5,1,},{4,2,0,7,5,1,3,6,},{4,2,0,7,5,3,1,6,},{4,2,0,7,5,6,1,3,},{4,2,0,7,5,6,3,1,},{4,2,0,7,6,1,3,5,},{4,2,0,7,6,1,5,3,},{4,2,0,7,6,3,1,5,},{4,2,0,7,6,3,5,1,},{4,2,1,0,3,6,7,5,},
		{4,2,1,0,3,7,5,6,},{4,2,1,0,5,3,7,6,},{4,2,1,0,5,6,7,3,},{4,2,1,0,5,7,3,6,},{4,2,1,0,6,3,7,5,},{4,2,1,0,6,7,3,5,},{4,2,1,0,6,7,5,3,},{4,2,1,0,7,3,5,6,},{4,2,1,0,7,6,3,5,},{4,2,1,0,7,6,5,3,},
		{4,2,1,5,0,3,7,6,},{4,2,1,5,0,6,7,3,},{4,2,1,5,0,7,3,6,},{4,2,1,5,3,0,7,6,},{4,2,1,5,3,6,7,0,},{4,2,1,5,3,7,0,6,},{4,2,1,5,6,0,7,3,},{4,2,1,5,6,3,7,0,},{4,2,1,5,6,7,0,3,},{4,2,1,5,6,7,3,0,},
		{4,2,1,5,7,0,3,6,},{4,2,1,5,7,3,0,6,},{4,2,1,5,7,6,0,3,},{4,2,1,5,7,6,3,0,},{4,2,1,6,0,3,7,5,},{4,2,1,6,0,7,3,5,},{4,2,1,6,0,7,5,3,},{4,2,1,6,3,0,7,5,},{4,2,1,6,3,7,0,5,},{4,2,1,6,3,7,5,0,},
		{4,2,1,6,5,0,7,3,},{4,2,1,6,5,3,7,0,},{4,2,1,6,5,7,0,3,},{4,2,1,6,5,7,3,0,},{4,2,1,6,7,0,3,5,},{4,2,1,6,7,0,5,3,},{4,2,1,6,7,3,0,5,},{4,2,1,6,7,3,5,0,},{4,2,1,7,0,3,5,6,},{4,2,1,7,0,6,3,5,},
		{4,2,1,7,0,6,5,3,},{4,2,1,7,3,0,5,6,},{4,2,1,7,3,6,0,5,},{4,2,1,7,3,6,5,0,},{4,2,1,7,5,0,3,6,},{4,2,1,7,5,3,0,6,},{4,2,1,7,5,6,0,3,},{4,2,1,7,5,6,3,0,},{4,2,1,7,6,0,3,5,},{4,2,1,7,6,0,5,3,},
		{4,2,1,7,6,3,0,5,},{4,2,1,7,6,3,5,0,},{4,2,3,0,1,6,7,5,},{4,2,3,0,1,7,5,6,},{4,2,3,0,5,1,7,6,},{4,2,3,0,5,6,7,1,},{4,2,3,0,5,7,1,6,},{4,2,3,0,6,1,7,5,},{4,2,3,0,6,7,1,5,},{4,2,3,0,6,7,5,1,},
		{4,2,3,0,7,1,5,6,},{4,2,3,0,7,6,1,5,},{4,2,3,0,7,6,5,1,},{4,2,3,1,0,6,7,5,},{4,2,3,1,0,7,5,6,},{4,2,3,1,5,0,7,6,},{4,2,3,1,5,6,7,0,},{4,2,3,1,5,7,0,6,},{4,2,3,1,6,0,7,5,},{4,2,3,1,6,7,0,5,},
		{4,2,3,1,6,7,5,0,},{4,2,3,1,7,0,5,6,},{4,2,3,1,7,6,0,5,},{4,2,3,1,7,6,5,0,},{4,2,3,5,0,1,7,6,},{4,2,3,5,0,6,7,1,},{4,2,3,5,0,7,1,6,},{4,2,3,5,1,0,7,6,},{4,2,3,5,1,6,7,0,},{4,2,3,5,1,7,0,6,},
		{4,2,3,5,6,0,7,1,},{4,2,3,5,6,1,7,0,},{4,2,3,5,6,7,0,1,},{4,2,3,5,6,7,1,0,},{4,2,3,5,7,0,1,6,},{4,2,3,5,7,1,0,6,},{4,2,3,5,7,6,0,1,},{4,2,3,5,7,6,1,0,},{4,2,3,6,0,1,7,5,},{4,2,3,6,0,7,1,5,},
		{4,2,3,6,0,7,5,1,},{4,2,3,6,1,0,7,5,},{4,2,3,6,1,7,0,5,},{4,2,3,6,1,7,5,0,},{4,2,3,6,5,0,7,1,},{4,2,3,6,5,1,7,0,},{4,2,3,6,5,7,0,1,},{4,2,3,6,5,7,1,0,},{4,2,3,6,7,0,1,5,},{4,2,3,6,7,0,5,1,},
		{4,2,3,6,7,1,0,5,},{4,2,3,6,7,1,5,0,},{4,2,3,7,0,1,5,6,},{4,2,3,7,0,6,1,5,},{4,2,3,7,0,6,5,1,},{4,2,3,7,1,0,5,6,},{4,2,3,7,1,6,0,5,},{4,2,3,7,1,6,5,0,},{4,2,3,7,5,0,1,6,},{4,2,3,7,5,1,0,6,},
		{4,2,3,7,5,6,0,1,},{4,2,3,7,5,6,1,0,},{4,2,3,7,6,0,1,5,},{4,2,3,7,6,0,5,1,},{4,2,3,7,6,1,0,5,},{4,2,3,7,6,1,5,0,},{4,2,5,0,1,3,7,6,},{4,2,5,0,1,6,7,3,},{4,2,5,0,1,7,3,6,},{4,2,5,0,3,1,7,6,},
		{4,2,5,0,3,6,7,1,},{4,2,5,0,3,7,1,6,},{4,2,5,0,6,1,7,3,},{4,2,5,0,6,3,7,1,},{4,2,5,0,6,7,1,3,},{4,2,5,0,6,7,3,1,},{4,2,5,0,7,1,3,6,},{4,2,5,0,7,3,1,6,},{4,2,5,0,7,6,1,3,},{4,2,5,0,7,6,3,1,},
		{4,2,5,1,0,3,7,6,},{4,2,5,1,0,6,7,3,},{4,2,5,1,0,7,3,6,},{4,2,5,1,3,0,7,6,},{4,2,5,1,3,6,7,0,},{4,2,5,1,3,7,0,6,},{4,2,5,1,6,0,7,3,},{4,2,5,1,6,3,7,0,},{4,2,5,1,6,7,0,3,},{4,2,5,1,6,7,3,0,},
		{4,2,5,1,7,0,3,6,},{4,2,5,1,7,3,0,6,},{4,2,5,1,7,6,0,3,},{4,2,5,1,7,6,3,0,},{4,2,5,6,0,1,7,3,},{4,2,5,6,0,3,7,1,},{4,2,5,6,0,7,1,3,},{4,2,5,6,0,7,3,1,},{4,2,5,6,1,0,7,3,},{4,2,5,6,1,3,7,0,},
		{4,2,5,6,1,7,0,3,},{4,2,5,6,1,7,3,0,},{4,2,5,6,3,0,7,1,},{4,2,5,6,3,1,7,0,},{4,2,5,6,3,7,0,1,},{4,2,5,6,3,7,1,0,},{4,2,5,6,7,0,1,3,},{4,2,5,6,7,0,3,1,},{4,2,5,6,7,1,0,3,},{4,2,5,6,7,1,3,0,},
		{4,2,5,6,7,3,0,1,},{4,2,5,6,7,3,1,0,},{4,2,5,7,0,1,3,6,},{4,2,5,7,0,3,1,6,},{4,2,5,7,0,6,1,3,},{4,2,5,7,0,6,3,1,},{4,2,5,7,1,0,3,6,},{4,2,5,7,1,3,0,6,},{4,2,5,7,1,6,0,3,},{4,2,5,7,1,6,3,0,},
		{4,2,5,7,3,0,1,6,},{4,2,5,7,3,1,0,6,},{4,2,5,7,3,6,0,1,},{4,2,5,7,3,6,1,0,},{4,2,5,7,6,0,1,3,},{4,2,5,7,6,0,3,1,},{4,2,5,7,6,1,0,3,},{4,2,5,7,6,1,3,0,},{4,2,5,7,6,3,0,1,},{4,2,5,7,6,3,1,0,},
		{4,2,6,0,1,3,7,5,},{4,2,6,0,1,7,3,5,},{4,2,6,0,1,7,5,3,},{4,2,6,0,3,1,7,5,},{4,2,6,0,3,7,1,5,},{4,2,6,0,3,7,5,1,},{4,2,6,0,5,1,7,3,},{4,2,6,0,5,3,7,1,},{4,2,6,0,5,7,1,3,},{4,2,6,0,5,7,3,1,},
		{4,2,6,0,7,1,3,5,},{4,2,6,0,7,1,5,3,},{4,2,6,0,7,3,1,5,},{4,2,6,0,7,3,5,1,},{4,2,6,1,0,3,7,5,},{4,2,6,1,0,7,3,5,},{4,2,6,1,0,7,5,3,},{4,2,6,1,3,0,7,5,},{4,2,6,1,3,7,0,5,},{4,2,6,1,3,7,5,0,},
		{4,2,6,1,5,0,7,3,},{4,2,6,1,5,3,7,0,},{4,2,6,1,5,7,0,3,},{4,2,6,1,5,7,3,0,},{4,2,6,1,7,0,3,5,},{4,2,6,1,7,0,5,3,},{4,2,6,1,7,3,0,5,},{4,2,6,1,7,3,5,0,},{4,2,6,5,0,1,7,3,},{4,2,6,5,0,3,7,1,},
		{4,2,6,5,0,7,1,3,},{4,2,6,5,0,7,3,1,},{4,2,6,5,1,0,7,3,},{4,2,6,5,1,3,7,0,},{4,2,6,5,1,7,0,3,},{4,2,6,5,1,7,3,0,},{4,2,6,5,3,0,7,1,},{4,2,6,5,3,1,7,0,},{4,2,6,5,3,7,0,1,},{4,2,6,5,3,7,1,0,},
		{4,2,6,5,7,0,1,3,},{4,2,6,5,7,0,3,1,},{4,2,6,5,7,1,0,3,},{4,2,6,5,7,1,3,0,},{4,2,6,5,7,3,0,1,},{4,2,6,5,7,3,1,0,},{4,2,6,7,0,1,3,5,},{4,2,6,7,0,1,5,3,},{4,2,6,7,0,3,1,5,},{4,2,6,7,0,3,5,1,},
		{4,2,6,7,1,0,3,5,},{4,2,6,7,1,0,5,3,},{4,2,6,7,1,3,0,5,},{4,2,6,7,1,3,5,0,},{4,2,6,7,3,0,1,5,},{4,2,6,7,3,0,5,1,},{4,2,6,7,3,1,0,5,},{4,2,6,7,3,1,5,0,},{4,2,6,7,5,0,1,3,},{4,2,6,7,5,0,3,1,},
		{4,2,6,7,5,1,0,3,},{4,2,6,7,5,1,3,0,},{4,2,6,7,5,3,0,1,},{4,2,6,7,5,3,1,0,},{4,2,7,0,1,3,5,6,},{4,2,7,0,1,6,3,5,},{4,2,7,0,1,6,5,3,},{4,2,7,0,3,1,5,6,},{4,2,7,0,3,6,1,5,},{4,2,7,0,3,6,5,1,},
		{4,2,7,0,5,1,3,6,},{4,2,7,0,5,3,1,6,},{4,2,7,0,5,6,1,3,},{4,2,7,0,5,6,3,1,},{4,2,7,0,6,1,3,5,},{4,2,7,0,6,1,5,3,},{4,2,7,0,6,3,1,5,},{4,2,7,0,6,3,5,1,},{4,2,7,1,0,3,5,6,},{4,2,7,1,0,6,3,5,},
		{4,2,7,1,0,6,5,3,},{4,2,7,1,3,0,5,6,},{4,2,7,1,3,6,0,5,},{4,2,7,1,3,6,5,0,},{4,2,7,1,5,0,3,6,},{4,2,7,1,5,3,0,6,},{4,2,7,1,5,6,0,3,},{4,2,7,1,5,6,3,0,},{4,2,7,1,6,0,3,5,},{4,2,7,1,6,0,5,3,},
		{4,2,7,1,6,3,0,5,},{4,2,7,1,6,3,5,0,},{4,2,7,5,0,1,3,6,},{4,2,7,5,0,3,1,6,},{4,2,7,5,0,6,1,3,},{4,2,7,5,0,6,3,1,},{4,2,7,5,1,0,3,6,},{4,2,7,5,1,3,0,6,},{4,2,7,5,1,6,0,3,},{4,2,7,5,1,6,3,0,},
		{4,2,7,5,3,0,1,6,},{4,2,7,5,3,1,0,6,},{4,2,7,5,3,6,0,1,},{4,2,7,5,3,6,1,0,},{4,2,7,5,6,0,1,3,},{4,2,7,5,6,0,3,1,},{4,2,7,5,6,1,0,3,},{4,2,7,5,6,1,3,0,},{4,2,7,5,6,3,0,1,},{4,2,7,5,6,3,1,0,},
		{4,2,7,6,0,1,3,5,},{4,2,7,6,0,1,5,3,},{4,2,7,6,0,3,1,5,},{4,2,7,6,0,3,5,1,},{4,2,7,6,1,0,3,5,},{4,2,7,6,1,0,5,3,},{4,2,7,6,1,3,0,5,},{4,2,7,6,1,3,5,0,},{4,2,7,6,3,0,1,5,},{4,2,7,6,3,0,5,1,},
		{4,2,7,6,3,1,0,5,},{4,2,7,6,3,1,5,0,},{4,2,7,6,5,0,1,3,},{4,2,7,6,5,0,3,1,},{4,2,7,6,5,1,0,3,},{4,2,7,6,5,1,3,0,},{4,2,7,6,5,3,0,1,},{4,2,7,6,5,3,1,0,},{4,3,0,1,2,6,7,5,},{4,3,0,1,2,7,5,6,},
		{4,3,0,1,5,2,7,6,},{4,3,0,1,5,6,7,2,},{4,3,0,1,5,7,2,6,},{4,3,0,1,6,2,7,5,},{4,3,0,1,6,7,2,5,},{4,3,0,1,6,7,5,2,},{4,3,0,1,7,2,5,6,},{4,3,0,1,7,6,2,5,},{4,3,0,1,7,6,5,2,},{4,3,0,2,1,6,7,5,},
		{4,3,0,2,1,7,5,6,},{4,3,0,2,5,1,7,6,},{4,3,0,2,5,6,7,1,},{4,3,0,2,5,7,1,6,},{4,3,0,2,6,1,7,5,},{4,3,0,2,6,7,1,5,},{4,3,0,2,6,7,5,1,},{4,3,0,2,7,1,5,6,},{4,3,0,2,7,6,1,5,},{4,3,0,2,7,6,5,1,},
		{4,3,0,5,1,2,7,6,},{4,3,0,5,1,6,7,2,},{4,3,0,5,1,7,2,6,},{4,3,0,5,2,1,7,6,},{4,3,0,5,2,6,7,1,},{4,3,0,5,2,7,1,6,},{4,3,0,5,6,1,7,2,},{4,3,0,5,6,2,7,1,},{4,3,0,5,6,7,1,2,},{4,3,0,5,6,7,2,1,},
		{4,3,0,5,7,1,2,6,},{4,3,0,5,7,2,1,6,},{4,3,0,5,7,6,1,2,},{4,3,0,5,7,6,2,1,},{4,3,0,6,1,2,7,5,},{4,3,0,6,1,7,2,5,},{4,3,0,6,1,7,5,2,},{4,3,0,6,2,1,7,5,},{4,3,0,6,2,7,1,5,},{4,3,0,6,2,7,5,1,},
		{4,3,0,6,5,1,7,2,},{4,3,0,6,5,2,7,1,},{4,3,0,6,5,7,1,2,},{4,3,0,6,5,7,2,1,},{4,3,0,6,7,1,2,5,},{4,3,0,6,7,1,5,2,},{4,3,0,6,7,2,1,5,},{4,3,0,6,7,2,5,1,},{4,3,0,7,1,2,5,6,},{4,3,0,7,1,6,2,5,},
		{4,3,0,7,1,6,5,2,},{4,3,0,7,2,1,5,6,},{4,3,0,7,2,6,1,5,},{4,3,0,7,2,6,5,1,},{4,3,0,7,5,1,2,6,},{4,3,0,7,5,2,1,6,},{4,3,0,7,5,6,1,2,},{4,3,0,7,5,6,2,1,},{4,3,0,7,6,1,2,5,},{4,3,0,7,6,1,5,2,},
		{4,3,0,7,6,2,1,5,},{4,3,0,7,6,2,5,1,},{4,3,1,0,2,6,7,5,},{4,3,1,0,2,7,5,6,},{4,3,1,0,5,2,7,6,},{4,3,1,0,5,6,7,2,},{4,3,1,0,5,7,2,6,},{4,3,1,0,6,2,7,5,},{4,3,1,0,6,7,2,5,},{4,3,1,0,6,7,5,2,},
		{4,3,1,0,7,2,5,6,},{4,3,1,0,7,6,2,5,},{4,3,1,0,7,6,5,2,},{4,3,1,2,0,6,7,5,},{4,3,1,2,0,7,5,6,},{4,3,1,2,5,0,7,6,},{4,3,1,2,5,6,7,0,},{4,3,1,2,5,7,0,6,},{4,3,1,2,6,0,7,5,},{4,3,1,2,6,7,0,5,},
		{4,3,1,2,6,7,5,0,},{4,3,1,2,7,0,5,6,},{4,3,1,2,7,6,0,5,},{4,3,1,2,7,6,5,0,},{4,3,1,5,0,2,7,6,},{4,3,1,5,0,6,7,2,},{4,3,1,5,0,7,2,6,},{4,3,1,5,2,0,7,6,},{4,3,1,5,2,6,7,0,},{4,3,1,5,2,7,0,6,},
		{4,3,1,5,6,0,7,2,},{4,3,1,5,6,2,7,0,},{4,3,1,5,6,7,0,2,},{4,3,1,5,6,7,2,0,},{4,3,1,5,7,0,2,6,},{4,3,1,5,7,2,0,6,},{4,3,1,5,7,6,0,2,},{4,3,1,5,7,6,2,0,},{4,3,1,6,0,2,7,5,},{4,3,1,6,0,7,2,5,},
		{4,3,1,6,0,7,5,2,},{4,3,1,6,2,0,7,5,},{4,3,1,6,2,7,0,5,},{4,3,1,6,2,7,5,0,},{4,3,1,6,5,0,7,2,},{4,3,1,6,5,2,7,0,},{4,3,1,6,5,7,0,2,},{4,3,1,6,5,7,2,0,},{4,3,1,6,7,0,2,5,},{4,3,1,6,7,0,5,2,},
		{4,3,1,6,7,2,0,5,},{4,3,1,6,7,2,5,0,},{4,3,1,7,0,2,5,6,},{4,3,1,7,0,6,2,5,},{4,3,1,7,0,6,5,2,},{4,3,1,7,2,0,5,6,},{4,3,1,7,2,6,0,5,},{4,3,1,7,2,6,5,0,},{4,3,1,7,5,0,2,6,},{4,3,1,7,5,2,0,6,},
		{4,3,1,7,5,6,0,2,},{4,3,1,7,5,6,2,0,},{4,3,1,7,6,0,2,5,},{4,3,1,7,6,0,5,2,},{4,3,1,7,6,2,0,5,},{4,3,1,7,6,2,5,0,},{4,3,5,0,1,2,7,6,},{4,3,5,0,1,6,7,2,},{4,3,5,0,1,7,2,6,},{4,3,5,0,2,1,7,6,},
		{4,3,5,0,2,6,7,1,},{4,3,5,0,2,7,1,6,},{4,3,5,0,6,1,7,2,},{4,3,5,0,6,2,7,1,},{4,3,5,0,6,7,1,2,},{4,3,5,0,6,7,2,1,},{4,3,5,0,7,1,2,6,},{4,3,5,0,7,2,1,6,},{4,3,5,0,7,6,1,2,},{4,3,5,0,7,6,2,1,},
		{4,3,5,1,0,2,7,6,},{4,3,5,1,0,6,7,2,},{4,3,5,1,0,7,2,6,},{4,3,5,1,2,0,7,6,},{4,3,5,1,2,6,7,0,},{4,3,5,1,2,7,0,6,},{4,3,5,1,6,0,7,2,},{4,3,5,1,6,2,7,0,},{4,3,5,1,6,7,0,2,},{4,3,5,1,6,7,2,0,},
		{4,3,5,1,7,0,2,6,},{4,3,5,1,7,2,0,6,},{4,3,5,1,7,6,0,2,},{4,3,5,1,7,6,2,0,},{4,3,5,2,0,1,7,6,},{4,3,5,2,0,6,7,1,},{4,3,5,2,0,7,1,6,},{4,3,5,2,1,0,7,6,},{4,3,5,2,1,6,7,0,},{4,3,5,2,1,7,0,6,},
		{4,3,5,2,6,0,7,1,},{4,3,5,2,6,1,7,0,},{4,3,5,2,6,7,0,1,},{4,3,5,2,6,7,1,0,},{4,3,5,2,7,0,1,6,},{4,3,5,2,7,1,0,6,},{4,3,5,2,7,6,0,1,},{4,3,5,2,7,6,1,0,},{4,3,5,6,0,1,7,2,},{4,3,5,6,0,2,7,1,},
		{4,3,5,6,0,7,1,2,},{4,3,5,6,0,7,2,1,},{4,3,5,6,1,0,7,2,},{4,3,5,6,1,2,7,0,},{4,3,5,6,1,7,0,2,},{4,3,5,6,1,7,2,0,},{4,3,5,6,2,0,7,1,},{4,3,5,6,2,1,7,0,},{4,3,5,6,2,7,0,1,},{4,3,5,6,2,7,1,0,},
		{4,3,5,6,7,0,1,2,},{4,3,5,6,7,0,2,1,},{4,3,5,6,7,1,0,2,},{4,3,5,6,7,1,2,0,},{4,3,5,6,7,2,0,1,},{4,3,5,6,7,2,1,0,},{4,3,5,7,0,1,2,6,},{4,3,5,7,0,2,1,6,},{4,3,5,7,0,6,1,2,},{4,3,5,7,0,6,2,1,},
		{4,3,5,7,1,0,2,6,},{4,3,5,7,1,2,0,6,},{4,3,5,7,1,6,0,2,},{4,3,5,7,1,6,2,0,},{4,3,5,7,2,0,1,6,},{4,3,5,7,2,1,0,6,},{4,3,5,7,2,6,0,1,},{4,3,5,7,2,6,1,0,},{4,3,5,7,6,0,1,2,},{4,3,5,7,6,0,2,1,},
		{4,3,5,7,6,1,0,2,},{4,3,5,7,6,1,2,0,},{4,3,5,7,6,2,0,1,},{4,3,5,7,6,2,1,0,},{4,3,6,0,1,2,7,5,},{4,3,6,0,1,7,2,5,},{4,3,6,0,1,7,5,2,},{4,3,6,0,2,1,7,5,},{4,3,6,0,2,7,1,5,},{4,3,6,0,2,7,5,1,},
		{4,3,6,0,5,1,7,2,},{4,3,6,0,5,2,7,1,},{4,3,6,0,5,7,1,2,},{4,3,6,0,5,7,2,1,},{4,3,6,0,7,1,2,5,},{4,3,6,0,7,1,5,2,},{4,3,6,0,7,2,1,5,},{4,3,6,0,7,2,5,1,},{4,3,6,1,0,2,7,5,},{4,3,6,1,0,7,2,5,},
		{4,3,6,1,0,7,5,2,},{4,3,6,1,2,0,7,5,},{4,3,6,1,2,7,0,5,},{4,3,6,1,2,7,5,0,},{4,3,6,1,5,0,7,2,},{4,3,6,1,5,2,7,0,},{4,3,6,1,5,7,0,2,},{4,3,6,1,5,7,2,0,},{4,3,6,1,7,0,2,5,},{4,3,6,1,7,0,5,2,},
		{4,3,6,1,7,2,0,5,},{4,3,6,1,7,2,5,0,},{4,3,6,2,0,1,7,5,},{4,3,6,2,0,7,1,5,},{4,3,6,2,0,7,5,1,},{4,3,6,2,1,0,7,5,},{4,3,6,2,1,7,0,5,},{4,3,6,2,1,7,5,0,},{4,3,6,2,5,0,7,1,},{4,3,6,2,5,1,7,0,},
		{4,3,6,2,5,7,0,1,},{4,3,6,2,5,7,1,0,},{4,3,6,2,7,0,1,5,},{4,3,6,2,7,0,5,1,},{4,3,6,2,7,1,0,5,},{4,3,6,2,7,1,5,0,},{4,3,6,5,0,1,7,2,},{4,3,6,5,0,2,7,1,},{4,3,6,5,0,7,1,2,},{4,3,6,5,0,7,2,1,},
		{4,3,6,5,1,0,7,2,},{4,3,6,5,1,2,7,0,},{4,3,6,5,1,7,0,2,},{4,3,6,5,1,7,2,0,},{4,3,6,5,2,0,7,1,},{4,3,6,5,2,1,7,0,},{4,3,6,5,2,7,0,1,},{4,3,6,5,2,7,1,0,},{4,3,6,5,7,0,1,2,},{4,3,6,5,7,0,2,1,},
		{4,3,6,5,7,1,0,2,},{4,3,6,5,7,1,2,0,},{4,3,6,5,7,2,0,1,},{4,3,6,5,7,2,1,0,},{4,3,6,7,0,1,2,5,},{4,3,6,7,0,1,5,2,},{4,3,6,7,0,2,1,5,},{4,3,6,7,0,2,5,1,},{4,3,6,7,1,0,2,5,},{4,3,6,7,1,0,5,2,},
		{4,3,6,7,1,2,0,5,},{4,3,6,7,1,2,5,0,},{4,3,6,7,2,0,1,5,},{4,3,6,7,2,0,5,1,},{4,3,6,7,2,1,0,5,},{4,3,6,7,2,1,5,0,},{4,3,6,7,5,0,1,2,},{4,3,6,7,5,0,2,1,},{4,3,6,7,5,1,0,2,},{4,3,6,7,5,1,2,0,},
		{4,3,6,7,5,2,0,1,},{4,3,6,7,5,2,1,0,},{4,3,7,0,1,2,5,6,},{4,3,7,0,1,6,2,5,},{4,3,7,0,1,6,5,2,},{4,3,7,0,2,1,5,6,},{4,3,7,0,2,6,1,5,},{4,3,7,0,2,6,5,1,},{4,3,7,0,5,1,2,6,},{4,3,7,0,5,2,1,6,},
		{4,3,7,0,5,6,1,2,},{4,3,7,0,5,6,2,1,},{4,3,7,0,6,1,2,5,},{4,3,7,0,6,1,5,2,},{4,3,7,0,6,2,1,5,},{4,3,7,0,6,2,5,1,},{4,3,7,1,0,2,5,6,},{4,3,7,1,0,6,2,5,},{4,3,7,1,0,6,5,2,},{4,3,7,1,2,0,5,6,},
		{4,3,7,1,2,6,0,5,},{4,3,7,1,2,6,5,0,},{4,3,7,1,5,0,2,6,},{4,3,7,1,5,2,0,6,},{4,3,7,1,5,6,0,2,},{4,3,7,1,5,6,2,0,},{4,3,7,1,6,0,2,5,},{4,3,7,1,6,0,5,2,},{4,3,7,1,6,2,0,5,},{4,3,7,1,6,2,5,0,},
		{4,3,7,2,0,1,5,6,},{4,3,7,2,0,6,1,5,},{4,3,7,2,0,6,5,1,},{4,3,7,2,1,0,5,6,},{4,3,7,2,1,6,0,5,},{4,3,7,2,1,6,5,0,},{4,3,7,2,5,0,1,6,},{4,3,7,2,5,1,0,6,},{4,3,7,2,5,6,0,1,},{4,3,7,2,5,6,1,0,},
		{4,3,7,2,6,0,1,5,},{4,3,7,2,6,0,5,1,},{4,3,7,2,6,1,0,5,},{4,3,7,2,6,1,5,0,},{4,3,7,5,0,1,2,6,},{4,3,7,5,0,2,1,6,},{4,3,7,5,0,6,1,2,},{4,3,7,5,0,6,2,1,},{4,3,7,5,1,0,2,6,},{4,3,7,5,1,2,0,6,},
		{4,3,7,5,1,6,0,2,},{4,3,7,5,1,6,2,0,},{4,3,7,5,2,0,1,6,},{4,3,7,5,2,1,0,6,},{4,3,7,5,2,6,0,1,},{4,3,7,5,2,6,1,0,},{4,3,7,5,6,0,1,2,},{4,3,7,5,6,0,2,1,},{4,3,7,5,6,1,0,2,},{4,3,7,5,6,1,2,0,},
		{4,3,7,5,6,2,0,1,},{4,3,7,5,6,2,1,0,},{4,3,7,6,0,1,2,5,},{4,3,7,6,0,1,5,2,},{4,3,7,6,0,2,1,5,},{4,3,7,6,0,2,5,1,},{4,3,7,6,1,0,2,5,},{4,3,7,6,1,0,5,2,},{4,3,7,6,1,2,0,5,},{4,3,7,6,1,2,5,0,},
		{4,3,7,6,2,0,1,5,},{4,3,7,6,2,0,5,1,},{4,3,7,6,2,1,0,5,},{4,3,7,6,2,1,5,0,},{4,3,7,6,5,0,1,2,},{4,3,7,6,5,0,2,1,},{4,3,7,6,5,1,0,2,},{4,3,7,6,5,1,2,0,},{4,3,7,6,5,2,0,1,},{4,3,7,6,5,2,1,0,},
		{4,5,0,1,2,3,7,6,},{4,5,0,1,2,6,7,3,},{4,5,0,1,2,7,3,6,},{4,5,0,1,3,2,7,6,},{4,5,0,1,3,6,7,2,},{4,5,0,1,3,7,2,6,},{4,5,0,1,6,2,7,3,},{4,5,0,1,6,3,7,2,},{4,5,0,1,6,7,2,3,},{4,5,0,1,6,7,3,2,},
		{4,5,0,1,7,2,3,6,},{4,5,0,1,7,3,2,6,},{4,5,0,1,7,6,2,3,},{4,5,0,1,7,6,3,2,},{4,5,0,2,1,3,7,6,},{4,5,0,2,1,6,7,3,},{4,5,0,2,1,7,3,6,},{4,5,0,2,3,1,7,6,},{4,5,0,2,3,6,7,1,},{4,5,0,2,3,7,1,6,},
		{4,5,0,2,6,1,7,3,},{4,5,0,2,6,3,7,1,},{4,5,0,2,6,7,1,3,},{4,5,0,2,6,7,3,1,},{4,5,0,2,7,1,3,6,},{4,5,0,2,7,3,1,6,},{4,5,0,2,7,6,1,3,},{4,5,0,2,7,6,3,1,},{4,5,0,6,1,2,7,3,},{4,5,0,6,1,3,7,2,},
		{4,5,0,6,1,7,2,3,},{4,5,0,6,1,7,3,2,},{4,5,0,6,2,1,7,3,},{4,5,0,6,2,3,7,1,},{4,5,0,6,2,7,1,3,},{4,5,0,6,2,7,3,1,},{4,5,0,6,3,1,7,2,},{4,5,0,6,3,2,7,1,},{4,5,0,6,3,7,1,2,},{4,5,0,6,3,7,2,1,},
		{4,5,0,6,7,1,2,3,},{4,5,0,6,7,1,3,2,},{4,5,0,6,7,2,1,3,},{4,5,0,6,7,2,3,1,},{4,5,0,6,7,3,1,2,},{4,5,0,6,7,3,2,1,},{4,5,0,7,1,2,3,6,},{4,5,0,7,1,3,2,6,},{4,5,0,7,1,6,2,3,},{4,5,0,7,1,6,3,2,},
		{4,5,0,7,2,1,3,6,},{4,5,0,7,2,3,1,6,},{4,5,0,7,2,6,1,3,},{4,5,0,7,2,6,3,1,},{4,5,0,7,3,1,2,6,},{4,5,0,7,3,2,1,6,},{4,5,0,7,3,6,1,2,},{4,5,0,7,3,6,2,1,},{4,5,0,7,6,1,2,3,},{4,5,0,7,6,1,3,2,},
		{4,5,0,7,6,2,1,3,},{4,5,0,7,6,2,3,1,},{4,5,0,7,6,3,1,2,},{4,5,0,7,6,3,2,1,},{4,5,1,0,2,3,7,6,},{4,5,1,0,2,6,7,3,},{4,5,1,0,2,7,3,6,},{4,5,1,0,3,2,7,6,},{4,5,1,0,3,6,7,2,},{4,5,1,0,3,7,2,6,},
		{4,5,1,0,6,2,7,3,},{4,5,1,0,6,3,7,2,},{4,5,1,0,6,7,2,3,},{4,5,1,0,6,7,3,2,},{4,5,1,0,7,2,3,6,},{4,5,1,0,7,3,2,6,},{4,5,1,0,7,6,2,3,},{4,5,1,0,7,6,3,2,},{4,5,1,2,0,3,7,6,},{4,5,1,2,0,6,7,3,},
		{4,5,1,2,0,7,3,6,},{4,5,1,2,3,0,7,6,},{4,5,1,2,3,6,7,0,},{4,5,1,2,3,7,0,6,},{4,5,1,2,6,0,7,3,},{4,5,1,2,6,3,7,0,},{4,5,1,2,6,7,0,3,},{4,5,1,2,6,7,3,0,},{4,5,1,2,7,0,3,6,},{4,5,1,2,7,3,0,6,},
		{4,5,1,2,7,6,0,3,},{4,5,1,2,7,6,3,0,},{4,5,1,6,0,2,7,3,},{4,5,1,6,0,3,7,2,},{4,5,1,6,0,7,2,3,},{4,5,1,6,0,7,3,2,},{4,5,1,6,2,0,7,3,},{4,5,1,6,2,3,7,0,},{4,5,1,6,2,7,0,3,},{4,5,1,6,2,7,3,0,},
		{4,5,1,6,3,0,7,2,},{4,5,1,6,3,2,7,0,},{4,5,1,6,3,7,0,2,},{4,5,1,6,3,7,2,0,},{4,5,1,6,7,0,2,3,},{4,5,1,6,7,0,3,2,},{4,5,1,6,7,2,0,3,},{4,5,1,6,7,2,3,0,},{4,5,1,6,7,3,0,2,},{4,5,1,6,7,3,2,0,},
		{4,5,1,7,0,2,3,6,},{4,5,1,7,0,3,2,6,},{4,5,1,7,0,6,2,3,},{4,5,1,7,0,6,3,2,},{4,5,1,7,2,0,3,6,},{4,5,1,7,2,3,0,6,},{4,5,1,7,2,6,0,3,},{4,5,1,7,2,6,3,0,},{4,5,1,7,3,0,2,6,},{4,5,1,7,3,2,0,6,},
		{4,5,1,7,3,6,0,2,},{4,5,1,7,3,6,2,0,},{4,5,1,7,6,0,2,3,},{4,5,1,7,6,0,3,2,},{4,5,1,7,6,2,0,3,},{4,5,1,7,6,2,3,0,},{4,5,1,7,6,3,0,2,},{4,5,1,7,6,3,2,0,},{4,5,3,0,1,2,7,6,},{4,5,3,0,1,6,7,2,},
		{4,5,3,0,1,7,2,6,},{4,5,3,0,2,1,7,6,},{4,5,3,0,2,6,7,1,},{4,5,3,0,2,7,1,6,},{4,5,3,0,6,1,7,2,},{4,5,3,0,6,2,7,1,},{4,5,3,0,6,7,1,2,},{4,5,3,0,6,7,2,1,},{4,5,3,0,7,1,2,6,},{4,5,3,0,7,2,1,6,},
		{4,5,3,0,7,6,1,2,},{4,5,3,0,7,6,2,1,},{4,5,3,1,0,2,7,6,},{4,5,3,1,0,6,7,2,},{4,5,3,1,0,7,2,6,},{4,5,3,1,2,0,7,6,},{4,5,3,1,2,6,7,0,},{4,5,3,1,2,7,0,6,},{4,5,3,1,6,0,7,2,},{4,5,3,1,6,2,7,0,},
		{4,5,3,1,6,7,0,2,},{4,5,3,1,6,7,2,0,},{4,5,3,1,7,0,2,6,},{4,5,3,1,7,2,0,6,},{4,5,3,1,7,6,0,2,},{4,5,3,1,7,6,2,0,},{4,5,3,2,0,1,7,6,},{4,5,3,2,0,6,7,1,},{4,5,3,2,0,7,1,6,},{4,5,3,2,1,0,7,6,},
		{4,5,3,2,1,6,7,0,},{4,5,3,2,1,7,0,6,},{4,5,3,2,6,0,7,1,},{4,5,3,2,6,1,7,0,},{4,5,3,2,6,7,0,1,},{4,5,3,2,6,7,1,0,},{4,5,3,2,7,0,1,6,},{4,5,3,2,7,1,0,6,},{4,5,3,2,7,6,0,1,},{4,5,3,2,7,6,1,0,},
		{4,5,3,6,0,1,7,2,},{4,5,3,6,0,2,7,1,},{4,5,3,6,0,7,1,2,},{4,5,3,6,0,7,2,1,},{4,5,3,6,1,0,7,2,},{4,5,3,6,1,2,7,0,},{4,5,3,6,1,7,0,2,},{4,5,3,6,1,7,2,0,},{4,5,3,6,2,0,7,1,},{4,5,3,6,2,1,7,0,},
		{4,5,3,6,2,7,0,1,},{4,5,3,6,2,7,1,0,},{4,5,3,6,7,0,1,2,},{4,5,3,6,7,0,2,1,},{4,5,3,6,7,1,0,2,},{4,5,3,6,7,1,2,0,},{4,5,3,6,7,2,0,1,},{4,5,3,6,7,2,1,0,},{4,5,3,7,0,1,2,6,},{4,5,3,7,0,2,1,6,},
		{4,5,3,7,0,6,1,2,},{4,5,3,7,0,6,2,1,},{4,5,3,7,1,0,2,6,},{4,5,3,7,1,2,0,6,},{4,5,3,7,1,6,0,2,},{4,5,3,7,1,6,2,0,},{4,5,3,7,2,0,1,6,},{4,5,3,7,2,1,0,6,},{4,5,3,7,2,6,0,1,},{4,5,3,7,2,6,1,0,},
		{4,5,3,7,6,0,1,2,},{4,5,3,7,6,0,2,1,},{4,5,3,7,6,1,0,2,},{4,5,3,7,6,1,2,0,},{4,5,3,7,6,2,0,1,},{4,5,3,7,6,2,1,0,},{4,5,6,0,1,2,7,3,},{4,5,6,0,1,3,7,2,},{4,5,6,0,1,7,2,3,},{4,5,6,0,1,7,3,2,},
		{4,5,6,0,2,1,7,3,},{4,5,6,0,2,3,7,1,},{4,5,6,0,2,7,1,3,},{4,5,6,0,2,7,3,1,},{4,5,6,0,3,1,7,2,},{4,5,6,0,3,2,7,1,},{4,5,6,0,3,7,1,2,},{4,5,6,0,3,7,2,1,},{4,5,6,0,7,1,2,3,},{4,5,6,0,7,1,3,2,},
		{4,5,6,0,7,2,1,3,},{4,5,6,0,7,2,3,1,},{4,5,6,0,7,3,1,2,},{4,5,6,0,7,3,2,1,},{4,5,6,1,0,2,7,3,},{4,5,6,1,0,3,7,2,},{4,5,6,1,0,7,2,3,},{4,5,6,1,0,7,3,2,},{4,5,6,1,2,0,7,3,},{4,5,6,1,2,3,7,0,},
		{4,5,6,1,2,7,0,3,},{4,5,6,1,2,7,3,0,},{4,5,6,1,3,0,7,2,},{4,5,6,1,3,2,7,0,},{4,5,6,1,3,7,0,2,},{4,5,6,1,3,7,2,0,},{4,5,6,1,7,0,2,3,},{4,5,6,1,7,0,3,2,},{4,5,6,1,7,2,0,3,},{4,5,6,1,7,2,3,0,},
		{4,5,6,1,7,3,0,2,},{4,5,6,1,7,3,2,0,},{4,5,6,2,0,1,7,3,},{4,5,6,2,0,3,7,1,},{4,5,6,2,0,7,1,3,},{4,5,6,2,0,7,3,1,},{4,5,6,2,1,0,7,3,},{4,5,6,2,1,3,7,0,},{4,5,6,2,1,7,0,3,},{4,5,6,2,1,7,3,0,},
		{4,5,6,2,3,0,7,1,},{4,5,6,2,3,1,7,0,},{4,5,6,2,3,7,0,1,},{4,5,6,2,3,7,1,0,},{4,5,6,2,7,0,1,3,},{4,5,6,2,7,0,3,1,},{4,5,6,2,7,1,0,3,},{4,5,6,2,7,1,3,0,},{4,5,6,2,7,3,0,1,},{4,5,6,2,7,3,1,0,},
		{4,5,6,7,0,1,2,3,},{4,5,6,7,0,1,3,2,},{4,5,6,7,0,2,1,3,},{4,5,6,7,0,2,3,1,},{4,5,6,7,0,3,1,2,},{4,5,6,7,0,3,2,1,},{4,5,6,7,1,0,2,3,},{4,5,6,7,1,0,3,2,},{4,5,6,7,1,2,0,3,},{4,5,6,7,1,2,3,0,},
		{4,5,6,7,1,3,0,2,},{4,5,6,7,1,3,2,0,},{4,5,6,7,2,0,1,3,},{4,5,6,7,2,0,3,1,},{4,5,6,7,2,1,0,3,},{4,5,6,7,2,1,3,0,},{4,5,6,7,2,3,0,1,},{4,5,6,7,2,3,1,0,},{4,5,6,7,3,0,1,2,},{4,5,6,7,3,0,2,1,},
		{4,5,6,7,3,1,0,2,},{4,5,6,7,3,1,2,0,},{4,5,6,7,3,2,0,1,},{4,5,6,7,3,2,1,0,},{4,5,7,0,1,2,3,6,},{4,5,7,0,1,3,2,6,},{4,5,7,0,1,6,2,3,},{4,5,7,0,1,6,3,2,},{4,5,7,0,2,1,3,6,},{4,5,7,0,2,3,1,6,},
		{4,5,7,0,2,6,1,3,},{4,5,7,0,2,6,3,1,},{4,5,7,0,3,1,2,6,},{4,5,7,0,3,2,1,6,},{4,5,7,0,3,6,1,2,},{4,5,7,0,3,6,2,1,},{4,5,7,0,6,1,2,3,},{4,5,7,0,6,1,3,2,},{4,5,7,0,6,2,1,3,},{4,5,7,0,6,2,3,1,},
		{4,5,7,0,6,3,1,2,},{4,5,7,0,6,3,2,1,},{4,5,7,1,0,2,3,6,},{4,5,7,1,0,3,2,6,},{4,5,7,1,0,6,2,3,},{4,5,7,1,0,6,3,2,},{4,5,7,1,2,0,3,6,},{4,5,7,1,2,3,0,6,},{4,5,7,1,2,6,0,3,},{4,5,7,1,2,6,3,0,},
		{4,5,7,1,3,0,2,6,},{4,5,7,1,3,2,0,6,},{4,5,7,1,3,6,0,2,},{4,5,7,1,3,6,2,0,},{4,5,7,1,6,0,2,3,},{4,5,7,1,6,0,3,2,},{4,5,7,1,6,2,0,3,},{4,5,7,1,6,2,3,0,},{4,5,7,1,6,3,0,2,},{4,5,7,1,6,3,2,0,},
		{4,5,7,2,0,1,3,6,},{4,5,7,2,0,3,1,6,},{4,5,7,2,0,6,1,3,},{4,5,7,2,0,6,3,1,},{4,5,7,2,1,0,3,6,},{4,5,7,2,1,3,0,6,},{4,5,7,2,1,6,0,3,},{4,5,7,2,1,6,3,0,},{4,5,7,2,3,0,1,6,},{4,5,7,2,3,1,0,6,},
		{4,5,7,2,3,6,0,1,},{4,5,7,2,3,6,1,0,},{4,5,7,2,6,0,1,3,},{4,5,7,2,6,0,3,1,},{4,5,7,2,6,1,0,3,},{4,5,7,2,6,1,3,0,},{4,5,7,2,6,3,0,1,},{4,5,7,2,6,3,1,0,},{4,5,7,6,0,1,2,3,},{4,5,7,6,0,1,3,2,},
		{4,5,7,6,0,2,1,3,},{4,5,7,6,0,2,3,1,},{4,5,7,6,0,3,1,2,},{4,5,7,6,0,3,2,1,},{4,5,7,6,1,0,2,3,},{4,5,7,6,1,0,3,2,},{4,5,7,6,1,2,0,3,},{4,5,7,6,1,2,3,0,},{4,5,7,6,1,3,0,2,},{4,5,7,6,1,3,2,0,},
		{4,5,7,6,2,0,1,3,},{4,5,7,6,2,0,3,1,},{4,5,7,6,2,1,0,3,},{4,5,7,6,2,1,3,0,},{4,5,7,6,2,3,0,1,},{4,5,7,6,2,3,1,0,},{4,5,7,6,3,0,1,2,},{4,5,7,6,3,0,2,1,},{4,5,7,6,3,1,0,2,},{4,5,7,6,3,1,2,0,},
		{4,5,7,6,3,2,0,1,},{4,5,7,6,3,2,1,0,},{4,6,0,1,2,3,7,5,},{4,6,0,1,2,7,3,5,},{4,6,0,1,2,7,5,3,},{4,6,0,1,3,2,7,5,},{4,6,0,1,3,7,2,5,},{4,6,0,1,3,7,5,2,},{4,6,0,1,5,2,7,3,},{4,6,0,1,5,3,7,2,},
		{4,6,0,1,5,7,2,3,},{4,6,0,1,5,7,3,2,},{4,6,0,1,7,2,3,5,},{4,6,0,1,7,2,5,3,},{4,6,0,1,7,3,2,5,},{4,6,0,1,7,3,5,2,},{4,6,0,2,1,3,7,5,},{4,6,0,2,1,7,3,5,},{4,6,0,2,1,7,5,3,},{4,6,0,2,3,1,7,5,},
		{4,6,0,2,3,7,1,5,},{4,6,0,2,3,7,5,1,},{4,6,0,2,5,1,7,3,},{4,6,0,2,5,3,7,1,},{4,6,0,2,5,7,1,3,},{4,6,0,2,5,7,3,1,},{4,6,0,2,7,1,3,5,},{4,6,0,2,7,1,5,3,},{4,6,0,2,7,3,1,5,},{4,6,0,2,7,3,5,1,},
		{4,6,0,5,1,2,7,3,},{4,6,0,5,1,3,7,2,},{4,6,0,5,1,7,2,3,},{4,6,0,5,1,7,3,2,},{4,6,0,5,2,1,7,3,},{4,6,0,5,2,3,7,1,},{4,6,0,5,2,7,1,3,},{4,6,0,5,2,7,3,1,},{4,6,0,5,3,1,7,2,},{4,6,0,5,3,2,7,1,},
		{4,6,0,5,3,7,1,2,},{4,6,0,5,3,7,2,1,},{4,6,0,5,7,1,2,3,},{4,6,0,5,7,1,3,2,},{4,6,0,5,7,2,1,3,},{4,6,0,5,7,2,3,1,},{4,6,0,5,7,3,1,2,},{4,6,0,5,7,3,2,1,},{4,6,0,7,1,2,3,5,},{4,6,0,7,1,2,5,3,},
		{4,6,0,7,1,3,2,5,},{4,6,0,7,1,3,5,2,},{4,6,0,7,2,1,3,5,},{4,6,0,7,2,1,5,3,},{4,6,0,7,2,3,1,5,},{4,6,0,7,2,3,5,1,},{4,6,0,7,3,1,2,5,},{4,6,0,7,3,1,5,2,},{4,6,0,7,3,2,1,5,},{4,6,0,7,3,2,5,1,},
		{4,6,0,7,5,1,2,3,},{4,6,0,7,5,1,3,2,},{4,6,0,7,5,2,1,3,},{4,6,0,7,5,2,3,1,},{4,6,0,7,5,3,1,2,},{4,6,0,7,5,3,2,1,},{4,6,1,0,2,3,7,5,},{4,6,1,0,2,7,3,5,},{4,6,1,0,2,7,5,3,},{4,6,1,0,3,2,7,5,},
		{4,6,1,0,3,7,2,5,},{4,6,1,0,3,7,5,2,},{4,6,1,0,5,2,7,3,},{4,6,1,0,5,3,7,2,},{4,6,1,0,5,7,2,3,},{4,6,1,0,5,7,3,2,},{4,6,1,0,7,2,3,5,},{4,6,1,0,7,2,5,3,},{4,6,1,0,7,3,2,5,},{4,6,1,0,7,3,5,2,},
		{4,6,1,2,0,3,7,5,},{4,6,1,2,0,7,3,5,},{4,6,1,2,0,7,5,3,},{4,6,1,2,3,0,7,5,},{4,6,1,2,3,7,0,5,},{4,6,1,2,3,7,5,0,},{4,6,1,2,5,0,7,3,},{4,6,1,2,5,3,7,0,},{4,6,1,2,5,7,0,3,},{4,6,1,2,5,7,3,0,},
		{4,6,1,2,7,0,3,5,},{4,6,1,2,7,0,5,3,},{4,6,1,2,7,3,0,5,},{4,6,1,2,7,3,5,0,},{4,6,1,5,0,2,7,3,},{4,6,1,5,0,3,7,2,},{4,6,1,5,0,7,2,3,},{4,6,1,5,0,7,3,2,},{4,6,1,5,2,0,7,3,},{4,6,1,5,2,3,7,0,},
		{4,6,1,5,2,7,0,3,},{4,6,1,5,2,7,3,0,},{4,6,1,5,3,0,7,2,},{4,6,1,5,3,2,7,0,},{4,6,1,5,3,7,0,2,},{4,6,1,5,3,7,2,0,},{4,6,1,5,7,0,2,3,},{4,6,1,5,7,0,3,2,},{4,6,1,5,7,2,0,3,},{4,6,1,5,7,2,3,0,},
		{4,6,1,5,7,3,0,2,},{4,6,1,5,7,3,2,0,},{4,6,1,7,0,2,3,5,},{4,6,1,7,0,2,5,3,},{4,6,1,7,0,3,2,5,},{4,6,1,7,0,3,5,2,},{4,6,1,7,2,0,3,5,},{4,6,1,7,2,0,5,3,},{4,6,1,7,2,3,0,5,},{4,6,1,7,2,3,5,0,},
		{4,6,1,7,3,0,2,5,},{4,6,1,7,3,0,5,2,},{4,6,1,7,3,2,0,5,},{4,6,1,7,3,2,5,0,},{4,6,1,7,5,0,2,3,},{4,6,1,7,5,0,3,2,},{4,6,1,7,5,2,0,3,},{4,6,1,7,5,2,3,0,},{4,6,1,7,5,3,0,2,},{4,6,1,7,5,3,2,0,},
		{4,6,3,0,1,2,7,5,},{4,6,3,0,1,7,2,5,},{4,6,3,0,1,7,5,2,},{4,6,3,0,2,1,7,5,},{4,6,3,0,2,7,1,5,},{4,6,3,0,2,7,5,1,},{4,6,3,0,5,1,7,2,},{4,6,3,0,5,2,7,1,},{4,6,3,0,5,7,1,2,},{4,6,3,0,5,7,2,1,},
		{4,6,3,0,7,1,2,5,},{4,6,3,0,7,1,5,2,},{4,6,3,0,7,2,1,5,},{4,6,3,0,7,2,5,1,},{4,6,3,1,0,2,7,5,},{4,6,3,1,0,7,2,5,},{4,6,3,1,0,7,5,2,},{4,6,3,1,2,0,7,5,},{4,6,3,1,2,7,0,5,},{4,6,3,1,2,7,5,0,},
		{4,6,3,1,5,0,7,2,},{4,6,3,1,5,2,7,0,},{4,6,3,1,5,7,0,2,},{4,6,3,1,5,7,2,0,},{4,6,3,1,7,0,2,5,},{4,6,3,1,7,0,5,2,},{4,6,3,1,7,2,0,5,},{4,6,3,1,7,2,5,0,},{4,6,3,2,0,1,7,5,},{4,6,3,2,0,7,1,5,},
		{4,6,3,2,0,7,5,1,},{4,6,3,2,1,0,7,5,},{4,6,3,2,1,7,0,5,},{4,6,3,2,1,7,5,0,},{4,6,3,2,5,0,7,1,},{4,6,3,2,5,1,7,0,},{4,6,3,2,5,7,0,1,},{4,6,3,2,5,7,1,0,},{4,6,3,2,7,0,1,5,},{4,6,3,2,7,0,5,1,},
		{4,6,3,2,7,1,0,5,},{4,6,3,2,7,1,5,0,},{4,6,3,5,0,1,7,2,},{4,6,3,5,0,2,7,1,},{4,6,3,5,0,7,1,2,},{4,6,3,5,0,7,2,1,},{4,6,3,5,1,0,7,2,},{4,6,3,5,1,2,7,0,},{4,6,3,5,1,7,0,2,},{4,6,3,5,1,7,2,0,},
		{4,6,3,5,2,0,7,1,},{4,6,3,5,2,1,7,0,},{4,6,3,5,2,7,0,1,},{4,6,3,5,2,7,1,0,},{4,6,3,5,7,0,1,2,},{4,6,3,5,7,0,2,1,},{4,6,3,5,7,1,0,2,},{4,6,3,5,7,1,2,0,},{4,6,3,5,7,2,0,1,},{4,6,3,5,7,2,1,0,},
		{4,6,3,7,0,1,2,5,},{4,6,3,7,0,1,5,2,},{4,6,3,7,0,2,1,5,},{4,6,3,7,0,2,5,1,},{4,6,3,7,1,0,2,5,},{4,6,3,7,1,0,5,2,},{4,6,3,7,1,2,0,5,},{4,6,3,7,1,2,5,0,},{4,6,3,7,2,0,1,5,},{4,6,3,7,2,0,5,1,},
		{4,6,3,7,2,1,0,5,},{4,6,3,7,2,1,5,0,},{4,6,3,7,5,0,1,2,},{4,6,3,7,5,0,2,1,},{4,6,3,7,5,1,0,2,},{4,6,3,7,5,1,2,0,},{4,6,3,7,5,2,0,1,},{4,6,3,7,5,2,1,0,},{4,6,5,0,1,2,7,3,},{4,6,5,0,1,3,7,2,},
		{4,6,5,0,1,7,2,3,},{4,6,5,0,1,7,3,2,},{4,6,5,0,2,1,7,3,},{4,6,5,0,2,3,7,1,},{4,6,5,0,2,7,1,3,},{4,6,5,0,2,7,3,1,},{4,6,5,0,3,1,7,2,},{4,6,5,0,3,2,7,1,},{4,6,5,0,3,7,1,2,},{4,6,5,0,3,7,2,1,},
		{4,6,5,0,7,1,2,3,},{4,6,5,0,7,1,3,2,},{4,6,5,0,7,2,1,3,},{4,6,5,0,7,2,3,1,},{4,6,5,0,7,3,1,2,},{4,6,5,0,7,3,2,1,},{4,6,5,1,0,2,7,3,},{4,6,5,1,0,3,7,2,},{4,6,5,1,0,7,2,3,},{4,6,5,1,0,7,3,2,},
		{4,6,5,1,2,0,7,3,},{4,6,5,1,2,3,7,0,},{4,6,5,1,2,7,0,3,},{4,6,5,1,2,7,3,0,},{4,6,5,1,3,0,7,2,},{4,6,5,1,3,2,7,0,},{4,6,5,1,3,7,0,2,},{4,6,5,1,3,7,2,0,},{4,6,5,1,7,0,2,3,},{4,6,5,1,7,0,3,2,},
		{4,6,5,1,7,2,0,3,},{4,6,5,1,7,2,3,0,},{4,6,5,1,7,3,0,2,},{4,6,5,1,7,3,2,0,},{4,6,5,2,0,1,7,3,},{4,6,5,2,0,3,7,1,},{4,6,5,2,0,7,1,3,},{4,6,5,2,0,7,3,1,},{4,6,5,2,1,0,7,3,},{4,6,5,2,1,3,7,0,},
		{4,6,5,2,1,7,0,3,},{4,6,5,2,1,7,3,0,},{4,6,5,2,3,0,7,1,},{4,6,5,2,3,1,7,0,},{4,6,5,2,3,7,0,1,},{4,6,5,2,3,7,1,0,},{4,6,5,2,7,0,1,3,},{4,6,5,2,7,0,3,1,},{4,6,5,2,7,1,0,3,},{4,6,5,2,7,1,3,0,},
		{4,6,5,2,7,3,0,1,},{4,6,5,2,7,3,1,0,},{4,6,5,7,0,1,2,3,},{4,6,5,7,0,1,3,2,},{4,6,5,7,0,2,1,3,},{4,6,5,7,0,2,3,1,},{4,6,5,7,0,3,1,2,},{4,6,5,7,0,3,2,1,},{4,6,5,7,1,0,2,3,},{4,6,5,7,1,0,3,2,},
		{4,6,5,7,1,2,0,3,},{4,6,5,7,1,2,3,0,},{4,6,5,7,1,3,0,2,},{4,6,5,7,1,3,2,0,},{4,6,5,7,2,0,1,3,},{4,6,5,7,2,0,3,1,},{4,6,5,7,2,1,0,3,},{4,6,5,7,2,1,3,0,},{4,6,5,7,2,3,0,1,},{4,6,5,7,2,3,1,0,},
		{4,6,5,7,3,0,1,2,},{4,6,5,7,3,0,2,1,},{4,6,5,7,3,1,0,2,},{4,6,5,7,3,1,2,0,},{4,6,5,7,3,2,0,1,},{4,6,5,7,3,2,1,0,},{4,6,7,0,1,2,3,5,},{4,6,7,0,1,2,5,3,},{4,6,7,0,1,3,2,5,},{4,6,7,0,1,3,5,2,},
		{4,6,7,0,2,1,3,5,},{4,6,7,0,2,1,5,3,},{4,6,7,0,2,3,1,5,},{4,6,7,0,2,3,5,1,},{4,6,7,0,3,1,2,5,},{4,6,7,0,3,1,5,2,},{4,6,7,0,3,2,1,5,},{4,6,7,0,3,2,5,1,},{4,6,7,0,5,1,2,3,},{4,6,7,0,5,1,3,2,},
		{4,6,7,0,5,2,1,3,},{4,6,7,0,5,2,3,1,},{4,6,7,0,5,3,1,2,},{4,6,7,0,5,3,2,1,},{4,6,7,1,0,2,3,5,},{4,6,7,1,0,2,5,3,},{4,6,7,1,0,3,2,5,},{4,6,7,1,0,3,5,2,},{4,6,7,1,2,0,3,5,},{4,6,7,1,2,0,5,3,},
		{4,6,7,1,2,3,0,5,},{4,6,7,1,2,3,5,0,},{4,6,7,1,3,0,2,5,},{4,6,7,1,3,0,5,2,},{4,6,7,1,3,2,0,5,},{4,6,7,1,3,2,5,0,},{4,6,7,1,5,0,2,3,},{4,6,7,1,5,0,3,2,},{4,6,7,1,5,2,0,3,},{4,6,7,1,5,2,3,0,},
		{4,6,7,1,5,3,0,2,},{4,6,7,1,5,3,2,0,},{4,6,7,2,0,1,3,5,},{4,6,7,2,0,1,5,3,},{4,6,7,2,0,3,1,5,},{4,6,7,2,0,3,5,1,},{4,6,7,2,1,0,3,5,},{4,6,7,2,1,0,5,3,},{4,6,7,2,1,3,0,5,},{4,6,7,2,1,3,5,0,},
		{4,6,7,2,3,0,1,5,},{4,6,7,2,3,0,5,1,},{4,6,7,2,3,1,0,5,},{4,6,7,2,3,1,5,0,},{4,6,7,2,5,0,1,3,},{4,6,7,2,5,0,3,1,},{4,6,7,2,5,1,0,3,},{4,6,7,2,5,1,3,0,},{4,6,7,2,5,3,0,1,},{4,6,7,2,5,3,1,0,},
		{4,6,7,5,0,1,2,3,},{4,6,7,5,0,1,3,2,},{4,6,7,5,0,2,1,3,},{4,6,7,5,0,2,3,1,},{4,6,7,5,0,3,1,2,},{4,6,7,5,0,3,2,1,},{4,6,7,5,1,0,2,3,},{4,6,7,5,1,0,3,2,},{4,6,7,5,1,2,0,3,},{4,6,7,5,1,2,3,0,},
		{4,6,7,5,1,3,0,2,},{4,6,7,5,1,3,2,0,},{4,6,7,5,2,0,1,3,},{4,6,7,5,2,0,3,1,},{4,6,7,5,2,1,0,3,},{4,6,7,5,2,1,3,0,},{4,6,7,5,2,3,0,1,},{4,6,7,5,2,3,1,0,},{4,6,7,5,3,0,1,2,},{4,6,7,5,3,0,2,1,},
		{4,6,7,5,3,1,0,2,},{4,6,7,5,3,1,2,0,},{4,6,7,5,3,2,0,1,},{4,6,7,5,3,2,1,0,},{4,7,0,1,2,3,5,6,},{4,7,0,1,2,6,3,5,},{4,7,0,1,2,6,5,3,},{4,7,0,1,3,2,5,6,},{4,7,0,1,3,6,2,5,},{4,7,0,1,3,6,5,2,},
		{4,7,0,1,5,2,3,6,},{4,7,0,1,5,3,2,6,},{4,7,0,1,5,6,2,3,},{4,7,0,1,5,6,3,2,},{4,7,0,1,6,2,3,5,},{4,7,0,1,6,2,5,3,},{4,7,0,1,6,3,2,5,},{4,7,0,1,6,3,5,2,},{4,7,0,2,1,3,5,6,},{4,7,0,2,1,6,3,5,},
		{4,7,0,2,1,6,5,3,},{4,7,0,2,3,1,5,6,},{4,7,0,2,3,6,1,5,},{4,7,0,2,3,6,5,1,},{4,7,0,2,5,1,3,6,},{4,7,0,2,5,3,1,6,},{4,7,0,2,5,6,1,3,},{4,7,0,2,5,6,3,1,},{4,7,0,2,6,1,3,5,},{4,7,0,2,6,1,5,3,},
		{4,7,0,2,6,3,1,5,},{4,7,0,2,6,3,5,1,},{4,7,0,5,1,2,3,6,},{4,7,0,5,1,3,2,6,},{4,7,0,5,1,6,2,3,},{4,7,0,5,1,6,3,2,},{4,7,0,5,2,1,3,6,},{4,7,0,5,2,3,1,6,},{4,7,0,5,2,6,1,3,},{4,7,0,5,2,6,3,1,},
		{4,7,0,5,3,1,2,6,},{4,7,0,5,3,2,1,6,},{4,7,0,5,3,6,1,2,},{4,7,0,5,3,6,2,1,},{4,7,0,5,6,1,2,3,},{4,7,0,5,6,1,3,2,},{4,7,0,5,6,2,1,3,},{4,7,0,5,6,2,3,1,},{4,7,0,5,6,3,1,2,},{4,7,0,5,6,3,2,1,},
		{4,7,0,6,1,2,3,5,},{4,7,0,6,1,2,5,3,},{4,7,0,6,1,3,2,5,},{4,7,0,6,1,3,5,2,},{4,7,0,6,2,1,3,5,},{4,7,0,6,2,1,5,3,},{4,7,0,6,2,3,1,5,},{4,7,0,6,2,3,5,1,},{4,7,0,6,3,1,2,5,},{4,7,0,6,3,1,5,2,},
		{4,7,0,6,3,2,1,5,},{4,7,0,6,3,2,5,1,},{4,7,0,6,5,1,2,3,},{4,7,0,6,5,1,3,2,},{4,7,0,6,5,2,1,3,},{4,7,0,6,5,2,3,1,},{4,7,0,6,5,3,1,2,},{4,7,0,6,5,3,2,1,},{4,7,1,0,2,3,5,6,},{4,7,1,0,2,6,3,5,},
		{4,7,1,0,2,6,5,3,},{4,7,1,0,3,2,5,6,},{4,7,1,0,3,6,2,5,},{4,7,1,0,3,6,5,2,},{4,7,1,0,5,2,3,6,},{4,7,1,0,5,3,2,6,},{4,7,1,0,5,6,2,3,},{4,7,1,0,5,6,3,2,},{4,7,1,0,6,2,3,5,},{4,7,1,0,6,2,5,3,},
		{4,7,1,0,6,3,2,5,},{4,7,1,0,6,3,5,2,},{4,7,1,2,0,3,5,6,},{4,7,1,2,0,6,3,5,},{4,7,1,2,0,6,5,3,},{4,7,1,2,3,0,5,6,},{4,7,1,2,3,6,0,5,},{4,7,1,2,3,6,5,0,},{4,7,1,2,5,0,3,6,},{4,7,1,2,5,3,0,6,},
		{4,7,1,2,5,6,0,3,},{4,7,1,2,5,6,3,0,},{4,7,1,2,6,0,3,5,},{4,7,1,2,6,0,5,3,},{4,7,1,2,6,3,0,5,},{4,7,1,2,6,3,5,0,},{4,7,1,5,0,2,3,6,},{4,7,1,5,0,3,2,6,},{4,7,1,5,0,6,2,3,},{4,7,1,5,0,6,3,2,},
		{4,7,1,5,2,0,3,6,},{4,7,1,5,2,3,0,6,},{4,7,1,5,2,6,0,3,},{4,7,1,5,2,6,3,0,},{4,7,1,5,3,0,2,6,},{4,7,1,5,3,2,0,6,},{4,7,1,5,3,6,0,2,},{4,7,1,5,3,6,2,0,},{4,7,1,5,6,0,2,3,},{4,7,1,5,6,0,3,2,},
		{4,7,1,5,6,2,0,3,},{4,7,1,5,6,2,3,0,},{4,7,1,5,6,3,0,2,},{4,7,1,5,6,3,2,0,},{4,7,1,6,0,2,3,5,},{4,7,1,6,0,2,5,3,},{4,7,1,6,0,3,2,5,},{4,7,1,6,0,3,5,2,},{4,7,1,6,2,0,3,5,},{4,7,1,6,2,0,5,3,},
		{4,7,1,6,2,3,0,5,},{4,7,1,6,2,3,5,0,},{4,7,1,6,3,0,2,5,},{4,7,1,6,3,0,5,2,},{4,7,1,6,3,2,0,5,},{4,7,1,6,3,2,5,0,},{4,7,1,6,5,0,2,3,},{4,7,1,6,5,0,3,2,},{4,7,1,6,5,2,0,3,},{4,7,1,6,5,2,3,0,},
		{4,7,1,6,5,3,0,2,},{4,7,1,6,5,3,2,0,},{4,7,3,0,1,2,5,6,},{4,7,3,0,1,6,2,5,},{4,7,3,0,1,6,5,2,},{4,7,3,0,2,1,5,6,},{4,7,3,0,2,6,1,5,},{4,7,3,0,2,6,5,1,},{4,7,3,0,5,1,2,6,},{4,7,3,0,5,2,1,6,},
		{4,7,3,0,5,6,1,2,},{4,7,3,0,5,6,2,1,},{4,7,3,0,6,1,2,5,},{4,7,3,0,6,1,5,2,},{4,7,3,0,6,2,1,5,},{4,7,3,0,6,2,5,1,},{4,7,3,1,0,2,5,6,},{4,7,3,1,0,6,2,5,},{4,7,3,1,0,6,5,2,},{4,7,3,1,2,0,5,6,},
		{4,7,3,1,2,6,0,5,},{4,7,3,1,2,6,5,0,},{4,7,3,1,5,0,2,6,},{4,7,3,1,5,2,0,6,},{4,7,3,1,5,6,0,2,},{4,7,3,1,5,6,2,0,},{4,7,3,1,6,0,2,5,},{4,7,3,1,6,0,5,2,},{4,7,3,1,6,2,0,5,},{4,7,3,1,6,2,5,0,},
		{4,7,3,2,0,1,5,6,},{4,7,3,2,0,6,1,5,},{4,7,3,2,0,6,5,1,},{4,7,3,2,1,0,5,6,},{4,7,3,2,1,6,0,5,},{4,7,3,2,1,6,5,0,},{4,7,3,2,5,0,1,6,},{4,7,3,2,5,1,0,6,},{4,7,3,2,5,6,0,1,},{4,7,3,2,5,6,1,0,},
		{4,7,3,2,6,0,1,5,},{4,7,3,2,6,0,5,1,},{4,7,3,2,6,1,0,5,},{4,7,3,2,6,1,5,0,},{4,7,3,5,0,1,2,6,},{4,7,3,5,0,2,1,6,},{4,7,3,5,0,6,1,2,},{4,7,3,5,0,6,2,1,},{4,7,3,5,1,0,2,6,},{4,7,3,5,1,2,0,6,},
		{4,7,3,5,1,6,0,2,},{4,7,3,5,1,6,2,0,},{4,7,3,5,2,0,1,6,},{4,7,3,5,2,1,0,6,},{4,7,3,5,2,6,0,1,},{4,7,3,5,2,6,1,0,},{4,7,3,5,6,0,1,2,},{4,7,3,5,6,0,2,1,},{4,7,3,5,6,1,0,2,},{4,7,3,5,6,1,2,0,},
		{4,7,3,5,6,2,0,1,},{4,7,3,5,6,2,1,0,},{4,7,3,6,0,1,2,5,},{4,7,3,6,0,1,5,2,},{4,7,3,6,0,2,1,5,},{4,7,3,6,0,2,5,1,},{4,7,3,6,1,0,2,5,},{4,7,3,6,1,0,5,2,},{4,7,3,6,1,2,0,5,},{4,7,3,6,1,2,5,0,},
		{4,7,3,6,2,0,1,5,},{4,7,3,6,2,0,5,1,},{4,7,3,6,2,1,0,5,},{4,7,3,6,2,1,5,0,},{4,7,3,6,5,0,1,2,},{4,7,3,6,5,0,2,1,},{4,7,3,6,5,1,0,2,},{4,7,3,6,5,1,2,0,},{4,7,3,6,5,2,0,1,},{4,7,3,6,5,2,1,0,},
		{4,7,5,0,1,2,3,6,},{4,7,5,0,1,3,2,6,},{4,7,5,0,1,6,2,3,},{4,7,5,0,1,6,3,2,},{4,7,5,0,2,1,3,6,},{4,7,5,0,2,3,1,6,},{4,7,5,0,2,6,1,3,},{4,7,5,0,2,6,3,1,},{4,7,5,0,3,1,2,6,},{4,7,5,0,3,2,1,6,},
		{4,7,5,0,3,6,1,2,},{4,7,5,0,3,6,2,1,},{4,7,5,0,6,1,2,3,},{4,7,5,0,6,1,3,2,},{4,7,5,0,6,2,1,3,},{4,7,5,0,6,2,3,1,},{4,7,5,0,6,3,1,2,},{4,7,5,0,6,3,2,1,},{4,7,5,1,0,2,3,6,},{4,7,5,1,0,3,2,6,},
		{4,7,5,1,0,6,2,3,},{4,7,5,1,0,6,3,2,},{4,7,5,1,2,0,3,6,},{4,7,5,1,2,3,0,6,},{4,7,5,1,2,6,0,3,},{4,7,5,1,2,6,3,0,},{4,7,5,1,3,0,2,6,},{4,7,5,1,3,2,0,6,},{4,7,5,1,3,6,0,2,},{4,7,5,1,3,6,2,0,},
		{4,7,5,1,6,0,2,3,},{4,7,5,1,6,0,3,2,},{4,7,5,1,6,2,0,3,},{4,7,5,1,6,2,3,0,},{4,7,5,1,6,3,0,2,},{4,7,5,1,6,3,2,0,},{4,7,5,2,0,1,3,6,},{4,7,5,2,0,3,1,6,},{4,7,5,2,0,6,1,3,},{4,7,5,2,0,6,3,1,},
		{4,7,5,2,1,0,3,6,},{4,7,5,2,1,3,0,6,},{4,7,5,2,1,6,0,3,},{4,7,5,2,1,6,3,0,},{4,7,5,2,3,0,1,6,},{4,7,5,2,3,1,0,6,},{4,7,5,2,3,6,0,1,},{4,7,5,2,3,6,1,0,},{4,7,5,2,6,0,1,3,},{4,7,5,2,6,0,3,1,},
		{4,7,5,2,6,1,0,3,},{4,7,5,2,6,1,3,0,},{4,7,5,2,6,3,0,1,},{4,7,5,2,6,3,1,0,},{4,7,5,6,0,1,2,3,},{4,7,5,6,0,1,3,2,},{4,7,5,6,0,2,1,3,},{4,7,5,6,0,2,3,1,},{4,7,5,6,0,3,1,2,},{4,7,5,6,0,3,2,1,},
		{4,7,5,6,1,0,2,3,},{4,7,5,6,1,0,3,2,},{4,7,5,6,1,2,0,3,},{4,7,5,6,1,2,3,0,},{4,7,5,6,1,3,0,2,},{4,7,5,6,1,3,2,0,},{4,7,5,6,2,0,1,3,},{4,7,5,6,2,0,3,1,},{4,7,5,6,2,1,0,3,},{4,7,5,6,2,1,3,0,},
		{4,7,5,6,2,3,0,1,},{4,7,5,6,2,3,1,0,},{4,7,5,6,3,0,1,2,},{4,7,5,6,3,0,2,1,},{4,7,5,6,3,1,0,2,},{4,7,5,6,3,1,2,0,},{4,7,5,6,3,2,0,1,},{4,7,5,6,3,2,1,0,},{4,7,6,0,1,2,3,5,},{4,7,6,0,1,2,5,3,},
		{4,7,6,0,1,3,2,5,},{4,7,6,0,1,3,5,2,},{4,7,6,0,2,1,3,5,},{4,7,6,0,2,1,5,3,},{4,7,6,0,2,3,1,5,},{4,7,6,0,2,3,5,1,},{4,7,6,0,3,1,2,5,},{4,7,6,0,3,1,5,2,},{4,7,6,0,3,2,1,5,},{4,7,6,0,3,2,5,1,},
		{4,7,6,0,5,1,2,3,},{4,7,6,0,5,1,3,2,},{4,7,6,0,5,2,1,3,},{4,7,6,0,5,2,3,1,},{4,7,6,0,5,3,1,2,},{4,7,6,0,5,3,2,1,},{4,7,6,1,0,2,3,5,},{4,7,6,1,0,2,5,3,},{4,7,6,1,0,3,2,5,},{4,7,6,1,0,3,5,2,},
		{4,7,6,1,2,0,3,5,},{4,7,6,1,2,0,5,3,},{4,7,6,1,2,3,0,5,},{4,7,6,1,2,3,5,0,},{4,7,6,1,3,0,2,5,},{4,7,6,1,3,0,5,2,},{4,7,6,1,3,2,0,5,},{4,7,6,1,3,2,5,0,},{4,7,6,1,5,0,2,3,},{4,7,6,1,5,0,3,2,},
		{4,7,6,1,5,2,0,3,},{4,7,6,1,5,2,3,0,},{4,7,6,1,5,3,0,2,},{4,7,6,1,5,3,2,0,},{4,7,6,2,0,1,3,5,},{4,7,6,2,0,1,5,3,},{4,7,6,2,0,3,1,5,},{4,7,6,2,0,3,5,1,},{4,7,6,2,1,0,3,5,},{4,7,6,2,1,0,5,3,},
		{4,7,6,2,1,3,0,5,},{4,7,6,2,1,3,5,0,},{4,7,6,2,3,0,1,5,},{4,7,6,2,3,0,5,1,},{4,7,6,2,3,1,0,5,},{4,7,6,2,3,1,5,0,},{4,7,6,2,5,0,1,3,},{4,7,6,2,5,0,3,1,},{4,7,6,2,5,1,0,3,},{4,7,6,2,5,1,3,0,},
		{4,7,6,2,5,3,0,1,},{4,7,6,2,5,3,1,0,},{4,7,6,5,0,1,2,3,},{4,7,6,5,0,1,3,2,},{4,7,6,5,0,2,1,3,},{4,7,6,5,0,2,3,1,},{4,7,6,5,0,3,1,2,},{4,7,6,5,0,3,2,1,},{4,7,6,5,1,0,2,3,},{4,7,6,5,1,0,3,2,},
		{4,7,6,5,1,2,0,3,},{4,7,6,5,1,2,3,0,},{4,7,6,5,1,3,0,2,},{4,7,6,5,1,3,2,0,},{4,7,6,5,2,0,1,3,},{4,7,6,5,2,0,3,1,},{4,7,6,5,2,1,0,3,},{4,7,6,5,2,1,3,0,},{4,7,6,5,2,3,0,1,},{4,7,6,5,2,3,1,0,},
		{4,7,6,5,3,0,1,2,},{4,7,6,5,3,0,2,1,},{4,7,6,5,3,1,0,2,},{4,7,6,5,3,1,2,0,},{4,7,6,5,3,2,0,1,},{4,7,6,5,3,2,1,0,},{5,0,1,2,3,4,7,6,},{5,0,1,2,3,6,7,4,},{5,0,1,2,3,7,4,6,},{5,0,1,2,6,3,7,4,},
		{5,0,1,2,6,4,7,3,},{5,0,1,2,6,7,3,4,},{5,0,1,2,6,7,4,3,},{5,0,1,2,7,3,4,6,},{5,0,1,2,7,4,3,6,},{5,0,1,2,7,6,3,4,},{5,0,1,2,7,6,4,3,},{5,0,1,4,2,3,7,6,},{5,0,1,4,2,6,7,3,},{5,0,1,4,2,7,3,6,},
		{5,0,1,4,3,2,7,6,},{5,0,1,4,3,6,7,2,},{5,0,1,4,3,7,2,6,},{5,0,1,4,6,2,7,3,},{5,0,1,4,6,3,7,2,},{5,0,1,4,6,7,2,3,},{5,0,1,4,6,7,3,2,},{5,0,1,4,7,2,3,6,},{5,0,1,4,7,3,2,6,},{5,0,1,4,7,6,2,3,},
		{5,0,1,4,7,6,3,2,},{5,0,1,6,2,3,7,4,},{5,0,1,6,2,4,7,3,},{5,0,1,6,2,7,3,4,},{5,0,1,6,2,7,4,3,},{5,0,1,6,3,2,7,4,},{5,0,1,6,3,4,7,2,},{5,0,1,6,3,7,2,4,},{5,0,1,6,3,7,4,2,},{5,0,1,6,7,2,3,4,},
		{5,0,1,6,7,2,4,3,},{5,0,1,6,7,3,2,4,},{5,0,1,6,7,3,4,2,},{5,0,1,6,7,4,2,3,},{5,0,1,6,7,4,3,2,},{5,0,1,7,2,3,4,6,},{5,0,1,7,2,4,3,6,},{5,0,1,7,2,6,3,4,},{5,0,1,7,2,6,4,3,},{5,0,1,7,3,2,4,6,},
		{5,0,1,7,3,4,2,6,},{5,0,1,7,3,6,2,4,},{5,0,1,7,3,6,4,2,},{5,0,1,7,6,2,3,4,},{5,0,1,7,6,2,4,3,},{5,0,1,7,6,3,2,4,},{5,0,1,7,6,3,4,2,},{5,0,1,7,6,4,2,3,},{5,0,1,7,6,4,3,2,},{5,0,3,1,2,4,7,6,},
		{5,0,3,1,2,6,7,4,},{5,0,3,1,2,7,4,6,},{5,0,3,1,6,2,7,4,},{5,0,3,1,6,4,7,2,},{5,0,3,1,6,7,2,4,},{5,0,3,1,6,7,4,2,},{5,0,3,1,7,2,4,6,},{5,0,3,1,7,4,2,6,},{5,0,3,1,7,6,2,4,},{5,0,3,1,7,6,4,2,},
		{5,0,3,2,1,4,7,6,},{5,0,3,2,1,6,7,4,},{5,0,3,2,1,7,4,6,},{5,0,3,2,6,1,7,4,},{5,0,3,2,6,4,7,1,},{5,0,3,2,6,7,1,4,},{5,0,3,2,6,7,4,1,},{5,0,3,2,7,1,4,6,},{5,0,3,2,7,4,1,6,},{5,0,3,2,7,6,1,4,},
		{5,0,3,2,7,6,4,1,},{5,0,3,4,1,2,7,6,},{5,0,3,4,1,6,7,2,},{5,0,3,4,1,7,2,6,},{5,0,3,4,2,1,7,6,},{5,0,3,4,2,6,7,1,},{5,0,3,4,2,7,1,6,},{5,0,3,4,6,1,7,2,},{5,0,3,4,6,2,7,1,},{5,0,3,4,6,7,1,2,},
		{5,0,3,4,6,7,2,1,},{5,0,3,4,7,1,2,6,},{5,0,3,4,7,2,1,6,},{5,0,3,4,7,6,1,2,},{5,0,3,4,7,6,2,1,},{5,0,3,6,1,2,7,4,},{5,0,3,6,1,4,7,2,},{5,0,3,6,1,7,2,4,},{5,0,3,6,1,7,4,2,},{5,0,3,6,2,1,7,4,},
		{5,0,3,6,2,4,7,1,},{5,0,3,6,2,7,1,4,},{5,0,3,6,2,7,4,1,},{5,0,3,6,7,1,2,4,},{5,0,3,6,7,1,4,2,},{5,0,3,6,7,2,1,4,},{5,0,3,6,7,2,4,1,},{5,0,3,6,7,4,1,2,},{5,0,3,6,7,4,2,1,},{5,0,3,7,1,2,4,6,},
		{5,0,3,7,1,4,2,6,},{5,0,3,7,1,6,2,4,},{5,0,3,7,1,6,4,2,},{5,0,3,7,2,1,4,6,},{5,0,3,7,2,4,1,6,},{5,0,3,7,2,6,1,4,},{5,0,3,7,2,6,4,1,},{5,0,3,7,6,1,2,4,},{5,0,3,7,6,1,4,2,},{5,0,3,7,6,2,1,4,},
		{5,0,3,7,6,2,4,1,},{5,0,3,7,6,4,1,2,},{5,0,3,7,6,4,2,1,},{5,0,4,1,2,3,7,6,},{5,0,4,1,2,6,7,3,},{5,0,4,1,2,7,3,6,},{5,0,4,1,3,2,7,6,},{5,0,4,1,3,6,7,2,},{5,0,4,1,3,7,2,6,},{5,0,4,1,6,2,7,3,},
		{5,0,4,1,6,3,7,2,},{5,0,4,1,6,7,2,3,},{5,0,4,1,6,7,3,2,},{5,0,4,1,7,2,3,6,},{5,0,4,1,7,3,2,6,},{5,0,4,1,7,6,2,3,},{5,0,4,1,7,6,3,2,},{5,0,4,2,1,3,7,6,},{5,0,4,2,1,6,7,3,},{5,0,4,2,1,7,3,6,},
		{5,0,4,2,3,1,7,6,},{5,0,4,2,3,6,7,1,},{5,0,4,2,3,7,1,6,},{5,0,4,2,6,1,7,3,},{5,0,4,2,6,3,7,1,},{5,0,4,2,6,7,1,3,},{5,0,4,2,6,7,3,1,},{5,0,4,2,7,1,3,6,},{5,0,4,2,7,3,1,6,},{5,0,4,2,7,6,1,3,},
		{5,0,4,2,7,6,3,1,},{5,0,4,6,1,2,7,3,},{5,0,4,6,1,3,7,2,},{5,0,4,6,1,7,2,3,},{5,0,4,6,1,7,3,2,},{5,0,4,6,2,1,7,3,},{5,0,4,6,2,3,7,1,},{5,0,4,6,2,7,1,3,},{5,0,4,6,2,7,3,1,},{5,0,4,6,3,1,7,2,},
		{5,0,4,6,3,2,7,1,},{5,0,4,6,3,7,1,2,},{5,0,4,6,3,7,2,1,},{5,0,4,6,7,1,2,3,},{5,0,4,6,7,1,3,2,},{5,0,4,6,7,2,1,3,},{5,0,4,6,7,2,3,1,},{5,0,4,6,7,3,1,2,},{5,0,4,6,7,3,2,1,},{5,0,4,7,1,2,3,6,},
		{5,0,4,7,1,3,2,6,},{5,0,4,7,1,6,2,3,},{5,0,4,7,1,6,3,2,},{5,0,4,7,2,1,3,6,},{5,0,4,7,2,3,1,6,},{5,0,4,7,2,6,1,3,},{5,0,4,7,2,6,3,1,},{5,0,4,7,3,1,2,6,},{5,0,4,7,3,2,1,6,},{5,0,4,7,3,6,1,2,},
		{5,0,4,7,3,6,2,1,},{5,0,4,7,6,1,2,3,},{5,0,4,7,6,1,3,2,},{5,0,4,7,6,2,1,3,},{5,0,4,7,6,2,3,1,},{5,0,4,7,6,3,1,2,},{5,0,4,7,6,3,2,1,},{5,0,6,1,2,3,7,4,},{5,0,6,1,2,4,7,3,},{5,0,6,1,2,7,3,4,},
		{5,0,6,1,2,7,4,3,},{5,0,6,1,3,2,7,4,},{5,0,6,1,3,4,7,2,},{5,0,6,1,3,7,2,4,},{5,0,6,1,3,7,4,2,},{5,0,6,1,7,2,3,4,},{5,0,6,1,7,2,4,3,},{5,0,6,1,7,3,2,4,},{5,0,6,1,7,3,4,2,},{5,0,6,1,7,4,2,3,},
		{5,0,6,1,7,4,3,2,},{5,0,6,2,1,3,7,4,},{5,0,6,2,1,4,7,3,},{5,0,6,2,1,7,3,4,},{5,0,6,2,1,7,4,3,},{5,0,6,2,3,1,7,4,},{5,0,6,2,3,4,7,1,},{5,0,6,2,3,7,1,4,},{5,0,6,2,3,7,4,1,},{5,0,6,2,7,1,3,4,},
		{5,0,6,2,7,1,4,3,},{5,0,6,2,7,3,1,4,},{5,0,6,2,7,3,4,1,},{5,0,6,2,7,4,1,3,},{5,0,6,2,7,4,3,1,},{5,0,6,4,1,2,7,3,},{5,0,6,4,1,3,7,2,},{5,0,6,4,1,7,2,3,},{5,0,6,4,1,7,3,2,},{5,0,6,4,2,1,7,3,},
		{5,0,6,4,2,3,7,1,},{5,0,6,4,2,7,1,3,},{5,0,6,4,2,7,3,1,},{5,0,6,4,3,1,7,2,},{5,0,6,4,3,2,7,1,},{5,0,6,4,3,7,1,2,},{5,0,6,4,3,7,2,1,},{5,0,6,4,7,1,2,3,},{5,0,6,4,7,1,3,2,},{5,0,6,4,7,2,1,3,},
		{5,0,6,4,7,2,3,1,},{5,0,6,4,7,3,1,2,},{5,0,6,4,7,3,2,1,},{5,0,6,7,1,2,3,4,},{5,0,6,7,1,2,4,3,},{5,0,6,7,1,3,2,4,},{5,0,6,7,1,3,4,2,},{5,0,6,7,1,4,2,3,},{5,0,6,7,1,4,3,2,},{5,0,6,7,2,1,3,4,},
		{5,0,6,7,2,1,4,3,},{5,0,6,7,2,3,1,4,},{5,0,6,7,2,3,4,1,},{5,0,6,7,2,4,1,3,},{5,0,6,7,2,4,3,1,},{5,0,6,7,3,1,2,4,},{5,0,6,7,3,1,4,2,},{5,0,6,7,3,2,1,4,},{5,0,6,7,3,2,4,1,},{5,0,6,7,3,4,1,2,},
		{5,0,6,7,3,4,2,1,},{5,0,7,1,2,3,4,6,},{5,0,7,1,2,4,3,6,},{5,0,7,1,2,6,3,4,},{5,0,7,1,2,6,4,3,},{5,0,7,1,3,2,4,6,},{5,0,7,1,3,4,2,6,},{5,0,7,1,3,6,2,4,},{5,0,7,1,3,6,4,2,},{5,0,7,1,6,2,3,4,},
		{5,0,7,1,6,2,4,3,},{5,0,7,1,6,3,2,4,},{5,0,7,1,6,3,4,2,},{5,0,7,1,6,4,2,3,},{5,0,7,1,6,4,3,2,},{5,0,7,2,1,3,4,6,},{5,0,7,2,1,4,3,6,},{5,0,7,2,1,6,3,4,},{5,0,7,2,1,6,4,3,},{5,0,7,2,3,1,4,6,},
		{5,0,7,2,3,4,1,6,},{5,0,7,2,3,6,1,4,},{5,0,7,2,3,6,4,1,},{5,0,7,2,6,1,3,4,},{5,0,7,2,6,1,4,3,},{5,0,7,2,6,3,1,4,},{5,0,7,2,6,3,4,1,},{5,0,7,2,6,4,1,3,},{5,0,7,2,6,4,3,1,},{5,0,7,4,1,2,3,6,},
		{5,0,7,4,1,3,2,6,},{5,0,7,4,1,6,2,3,},{5,0,7,4,1,6,3,2,},{5,0,7,4,2,1,3,6,},{5,0,7,4,2,3,1,6,},{5,0,7,4,2,6,1,3,},{5,0,7,4,2,6,3,1,},{5,0,7,4,3,1,2,6,},{5,0,7,4,3,2,1,6,},{5,0,7,4,3,6,1,2,},
		{5,0,7,4,3,6,2,1,},{5,0,7,4,6,1,2,3,},{5,0,7,4,6,1,3,2,},{5,0,7,4,6,2,1,3,},{5,0,7,4,6,2,3,1,},{5,0,7,4,6,3,1,2,},{5,0,7,4,6,3,2,1,},{5,0,7,6,1,2,3,4,},{5,0,7,6,1,2,4,3,},{5,0,7,6,1,3,2,4,},
		{5,0,7,6,1,3,4,2,},{5,0,7,6,1,4,2,3,},{5,0,7,6,1,4,3,2,},{5,0,7,6,2,1,3,4,},{5,0,7,6,2,1,4,3,},{5,0,7,6,2,3,1,4,},{5,0,7,6,2,3,4,1,},{5,0,7,6,2,4,1,3,},{5,0,7,6,2,4,3,1,},{5,0,7,6,3,1,2,4,},
		{5,0,7,6,3,1,4,2,},{5,0,7,6,3,2,1,4,},{5,0,7,6,3,2,4,1,},{5,0,7,6,3,4,1,2,},{5,0,7,6,3,4,2,1,},{5,2,0,1,3,4,7,6,},{5,2,0,1,3,6,7,4,},{5,2,0,1,3,7,4,6,},{5,2,0,1,6,3,7,4,},{5,2,0,1,6,4,7,3,},
		{5,2,0,1,6,7,3,4,},{5,2,0,1,6,7,4,3,},{5,2,0,1,7,3,4,6,},{5,2,0,1,7,4,3,6,},{5,2,0,1,7,6,3,4,},{5,2,0,1,7,6,4,3,},{5,2,0,4,1,3,7,6,},{5,2,0,4,1,6,7,3,},{5,2,0,4,1,7,3,6,},{5,2,0,4,3,1,7,6,},
		{5,2,0,4,3,6,7,1,},{5,2,0,4,3,7,1,6,},{5,2,0,4,6,1,7,3,},{5,2,0,4,6,3,7,1,},{5,2,0,4,6,7,1,3,},{5,2,0,4,6,7,3,1,},{5,2,0,4,7,1,3,6,},{5,2,0,4,7,3,1,6,},{5,2,0,4,7,6,1,3,},{5,2,0,4,7,6,3,1,},
		{5,2,0,6,1,3,7,4,},{5,2,0,6,1,4,7,3,},{5,2,0,6,1,7,3,4,},{5,2,0,6,1,7,4,3,},{5,2,0,6,3,1,7,4,},{5,2,0,6,3,4,7,1,},{5,2,0,6,3,7,1,4,},{5,2,0,6,3,7,4,1,},{5,2,0,6,7,1,3,4,},{5,2,0,6,7,1,4,3,},
		{5,2,0,6,7,3,1,4,},{5,2,0,6,7,3,4,1,},{5,2,0,6,7,4,1,3,},{5,2,0,6,7,4,3,1,},{5,2,0,7,1,3,4,6,},{5,2,0,7,1,4,3,6,},{5,2,0,7,1,6,3,4,},{5,2,0,7,1,6,4,3,},{5,2,0,7,3,1,4,6,},{5,2,0,7,3,4,1,6,},
		{5,2,0,7,3,6,1,4,},{5,2,0,7,3,6,4,1,},{5,2,0,7,6,1,3,4,},{5,2,0,7,6,1,4,3,},{5,2,0,7,6,3,1,4,},{5,2,0,7,6,3,4,1,},{5,2,0,7,6,4,1,3,},{5,2,0,7,6,4,3,1,},{5,2,1,0,3,4,7,6,},{5,2,1,0,3,6,7,4,},
		{5,2,1,0,3,7,4,6,},{5,2,1,0,6,3,7,4,},{5,2,1,0,6,4,7,3,},{5,2,1,0,6,7,3,4,},{5,2,1,0,6,7,4,3,},{5,2,1,0,7,3,4,6,},{5,2,1,0,7,4,3,6,},{5,2,1,0,7,6,3,4,},{5,2,1,0,7,6,4,3,},{5,2,1,4,0,3,7,6,},
		{5,2,1,4,0,6,7,3,},{5,2,1,4,0,7,3,6,},{5,2,1,4,3,0,7,6,},{5,2,1,4,3,6,7,0,},{5,2,1,4,3,7,0,6,},{5,2,1,4,6,0,7,3,},{5,2,1,4,6,3,7,0,},{5,2,1,4,6,7,0,3,},{5,2,1,4,6,7,3,0,},{5,2,1,4,7,0,3,6,},
		{5,2,1,4,7,3,0,6,},{5,2,1,4,7,6,0,3,},{5,2,1,4,7,6,3,0,},{5,2,1,6,0,3,7,4,},{5,2,1,6,0,4,7,3,},{5,2,1,6,0,7,3,4,},{5,2,1,6,0,7,4,3,},{5,2,1,6,3,0,7,4,},{5,2,1,6,3,4,7,0,},{5,2,1,6,3,7,0,4,},
		{5,2,1,6,3,7,4,0,},{5,2,1,6,7,0,3,4,},{5,2,1,6,7,0,4,3,},{5,2,1,6,7,3,0,4,},{5,2,1,6,7,3,4,0,},{5,2,1,6,7,4,0,3,},{5,2,1,6,7,4,3,0,},{5,2,1,7,0,3,4,6,},{5,2,1,7,0,4,3,6,},{5,2,1,7,0,6,3,4,},
		{5,2,1,7,0,6,4,3,},{5,2,1,7,3,0,4,6,},{5,2,1,7,3,4,0,6,},{5,2,1,7,3,6,0,4,},{5,2,1,7,3,6,4,0,},{5,2,1,7,6,0,3,4,},{5,2,1,7,6,0,4,3,},{5,2,1,7,6,3,0,4,},{5,2,1,7,6,3,4,0,},{5,2,1,7,6,4,0,3,},
		{5,2,1,7,6,4,3,0,},{5,2,3,0,1,4,7,6,},{5,2,3,0,1,6,7,4,},{5,2,3,0,1,7,4,6,},{5,2,3,0,6,1,7,4,},{5,2,3,0,6,4,7,1,},{5,2,3,0,6,7,1,4,},{5,2,3,0,6,7,4,1,},{5,2,3,0,7,1,4,6,},{5,2,3,0,7,4,1,6,},
		{5,2,3,0,7,6,1,4,},{5,2,3,0,7,6,4,1,},{5,2,3,1,0,4,7,6,},{5,2,3,1,0,6,7,4,},{5,2,3,1,0,7,4,6,},{5,2,3,1,6,0,7,4,},{5,2,3,1,6,4,7,0,},{5,2,3,1,6,7,0,4,},{5,2,3,1,6,7,4,0,},{5,2,3,1,7,0,4,6,},
		{5,2,3,1,7,4,0,6,},{5,2,3,1,7,6,0,4,},{5,2,3,1,7,6,4,0,},{5,2,3,4,0,1,7,6,},{5,2,3,4,0,6,7,1,},{5,2,3,4,0,7,1,6,},{5,2,3,4,1,0,7,6,},{5,2,3,4,1,6,7,0,},{5,2,3,4,1,7,0,6,},{5,2,3,4,6,0,7,1,},
		{5,2,3,4,6,1,7,0,},{5,2,3,4,6,7,0,1,},{5,2,3,4,6,7,1,0,},{5,2,3,4,7,0,1,6,},{5,2,3,4,7,1,0,6,},{5,2,3,4,7,6,0,1,},{5,2,3,4,7,6,1,0,},{5,2,3,6,0,1,7,4,},{5,2,3,6,0,4,7,1,},{5,2,3,6,0,7,1,4,},
		{5,2,3,6,0,7,4,1,},{5,2,3,6,1,0,7,4,},{5,2,3,6,1,4,7,0,},{5,2,3,6,1,7,0,4,},{5,2,3,6,1,7,4,0,},{5,2,3,6,7,0,1,4,},{5,2,3,6,7,0,4,1,},{5,2,3,6,7,1,0,4,},{5,2,3,6,7,1,4,0,},{5,2,3,6,7,4,0,1,},
		{5,2,3,6,7,4,1,0,},{5,2,3,7,0,1,4,6,},{5,2,3,7,0,4,1,6,},{5,2,3,7,0,6,1,4,},{5,2,3,7,0,6,4,1,},{5,2,3,7,1,0,4,6,},{5,2,3,7,1,4,0,6,},{5,2,3,7,1,6,0,4,},{5,2,3,7,1,6,4,0,},{5,2,3,7,6,0,1,4,},
		{5,2,3,7,6,0,4,1,},{5,2,3,7,6,1,0,4,},{5,2,3,7,6,1,4,0,},{5,2,3,7,6,4,0,1,},{5,2,3,7,6,4,1,0,},{5,2,4,0,1,3,7,6,},{5,2,4,0,1,6,7,3,},{5,2,4,0,1,7,3,6,},{5,2,4,0,3,1,7,6,},{5,2,4,0,3,6,7,1,},
		{5,2,4,0,3,7,1,6,},{5,2,4,0,6,1,7,3,},{5,2,4,0,6,3,7,1,},{5,2,4,0,6,7,1,3,},{5,2,4,0,6,7,3,1,},{5,2,4,0,7,1,3,6,},{5,2,4,0,7,3,1,6,},{5,2,4,0,7,6,1,3,},{5,2,4,0,7,6,3,1,},{5,2,4,1,0,3,7,6,},
		{5,2,4,1,0,6,7,3,},{5,2,4,1,0,7,3,6,},{5,2,4,1,3,0,7,6,},{5,2,4,1,3,6,7,0,},{5,2,4,1,3,7,0,6,},{5,2,4,1,6,0,7,3,},{5,2,4,1,6,3,7,0,},{5,2,4,1,6,7,0,3,},{5,2,4,1,6,7,3,0,},{5,2,4,1,7,0,3,6,},
		{5,2,4,1,7,3,0,6,},{5,2,4,1,7,6,0,3,},{5,2,4,1,7,6,3,0,},{5,2,4,6,0,1,7,3,},{5,2,4,6,0,3,7,1,},{5,2,4,6,0,7,1,3,},{5,2,4,6,0,7,3,1,},{5,2,4,6,1,0,7,3,},{5,2,4,6,1,3,7,0,},{5,2,4,6,1,7,0,3,},
		{5,2,4,6,1,7,3,0,},{5,2,4,6,3,0,7,1,},{5,2,4,6,3,1,7,0,},{5,2,4,6,3,7,0,1,},{5,2,4,6,3,7,1,0,},{5,2,4,6,7,0,1,3,},{5,2,4,6,7,0,3,1,},{5,2,4,6,7,1,0,3,},{5,2,4,6,7,1,3,0,},{5,2,4,6,7,3,0,1,},
		{5,2,4,6,7,3,1,0,},{5,2,4,7,0,1,3,6,},{5,2,4,7,0,3,1,6,},{5,2,4,7,0,6,1,3,},{5,2,4,7,0,6,3,1,},{5,2,4,7,1,0,3,6,},{5,2,4,7,1,3,0,6,},{5,2,4,7,1,6,0,3,},{5,2,4,7,1,6,3,0,},{5,2,4,7,3,0,1,6,},
		{5,2,4,7,3,1,0,6,},{5,2,4,7,3,6,0,1,},{5,2,4,7,3,6,1,0,},{5,2,4,7,6,0,1,3,},{5,2,4,7,6,0,3,1,},{5,2,4,7,6,1,0,3,},{5,2,4,7,6,1,3,0,},{5,2,4,7,6,3,0,1,},{5,2,4,7,6,3,1,0,},{5,2,6,0,1,3,7,4,},
		{5,2,6,0,1,4,7,3,},{5,2,6,0,1,7,3,4,},{5,2,6,0,1,7,4,3,},{5,2,6,0,3,1,7,4,},{5,2,6,0,3,4,7,1,},{5,2,6,0,3,7,1,4,},{5,2,6,0,3,7,4,1,},{5,2,6,0,7,1,3,4,},{5,2,6,0,7,1,4,3,},{5,2,6,0,7,3,1,4,},
		{5,2,6,0,7,3,4,1,},{5,2,6,0,7,4,1,3,},{5,2,6,0,7,4,3,1,},{5,2,6,1,0,3,7,4,},{5,2,6,1,0,4,7,3,},{5,2,6,1,0,7,3,4,},{5,2,6,1,0,7,4,3,},{5,2,6,1,3,0,7,4,},{5,2,6,1,3,4,7,0,},{5,2,6,1,3,7,0,4,},
		{5,2,6,1,3,7,4,0,},{5,2,6,1,7,0,3,4,},{5,2,6,1,7,0,4,3,},{5,2,6,1,7,3,0,4,},{5,2,6,1,7,3,4,0,},{5,2,6,1,7,4,0,3,},{5,2,6,1,7,4,3,0,},{5,2,6,4,0,1,7,3,},{5,2,6,4,0,3,7,1,},{5,2,6,4,0,7,1,3,},
		{5,2,6,4,0,7,3,1,},{5,2,6,4,1,0,7,3,},{5,2,6,4,1,3,7,0,},{5,2,6,4,1,7,0,3,},{5,2,6,4,1,7,3,0,},{5,2,6,4,3,0,7,1,},{5,2,6,4,3,1,7,0,},{5,2,6,4,3,7,0,1,},{5,2,6,4,3,7,1,0,},{5,2,6,4,7,0,1,3,},
		{5,2,6,4,7,0,3,1,},{5,2,6,4,7,1,0,3,},{5,2,6,4,7,1,3,0,},{5,2,6,4,7,3,0,1,},{5,2,6,4,7,3,1,0,},{5,2,6,7,0,1,3,4,},{5,2,6,7,0,1,4,3,},{5,2,6,7,0,3,1,4,},{5,2,6,7,0,3,4,1,},{5,2,6,7,0,4,1,3,},
		{5,2,6,7,0,4,3,1,},{5,2,6,7,1,0,3,4,},{5,2,6,7,1,0,4,3,},{5,2,6,7,1,3,0,4,},{5,2,6,7,1,3,4,0,},{5,2,6,7,1,4,0,3,},{5,2,6,7,1,4,3,0,},{5,2,6,7,3,0,1,4,},{5,2,6,7,3,0,4,1,},{5,2,6,7,3,1,0,4,},
		{5,2,6,7,3,1,4,0,},{5,2,6,7,3,4,0,1,},{5,2,6,7,3,4,1,0,},{5,2,7,0,1,3,4,6,},{5,2,7,0,1,4,3,6,},{5,2,7,0,1,6,3,4,},{5,2,7,0,1,6,4,3,},{5,2,7,0,3,1,4,6,},{5,2,7,0,3,4,1,6,},{5,2,7,0,3,6,1,4,},
		{5,2,7,0,3,6,4,1,},{5,2,7,0,6,1,3,4,},{5,2,7,0,6,1,4,3,},{5,2,7,0,6,3,1,4,},{5,2,7,0,6,3,4,1,},{5,2,7,0,6,4,1,3,},{5,2,7,0,6,4,3,1,},{5,2,7,1,0,3,4,6,},{5,2,7,1,0,4,3,6,},{5,2,7,1,0,6,3,4,},
		{5,2,7,1,0,6,4,3,},{5,2,7,1,3,0,4,6,},{5,2,7,1,3,4,0,6,},{5,2,7,1,3,6,0,4,},{5,2,7,1,3,6,4,0,},{5,2,7,1,6,0,3,4,},{5,2,7,1,6,0,4,3,},{5,2,7,1,6,3,0,4,},{5,2,7,1,6,3,4,0,},{5,2,7,1,6,4,0,3,},
		{5,2,7,1,6,4,3,0,},{5,2,7,4,0,1,3,6,},{5,2,7,4,0,3,1,6,},{5,2,7,4,0,6,1,3,},{5,2,7,4,0,6,3,1,},{5,2,7,4,1,0,3,6,},{5,2,7,4,1,3,0,6,},{5,2,7,4,1,6,0,3,},{5,2,7,4,1,6,3,0,},{5,2,7,4,3,0,1,6,},
		{5,2,7,4,3,1,0,6,},{5,2,7,4,3,6,0,1,},{5,2,7,4,3,6,1,0,},{5,2,7,4,6,0,1,3,},{5,2,7,4,6,0,3,1,},{5,2,7,4,6,1,0,3,},{5,2,7,4,6,1,3,0,},{5,2,7,4,6,3,0,1,},{5,2,7,4,6,3,1,0,},{5,2,7,6,0,1,3,4,},
		{5,2,7,6,0,1,4,3,},{5,2,7,6,0,3,1,4,},{5,2,7,6,0,3,4,1,},{5,2,7,6,0,4,1,3,},{5,2,7,6,0,4,3,1,},{5,2,7,6,1,0,3,4,},{5,2,7,6,1,0,4,3,},{5,2,7,6,1,3,0,4,},{5,2,7,6,1,3,4,0,},{5,2,7,6,1,4,0,3,},
		{5,2,7,6,1,4,3,0,},{5,2,7,6,3,0,1,4,},{5,2,7,6,3,0,4,1,},{5,2,7,6,3,1,0,4,},{5,2,7,6,3,1,4,0,},{5,2,7,6,3,4,0,1,},{5,2,7,6,3,4,1,0,},{5,3,0,1,2,4,7,6,},{5,3,0,1,2,6,7,4,},{5,3,0,1,2,7,4,6,},
		{5,3,0,1,6,2,7,4,},{5,3,0,1,6,4,7,2,},{5,3,0,1,6,7,2,4,},{5,3,0,1,6,7,4,2,},{5,3,0,1,7,2,4,6,},{5,3,0,1,7,4,2,6,},{5,3,0,1,7,6,2,4,},{5,3,0,1,7,6,4,2,},{5,3,0,2,1,4,7,6,},{5,3,0,2,1,6,7,4,},
		{5,3,0,2,1,7,4,6,},{5,3,0,2,6,1,7,4,},{5,3,0,2,6,4,7,1,},{5,3,0,2,6,7,1,4,},{5,3,0,2,6,7,4,1,},{5,3,0,2,7,1,4,6,},{5,3,0,2,7,4,1,6,},{5,3,0,2,7,6,1,4,},{5,3,0,2,7,6,4,1,},{5,3,0,4,1,2,7,6,},
		{5,3,0,4,1,6,7,2,},{5,3,0,4,1,7,2,6,},{5,3,0,4,2,1,7,6,},{5,3,0,4,2,6,7,1,},{5,3,0,4,2,7,1,6,},{5,3,0,4,6,1,7,2,},{5,3,0,4,6,2,7,1,},{5,3,0,4,6,7,1,2,},{5,3,0,4,6,7,2,1,},{5,3,0,4,7,1,2,6,},
		{5,3,0,4,7,2,1,6,},{5,3,0,4,7,6,1,2,},{5,3,0,4,7,6,2,1,},{5,3,0,6,1,2,7,4,},{5,3,0,6,1,4,7,2,},{5,3,0,6,1,7,2,4,},{5,3,0,6,1,7,4,2,},{5,3,0,6,2,1,7,4,},{5,3,0,6,2,4,7,1,},{5,3,0,6,2,7,1,4,},
		{5,3,0,6,2,7,4,1,},{5,3,0,6,7,1,2,4,},{5,3,0,6,7,1,4,2,},{5,3,0,6,7,2,1,4,},{5,3,0,6,7,2,4,1,},{5,3,0,6,7,4,1,2,},{5,3,0,6,7,4,2,1,},{5,3,0,7,1,2,4,6,},{5,3,0,7,1,4,2,6,},{5,3,0,7,1,6,2,4,},
		{5,3,0,7,1,6,4,2,},{5,3,0,7,2,1,4,6,},{5,3,0,7,2,4,1,6,},{5,3,0,7,2,6,1,4,},{5,3,0,7,2,6,4,1,},{5,3,0,7,6,1,2,4,},{5,3,0,7,6,1,4,2,},{5,3,0,7,6,2,1,4,},{5,3,0,7,6,2,4,1,},{5,3,0,7,6,4,1,2,},
		{5,3,0,7,6,4,2,1,},{5,3,1,0,2,4,7,6,},{5,3,1,0,2,6,7,4,},{5,3,1,0,2,7,4,6,},{5,3,1,0,6,2,7,4,},{5,3,1,0,6,4,7,2,},{5,3,1,0,6,7,2,4,},{5,3,1,0,6,7,4,2,},{5,3,1,0,7,2,4,6,},{5,3,1,0,7,4,2,6,},
		{5,3,1,0,7,6,2,4,},{5,3,1,0,7,6,4,2,},{5,3,1,2,0,4,7,6,},{5,3,1,2,0,6,7,4,},{5,3,1,2,0,7,4,6,},{5,3,1,2,6,0,7,4,},{5,3,1,2,6,4,7,0,},{5,3,1,2,6,7,0,4,},{5,3,1,2,6,7,4,0,},{5,3,1,2,7,0,4,6,},
		{5,3,1,2,7,4,0,6,},{5,3,1,2,7,6,0,4,},{5,3,1,2,7,6,4,0,},{5,3,1,4,0,2,7,6,},{5,3,1,4,0,6,7,2,},{5,3,1,4,0,7,2,6,},{5,3,1,4,2,0,7,6,},{5,3,1,4,2,6,7,0,},{5,3,1,4,2,7,0,6,},{5,3,1,4,6,0,7,2,},
		{5,3,1,4,6,2,7,0,},{5,3,1,4,6,7,0,2,},{5,3,1,4,6,7,2,0,},{5,3,1,4,7,0,2,6,},{5,3,1,4,7,2,0,6,},{5,3,1,4,7,6,0,2,},{5,3,1,4,7,6,2,0,},{5,3,1,6,0,2,7,4,},{5,3,1,6,0,4,7,2,},{5,3,1,6,0,7,2,4,},
		{5,3,1,6,0,7,4,2,},{5,3,1,6,2,0,7,4,},{5,3,1,6,2,4,7,0,},{5,3,1,6,2,7,0,4,},{5,3,1,6,2,7,4,0,},{5,3,1,6,7,0,2,4,},{5,3,1,6,7,0,4,2,},{5,3,1,6,7,2,0,4,},{5,3,1,6,7,2,4,0,},{5,3,1,6,7,4,0,2,},
		{5,3,1,6,7,4,2,0,},{5,3,1,7,0,2,4,6,},{5,3,1,7,0,4,2,6,},{5,3,1,7,0,6,2,4,},{5,3,1,7,0,6,4,2,},{5,3,1,7,2,0,4,6,},{5,3,1,7,2,4,0,6,},{5,3,1,7,2,6,0,4,},{5,3,1,7,2,6,4,0,},{5,3,1,7,6,0,2,4,},
		{5,3,1,7,6,0,4,2,},{5,3,1,7,6,2,0,4,},{5,3,1,7,6,2,4,0,},{5,3,1,7,6,4,0,2,},{5,3,1,7,6,4,2,0,},{5,3,4,0,1,2,7,6,},{5,3,4,0,1,6,7,2,},{5,3,4,0,1,7,2,6,},{5,3,4,0,2,1,7,6,},{5,3,4,0,2,6,7,1,},
		{5,3,4,0,2,7,1,6,},{5,3,4,0,6,1,7,2,},{5,3,4,0,6,2,7,1,},{5,3,4,0,6,7,1,2,},{5,3,4,0,6,7,2,1,},{5,3,4,0,7,1,2,6,},{5,3,4,0,7,2,1,6,},{5,3,4,0,7,6,1,2,},{5,3,4,0,7,6,2,1,},{5,3,4,1,0,2,7,6,},
		{5,3,4,1,0,6,7,2,},{5,3,4,1,0,7,2,6,},{5,3,4,1,2,0,7,6,},{5,3,4,1,2,6,7,0,},{5,3,4,1,2,7,0,6,},{5,3,4,1,6,0,7,2,},{5,3,4,1,6,2,7,0,},{5,3,4,1,6,7,0,2,},{5,3,4,1,6,7,2,0,},{5,3,4,1,7,0,2,6,},
		{5,3,4,1,7,2,0,6,},{5,3,4,1,7,6,0,2,},{5,3,4,1,7,6,2,0,},{5,3,4,2,0,1,7,6,},{5,3,4,2,0,6,7,1,},{5,3,4,2,0,7,1,6,},{5,3,4,2,1,0,7,6,},{5,3,4,2,1,6,7,0,},{5,3,4,2,1,7,0,6,},{5,3,4,2,6,0,7,1,},
		{5,3,4,2,6,1,7,0,},{5,3,4,2,6,7,0,1,},{5,3,4,2,6,7,1,0,},{5,3,4,2,7,0,1,6,},{5,3,4,2,7,1,0,6,},{5,3,4,2,7,6,0,1,},{5,3,4,2,7,6,1,0,},{5,3,4,6,0,1,7,2,},{5,3,4,6,0,2,7,1,},{5,3,4,6,0,7,1,2,},
		{5,3,4,6,0,7,2,1,},{5,3,4,6,1,0,7,2,},{5,3,4,6,1,2,7,0,},{5,3,4,6,1,7,0,2,},{5,3,4,6,1,7,2,0,},{5,3,4,6,2,0,7,1,},{5,3,4,6,2,1,7,0,},{5,3,4,6,2,7,0,1,},{5,3,4,6,2,7,1,0,},{5,3,4,6,7,0,1,2,},
		{5,3,4,6,7,0,2,1,},{5,3,4,6,7,1,0,2,},{5,3,4,6,7,1,2,0,},{5,3,4,6,7,2,0,1,},{5,3,4,6,7,2,1,0,},{5,3,4,7,0,1,2,6,},{5,3,4,7,0,2,1,6,},{5,3,4,7,0,6,1,2,},{5,3,4,7,0,6,2,1,},{5,3,4,7,1,0,2,6,},
		{5,3,4,7,1,2,0,6,},{5,3,4,7,1,6,0,2,},{5,3,4,7,1,6,2,0,},{5,3,4,7,2,0,1,6,},{5,3,4,7,2,1,0,6,},{5,3,4,7,2,6,0,1,},{5,3,4,7,2,6,1,0,},{5,3,4,7,6,0,1,2,},{5,3,4,7,6,0,2,1,},{5,3,4,7,6,1,0,2,},
		{5,3,4,7,6,1,2,0,},{5,3,4,7,6,2,0,1,},{5,3,4,7,6,2,1,0,},{5,3,6,0,1,2,7,4,},{5,3,6,0,1,4,7,2,},{5,3,6,0,1,7,2,4,},{5,3,6,0,1,7,4,2,},{5,3,6,0,2,1,7,4,},{5,3,6,0,2,4,7,1,},{5,3,6,0,2,7,1,4,},
		{5,3,6,0,2,7,4,1,},{5,3,6,0,7,1,2,4,},{5,3,6,0,7,1,4,2,},{5,3,6,0,7,2,1,4,},{5,3,6,0,7,2,4,1,},{5,3,6,0,7,4,1,2,},{5,3,6,0,7,4,2,1,},{5,3,6,1,0,2,7,4,},{5,3,6,1,0,4,7,2,},{5,3,6,1,0,7,2,4,},
		{5,3,6,1,0,7,4,2,},{5,3,6,1,2,0,7,4,},{5,3,6,1,2,4,7,0,},{5,3,6,1,2,7,0,4,},{5,3,6,1,2,7,4,0,},{5,3,6,1,7,0,2,4,},{5,3,6,1,7,0,4,2,},{5,3,6,1,7,2,0,4,},{5,3,6,1,7,2,4,0,},{5,3,6,1,7,4,0,2,},
		{5,3,6,1,7,4,2,0,},{5,3,6,2,0,1,7,4,},{5,3,6,2,0,4,7,1,},{5,3,6,2,0,7,1,4,},{5,3,6,2,0,7,4,1,},{5,3,6,2,1,0,7,4,},{5,3,6,2,1,4,7,0,},{5,3,6,2,1,7,0,4,},{5,3,6,2,1,7,4,0,},{5,3,6,2,7,0,1,4,},
		{5,3,6,2,7,0,4,1,},{5,3,6,2,7,1,0,4,},{5,3,6,2,7,1,4,0,},{5,3,6,2,7,4,0,1,},{5,3,6,2,7,4,1,0,},{5,3,6,4,0,1,7,2,},{5,3,6,4,0,2,7,1,},{5,3,6,4,0,7,1,2,},{5,3,6,4,0,7,2,1,},{5,3,6,4,1,0,7,2,},
		{5,3,6,4,1,2,7,0,},{5,3,6,4,1,7,0,2,},{5,3,6,4,1,7,2,0,},{5,3,6,4,2,0,7,1,},{5,3,6,4,2,1,7,0,},{5,3,6,4,2,7,0,1,},{5,3,6,4,2,7,1,0,},{5,3,6,4,7,0,1,2,},{5,3,6,4,7,0,2,1,},{5,3,6,4,7,1,0,2,},
		{5,3,6,4,7,1,2,0,},{5,3,6,4,7,2,0,1,},{5,3,6,4,7,2,1,0,},{5,3,6,7,0,1,2,4,},{5,3,6,7,0,1,4,2,},{5,3,6,7,0,2,1,4,},{5,3,6,7,0,2,4,1,},{5,3,6,7,0,4,1,2,},{5,3,6,7,0,4,2,1,},{5,3,6,7,1,0,2,4,},
		{5,3,6,7,1,0,4,2,},{5,3,6,7,1,2,0,4,},{5,3,6,7,1,2,4,0,},{5,3,6,7,1,4,0,2,},{5,3,6,7,1,4,2,0,},{5,3,6,7,2,0,1,4,},{5,3,6,7,2,0,4,1,},{5,3,6,7,2,1,0,4,},{5,3,6,7,2,1,4,0,},{5,3,6,7,2,4,0,1,},
		{5,3,6,7,2,4,1,0,},{5,3,7,0,1,2,4,6,},{5,3,7,0,1,4,2,6,},{5,3,7,0,1,6,2,4,},{5,3,7,0,1,6,4,2,},{5,3,7,0,2,1,4,6,},{5,3,7,0,2,4,1,6,},{5,3,7,0,2,6,1,4,},{5,3,7,0,2,6,4,1,},{5,3,7,0,6,1,2,4,},
		{5,3,7,0,6,1,4,2,},{5,3,7,0,6,2,1,4,},{5,3,7,0,6,2,4,1,},{5,3,7,0,6,4,1,2,},{5,3,7,0,6,4,2,1,},{5,3,7,1,0,2,4,6,},{5,3,7,1,0,4,2,6,},{5,3,7,1,0,6,2,4,},{5,3,7,1,0,6,4,2,},{5,3,7,1,2,0,4,6,},
		{5,3,7,1,2,4,0,6,},{5,3,7,1,2,6,0,4,},{5,3,7,1,2,6,4,0,},{5,3,7,1,6,0,2,4,},{5,3,7,1,6,0,4,2,},{5,3,7,1,6,2,0,4,},{5,3,7,1,6,2,4,0,},{5,3,7,1,6,4,0,2,},{5,3,7,1,6,4,2,0,},{5,3,7,2,0,1,4,6,},
		{5,3,7,2,0,4,1,6,},{5,3,7,2,0,6,1,4,},{5,3,7,2,0,6,4,1,},{5,3,7,2,1,0,4,6,},{5,3,7,2,1,4,0,6,},{5,3,7,2,1,6,0,4,},{5,3,7,2,1,6,4,0,},{5,3,7,2,6,0,1,4,},{5,3,7,2,6,0,4,1,},{5,3,7,2,6,1,0,4,},
		{5,3,7,2,6,1,4,0,},{5,3,7,2,6,4,0,1,},{5,3,7,2,6,4,1,0,},{5,3,7,4,0,1,2,6,},{5,3,7,4,0,2,1,6,},{5,3,7,4,0,6,1,2,},{5,3,7,4,0,6,2,1,},{5,3,7,4,1,0,2,6,},{5,3,7,4,1,2,0,6,},{5,3,7,4,1,6,0,2,},
		{5,3,7,4,1,6,2,0,},{5,3,7,4,2,0,1,6,},{5,3,7,4,2,1,0,6,},{5,3,7,4,2,6,0,1,},{5,3,7,4,2,6,1,0,},{5,3,7,4,6,0,1,2,},{5,3,7,4,6,0,2,1,},{5,3,7,4,6,1,0,2,},{5,3,7,4,6,1,2,0,},{5,3,7,4,6,2,0,1,},
		{5,3,7,4,6,2,1,0,},{5,3,7,6,0,1,2,4,},{5,3,7,6,0,1,4,2,},{5,3,7,6,0,2,1,4,},{5,3,7,6,0,2,4,1,},{5,3,7,6,0,4,1,2,},{5,3,7,6,0,4,2,1,},{5,3,7,6,1,0,2,4,},{5,3,7,6,1,0,4,2,},{5,3,7,6,1,2,0,4,},
		{5,3,7,6,1,2,4,0,},{5,3,7,6,1,4,0,2,},{5,3,7,6,1,4,2,0,},{5,3,7,6,2,0,1,4,},{5,3,7,6,2,0,4,1,},{5,3,7,6,2,1,0,4,},{5,3,7,6,2,1,4,0,},{5,3,7,6,2,4,0,1,},{5,3,7,6,2,4,1,0,},{5,4,0,1,2,3,7,6,},
		{5,4,0,1,2,6,7,3,},{5,4,0,1,2,7,3,6,},{5,4,0,1,3,2,7,6,},{5,4,0,1,3,6,7,2,},{5,4,0,1,3,7,2,6,},{5,4,0,1,6,2,7,3,},{5,4,0,1,6,3,7,2,},{5,4,0,1,6,7,2,3,},{5,4,0,1,6,7,3,2,},{5,4,0,1,7,2,3,6,},
		{5,4,0,1,7,3,2,6,},{5,4,0,1,7,6,2,3,},{5,4,0,1,7,6,3,2,},{5,4,0,2,1,3,7,6,},{5,4,0,2,1,6,7,3,},{5,4,0,2,1,7,3,6,},{5,4,0,2,3,1,7,6,},{5,4,0,2,3,6,7,1,},{5,4,0,2,3,7,1,6,},{5,4,0,2,6,1,7,3,},
		{5,4,0,2,6,3,7,1,},{5,4,0,2,6,7,1,3,},{5,4,0,2,6,7,3,1,},{5,4,0,2,7,1,3,6,},{5,4,0,2,7,3,1,6,},{5,4,0,2,7,6,1,3,},{5,4,0,2,7,6,3,1,},{5,4,0,6,1,2,7,3,},{5,4,0,6,1,3,7,2,},{5,4,0,6,1,7,2,3,},
		{5,4,0,6,1,7,3,2,},{5,4,0,6,2,1,7,3,},{5,4,0,6,2,3,7,1,},{5,4,0,6,2,7,1,3,},{5,4,0,6,2,7,3,1,},{5,4,0,6,3,1,7,2,},{5,4,0,6,3,2,7,1,},{5,4,0,6,3,7,1,2,},{5,4,0,6,3,7,2,1,},{5,4,0,6,7,1,2,3,},
		{5,4,0,6,7,1,3,2,},{5,4,0,6,7,2,1,3,},{5,4,0,6,7,2,3,1,},{5,4,0,6,7,3,1,2,},{5,4,0,6,7,3,2,1,},{5,4,0,7,1,2,3,6,},{5,4,0,7,1,3,2,6,},{5,4,0,7,1,6,2,3,},{5,4,0,7,1,6,3,2,},{5,4,0,7,2,1,3,6,},
		{5,4,0,7,2,3,1,6,},{5,4,0,7,2,6,1,3,},{5,4,0,7,2,6,3,1,},{5,4,0,7,3,1,2,6,},{5,4,0,7,3,2,1,6,},{5,4,0,7,3,6,1,2,},{5,4,0,7,3,6,2,1,},{5,4,0,7,6,1,2,3,},{5,4,0,7,6,1,3,2,},{5,4,0,7,6,2,1,3,},
		{5,4,0,7,6,2,3,1,},{5,4,0,7,6,3,1,2,},{5,4,0,7,6,3,2,1,},{5,4,1,0,2,3,7,6,},{5,4,1,0,2,6,7,3,},{5,4,1,0,2,7,3,6,},{5,4,1,0,3,2,7,6,},{5,4,1,0,3,6,7,2,},{5,4,1,0,3,7,2,6,},{5,4,1,0,6,2,7,3,},
		{5,4,1,0,6,3,7,2,},{5,4,1,0,6,7,2,3,},{5,4,1,0,6,7,3,2,},{5,4,1,0,7,2,3,6,},{5,4,1,0,7,3,2,6,},{5,4,1,0,7,6,2,3,},{5,4,1,0,7,6,3,2,},{5,4,1,2,0,3,7,6,},{5,4,1,2,0,6,7,3,},{5,4,1,2,0,7,3,6,},
		{5,4,1,2,3,0,7,6,},{5,4,1,2,3,6,7,0,},{5,4,1,2,3,7,0,6,},{5,4,1,2,6,0,7,3,},{5,4,1,2,6,3,7,0,},{5,4,1,2,6,7,0,3,},{5,4,1,2,6,7,3,0,},{5,4,1,2,7,0,3,6,},{5,4,1,2,7,3,0,6,},{5,4,1,2,7,6,0,3,},
		{5,4,1,2,7,6,3,0,},{5,4,1,6,0,2,7,3,},{5,4,1,6,0,3,7,2,},{5,4,1,6,0,7,2,3,},{5,4,1,6,0,7,3,2,},{5,4,1,6,2,0,7,3,},{5,4,1,6,2,3,7,0,},{5,4,1,6,2,7,0,3,},{5,4,1,6,2,7,3,0,},{5,4,1,6,3,0,7,2,},
		{5,4,1,6,3,2,7,0,},{5,4,1,6,3,7,0,2,},{5,4,1,6,3,7,2,0,},{5,4,1,6,7,0,2,3,},{5,4,1,6,7,0,3,2,},{5,4,1,6,7,2,0,3,},{5,4,1,6,7,2,3,0,},{5,4,1,6,7,3,0,2,},{5,4,1,6,7,3,2,0,},{5,4,1,7,0,2,3,6,},
		{5,4,1,7,0,3,2,6,},{5,4,1,7,0,6,2,3,},{5,4,1,7,0,6,3,2,},{5,4,1,7,2,0,3,6,},{5,4,1,7,2,3,0,6,},{5,4,1,7,2,6,0,3,},{5,4,1,7,2,6,3,0,},{5,4,1,7,3,0,2,6,},{5,4,1,7,3,2,0,6,},{5,4,1,7,3,6,0,2,},
		{5,4,1,7,3,6,2,0,},{5,4,1,7,6,0,2,3,},{5,4,1,7,6,0,3,2,},{5,4,1,7,6,2,0,3,},{5,4,1,7,6,2,3,0,},{5,4,1,7,6,3,0,2,},{5,4,1,7,6,3,2,0,},{5,4,3,0,1,2,7,6,},{5,4,3,0,1,6,7,2,},{5,4,3,0,1,7,2,6,},
		{5,4,3,0,2,1,7,6,},{5,4,3,0,2,6,7,1,},{5,4,3,0,2,7,1,6,},{5,4,3,0,6,1,7,2,},{5,4,3,0,6,2,7,1,},{5,4,3,0,6,7,1,2,},{5,4,3,0,6,7,2,1,},{5,4,3,0,7,1,2,6,},{5,4,3,0,7,2,1,6,},{5,4,3,0,7,6,1,2,},
		{5,4,3,0,7,6,2,1,},{5,4,3,1,0,2,7,6,},{5,4,3,1,0,6,7,2,},{5,4,3,1,0,7,2,6,},{5,4,3,1,2,0,7,6,},{5,4,3,1,2,6,7,0,},{5,4,3,1,2,7,0,6,},{5,4,3,1,6,0,7,2,},{5,4,3,1,6,2,7,0,},{5,4,3,1,6,7,0,2,},
		{5,4,3,1,6,7,2,0,},{5,4,3,1,7,0,2,6,},{5,4,3,1,7,2,0,6,},{5,4,3,1,7,6,0,2,},{5,4,3,1,7,6,2,0,},{5,4,3,2,0,1,7,6,},{5,4,3,2,0,6,7,1,},{5,4,3,2,0,7,1,6,},{5,4,3,2,1,0,7,6,},{5,4,3,2,1,6,7,0,},
		{5,4,3,2,1,7,0,6,},{5,4,3,2,6,0,7,1,},{5,4,3,2,6,1,7,0,},{5,4,3,2,6,7,0,1,},{5,4,3,2,6,7,1,0,},{5,4,3,2,7,0,1,6,},{5,4,3,2,7,1,0,6,},{5,4,3,2,7,6,0,1,},{5,4,3,2,7,6,1,0,},{5,4,3,6,0,1,7,2,},
		{5,4,3,6,0,2,7,1,},{5,4,3,6,0,7,1,2,},{5,4,3,6,0,7,2,1,},{5,4,3,6,1,0,7,2,},{5,4,3,6,1,2,7,0,},{5,4,3,6,1,7,0,2,},{5,4,3,6,1,7,2,0,},{5,4,3,6,2,0,7,1,},{5,4,3,6,2,1,7,0,},{5,4,3,6,2,7,0,1,},
		{5,4,3,6,2,7,1,0,},{5,4,3,6,7,0,1,2,},{5,4,3,6,7,0,2,1,},{5,4,3,6,7,1,0,2,},{5,4,3,6,7,1,2,0,},{5,4,3,6,7,2,0,1,},{5,4,3,6,7,2,1,0,},{5,4,3,7,0,1,2,6,},{5,4,3,7,0,2,1,6,},{5,4,3,7,0,6,1,2,},
		{5,4,3,7,0,6,2,1,},{5,4,3,7,1,0,2,6,},{5,4,3,7,1,2,0,6,},{5,4,3,7,1,6,0,2,},{5,4,3,7,1,6,2,0,},{5,4,3,7,2,0,1,6,},{5,4,3,7,2,1,0,6,},{5,4,3,7,2,6,0,1,},{5,4,3,7,2,6,1,0,},{5,4,3,7,6,0,1,2,},
		{5,4,3,7,6,0,2,1,},{5,4,3,7,6,1,0,2,},{5,4,3,7,6,1,2,0,},{5,4,3,7,6,2,0,1,},{5,4,3,7,6,2,1,0,},{5,4,6,0,1,2,7,3,},{5,4,6,0,1,3,7,2,},{5,4,6,0,1,7,2,3,},{5,4,6,0,1,7,3,2,},{5,4,6,0,2,1,7,3,},
		{5,4,6,0,2,3,7,1,},{5,4,6,0,2,7,1,3,},{5,4,6,0,2,7,3,1,},{5,4,6,0,3,1,7,2,},{5,4,6,0,3,2,7,1,},{5,4,6,0,3,7,1,2,},{5,4,6,0,3,7,2,1,},{5,4,6,0,7,1,2,3,},{5,4,6,0,7,1,3,2,},{5,4,6,0,7,2,1,3,},
		{5,4,6,0,7,2,3,1,},{5,4,6,0,7,3,1,2,},{5,4,6,0,7,3,2,1,},{5,4,6,1,0,2,7,3,},{5,4,6,1,0,3,7,2,},{5,4,6,1,0,7,2,3,},{5,4,6,1,0,7,3,2,},{5,4,6,1,2,0,7,3,},{5,4,6,1,2,3,7,0,},{5,4,6,1,2,7,0,3,},
		{5,4,6,1,2,7,3,0,},{5,4,6,1,3,0,7,2,},{5,4,6,1,3,2,7,0,},{5,4,6,1,3,7,0,2,},{5,4,6,1,3,7,2,0,},{5,4,6,1,7,0,2,3,},{5,4,6,1,7,0,3,2,},{5,4,6,1,7,2,0,3,},{5,4,6,1,7,2,3,0,},{5,4,6,1,7,3,0,2,},
		{5,4,6,1,7,3,2,0,},{5,4,6,2,0,1,7,3,},{5,4,6,2,0,3,7,1,},{5,4,6,2,0,7,1,3,},{5,4,6,2,0,7,3,1,},{5,4,6,2,1,0,7,3,},{5,4,6,2,1,3,7,0,},{5,4,6,2,1,7,0,3,},{5,4,6,2,1,7,3,0,},{5,4,6,2,3,0,7,1,},
		{5,4,6,2,3,1,7,0,},{5,4,6,2,3,7,0,1,},{5,4,6,2,3,7,1,0,},{5,4,6,2,7,0,1,3,},{5,4,6,2,7,0,3,1,},{5,4,6,2,7,1,0,3,},{5,4,6,2,7,1,3,0,},{5,4,6,2,7,3,0,1,},{5,4,6,2,7,3,1,0,},{5,4,6,7,0,1,2,3,},
		{5,4,6,7,0,1,3,2,},{5,4,6,7,0,2,1,3,},{5,4,6,7,0,2,3,1,},{5,4,6,7,0,3,1,2,},{5,4,6,7,0,3,2,1,},{5,4,6,7,1,0,2,3,},{5,4,6,7,1,0,3,2,},{5,4,6,7,1,2,0,3,},{5,4,6,7,1,2,3,0,},{5,4,6,7,1,3,0,2,},
		{5,4,6,7,1,3,2,0,},{5,4,6,7,2,0,1,3,},{5,4,6,7,2,0,3,1,},{5,4,6,7,2,1,0,3,},{5,4,6,7,2,1,3,0,},{5,4,6,7,2,3,0,1,},{5,4,6,7,2,3,1,0,},{5,4,6,7,3,0,1,2,},{5,4,6,7,3,0,2,1,},{5,4,6,7,3,1,0,2,},
		{5,4,6,7,3,1,2,0,},{5,4,6,7,3,2,0,1,},{5,4,6,7,3,2,1,0,},{5,4,7,0,1,2,3,6,},{5,4,7,0,1,3,2,6,},{5,4,7,0,1,6,2,3,},{5,4,7,0,1,6,3,2,},{5,4,7,0,2,1,3,6,},{5,4,7,0,2,3,1,6,},{5,4,7,0,2,6,1,3,},
		{5,4,7,0,2,6,3,1,},{5,4,7,0,3,1,2,6,},{5,4,7,0,3,2,1,6,},{5,4,7,0,3,6,1,2,},{5,4,7,0,3,6,2,1,},{5,4,7,0,6,1,2,3,},{5,4,7,0,6,1,3,2,},{5,4,7,0,6,2,1,3,},{5,4,7,0,6,2,3,1,},{5,4,7,0,6,3,1,2,},
		{5,4,7,0,6,3,2,1,},{5,4,7,1,0,2,3,6,},{5,4,7,1,0,3,2,6,},{5,4,7,1,0,6,2,3,},{5,4,7,1,0,6,3,2,},{5,4,7,1,2,0,3,6,},{5,4,7,1,2,3,0,6,},{5,4,7,1,2,6,0,3,},{5,4,7,1,2,6,3,0,},{5,4,7,1,3,0,2,6,},
		{5,4,7,1,3,2,0,6,},{5,4,7,1,3,6,0,2,},{5,4,7,1,3,6,2,0,},{5,4,7,1,6,0,2,3,},{5,4,7,1,6,0,3,2,},{5,4,7,1,6,2,0,3,},{5,4,7,1,6,2,3,0,},{5,4,7,1,6,3,0,2,},{5,4,7,1,6,3,2,0,},{5,4,7,2,0,1,3,6,},
		{5,4,7,2,0,3,1,6,},{5,4,7,2,0,6,1,3,},{5,4,7,2,0,6,3,1,},{5,4,7,2,1,0,3,6,},{5,4,7,2,1,3,0,6,},{5,4,7,2,1,6,0,3,},{5,4,7,2,1,6,3,0,},{5,4,7,2,3,0,1,6,},{5,4,7,2,3,1,0,6,},{5,4,7,2,3,6,0,1,},
		{5,4,7,2,3,6,1,0,},{5,4,7,2,6,0,1,3,},{5,4,7,2,6,0,3,1,},{5,4,7,2,6,1,0,3,},{5,4,7,2,6,1,3,0,},{5,4,7,2,6,3,0,1,},{5,4,7,2,6,3,1,0,},{5,4,7,6,0,1,2,3,},{5,4,7,6,0,1,3,2,},{5,4,7,6,0,2,1,3,},
		{5,4,7,6,0,2,3,1,},{5,4,7,6,0,3,1,2,},{5,4,7,6,0,3,2,1,},{5,4,7,6,1,0,2,3,},{5,4,7,6,1,0,3,2,},{5,4,7,6,1,2,0,3,},{5,4,7,6,1,2,3,0,},{5,4,7,6,1,3,0,2,},{5,4,7,6,1,3,2,0,},{5,4,7,6,2,0,1,3,},
		{5,4,7,6,2,0,3,1,},{5,4,7,6,2,1,0,3,},{5,4,7,6,2,1,3,0,},{5,4,7,6,2,3,0,1,},{5,4,7,6,2,3,1,0,},{5,4,7,6,3,0,1,2,},{5,4,7,6,3,0,2,1,},{5,4,7,6,3,1,0,2,},{5,4,7,6,3,1,2,0,},{5,4,7,6,3,2,0,1,},
		{5,4,7,6,3,2,1,0,},{5,6,0,1,2,3,7,4,},{5,6,0,1,2,4,7,3,},{5,6,0,1,2,7,3,4,},{5,6,0,1,2,7,4,3,},{5,6,0,1,3,2,7,4,},{5,6,0,1,3,4,7,2,},{5,6,0,1,3,7,2,4,},{5,6,0,1,3,7,4,2,},{5,6,0,1,7,2,3,4,},
		{5,6,0,1,7,2,4,3,},{5,6,0,1,7,3,2,4,},{5,6,0,1,7,3,4,2,},{5,6,0,1,7,4,2,3,},{5,6,0,1,7,4,3,2,},{5,6,0,2,1,3,7,4,},{5,6,0,2,1,4,7,3,},{5,6,0,2,1,7,3,4,},{5,6,0,2,1,7,4,3,},{5,6,0,2,3,1,7,4,},
		{5,6,0,2,3,4,7,1,},{5,6,0,2,3,7,1,4,},{5,6,0,2,3,7,4,1,},{5,6,0,2,7,1,3,4,},{5,6,0,2,7,1,4,3,},{5,6,0,2,7,3,1,4,},{5,6,0,2,7,3,4,1,},{5,6,0,2,7,4,1,3,},{5,6,0,2,7,4,3,1,},{5,6,0,4,1,2,7,3,},
		{5,6,0,4,1,3,7,2,},{5,6,0,4,1,7,2,3,},{5,6,0,4,1,7,3,2,},{5,6,0,4,2,1,7,3,},{5,6,0,4,2,3,7,1,},{5,6,0,4,2,7,1,3,},{5,6,0,4,2,7,3,1,},{5,6,0,4,3,1,7,2,},{5,6,0,4,3,2,7,1,},{5,6,0,4,3,7,1,2,},
		{5,6,0,4,3,7,2,1,},{5,6,0,4,7,1,2,3,},{5,6,0,4,7,1,3,2,},{5,6,0,4,7,2,1,3,},{5,6,0,4,7,2,3,1,},{5,6,0,4,7,3,1,2,},{5,6,0,4,7,3,2,1,},{5,6,0,7,1,2,3,4,},{5,6,0,7,1,2,4,3,},{5,6,0,7,1,3,2,4,},
		{5,6,0,7,1,3,4,2,},{5,6,0,7,1,4,2,3,},{5,6,0,7,1,4,3,2,},{5,6,0,7,2,1,3,4,},{5,6,0,7,2,1,4,3,},{5,6,0,7,2,3,1,4,},{5,6,0,7,2,3,4,1,},{5,6,0,7,2,4,1,3,},{5,6,0,7,2,4,3,1,},{5,6,0,7,3,1,2,4,},
		{5,6,0,7,3,1,4,2,},{5,6,0,7,3,2,1,4,},{5,6,0,7,3,2,4,1,},{5,6,0,7,3,4,1,2,},{5,6,0,7,3,4,2,1,},{5,6,1,0,2,3,7,4,},{5,6,1,0,2,4,7,3,},{5,6,1,0,2,7,3,4,},{5,6,1,0,2,7,4,3,},{5,6,1,0,3,2,7,4,},
		{5,6,1,0,3,4,7,2,},{5,6,1,0,3,7,2,4,},{5,6,1,0,3,7,4,2,},{5,6,1,0,7,2,3,4,},{5,6,1,0,7,2,4,3,},{5,6,1,0,7,3,2,4,},{5,6,1,0,7,3,4,2,},{5,6,1,0,7,4,2,3,},{5,6,1,0,7,4,3,2,},{5,6,1,2,0,3,7,4,},
		{5,6,1,2,0,4,7,3,},{5,6,1,2,0,7,3,4,},{5,6,1,2,0,7,4,3,},{5,6,1,2,3,0,7,4,},{5,6,1,2,3,4,7,0,},{5,6,1,2,3,7,0,4,},{5,6,1,2,3,7,4,0,},{5,6,1,2,7,0,3,4,},{5,6,1,2,7,0,4,3,},{5,6,1,2,7,3,0,4,},
		{5,6,1,2,7,3,4,0,},{5,6,1,2,7,4,0,3,},{5,6,1,2,7,4,3,0,},{5,6,1,4,0,2,7,3,},{5,6,1,4,0,3,7,2,},{5,6,1,4,0,7,2,3,},{5,6,1,4,0,7,3,2,},{5,6,1,4,2,0,7,3,},{5,6,1,4,2,3,7,0,},{5,6,1,4,2,7,0,3,},
		{5,6,1,4,2,7,3,0,},{5,6,1,4,3,0,7,2,},{5,6,1,4,3,2,7,0,},{5,6,1,4,3,7,0,2,},{5,6,1,4,3,7,2,0,},{5,6,1,4,7,0,2,3,},{5,6,1,4,7,0,3,2,},{5,6,1,4,7,2,0,3,},{5,6,1,4,7,2,3,0,},{5,6,1,4,7,3,0,2,},
		{5,6,1,4,7,3,2,0,},{5,6,1,7,0,2,3,4,},{5,6,1,7,0,2,4,3,},{5,6,1,7,0,3,2,4,},{5,6,1,7,0,3,4,2,},{5,6,1,7,0,4,2,3,},{5,6,1,7,0,4,3,2,},{5,6,1,7,2,0,3,4,},{5,6,1,7,2,0,4,3,},{5,6,1,7,2,3,0,4,},
		{5,6,1,7,2,3,4,0,},{5,6,1,7,2,4,0,3,},{5,6,1,7,2,4,3,0,},{5,6,1,7,3,0,2,4,},{5,6,1,7,3,0,4,2,},{5,6,1,7,3,2,0,4,},{5,6,1,7,3,2,4,0,},{5,6,1,7,3,4,0,2,},{5,6,1,7,3,4,2,0,},{5,6,3,0,1,2,7,4,},
		{5,6,3,0,1,4,7,2,},{5,6,3,0,1,7,2,4,},{5,6,3,0,1,7,4,2,},{5,6,3,0,2,1,7,4,},{5,6,3,0,2,4,7,1,},{5,6,3,0,2,7,1,4,},{5,6,3,0,2,7,4,1,},{5,6,3,0,7,1,2,4,},{5,6,3,0,7,1,4,2,},{5,6,3,0,7,2,1,4,},
		{5,6,3,0,7,2,4,1,},{5,6,3,0,7,4,1,2,},{5,6,3,0,7,4,2,1,},{5,6,3,1,0,2,7,4,},{5,6,3,1,0,4,7,2,},{5,6,3,1,0,7,2,4,},{5,6,3,1,0,7,4,2,},{5,6,3,1,2,0,7,4,},{5,6,3,1,2,4,7,0,},{5,6,3,1,2,7,0,4,},
		{5,6,3,1,2,7,4,0,},{5,6,3,1,7,0,2,4,},{5,6,3,1,7,0,4,2,},{5,6,3,1,7,2,0,4,},{5,6,3,1,7,2,4,0,},{5,6,3,1,7,4,0,2,},{5,6,3,1,7,4,2,0,},{5,6,3,2,0,1,7,4,},{5,6,3,2,0,4,7,1,},{5,6,3,2,0,7,1,4,},
		{5,6,3,2,0,7,4,1,},{5,6,3,2,1,0,7,4,},{5,6,3,2,1,4,7,0,},{5,6,3,2,1,7,0,4,},{5,6,3,2,1,7,4,0,},{5,6,3,2,7,0,1,4,},{5,6,3,2,7,0,4,1,},{5,6,3,2,7,1,0,4,},{5,6,3,2,7,1,4,0,},{5,6,3,2,7,4,0,1,},
		{5,6,3,2,7,4,1,0,},{5,6,3,4,0,1,7,2,},{5,6,3,4,0,2,7,1,},{5,6,3,4,0,7,1,2,},{5,6,3,4,0,7,2,1,},{5,6,3,4,1,0,7,2,},{5,6,3,4,1,2,7,0,},{5,6,3,4,1,7,0,2,},{5,6,3,4,1,7,2,0,},{5,6,3,4,2,0,7,1,},
		{5,6,3,4,2,1,7,0,},{5,6,3,4,2,7,0,1,},{5,6,3,4,2,7,1,0,},{5,6,3,4,7,0,1,2,},{5,6,3,4,7,0,2,1,},{5,6,3,4,7,1,0,2,},{5,6,3,4,7,1,2,0,},{5,6,3,4,7,2,0,1,},{5,6,3,4,7,2,1,0,},{5,6,3,7,0,1,2,4,},
		{5,6,3,7,0,1,4,2,},{5,6,3,7,0,2,1,4,},{5,6,3,7,0,2,4,1,},{5,6,3,7,0,4,1,2,},{5,6,3,7,0,4,2,1,},{5,6,3,7,1,0,2,4,},{5,6,3,7,1,0,4,2,},{5,6,3,7,1,2,0,4,},{5,6,3,7,1,2,4,0,},{5,6,3,7,1,4,0,2,},
		{5,6,3,7,1,4,2,0,},{5,6,3,7,2,0,1,4,},{5,6,3,7,2,0,4,1,},{5,6,3,7,2,1,0,4,},{5,6,3,7,2,1,4,0,},{5,6,3,7,2,4,0,1,},{5,6,3,7,2,4,1,0,},{5,6,4,0,1,2,7,3,},{5,6,4,0,1,3,7,2,},{5,6,4,0,1,7,2,3,},
		{5,6,4,0,1,7,3,2,},{5,6,4,0,2,1,7,3,},{5,6,4,0,2,3,7,1,},{5,6,4,0,2,7,1,3,},{5,6,4,0,2,7,3,1,},{5,6,4,0,3,1,7,2,},{5,6,4,0,3,2,7,1,},{5,6,4,0,3,7,1,2,},{5,6,4,0,3,7,2,1,},{5,6,4,0,7,1,2,3,},
		{5,6,4,0,7,1,3,2,},{5,6,4,0,7,2,1,3,},{5,6,4,0,7,2,3,1,},{5,6,4,0,7,3,1,2,},{5,6,4,0,7,3,2,1,},{5,6,4,1,0,2,7,3,},{5,6,4,1,0,3,7,2,},{5,6,4,1,0,7,2,3,},{5,6,4,1,0,7,3,2,},{5,6,4,1,2,0,7,3,},
		{5,6,4,1,2,3,7,0,},{5,6,4,1,2,7,0,3,},{5,6,4,1,2,7,3,0,},{5,6,4,1,3,0,7,2,},{5,6,4,1,3,2,7,0,},{5,6,4,1,3,7,0,2,},{5,6,4,1,3,7,2,0,},{5,6,4,1,7,0,2,3,},{5,6,4,1,7,0,3,2,},{5,6,4,1,7,2,0,3,},
		{5,6,4,1,7,2,3,0,},{5,6,4,1,7,3,0,2,},{5,6,4,1,7,3,2,0,},{5,6,4,2,0,1,7,3,},{5,6,4,2,0,3,7,1,},{5,6,4,2,0,7,1,3,},{5,6,4,2,0,7,3,1,},{5,6,4,2,1,0,7,3,},{5,6,4,2,1,3,7,0,},{5,6,4,2,1,7,0,3,},
		{5,6,4,2,1,7,3,0,},{5,6,4,2,3,0,7,1,},{5,6,4,2,3,1,7,0,},{5,6,4,2,3,7,0,1,},{5,6,4,2,3,7,1,0,},{5,6,4,2,7,0,1,3,},{5,6,4,2,7,0,3,1,},{5,6,4,2,7,1,0,3,},{5,6,4,2,7,1,3,0,},{5,6,4,2,7,3,0,1,},
		{5,6,4,2,7,3,1,0,},{5,6,4,7,0,1,2,3,},{5,6,4,7,0,1,3,2,},{5,6,4,7,0,2,1,3,},{5,6,4,7,0,2,3,1,},{5,6,4,7,0,3,1,2,},{5,6,4,7,0,3,2,1,},{5,6,4,7,1,0,2,3,},{5,6,4,7,1,0,3,2,},{5,6,4,7,1,2,0,3,},
		{5,6,4,7,1,2,3,0,},{5,6,4,7,1,3,0,2,},{5,6,4,7,1,3,2,0,},{5,6,4,7,2,0,1,3,},{5,6,4,7,2,0,3,1,},{5,6,4,7,2,1,0,3,},{5,6,4,7,2,1,3,0,},{5,6,4,7,2,3,0,1,},{5,6,4,7,2,3,1,0,},{5,6,4,7,3,0,1,2,},
		{5,6,4,7,3,0,2,1,},{5,6,4,7,3,1,0,2,},{5,6,4,7,3,1,2,0,},{5,6,4,7,3,2,0,1,},{5,6,4,7,3,2,1,0,},{5,6,7,0,1,2,3,4,},{5,6,7,0,1,2,4,3,},{5,6,7,0,1,3,2,4,},{5,6,7,0,1,3,4,2,},{5,6,7,0,1,4,2,3,},
		{5,6,7,0,1,4,3,2,},{5,6,7,0,2,1,3,4,},{5,6,7,0,2,1,4,3,},{5,6,7,0,2,3,1,4,},{5,6,7,0,2,3,4,1,},{5,6,7,0,2,4,1,3,},{5,6,7,0,2,4,3,1,},{5,6,7,0,3,1,2,4,},{5,6,7,0,3,1,4,2,},{5,6,7,0,3,2,1,4,},
		{5,6,7,0,3,2,4,1,},{5,6,7,0,3,4,1,2,},{5,6,7,0,3,4,2,1,},{5,6,7,1,0,2,3,4,},{5,6,7,1,0,2,4,3,},{5,6,7,1,0,3,2,4,},{5,6,7,1,0,3,4,2,},{5,6,7,1,0,4,2,3,},{5,6,7,1,0,4,3,2,},{5,6,7,1,2,0,3,4,},
		{5,6,7,1,2,0,4,3,},{5,6,7,1,2,3,0,4,},{5,6,7,1,2,3,4,0,},{5,6,7,1,2,4,0,3,},{5,6,7,1,2,4,3,0,},{5,6,7,1,3,0,2,4,},{5,6,7,1,3,0,4,2,},{5,6,7,1,3,2,0,4,},{5,6,7,1,3,2,4,0,},{5,6,7,1,3,4,0,2,},
		{5,6,7,1,3,4,2,0,},{5,6,7,2,0,1,3,4,},{5,6,7,2,0,1,4,3,},{5,6,7,2,0,3,1,4,},{5,6,7,2,0,3,4,1,},{5,6,7,2,0,4,1,3,},{5,6,7,2,0,4,3,1,},{5,6,7,2,1,0,3,4,},{5,6,7,2,1,0,4,3,},{5,6,7,2,1,3,0,4,},
		{5,6,7,2,1,3,4,0,},{5,6,7,2,1,4,0,3,},{5,6,7,2,1,4,3,0,},{5,6,7,2,3,0,1,4,},{5,6,7,2,3,0,4,1,},{5,6,7,2,3,1,0,4,},{5,6,7,2,3,1,4,0,},{5,6,7,2,3,4,0,1,},{5,6,7,2,3,4,1,0,},{5,6,7,4,0,1,2,3,},
		{5,6,7,4,0,1,3,2,},{5,6,7,4,0,2,1,3,},{5,6,7,4,0,2,3,1,},{5,6,7,4,0,3,1,2,},{5,6,7,4,0,3,2,1,},{5,6,7,4,1,0,2,3,},{5,6,7,4,1,0,3,2,},{5,6,7,4,1,2,0,3,},{5,6,7,4,1,2,3,0,},{5,6,7,4,1,3,0,2,},
		{5,6,7,4,1,3,2,0,},{5,6,7,4,2,0,1,3,},{5,6,7,4,2,0,3,1,},{5,6,7,4,2,1,0,3,},{5,6,7,4,2,1,3,0,},{5,6,7,4,2,3,0,1,},{5,6,7,4,2,3,1,0,},{5,6,7,4,3,0,1,2,},{5,6,7,4,3,0,2,1,},{5,6,7,4,3,1,0,2,},
		{5,6,7,4,3,1,2,0,},{5,6,7,4,3,2,0,1,},{5,6,7,4,3,2,1,0,},{5,7,0,1,2,3,4,6,},{5,7,0,1,2,4,3,6,},{5,7,0,1,2,6,3,4,},{5,7,0,1,2,6,4,3,},{5,7,0,1,3,2,4,6,},{5,7,0,1,3,4,2,6,},{5,7,0,1,3,6,2,4,},
		{5,7,0,1,3,6,4,2,},{5,7,0,1,6,2,3,4,},{5,7,0,1,6,2,4,3,},{5,7,0,1,6,3,2,4,},{5,7,0,1,6,3,4,2,},{5,7,0,1,6,4,2,3,},{5,7,0,1,6,4,3,2,},{5,7,0,2,1,3,4,6,},{5,7,0,2,1,4,3,6,},{5,7,0,2,1,6,3,4,},
		{5,7,0,2,1,6,4,3,},{5,7,0,2,3,1,4,6,},{5,7,0,2,3,4,1,6,},{5,7,0,2,3,6,1,4,},{5,7,0,2,3,6,4,1,},{5,7,0,2,6,1,3,4,},{5,7,0,2,6,1,4,3,},{5,7,0,2,6,3,1,4,},{5,7,0,2,6,3,4,1,},{5,7,0,2,6,4,1,3,},
		{5,7,0,2,6,4,3,1,},{5,7,0,4,1,2,3,6,},{5,7,0,4,1,3,2,6,},{5,7,0,4,1,6,2,3,},{5,7,0,4,1,6,3,2,},{5,7,0,4,2,1,3,6,},{5,7,0,4,2,3,1,6,},{5,7,0,4,2,6,1,3,},{5,7,0,4,2,6,3,1,},{5,7,0,4,3,1,2,6,},
		{5,7,0,4,3,2,1,6,},{5,7,0,4,3,6,1,2,},{5,7,0,4,3,6,2,1,},{5,7,0,4,6,1,2,3,},{5,7,0,4,6,1,3,2,},{5,7,0,4,6,2,1,3,},{5,7,0,4,6,2,3,1,},{5,7,0,4,6,3,1,2,},{5,7,0,4,6,3,2,1,},{5,7,0,6,1,2,3,4,},
		{5,7,0,6,1,2,4,3,},{5,7,0,6,1,3,2,4,},{5,7,0,6,1,3,4,2,},{5,7,0,6,1,4,2,3,},{5,7,0,6,1,4,3,2,},{5,7,0,6,2,1,3,4,},{5,7,0,6,2,1,4,3,},{5,7,0,6,2,3,1,4,},{5,7,0,6,2,3,4,1,},{5,7,0,6,2,4,1,3,},
		{5,7,0,6,2,4,3,1,},{5,7,0,6,3,1,2,4,},{5,7,0,6,3,1,4,2,},{5,7,0,6,3,2,1,4,},{5,7,0,6,3,2,4,1,},{5,7,0,6,3,4,1,2,},{5,7,0,6,3,4,2,1,},{5,7,1,0,2,3,4,6,},{5,7,1,0,2,4,3,6,},{5,7,1,0,2,6,3,4,},
		{5,7,1,0,2,6,4,3,},{5,7,1,0,3,2,4,6,},{5,7,1,0,3,4,2,6,},{5,7,1,0,3,6,2,4,},{5,7,1,0,3,6,4,2,},{5,7,1,0,6,2,3,4,},{5,7,1,0,6,2,4,3,},{5,7,1,0,6,3,2,4,},{5,7,1,0,6,3,4,2,},{5,7,1,0,6,4,2,3,},
		{5,7,1,0,6,4,3,2,},{5,7,1,2,0,3,4,6,},{5,7,1,2,0,4,3,6,},{5,7,1,2,0,6,3,4,},{5,7,1,2,0,6,4,3,},{5,7,1,2,3,0,4,6,},{5,7,1,2,3,4,0,6,},{5,7,1,2,3,6,0,4,},{5,7,1,2,3,6,4,0,},{5,7,1,2,6,0,3,4,},
		{5,7,1,2,6,0,4,3,},{5,7,1,2,6,3,0,4,},{5,7,1,2,6,3,4,0,},{5,7,1,2,6,4,0,3,},{5,7,1,2,6,4,3,0,},{5,7,1,4,0,2,3,6,},{5,7,1,4,0,3,2,6,},{5,7,1,4,0,6,2,3,},{5,7,1,4,0,6,3,2,},{5,7,1,4,2,0,3,6,},
		{5,7,1,4,2,3,0,6,},{5,7,1,4,2,6,0,3,},{5,7,1,4,2,6,3,0,},{5,7,1,4,3,0,2,6,},{5,7,1,4,3,2,0,6,},{5,7,1,4,3,6,0,2,},{5,7,1,4,3,6,2,0,},{5,7,1,4,6,0,2,3,},{5,7,1,4,6,0,3,2,},{5,7,1,4,6,2,0,3,},
		{5,7,1,4,6,2,3,0,},{5,7,1,4,6,3,0,2,},{5,7,1,4,6,3,2,0,},{5,7,1,6,0,2,3,4,},{5,7,1,6,0,2,4,3,},{5,7,1,6,0,3,2,4,},{5,7,1,6,0,3,4,2,},{5,7,1,6,0,4,2,3,},{5,7,1,6,0,4,3,2,},{5,7,1,6,2,0,3,4,},
		{5,7,1,6,2,0,4,3,},{5,7,1,6,2,3,0,4,},{5,7,1,6,2,3,4,0,},{5,7,1,6,2,4,0,3,},{5,7,1,6,2,4,3,0,},{5,7,1,6,3,0,2,4,},{5,7,1,6,3,0,4,2,},{5,7,1,6,3,2,0,4,},{5,7,1,6,3,2,4,0,},{5,7,1,6,3,4,0,2,},
		{5,7,1,6,3,4,2,0,},{5,7,3,0,1,2,4,6,},{5,7,3,0,1,4,2,6,},{5,7,3,0,1,6,2,4,},{5,7,3,0,1,6,4,2,},{5,7,3,0,2,1,4,6,},{5,7,3,0,2,4,1,6,},{5,7,3,0,2,6,1,4,},{5,7,3,0,2,6,4,1,},{5,7,3,0,6,1,2,4,},
		{5,7,3,0,6,1,4,2,},{5,7,3,0,6,2,1,4,},{5,7,3,0,6,2,4,1,},{5,7,3,0,6,4,1,2,},{5,7,3,0,6,4,2,1,},{5,7,3,1,0,2,4,6,},{5,7,3,1,0,4,2,6,},{5,7,3,1,0,6,2,4,},{5,7,3,1,0,6,4,2,},{5,7,3,1,2,0,4,6,},
		{5,7,3,1,2,4,0,6,},{5,7,3,1,2,6,0,4,},{5,7,3,1,2,6,4,0,},{5,7,3,1,6,0,2,4,},{5,7,3,1,6,0,4,2,},{5,7,3,1,6,2,0,4,},{5,7,3,1,6,2,4,0,},{5,7,3,1,6,4,0,2,},{5,7,3,1,6,4,2,0,},{5,7,3,2,0,1,4,6,},
		{5,7,3,2,0,4,1,6,},{5,7,3,2,0,6,1,4,},{5,7,3,2,0,6,4,1,},{5,7,3,2,1,0,4,6,},{5,7,3,2,1,4,0,6,},{5,7,3,2,1,6,0,4,},{5,7,3,2,1,6,4,0,},{5,7,3,2,6,0,1,4,},{5,7,3,2,6,0,4,1,},{5,7,3,2,6,1,0,4,},
		{5,7,3,2,6,1,4,0,},{5,7,3,2,6,4,0,1,},{5,7,3,2,6,4,1,0,},{5,7,3,4,0,1,2,6,},{5,7,3,4,0,2,1,6,},{5,7,3,4,0,6,1,2,},{5,7,3,4,0,6,2,1,},{5,7,3,4,1,0,2,6,},{5,7,3,4,1,2,0,6,},{5,7,3,4,1,6,0,2,},
		{5,7,3,4,1,6,2,0,},{5,7,3,4,2,0,1,6,},{5,7,3,4,2,1,0,6,},{5,7,3,4,2,6,0,1,},{5,7,3,4,2,6,1,0,},{5,7,3,4,6,0,1,2,},{5,7,3,4,6,0,2,1,},{5,7,3,4,6,1,0,2,},{5,7,3,4,6,1,2,0,},{5,7,3,4,6,2,0,1,},
		{5,7,3,4,6,2,1,0,},{5,7,3,6,0,1,2,4,},{5,7,3,6,0,1,4,2,},{5,7,3,6,0,2,1,4,},{5,7,3,6,0,2,4,1,},{5,7,3,6,0,4,1,2,},{5,7,3,6,0,4,2,1,},{5,7,3,6,1,0,2,4,},{5,7,3,6,1,0,4,2,},{5,7,3,6,1,2,0,4,},
		{5,7,3,6,1,2,4,0,},{5,7,3,6,1,4,0,2,},{5,7,3,6,1,4,2,0,},{5,7,3,6,2,0,1,4,},{5,7,3,6,2,0,4,1,},{5,7,3,6,2,1,0,4,},{5,7,3,6,2,1,4,0,},{5,7,3,6,2,4,0,1,},{5,7,3,6,2,4,1,0,},{5,7,4,0,1,2,3,6,},
		{5,7,4,0,1,3,2,6,},{5,7,4,0,1,6,2,3,},{5,7,4,0,1,6,3,2,},{5,7,4,0,2,1,3,6,},{5,7,4,0,2,3,1,6,},{5,7,4,0,2,6,1,3,},{5,7,4,0,2,6,3,1,},{5,7,4,0,3,1,2,6,},{5,7,4,0,3,2,1,6,},{5,7,4,0,3,6,1,2,},
		{5,7,4,0,3,6,2,1,},{5,7,4,0,6,1,2,3,},{5,7,4,0,6,1,3,2,},{5,7,4,0,6,2,1,3,},{5,7,4,0,6,2,3,1,},{5,7,4,0,6,3,1,2,},{5,7,4,0,6,3,2,1,},{5,7,4,1,0,2,3,6,},{5,7,4,1,0,3,2,6,},{5,7,4,1,0,6,2,3,},
		{5,7,4,1,0,6,3,2,},{5,7,4,1,2,0,3,6,},{5,7,4,1,2,3,0,6,},{5,7,4,1,2,6,0,3,},{5,7,4,1,2,6,3,0,},{5,7,4,1,3,0,2,6,},{5,7,4,1,3,2,0,6,},{5,7,4,1,3,6,0,2,},{5,7,4,1,3,6,2,0,},{5,7,4,1,6,0,2,3,},
		{5,7,4,1,6,0,3,2,},{5,7,4,1,6,2,0,3,},{5,7,4,1,6,2,3,0,},{5,7,4,1,6,3,0,2,},{5,7,4,1,6,3,2,0,},{5,7,4,2,0,1,3,6,},{5,7,4,2,0,3,1,6,},{5,7,4,2,0,6,1,3,},{5,7,4,2,0,6,3,1,},{5,7,4,2,1,0,3,6,},
		{5,7,4,2,1,3,0,6,},{5,7,4,2,1,6,0,3,},{5,7,4,2,1,6,3,0,},{5,7,4,2,3,0,1,6,},{5,7,4,2,3,1,0,6,},{5,7,4,2,3,6,0,1,},{5,7,4,2,3,6,1,0,},{5,7,4,2,6,0,1,3,},{5,7,4,2,6,0,3,1,},{5,7,4,2,6,1,0,3,},
		{5,7,4,2,6,1,3,0,},{5,7,4,2,6,3,0,1,},{5,7,4,2,6,3,1,0,},{5,7,4,6,0,1,2,3,},{5,7,4,6,0,1,3,2,},{5,7,4,6,0,2,1,3,},{5,7,4,6,0,2,3,1,},{5,7,4,6,0,3,1,2,},{5,7,4,6,0,3,2,1,},{5,7,4,6,1,0,2,3,},
		{5,7,4,6,1,0,3,2,},{5,7,4,6,1,2,0,3,},{5,7,4,6,1,2,3,0,},{5,7,4,6,1,3,0,2,},{5,7,4,6,1,3,2,0,},{5,7,4,6,2,0,1,3,},{5,7,4,6,2,0,3,1,},{5,7,4,6,2,1,0,3,},{5,7,4,6,2,1,3,0,},{5,7,4,6,2,3,0,1,},
		{5,7,4,6,2,3,1,0,},{5,7,4,6,3,0,1,2,},{5,7,4,6,3,0,2,1,},{5,7,4,6,3,1,0,2,},{5,7,4,6,3,1,2,0,},{5,7,4,6,3,2,0,1,},{5,7,4,6,3,2,1,0,},{5,7,6,0,1,2,3,4,},{5,7,6,0,1,2,4,3,},{5,7,6,0,1,3,2,4,},
		{5,7,6,0,1,3,4,2,},{5,7,6,0,1,4,2,3,},{5,7,6,0,1,4,3,2,},{5,7,6,0,2,1,3,4,},{5,7,6,0,2,1,4,3,},{5,7,6,0,2,3,1,4,},{5,7,6,0,2,3,4,1,},{5,7,6,0,2,4,1,3,},{5,7,6,0,2,4,3,1,},{5,7,6,0,3,1,2,4,},
		{5,7,6,0,3,1,4,2,},{5,7,6,0,3,2,1,4,},{5,7,6,0,3,2,4,1,},{5,7,6,0,3,4,1,2,},{5,7,6,0,3,4,2,1,},{5,7,6,1,0,2,3,4,},{5,7,6,1,0,2,4,3,},{5,7,6,1,0,3,2,4,},{5,7,6,1,0,3,4,2,},{5,7,6,1,0,4,2,3,},
		{5,7,6,1,0,4,3,2,},{5,7,6,1,2,0,3,4,},{5,7,6,1,2,0,4,3,},{5,7,6,1,2,3,0,4,},{5,7,6,1,2,3,4,0,},{5,7,6,1,2,4,0,3,},{5,7,6,1,2,4,3,0,},{5,7,6,1,3,0,2,4,},{5,7,6,1,3,0,4,2,},{5,7,6,1,3,2,0,4,},
		{5,7,6,1,3,2,4,0,},{5,7,6,1,3,4,0,2,},{5,7,6,1,3,4,2,0,},{5,7,6,2,0,1,3,4,},{5,7,6,2,0,1,4,3,},{5,7,6,2,0,3,1,4,},{5,7,6,2,0,3,4,1,},{5,7,6,2,0,4,1,3,},{5,7,6,2,0,4,3,1,},{5,7,6,2,1,0,3,4,},
		{5,7,6,2,1,0,4,3,},{5,7,6,2,1,3,0,4,},{5,7,6,2,1,3,4,0,},{5,7,6,2,1,4,0,3,},{5,7,6,2,1,4,3,0,},{5,7,6,2,3,0,1,4,},{5,7,6,2,3,0,4,1,},{5,7,6,2,3,1,0,4,},{5,7,6,2,3,1,4,0,},{5,7,6,2,3,4,0,1,},
		{5,7,6,2,3,4,1,0,},{5,7,6,4,0,1,2,3,},{5,7,6,4,0,1,3,2,},{5,7,6,4,0,2,1,3,},{5,7,6,4,0,2,3,1,},{5,7,6,4,0,3,1,2,},{5,7,6,4,0,3,2,1,},{5,7,6,4,1,0,2,3,},{5,7,6,4,1,0,3,2,},{5,7,6,4,1,2,0,3,},
		{5,7,6,4,1,2,3,0,},{5,7,6,4,1,3,0,2,},{5,7,6,4,1,3,2,0,},{5,7,6,4,2,0,1,3,},{5,7,6,4,2,0,3,1,},{5,7,6,4,2,1,0,3,},{5,7,6,4,2,1,3,0,},{5,7,6,4,2,3,0,1,},{5,7,6,4,2,3,1,0,},{5,7,6,4,3,0,1,2,},
		{5,7,6,4,3,0,2,1,},{5,7,6,4,3,1,0,2,},{5,7,6,4,3,1,2,0,},{5,7,6,4,3,2,0,1,},{5,7,6,4,3,2,1,0,},{6,0,1,2,3,4,7,5,},{6,0,1,2,3,7,4,5,},{6,0,1,2,3,7,5,4,},{6,0,1,2,5,3,7,4,},{6,0,1,2,5,4,7,3,},
		{6,0,1,2,5,7,3,4,},{6,0,1,2,5,7,4,3,},{6,0,1,2,7,3,4,5,},{6,0,1,2,7,3,5,4,},{6,0,1,2,7,4,3,5,},{6,0,1,2,7,4,5,3,},{6,0,1,4,2,3,7,5,},{6,0,1,4,2,7,3,5,},{6,0,1,4,2,7,5,3,},{6,0,1,4,3,2,7,5,},
		{6,0,1,4,3,7,2,5,},{6,0,1,4,3,7,5,2,},{6,0,1,4,5,2,7,3,},{6,0,1,4,5,3,7,2,},{6,0,1,4,5,7,2,3,},{6,0,1,4,5,7,3,2,},{6,0,1,4,7,2,3,5,},{6,0,1,4,7,2,5,3,},{6,0,1,4,7,3,2,5,},{6,0,1,4,7,3,5,2,},
		{6,0,1,5,2,3,7,4,},{6,0,1,5,2,4,7,3,},{6,0,1,5,2,7,3,4,},{6,0,1,5,2,7,4,3,},{6,0,1,5,3,2,7,4,},{6,0,1,5,3,4,7,2,},{6,0,1,5,3,7,2,4,},{6,0,1,5,3,7,4,2,},{6,0,1,5,7,2,3,4,},{6,0,1,5,7,2,4,3,},
		{6,0,1,5,7,3,2,4,},{6,0,1,5,7,3,4,2,},{6,0,1,5,7,4,2,3,},{6,0,1,5,7,4,3,2,},{6,0,1,7,2,3,4,5,},{6,0,1,7,2,3,5,4,},{6,0,1,7,2,4,3,5,},{6,0,1,7,2,4,5,3,},{6,0,1,7,3,2,4,5,},{6,0,1,7,3,2,5,4,},
		{6,0,1,7,3,4,2,5,},{6,0,1,7,3,4,5,2,},{6,0,1,7,5,2,3,4,},{6,0,1,7,5,2,4,3,},{6,0,1,7,5,3,2,4,},{6,0,1,7,5,3,4,2,},{6,0,1,7,5,4,2,3,},{6,0,1,7,5,4,3,2,},{6,0,3,1,2,4,7,5,},{6,0,3,1,2,7,4,5,},
		{6,0,3,1,2,7,5,4,},{6,0,3,1,5,2,7,4,},{6,0,3,1,5,4,7,2,},{6,0,3,1,5,7,2,4,},{6,0,3,1,5,7,4,2,},{6,0,3,1,7,2,4,5,},{6,0,3,1,7,2,5,4,},{6,0,3,1,7,4,2,5,},{6,0,3,1,7,4,5,2,},{6,0,3,2,1,4,7,5,},
		{6,0,3,2,1,7,4,5,},{6,0,3,2,1,7,5,4,},{6,0,3,2,5,1,7,4,},{6,0,3,2,5,4,7,1,},{6,0,3,2,5,7,1,4,},{6,0,3,2,5,7,4,1,},{6,0,3,2,7,1,4,5,},{6,0,3,2,7,1,5,4,},{6,0,3,2,7,4,1,5,},{6,0,3,2,7,4,5,1,},
		{6,0,3,4,1,2,7,5,},{6,0,3,4,1,7,2,5,},{6,0,3,4,1,7,5,2,},{6,0,3,4,2,1,7,5,},{6,0,3,4,2,7,1,5,},{6,0,3,4,2,7,5,1,},{6,0,3,4,5,1,7,2,},{6,0,3,4,5,2,7,1,},{6,0,3,4,5,7,1,2,},{6,0,3,4,5,7,2,1,},
		{6,0,3,4,7,1,2,5,},{6,0,3,4,7,1,5,2,},{6,0,3,4,7,2,1,5,},{6,0,3,4,7,2,5,1,},{6,0,3,5,1,2,7,4,},{6,0,3,5,1,4,7,2,},{6,0,3,5,1,7,2,4,},{6,0,3,5,1,7,4,2,},{6,0,3,5,2,1,7,4,},{6,0,3,5,2,4,7,1,},
		{6,0,3,5,2,7,1,4,},{6,0,3,5,2,7,4,1,},{6,0,3,5,7,1,2,4,},{6,0,3,5,7,1,4,2,},{6,0,3,5,7,2,1,4,},{6,0,3,5,7,2,4,1,},{6,0,3,5,7,4,1,2,},{6,0,3,5,7,4,2,1,},{6,0,3,7,1,2,4,5,},{6,0,3,7,1,2,5,4,},
		{6,0,3,7,1,4,2,5,},{6,0,3,7,1,4,5,2,},{6,0,3,7,2,1,4,5,},{6,0,3,7,2,1,5,4,},{6,0,3,7,2,4,1,5,},{6,0,3,7,2,4,5,1,},{6,0,3,7,5,1,2,4,},{6,0,3,7,5,1,4,2,},{6,0,3,7,5,2,1,4,},{6,0,3,7,5,2,4,1,},
		{6,0,3,7,5,4,1,2,},{6,0,3,7,5,4,2,1,},{6,0,4,1,2,3,7,5,},{6,0,4,1,2,7,3,5,},{6,0,4,1,2,7,5,3,},{6,0,4,1,3,2,7,5,},{6,0,4,1,3,7,2,5,},{6,0,4,1,3,7,5,2,},{6,0,4,1,5,2,7,3,},{6,0,4,1,5,3,7,2,},
		{6,0,4,1,5,7,2,3,},{6,0,4,1,5,7,3,2,},{6,0,4,1,7,2,3,5,},{6,0,4,1,7,2,5,3,},{6,0,4,1,7,3,2,5,},{6,0,4,1,7,3,5,2,},{6,0,4,2,1,3,7,5,},{6,0,4,2,1,7,3,5,},{6,0,4,2,1,7,5,3,},{6,0,4,2,3,1,7,5,},
		{6,0,4,2,3,7,1,5,},{6,0,4,2,3,7,5,1,},{6,0,4,2,5,1,7,3,},{6,0,4,2,5,3,7,1,},{6,0,4,2,5,7,1,3,},{6,0,4,2,5,7,3,1,},{6,0,4,2,7,1,3,5,},{6,0,4,2,7,1,5,3,},{6,0,4,2,7,3,1,5,},{6,0,4,2,7,3,5,1,},
		{6,0,4,5,1,2,7,3,},{6,0,4,5,1,3,7,2,},{6,0,4,5,1,7,2,3,},{6,0,4,5,1,7,3,2,},{6,0,4,5,2,1,7,3,},{6,0,4,5,2,3,7,1,},{6,0,4,5,2,7,1,3,},{6,0,4,5,2,7,3,1,},{6,0,4,5,3,1,7,2,},{6,0,4,5,3,2,7,1,},
		{6,0,4,5,3,7,1,2,},{6,0,4,5,3,7,2,1,},{6,0,4,5,7,1,2,3,},{6,0,4,5,7,1,3,2,},{6,0,4,5,7,2,1,3,},{6,0,4,5,7,2,3,1,},{6,0,4,5,7,3,1,2,},{6,0,4,5,7,3,2,1,},{6,0,4,7,1,2,3,5,},{6,0,4,7,1,2,5,3,},
		{6,0,4,7,1,3,2,5,},{6,0,4,7,1,3,5,2,},{6,0,4,7,2,1,3,5,},{6,0,4,7,2,1,5,3,},{6,0,4,7,2,3,1,5,},{6,0,4,7,2,3,5,1,},{6,0,4,7,3,1,2,5,},{6,0,4,7,3,1,5,2,},{6,0,4,7,3,2,1,5,},{6,0,4,7,3,2,5,1,},
		{6,0,4,7,5,1,2,3,},{6,0,4,7,5,1,3,2,},{6,0,4,7,5,2,1,3,},{6,0,4,7,5,2,3,1,},{6,0,4,7,5,3,1,2,},{6,0,4,7,5,3,2,1,},{6,0,5,1,2,3,7,4,},{6,0,5,1,2,4,7,3,},{6,0,5,1,2,7,3,4,},{6,0,5,1,2,7,4,3,},
		{6,0,5,1,3,2,7,4,},{6,0,5,1,3,4,7,2,},{6,0,5,1,3,7,2,4,},{6,0,5,1,3,7,4,2,},{6,0,5,1,7,2,3,4,},{6,0,5,1,7,2,4,3,},{6,0,5,1,7,3,2,4,},{6,0,5,1,7,3,4,2,},{6,0,5,1,7,4,2,3,},{6,0,5,1,7,4,3,2,},
		{6,0,5,2,1,3,7,4,},{6,0,5,2,1,4,7,3,},{6,0,5,2,1,7,3,4,},{6,0,5,2,1,7,4,3,},{6,0,5,2,3,1,7,4,},{6,0,5,2,3,4,7,1,},{6,0,5,2,3,7,1,4,},{6,0,5,2,3,7,4,1,},{6,0,5,2,7,1,3,4,},{6,0,5,2,7,1,4,3,},
		{6,0,5,2,7,3,1,4,},{6,0,5,2,7,3,4,1,},{6,0,5,2,7,4,1,3,},{6,0,5,2,7,4,3,1,},{6,0,5,4,1,2,7,3,},{6,0,5,4,1,3,7,2,},{6,0,5,4,1,7,2,3,},{6,0,5,4,1,7,3,2,},{6,0,5,4,2,1,7,3,},{6,0,5,4,2,3,7,1,},
		{6,0,5,4,2,7,1,3,},{6,0,5,4,2,7,3,1,},{6,0,5,4,3,1,7,2,},{6,0,5,4,3,2,7,1,},{6,0,5,4,3,7,1,2,},{6,0,5,4,3,7,2,1,},{6,0,5,4,7,1,2,3,},{6,0,5,4,7,1,3,2,},{6,0,5,4,7,2,1,3,},{6,0,5,4,7,2,3,1,},
		{6,0,5,4,7,3,1,2,},{6,0,5,4,7,3,2,1,},{6,0,5,7,1,2,3,4,},{6,0,5,7,1,2,4,3,},{6,0,5,7,1,3,2,4,},{6,0,5,7,1,3,4,2,},{6,0,5,7,1,4,2,3,},{6,0,5,7,1,4,3,2,},{6,0,5,7,2,1,3,4,},{6,0,5,7,2,1,4,3,},
		{6,0,5,7,2,3,1,4,},{6,0,5,7,2,3,4,1,},{6,0,5,7,2,4,1,3,},{6,0,5,7,2,4,3,1,},{6,0,5,7,3,1,2,4,},{6,0,5,7,3,1,4,2,},{6,0,5,7,3,2,1,4,},{6,0,5,7,3,2,4,1,},{6,0,5,7,3,4,1,2,},{6,0,5,7,3,4,2,1,},
		{6,0,7,1,2,3,4,5,},{6,0,7,1,2,3,5,4,},{6,0,7,1,2,4,3,5,},{6,0,7,1,2,4,5,3,},{6,0,7,1,3,2,4,5,},{6,0,7,1,3,2,5,4,},{6,0,7,1,3,4,2,5,},{6,0,7,1,3,4,5,2,},{6,0,7,1,5,2,3,4,},{6,0,7,1,5,2,4,3,},
		{6,0,7,1,5,3,2,4,},{6,0,7,1,5,3,4,2,},{6,0,7,1,5,4,2,3,},{6,0,7,1,5,4,3,2,},{6,0,7,2,1,3,4,5,},{6,0,7,2,1,3,5,4,},{6,0,7,2,1,4,3,5,},{6,0,7,2,1,4,5,3,},{6,0,7,2,3,1,4,5,},{6,0,7,2,3,1,5,4,},
		{6,0,7,2,3,4,1,5,},{6,0,7,2,3,4,5,1,},{6,0,7,2,5,1,3,4,},{6,0,7,2,5,1,4,3,},{6,0,7,2,5,3,1,4,},{6,0,7,2,5,3,4,1,},{6,0,7,2,5,4,1,3,},{6,0,7,2,5,4,3,1,},{6,0,7,4,1,2,3,5,},{6,0,7,4,1,2,5,3,},
		{6,0,7,4,1,3,2,5,},{6,0,7,4,1,3,5,2,},{6,0,7,4,2,1,3,5,},{6,0,7,4,2,1,5,3,},{6,0,7,4,2,3,1,5,},{6,0,7,4,2,3,5,1,},{6,0,7,4,3,1,2,5,},{6,0,7,4,3,1,5,2,},{6,0,7,4,3,2,1,5,},{6,0,7,4,3,2,5,1,},
		{6,0,7,4,5,1,2,3,},{6,0,7,4,5,1,3,2,},{6,0,7,4,5,2,1,3,},{6,0,7,4,5,2,3,1,},{6,0,7,4,5,3,1,2,},{6,0,7,4,5,3,2,1,},{6,0,7,5,1,2,3,4,},{6,0,7,5,1,2,4,3,},{6,0,7,5,1,3,2,4,},{6,0,7,5,1,3,4,2,},
		{6,0,7,5,1,4,2,3,},{6,0,7,5,1,4,3,2,},{6,0,7,5,2,1,3,4,},{6,0,7,5,2,1,4,3,},{6,0,7,5,2,3,1,4,},{6,0,7,5,2,3,4,1,},{6,0,7,5,2,4,1,3,},{6,0,7,5,2,4,3,1,},{6,0,7,5,3,1,2,4,},{6,0,7,5,3,1,4,2,},
		{6,0,7,5,3,2,1,4,},{6,0,7,5,3,2,4,1,},{6,0,7,5,3,4,1,2,},{6,0,7,5,3,4,2,1,},{6,2,0,1,3,4,7,5,},{6,2,0,1,3,7,4,5,},{6,2,0,1,3,7,5,4,},{6,2,0,1,5,3,7,4,},{6,2,0,1,5,4,7,3,},{6,2,0,1,5,7,3,4,},
		{6,2,0,1,5,7,4,3,},{6,2,0,1,7,3,4,5,},{6,2,0,1,7,3,5,4,},{6,2,0,1,7,4,3,5,},{6,2,0,1,7,4,5,3,},{6,2,0,4,1,3,7,5,},{6,2,0,4,1,7,3,5,},{6,2,0,4,1,7,5,3,},{6,2,0,4,3,1,7,5,},{6,2,0,4,3,7,1,5,},
		{6,2,0,4,3,7,5,1,},{6,2,0,4,5,1,7,3,},{6,2,0,4,5,3,7,1,},{6,2,0,4,5,7,1,3,},{6,2,0,4,5,7,3,1,},{6,2,0,4,7,1,3,5,},{6,2,0,4,7,1,5,3,},{6,2,0,4,7,3,1,5,},{6,2,0,4,7,3,5,1,},{6,2,0,5,1,3,7,4,},
		{6,2,0,5,1,4,7,3,},{6,2,0,5,1,7,3,4,},{6,2,0,5,1,7,4,3,},{6,2,0,5,3,1,7,4,},{6,2,0,5,3,4,7,1,},{6,2,0,5,3,7,1,4,},{6,2,0,5,3,7,4,1,},{6,2,0,5,7,1,3,4,},{6,2,0,5,7,1,4,3,},{6,2,0,5,7,3,1,4,},
		{6,2,0,5,7,3,4,1,},{6,2,0,5,7,4,1,3,},{6,2,0,5,7,4,3,1,},{6,2,0,7,1,3,4,5,},{6,2,0,7,1,3,5,4,},{6,2,0,7,1,4,3,5,},{6,2,0,7,1,4,5,3,},{6,2,0,7,3,1,4,5,},{6,2,0,7,3,1,5,4,},{6,2,0,7,3,4,1,5,},
		{6,2,0,7,3,4,5,1,},{6,2,0,7,5,1,3,4,},{6,2,0,7,5,1,4,3,},{6,2,0,7,5,3,1,4,},{6,2,0,7,5,3,4,1,},{6,2,0,7,5,4,1,3,},{6,2,0,7,5,4,3,1,},{6,2,1,0,3,4,7,5,},{6,2,1,0,3,7,4,5,},{6,2,1,0,3,7,5,4,},
		{6,2,1,0,5,3,7,4,},{6,2,1,0,5,4,7,3,},{6,2,1,0,5,7,3,4,},{6,2,1,0,5,7,4,3,},{6,2,1,0,7,3,4,5,},{6,2,1,0,7,3,5,4,},{6,2,1,0,7,4,3,5,},{6,2,1,0,7,4,5,3,},{6,2,1,4,0,3,7,5,},{6,2,1,4,0,7,3,5,},
		{6,2,1,4,0,7,5,3,},{6,2,1,4,3,0,7,5,},{6,2,1,4,3,7,0,5,},{6,2,1,4,3,7,5,0,},{6,2,1,4,5,0,7,3,},{6,2,1,4,5,3,7,0,},{6,2,1,4,5,7,0,3,},{6,2,1,4,5,7,3,0,},{6,2,1,4,7,0,3,5,},{6,2,1,4,7,0,5,3,},
		{6,2,1,4,7,3,0,5,},{6,2,1,4,7,3,5,0,},{6,2,1,5,0,3,7,4,},{6,2,1,5,0,4,7,3,},{6,2,1,5,0,7,3,4,},{6,2,1,5,0,7,4,3,},{6,2,1,5,3,0,7,4,},{6,2,1,5,3,4,7,0,},{6,2,1,5,3,7,0,4,},{6,2,1,5,3,7,4,0,},
		{6,2,1,5,7,0,3,4,},{6,2,1,5,7,0,4,3,},{6,2,1,5,7,3,0,4,},{6,2,1,5,7,3,4,0,},{6,2,1,5,7,4,0,3,},{6,2,1,5,7,4,3,0,},{6,2,1,7,0,3,4,5,},{6,2,1,7,0,3,5,4,},{6,2,1,7,0,4,3,5,},{6,2,1,7,0,4,5,3,},
		{6,2,1,7,3,0,4,5,},{6,2,1,7,3,0,5,4,},{6,2,1,7,3,4,0,5,},{6,2,1,7,3,4,5,0,},{6,2,1,7,5,0,3,4,},{6,2,1,7,5,0,4,3,},{6,2,1,7,5,3,0,4,},{6,2,1,7,5,3,4,0,},{6,2,1,7,5,4,0,3,},{6,2,1,7,5,4,3,0,},
		{6,2,3,0,1,4,7,5,},{6,2,3,0,1,7,4,5,},{6,2,3,0,1,7,5,4,},{6,2,3,0,5,1,7,4,},{6,2,3,0,5,4,7,1,},{6,2,3,0,5,7,1,4,},{6,2,3,0,5,7,4,1,},{6,2,3,0,7,1,4,5,},{6,2,3,0,7,1,5,4,},{6,2,3,0,7,4,1,5,},
		{6,2,3,0,7,4,5,1,},{6,2,3,1,0,4,7,5,},{6,2,3,1,0,7,4,5,},{6,2,3,1,0,7,5,4,},{6,2,3,1,5,0,7,4,},{6,2,3,1,5,4,7,0,},{6,2,3,1,5,7,0,4,},{6,2,3,1,5,7,4,0,},{6,2,3,1,7,0,4,5,},{6,2,3,1,7,0,5,4,},
		{6,2,3,1,7,4,0,5,},{6,2,3,1,7,4,5,0,},{6,2,3,4,0,1,7,5,},{6,2,3,4,0,7,1,5,},{6,2,3,4,0,7,5,1,},{6,2,3,4,1,0,7,5,},{6,2,3,4,1,7,0,5,},{6,2,3,4,1,7,5,0,},{6,2,3,4,5,0,7,1,},{6,2,3,4,5,1,7,0,},
		{6,2,3,4,5,7,0,1,},{6,2,3,4,5,7,1,0,},{6,2,3,4,7,0,1,5,},{6,2,3,4,7,0,5,1,},{6,2,3,4,7,1,0,5,},{6,2,3,4,7,1,5,0,},{6,2,3,5,0,1,7,4,},{6,2,3,5,0,4,7,1,},{6,2,3,5,0,7,1,4,},{6,2,3,5,0,7,4,1,},
		{6,2,3,5,1,0,7,4,},{6,2,3,5,1,4,7,0,},{6,2,3,5,1,7,0,4,},{6,2,3,5,1,7,4,0,},{6,2,3,5,7,0,1,4,},{6,2,3,5,7,0,4,1,},{6,2,3,5,7,1,0,4,},{6,2,3,5,7,1,4,0,},{6,2,3,5,7,4,0,1,},{6,2,3,5,7,4,1,0,},
		{6,2,3,7,0,1,4,5,},{6,2,3,7,0,1,5,4,},{6,2,3,7,0,4,1,5,},{6,2,3,7,0,4,5,1,},{6,2,3,7,1,0,4,5,},{6,2,3,7,1,0,5,4,},{6,2,3,7,1,4,0,5,},{6,2,3,7,1,4,5,0,},{6,2,3,7,5,0,1,4,},{6,2,3,7,5,0,4,1,},
		{6,2,3,7,5,1,0,4,},{6,2,3,7,5,1,4,0,},{6,2,3,7,5,4,0,1,},{6,2,3,7,5,4,1,0,},{6,2,4,0,1,3,7,5,},{6,2,4,0,1,7,3,5,},{6,2,4,0,1,7,5,3,},{6,2,4,0,3,1,7,5,},{6,2,4,0,3,7,1,5,},{6,2,4,0,3,7,5,1,},
		{6,2,4,0,5,1,7,3,},{6,2,4,0,5,3,7,1,},{6,2,4,0,5,7,1,3,},{6,2,4,0,5,7,3,1,},{6,2,4,0,7,1,3,5,},{6,2,4,0,7,1,5,3,},{6,2,4,0,7,3,1,5,},{6,2,4,0,7,3,5,1,},{6,2,4,1,0,3,7,5,},{6,2,4,1,0,7,3,5,},
		{6,2,4,1,0,7,5,3,},{6,2,4,1,3,0,7,5,},{6,2,4,1,3,7,0,5,},{6,2,4,1,3,7,5,0,},{6,2,4,1,5,0,7,3,},{6,2,4,1,5,3,7,0,},{6,2,4,1,5,7,0,3,},{6,2,4,1,5,7,3,0,},{6,2,4,1,7,0,3,5,},{6,2,4,1,7,0,5,3,},
		{6,2,4,1,7,3,0,5,},{6,2,4,1,7,3,5,0,},{6,2,4,5,0,1,7,3,},{6,2,4,5,0,3,7,1,},{6,2,4,5,0,7,1,3,},{6,2,4,5,0,7,3,1,},{6,2,4,5,1,0,7,3,},{6,2,4,5,1,3,7,0,},{6,2,4,5,1,7,0,3,},{6,2,4,5,1,7,3,0,},
		{6,2,4,5,3,0,7,1,},{6,2,4,5,3,1,7,0,},{6,2,4,5,3,7,0,1,},{6,2,4,5,3,7,1,0,},{6,2,4,5,7,0,1,3,},{6,2,4,5,7,0,3,1,},{6,2,4,5,7,1,0,3,},{6,2,4,5,7,1,3,0,},{6,2,4,5,7,3,0,1,},{6,2,4,5,7,3,1,0,},
		{6,2,4,7,0,1,3,5,},{6,2,4,7,0,1,5,3,},{6,2,4,7,0,3,1,5,},{6,2,4,7,0,3,5,1,},{6,2,4,7,1,0,3,5,},{6,2,4,7,1,0,5,3,},{6,2,4,7,1,3,0,5,},{6,2,4,7,1,3,5,0,},{6,2,4,7,3,0,1,5,},{6,2,4,7,3,0,5,1,},
		{6,2,4,7,3,1,0,5,},{6,2,4,7,3,1,5,0,},{6,2,4,7,5,0,1,3,},{6,2,4,7,5,0,3,1,},{6,2,4,7,5,1,0,3,},{6,2,4,7,5,1,3,0,},{6,2,4,7,5,3,0,1,},{6,2,4,7,5,3,1,0,},{6,2,5,0,1,3,7,4,},{6,2,5,0,1,4,7,3,},
		{6,2,5,0,1,7,3,4,},{6,2,5,0,1,7,4,3,},{6,2,5,0,3,1,7,4,},{6,2,5,0,3,4,7,1,},{6,2,5,0,3,7,1,4,},{6,2,5,0,3,7,4,1,},{6,2,5,0,7,1,3,4,},{6,2,5,0,7,1,4,3,},{6,2,5,0,7,3,1,4,},{6,2,5,0,7,3,4,1,},
		{6,2,5,0,7,4,1,3,},{6,2,5,0,7,4,3,1,},{6,2,5,1,0,3,7,4,},{6,2,5,1,0,4,7,3,},{6,2,5,1,0,7,3,4,},{6,2,5,1,0,7,4,3,},{6,2,5,1,3,0,7,4,},{6,2,5,1,3,4,7,0,},{6,2,5,1,3,7,0,4,},{6,2,5,1,3,7,4,0,},
		{6,2,5,1,7,0,3,4,},{6,2,5,1,7,0,4,3,},{6,2,5,1,7,3,0,4,},{6,2,5,1,7,3,4,0,},{6,2,5,1,7,4,0,3,},{6,2,5,1,7,4,3,0,},{6,2,5,4,0,1,7,3,},{6,2,5,4,0,3,7,1,},{6,2,5,4,0,7,1,3,},{6,2,5,4,0,7,3,1,},
		{6,2,5,4,1,0,7,3,},{6,2,5,4,1,3,7,0,},{6,2,5,4,1,7,0,3,},{6,2,5,4,1,7,3,0,},{6,2,5,4,3,0,7,1,},{6,2,5,4,3,1,7,0,},{6,2,5,4,3,7,0,1,},{6,2,5,4,3,7,1,0,},{6,2,5,4,7,0,1,3,},{6,2,5,4,7,0,3,1,},
		{6,2,5,4,7,1,0,3,},{6,2,5,4,7,1,3,0,},{6,2,5,4,7,3,0,1,},{6,2,5,4,7,3,1,0,},{6,2,5,7,0,1,3,4,},{6,2,5,7,0,1,4,3,},{6,2,5,7,0,3,1,4,},{6,2,5,7,0,3,4,1,},{6,2,5,7,0,4,1,3,},{6,2,5,7,0,4,3,1,},
		{6,2,5,7,1,0,3,4,},{6,2,5,7,1,0,4,3,},{6,2,5,7,1,3,0,4,},{6,2,5,7,1,3,4,0,},{6,2,5,7,1,4,0,3,},{6,2,5,7,1,4,3,0,},{6,2,5,7,3,0,1,4,},{6,2,5,7,3,0,4,1,},{6,2,5,7,3,1,0,4,},{6,2,5,7,3,1,4,0,},
		{6,2,5,7,3,4,0,1,},{6,2,5,7,3,4,1,0,},{6,2,7,0,1,3,4,5,},{6,2,7,0,1,3,5,4,},{6,2,7,0,1,4,3,5,},{6,2,7,0,1,4,5,3,},{6,2,7,0,3,1,4,5,},{6,2,7,0,3,1,5,4,},{6,2,7,0,3,4,1,5,},{6,2,7,0,3,4,5,1,},
		{6,2,7,0,5,1,3,4,},{6,2,7,0,5,1,4,3,},{6,2,7,0,5,3,1,4,},{6,2,7,0,5,3,4,1,},{6,2,7,0,5,4,1,3,},{6,2,7,0,5,4,3,1,},{6,2,7,1,0,3,4,5,},{6,2,7,1,0,3,5,4,},{6,2,7,1,0,4,3,5,},{6,2,7,1,0,4,5,3,},
		{6,2,7,1,3,0,4,5,},{6,2,7,1,3,0,5,4,},{6,2,7,1,3,4,0,5,},{6,2,7,1,3,4,5,0,},{6,2,7,1,5,0,3,4,},{6,2,7,1,5,0,4,3,},{6,2,7,1,5,3,0,4,},{6,2,7,1,5,3,4,0,},{6,2,7,1,5,4,0,3,},{6,2,7,1,5,4,3,0,},
		{6,2,7,4,0,1,3,5,},{6,2,7,4,0,1,5,3,},{6,2,7,4,0,3,1,5,},{6,2,7,4,0,3,5,1,},{6,2,7,4,1,0,3,5,},{6,2,7,4,1,0,5,3,},{6,2,7,4,1,3,0,5,},{6,2,7,4,1,3,5,0,},{6,2,7,4,3,0,1,5,},{6,2,7,4,3,0,5,1,},
		{6,2,7,4,3,1,0,5,},{6,2,7,4,3,1,5,0,},{6,2,7,4,5,0,1,3,},{6,2,7,4,5,0,3,1,},{6,2,7,4,5,1,0,3,},{6,2,7,4,5,1,3,0,},{6,2,7,4,5,3,0,1,},{6,2,7,4,5,3,1,0,},{6,2,7,5,0,1,3,4,},{6,2,7,5,0,1,4,3,},
		{6,2,7,5,0,3,1,4,},{6,2,7,5,0,3,4,1,},{6,2,7,5,0,4,1,3,},{6,2,7,5,0,4,3,1,},{6,2,7,5,1,0,3,4,},{6,2,7,5,1,0,4,3,},{6,2,7,5,1,3,0,4,},{6,2,7,5,1,3,4,0,},{6,2,7,5,1,4,0,3,},{6,2,7,5,1,4,3,0,},
		{6,2,7,5,3,0,1,4,},{6,2,7,5,3,0,4,1,},{6,2,7,5,3,1,0,4,},{6,2,7,5,3,1,4,0,},{6,2,7,5,3,4,0,1,},{6,2,7,5,3,4,1,0,},{6,3,0,1,2,4,7,5,},{6,3,0,1,2,7,4,5,},{6,3,0,1,2,7,5,4,},{6,3,0,1,5,2,7,4,},
		{6,3,0,1,5,4,7,2,},{6,3,0,1,5,7,2,4,},{6,3,0,1,5,7,4,2,},{6,3,0,1,7,2,4,5,},{6,3,0,1,7,2,5,4,},{6,3,0,1,7,4,2,5,},{6,3,0,1,7,4,5,2,},{6,3,0,2,1,4,7,5,},{6,3,0,2,1,7,4,5,},{6,3,0,2,1,7,5,4,},
		{6,3,0,2,5,1,7,4,},{6,3,0,2,5,4,7,1,},{6,3,0,2,5,7,1,4,},{6,3,0,2,5,7,4,1,},{6,3,0,2,7,1,4,5,},{6,3,0,2,7,1,5,4,},{6,3,0,2,7,4,1,5,},{6,3,0,2,7,4,5,1,},{6,3,0,4,1,2,7,5,},{6,3,0,4,1,7,2,5,},
		{6,3,0,4,1,7,5,2,},{6,3,0,4,2,1,7,5,},{6,3,0,4,2,7,1,5,},{6,3,0,4,2,7,5,1,},{6,3,0,4,5,1,7,2,},{6,3,0,4,5,2,7,1,},{6,3,0,4,5,7,1,2,},{6,3,0,4,5,7,2,1,},{6,3,0,4,7,1,2,5,},{6,3,0,4,7,1,5,2,},
		{6,3,0,4,7,2,1,5,},{6,3,0,4,7,2,5,1,},{6,3,0,5,1,2,7,4,},{6,3,0,5,1,4,7,2,},{6,3,0,5,1,7,2,4,},{6,3,0,5,1,7,4,2,},{6,3,0,5,2,1,7,4,},{6,3,0,5,2,4,7,1,},{6,3,0,5,2,7,1,4,},{6,3,0,5,2,7,4,1,},
		{6,3,0,5,7,1,2,4,},{6,3,0,5,7,1,4,2,},{6,3,0,5,7,2,1,4,},{6,3,0,5,7,2,4,1,},{6,3,0,5,7,4,1,2,},{6,3,0,5,7,4,2,1,},{6,3,0,7,1,2,4,5,},{6,3,0,7,1,2,5,4,},{6,3,0,7,1,4,2,5,},{6,3,0,7,1,4,5,2,},
		{6,3,0,7,2,1,4,5,},{6,3,0,7,2,1,5,4,},{6,3,0,7,2,4,1,5,},{6,3,0,7,2,4,5,1,},{6,3,0,7,5,1,2,4,},{6,3,0,7,5,1,4,2,},{6,3,0,7,5,2,1,4,},{6,3,0,7,5,2,4,1,},{6,3,0,7,5,4,1,2,},{6,3,0,7,5,4,2,1,},
		{6,3,1,0,2,4,7,5,},{6,3,1,0,2,7,4,5,},{6,3,1,0,2,7,5,4,},{6,3,1,0,5,2,7,4,},{6,3,1,0,5,4,7,2,},{6,3,1,0,5,7,2,4,},{6,3,1,0,5,7,4,2,},{6,3,1,0,7,2,4,5,},{6,3,1,0,7,2,5,4,},{6,3,1,0,7,4,2,5,},
		{6,3,1,0,7,4,5,2,},{6,3,1,2,0,4,7,5,},{6,3,1,2,0,7,4,5,},{6,3,1,2,0,7,5,4,},{6,3,1,2,5,0,7,4,},{6,3,1,2,5,4,7,0,},{6,3,1,2,5,7,0,4,},{6,3,1,2,5,7,4,0,},{6,3,1,2,7,0,4,5,},{6,3,1,2,7,0,5,4,},
		{6,3,1,2,7,4,0,5,},{6,3,1,2,7,4,5,0,},{6,3,1,4,0,2,7,5,},{6,3,1,4,0,7,2,5,},{6,3,1,4,0,7,5,2,},{6,3,1,4,2,0,7,5,},{6,3,1,4,2,7,0,5,},{6,3,1,4,2,7,5,0,},{6,3,1,4,5,0,7,2,},{6,3,1,4,5,2,7,0,},
		{6,3,1,4,5,7,0,2,},{6,3,1,4,5,7,2,0,},{6,3,1,4,7,0,2,5,},{6,3,1,4,7,0,5,2,},{6,3,1,4,7,2,0,5,},{6,3,1,4,7,2,5,0,},{6,3,1,5,0,2,7,4,},{6,3,1,5,0,4,7,2,},{6,3,1,5,0,7,2,4,},{6,3,1,5,0,7,4,2,},
		{6,3,1,5,2,0,7,4,},{6,3,1,5,2,4,7,0,},{6,3,1,5,2,7,0,4,},{6,3,1,5,2,7,4,0,},{6,3,1,5,7,0,2,4,},{6,3,1,5,7,0,4,2,},{6,3,1,5,7,2,0,4,},{6,3,1,5,7,2,4,0,},{6,3,1,5,7,4,0,2,},{6,3,1,5,7,4,2,0,},
		{6,3,1,7,0,2,4,5,},{6,3,1,7,0,2,5,4,},{6,3,1,7,0,4,2,5,},{6,3,1,7,0,4,5,2,},{6,3,1,7,2,0,4,5,},{6,3,1,7,2,0,5,4,},{6,3,1,7,2,4,0,5,},{6,3,1,7,2,4,5,0,},{6,3,1,7,5,0,2,4,},{6,3,1,7,5,0,4,2,},
		{6,3,1,7,5,2,0,4,},{6,3,1,7,5,2,4,0,},{6,3,1,7,5,4,0,2,},{6,3,1,7,5,4,2,0,},{6,3,4,0,1,2,7,5,},{6,3,4,0,1,7,2,5,},{6,3,4,0,1,7,5,2,},{6,3,4,0,2,1,7,5,},{6,3,4,0,2,7,1,5,},{6,3,4,0,2,7,5,1,},
		{6,3,4,0,5,1,7,2,},{6,3,4,0,5,2,7,1,},{6,3,4,0,5,7,1,2,},{6,3,4,0,5,7,2,1,},{6,3,4,0,7,1,2,5,},{6,3,4,0,7,1,5,2,},{6,3,4,0,7,2,1,5,},{6,3,4,0,7,2,5,1,},{6,3,4,1,0,2,7,5,},{6,3,4,1,0,7,2,5,},
		{6,3,4,1,0,7,5,2,},{6,3,4,1,2,0,7,5,},{6,3,4,1,2,7,0,5,},{6,3,4,1,2,7,5,0,},{6,3,4,1,5,0,7,2,},{6,3,4,1,5,2,7,0,},{6,3,4,1,5,7,0,2,},{6,3,4,1,5,7,2,0,},{6,3,4,1,7,0,2,5,},{6,3,4,1,7,0,5,2,},
		{6,3,4,1,7,2,0,5,},{6,3,4,1,7,2,5,0,},{6,3,4,2,0,1,7,5,},{6,3,4,2,0,7,1,5,},{6,3,4,2,0,7,5,1,},{6,3,4,2,1,0,7,5,},{6,3,4,2,1,7,0,5,},{6,3,4,2,1,7,5,0,},{6,3,4,2,5,0,7,1,},{6,3,4,2,5,1,7,0,},
		{6,3,4,2,5,7,0,1,},{6,3,4,2,5,7,1,0,},{6,3,4,2,7,0,1,5,},{6,3,4,2,7,0,5,1,},{6,3,4,2,7,1,0,5,},{6,3,4,2,7,1,5,0,},{6,3,4,5,0,1,7,2,},{6,3,4,5,0,2,7,1,},{6,3,4,5,0,7,1,2,},{6,3,4,5,0,7,2,1,},
		{6,3,4,5,1,0,7,2,},{6,3,4,5,1,2,7,0,},{6,3,4,5,1,7,0,2,},{6,3,4,5,1,7,2,0,},{6,3,4,5,2,0,7,1,},{6,3,4,5,2,1,7,0,},{6,3,4,5,2,7,0,1,},{6,3,4,5,2,7,1,0,},{6,3,4,5,7,0,1,2,},{6,3,4,5,7,0,2,1,},
		{6,3,4,5,7,1,0,2,},{6,3,4,5,7,1,2,0,},{6,3,4,5,7,2,0,1,},{6,3,4,5,7,2,1,0,},{6,3,4,7,0,1,2,5,},{6,3,4,7,0,1,5,2,},{6,3,4,7,0,2,1,5,},{6,3,4,7,0,2,5,1,},{6,3,4,7,1,0,2,5,},{6,3,4,7,1,0,5,2,},
		{6,3,4,7,1,2,0,5,},{6,3,4,7,1,2,5,0,},{6,3,4,7,2,0,1,5,},{6,3,4,7,2,0,5,1,},{6,3,4,7,2,1,0,5,},{6,3,4,7,2,1,5,0,},{6,3,4,7,5,0,1,2,},{6,3,4,7,5,0,2,1,},{6,3,4,7,5,1,0,2,},{6,3,4,7,5,1,2,0,},
		{6,3,4,7,5,2,0,1,},{6,3,4,7,5,2,1,0,},{6,3,5,0,1,2,7,4,},{6,3,5,0,1,4,7,2,},{6,3,5,0,1,7,2,4,},{6,3,5,0,1,7,4,2,},{6,3,5,0,2,1,7,4,},{6,3,5,0,2,4,7,1,},{6,3,5,0,2,7,1,4,},{6,3,5,0,2,7,4,1,},
		{6,3,5,0,7,1,2,4,},{6,3,5,0,7,1,4,2,},{6,3,5,0,7,2,1,4,},{6,3,5,0,7,2,4,1,},{6,3,5,0,7,4,1,2,},{6,3,5,0,7,4,2,1,},{6,3,5,1,0,2,7,4,},{6,3,5,1,0,4,7,2,},{6,3,5,1,0,7,2,4,},{6,3,5,1,0,7,4,2,},
		{6,3,5,1,2,0,7,4,},{6,3,5,1,2,4,7,0,},{6,3,5,1,2,7,0,4,},{6,3,5,1,2,7,4,0,},{6,3,5,1,7,0,2,4,},{6,3,5,1,7,0,4,2,},{6,3,5,1,7,2,0,4,},{6,3,5,1,7,2,4,0,},{6,3,5,1,7,4,0,2,},{6,3,5,1,7,4,2,0,},
		{6,3,5,2,0,1,7,4,},{6,3,5,2,0,4,7,1,},{6,3,5,2,0,7,1,4,},{6,3,5,2,0,7,4,1,},{6,3,5,2,1,0,7,4,},{6,3,5,2,1,4,7,0,},{6,3,5,2,1,7,0,4,},{6,3,5,2,1,7,4,0,},{6,3,5,2,7,0,1,4,},{6,3,5,2,7,0,4,1,},
		{6,3,5,2,7,1,0,4,},{6,3,5,2,7,1,4,0,},{6,3,5,2,7,4,0,1,},{6,3,5,2,7,4,1,0,},{6,3,5,4,0,1,7,2,},{6,3,5,4,0,2,7,1,},{6,3,5,4,0,7,1,2,},{6,3,5,4,0,7,2,1,},{6,3,5,4,1,0,7,2,},{6,3,5,4,1,2,7,0,},
		{6,3,5,4,1,7,0,2,},{6,3,5,4,1,7,2,0,},{6,3,5,4,2,0,7,1,},{6,3,5,4,2,1,7,0,},{6,3,5,4,2,7,0,1,},{6,3,5,4,2,7,1,0,},{6,3,5,4,7,0,1,2,},{6,3,5,4,7,0,2,1,},{6,3,5,4,7,1,0,2,},{6,3,5,4,7,1,2,0,},
		{6,3,5,4,7,2,0,1,},{6,3,5,4,7,2,1,0,},{6,3,5,7,0,1,2,4,},{6,3,5,7,0,1,4,2,},{6,3,5,7,0,2,1,4,},{6,3,5,7,0,2,4,1,},{6,3,5,7,0,4,1,2,},{6,3,5,7,0,4,2,1,},{6,3,5,7,1,0,2,4,},{6,3,5,7,1,0,4,2,},
		{6,3,5,7,1,2,0,4,},{6,3,5,7,1,2,4,0,},{6,3,5,7,1,4,0,2,},{6,3,5,7,1,4,2,0,},{6,3,5,7,2,0,1,4,},{6,3,5,7,2,0,4,1,},{6,3,5,7,2,1,0,4,},{6,3,5,7,2,1,4,0,},{6,3,5,7,2,4,0,1,},{6,3,5,7,2,4,1,0,},
		{6,3,7,0,1,2,4,5,},{6,3,7,0,1,2,5,4,},{6,3,7,0,1,4,2,5,},{6,3,7,0,1,4,5,2,},{6,3,7,0,2,1,4,5,},{6,3,7,0,2,1,5,4,},{6,3,7,0,2,4,1,5,},{6,3,7,0,2,4,5,1,},{6,3,7,0,5,1,2,4,},{6,3,7,0,5,1,4,2,},
		{6,3,7,0,5,2,1,4,},{6,3,7,0,5,2,4,1,},{6,3,7,0,5,4,1,2,},{6,3,7,0,5,4,2,1,},{6,3,7,1,0,2,4,5,},{6,3,7,1,0,2,5,4,},{6,3,7,1,0,4,2,5,},{6,3,7,1,0,4,5,2,},{6,3,7,1,2,0,4,5,},{6,3,7,1,2,0,5,4,},
		{6,3,7,1,2,4,0,5,},{6,3,7,1,2,4,5,0,},{6,3,7,1,5,0,2,4,},{6,3,7,1,5,0,4,2,},{6,3,7,1,5,2,0,4,},{6,3,7,1,5,2,4,0,},{6,3,7,1,5,4,0,2,},{6,3,7,1,5,4,2,0,},{6,3,7,2,0,1,4,5,},{6,3,7,2,0,1,5,4,},
		{6,3,7,2,0,4,1,5,},{6,3,7,2,0,4,5,1,},{6,3,7,2,1,0,4,5,},{6,3,7,2,1,0,5,4,},{6,3,7,2,1,4,0,5,},{6,3,7,2,1,4,5,0,},{6,3,7,2,5,0,1,4,},{6,3,7,2,5,0,4,1,},{6,3,7,2,5,1,0,4,},{6,3,7,2,5,1,4,0,},
		{6,3,7,2,5,4,0,1,},{6,3,7,2,5,4,1,0,},{6,3,7,4,0,1,2,5,},{6,3,7,4,0,1,5,2,},{6,3,7,4,0,2,1,5,},{6,3,7,4,0,2,5,1,},{6,3,7,4,1,0,2,5,},{6,3,7,4,1,0,5,2,},{6,3,7,4,1,2,0,5,},{6,3,7,4,1,2,5,0,},
		{6,3,7,4,2,0,1,5,},{6,3,7,4,2,0,5,1,},{6,3,7,4,2,1,0,5,},{6,3,7,4,2,1,5,0,},{6,3,7,4,5,0,1,2,},{6,3,7,4,5,0,2,1,},{6,3,7,4,5,1,0,2,},{6,3,7,4,5,1,2,0,},{6,3,7,4,5,2,0,1,},{6,3,7,4,5,2,1,0,},
		{6,3,7,5,0,1,2,4,},{6,3,7,5,0,1,4,2,},{6,3,7,5,0,2,1,4,},{6,3,7,5,0,2,4,1,},{6,3,7,5,0,4,1,2,},{6,3,7,5,0,4,2,1,},{6,3,7,5,1,0,2,4,},{6,3,7,5,1,0,4,2,},{6,3,7,5,1,2,0,4,},{6,3,7,5,1,2,4,0,},
		{6,3,7,5,1,4,0,2,},{6,3,7,5,1,4,2,0,},{6,3,7,5,2,0,1,4,},{6,3,7,5,2,0,4,1,},{6,3,7,5,2,1,0,4,},{6,3,7,5,2,1,4,0,},{6,3,7,5,2,4,0,1,},{6,3,7,5,2,4,1,0,},{6,4,0,1,2,3,7,5,},{6,4,0,1,2,7,3,5,},
		{6,4,0,1,2,7,5,3,},{6,4,0,1,3,2,7,5,},{6,4,0,1,3,7,2,5,},{6,4,0,1,3,7,5,2,},{6,4,0,1,5,2,7,3,},{6,4,0,1,5,3,7,2,},{6,4,0,1,5,7,2,3,},{6,4,0,1,5,7,3,2,},{6,4,0,1,7,2,3,5,},{6,4,0,1,7,2,5,3,},
		{6,4,0,1,7,3,2,5,},{6,4,0,1,7,3,5,2,},{6,4,0,2,1,3,7,5,},{6,4,0,2,1,7,3,5,},{6,4,0,2,1,7,5,3,},{6,4,0,2,3,1,7,5,},{6,4,0,2,3,7,1,5,},{6,4,0,2,3,7,5,1,},{6,4,0,2,5,1,7,3,},{6,4,0,2,5,3,7,1,},
		{6,4,0,2,5,7,1,3,},{6,4,0,2,5,7,3,1,},{6,4,0,2,7,1,3,5,},{6,4,0,2,7,1,5,3,},{6,4,0,2,7,3,1,5,},{6,4,0,2,7,3,5,1,},{6,4,0,5,1,2,7,3,},{6,4,0,5,1,3,7,2,},{6,4,0,5,1,7,2,3,},{6,4,0,5,1,7,3,2,},
		{6,4,0,5,2,1,7,3,},{6,4,0,5,2,3,7,1,},{6,4,0,5,2,7,1,3,},{6,4,0,5,2,7,3,1,},{6,4,0,5,3,1,7,2,},{6,4,0,5,3,2,7,1,},{6,4,0,5,3,7,1,2,},{6,4,0,5,3,7,2,1,},{6,4,0,5,7,1,2,3,},{6,4,0,5,7,1,3,2,},
		{6,4,0,5,7,2,1,3,},{6,4,0,5,7,2,3,1,},{6,4,0,5,7,3,1,2,},{6,4,0,5,7,3,2,1,},{6,4,0,7,1,2,3,5,},{6,4,0,7,1,2,5,3,},{6,4,0,7,1,3,2,5,},{6,4,0,7,1,3,5,2,},{6,4,0,7,2,1,3,5,},{6,4,0,7,2,1,5,3,},
		{6,4,0,7,2,3,1,5,},{6,4,0,7,2,3,5,1,},{6,4,0,7,3,1,2,5,},{6,4,0,7,3,1,5,2,},{6,4,0,7,3,2,1,5,},{6,4,0,7,3,2,5,1,},{6,4,0,7,5,1,2,3,},{6,4,0,7,5,1,3,2,},{6,4,0,7,5,2,1,3,},{6,4,0,7,5,2,3,1,},
		{6,4,0,7,5,3,1,2,},{6,4,0,7,5,3,2,1,},{6,4,1,0,2,3,7,5,},{6,4,1,0,2,7,3,5,},{6,4,1,0,2,7,5,3,},{6,4,1,0,3,2,7,5,},{6,4,1,0,3,7,2,5,},{6,4,1,0,3,7,5,2,},{6,4,1,0,5,2,7,3,},{6,4,1,0,5,3,7,2,},
		{6,4,1,0,5,7,2,3,},{6,4,1,0,5,7,3,2,},{6,4,1,0,7,2,3,5,},{6,4,1,0,7,2,5,3,},{6,4,1,0,7,3,2,5,},{6,4,1,0,7,3,5,2,},{6,4,1,2,0,3,7,5,},{6,4,1,2,0,7,3,5,},{6,4,1,2,0,7,5,3,},{6,4,1,2,3,0,7,5,},
		{6,4,1,2,3,7,0,5,},{6,4,1,2,3,7,5,0,},{6,4,1,2,5,0,7,3,},{6,4,1,2,5,3,7,0,},{6,4,1,2,5,7,0,3,},{6,4,1,2,5,7,3,0,},{6,4,1,2,7,0,3,5,},{6,4,1,2,7,0,5,3,},{6,4,1,2,7,3,0,5,},{6,4,1,2,7,3,5,0,},
		{6,4,1,5,0,2,7,3,},{6,4,1,5,0,3,7,2,},{6,4,1,5,0,7,2,3,},{6,4,1,5,0,7,3,2,},{6,4,1,5,2,0,7,3,},{6,4,1,5,2,3,7,0,},{6,4,1,5,2,7,0,3,},{6,4,1,5,2,7,3,0,},{6,4,1,5,3,0,7,2,},{6,4,1,5,3,2,7,0,},
		{6,4,1,5,3,7,0,2,},{6,4,1,5,3,7,2,0,},{6,4,1,5,7,0,2,3,},{6,4,1,5,7,0,3,2,},{6,4,1,5,7,2,0,3,},{6,4,1,5,7,2,3,0,},{6,4,1,5,7,3,0,2,},{6,4,1,5,7,3,2,0,},{6,4,1,7,0,2,3,5,},{6,4,1,7,0,2,5,3,},
		{6,4,1,7,0,3,2,5,},{6,4,1,7,0,3,5,2,},{6,4,1,7,2,0,3,5,},{6,4,1,7,2,0,5,3,},{6,4,1,7,2,3,0,5,},{6,4,1,7,2,3,5,0,},{6,4,1,7,3,0,2,5,},{6,4,1,7,3,0,5,2,},{6,4,1,7,3,2,0,5,},{6,4,1,7,3,2,5,0,},
		{6,4,1,7,5,0,2,3,},{6,4,1,7,5,0,3,2,},{6,4,1,7,5,2,0,3,},{6,4,1,7,5,2,3,0,},{6,4,1,7,5,3,0,2,},{6,4,1,7,5,3,2,0,},{6,4,3,0,1,2,7,5,},{6,4,3,0,1,7,2,5,},{6,4,3,0,1,7,5,2,},{6,4,3,0,2,1,7,5,},
		{6,4,3,0,2,7,1,5,},{6,4,3,0,2,7,5,1,},{6,4,3,0,5,1,7,2,},{6,4,3,0,5,2,7,1,},{6,4,3,0,5,7,1,2,},{6,4,3,0,5,7,2,1,},{6,4,3,0,7,1,2,5,},{6,4,3,0,7,1,5,2,},{6,4,3,0,7,2,1,5,},{6,4,3,0,7,2,5,1,},
		{6,4,3,1,0,2,7,5,},{6,4,3,1,0,7,2,5,},{6,4,3,1,0,7,5,2,},{6,4,3,1,2,0,7,5,},{6,4,3,1,2,7,0,5,},{6,4,3,1,2,7,5,0,},{6,4,3,1,5,0,7,2,},{6,4,3,1,5,2,7,0,},{6,4,3,1,5,7,0,2,},{6,4,3,1,5,7,2,0,},
		{6,4,3,1,7,0,2,5,},{6,4,3,1,7,0,5,2,},{6,4,3,1,7,2,0,5,},{6,4,3,1,7,2,5,0,},{6,4,3,2,0,1,7,5,},{6,4,3,2,0,7,1,5,},{6,4,3,2,0,7,5,1,},{6,4,3,2,1,0,7,5,},{6,4,3,2,1,7,0,5,},{6,4,3,2,1,7,5,0,},
		{6,4,3,2,5,0,7,1,},{6,4,3,2,5,1,7,0,},{6,4,3,2,5,7,0,1,},{6,4,3,2,5,7,1,0,},{6,4,3,2,7,0,1,5,},{6,4,3,2,7,0,5,1,},{6,4,3,2,7,1,0,5,},{6,4,3,2,7,1,5,0,},{6,4,3,5,0,1,7,2,},{6,4,3,5,0,2,7,1,},
		{6,4,3,5,0,7,1,2,},{6,4,3,5,0,7,2,1,},{6,4,3,5,1,0,7,2,},{6,4,3,5,1,2,7,0,},{6,4,3,5,1,7,0,2,},{6,4,3,5,1,7,2,0,},{6,4,3,5,2,0,7,1,},{6,4,3,5,2,1,7,0,},{6,4,3,5,2,7,0,1,},{6,4,3,5,2,7,1,0,},
		{6,4,3,5,7,0,1,2,},{6,4,3,5,7,0,2,1,},{6,4,3,5,7,1,0,2,},{6,4,3,5,7,1,2,0,},{6,4,3,5,7,2,0,1,},{6,4,3,5,7,2,1,0,},{6,4,3,7,0,1,2,5,},{6,4,3,7,0,1,5,2,},{6,4,3,7,0,2,1,5,},{6,4,3,7,0,2,5,1,},
		{6,4,3,7,1,0,2,5,},{6,4,3,7,1,0,5,2,},{6,4,3,7,1,2,0,5,},{6,4,3,7,1,2,5,0,},{6,4,3,7,2,0,1,5,},{6,4,3,7,2,0,5,1,},{6,4,3,7,2,1,0,5,},{6,4,3,7,2,1,5,0,},{6,4,3,7,5,0,1,2,},{6,4,3,7,5,0,2,1,},
		{6,4,3,7,5,1,0,2,},{6,4,3,7,5,1,2,0,},{6,4,3,7,5,2,0,1,},{6,4,3,7,5,2,1,0,},{6,4,5,0,1,2,7,3,},{6,4,5,0,1,3,7,2,},{6,4,5,0,1,7,2,3,},{6,4,5,0,1,7,3,2,},{6,4,5,0,2,1,7,3,},{6,4,5,0,2,3,7,1,},
		{6,4,5,0,2,7,1,3,},{6,4,5,0,2,7,3,1,},{6,4,5,0,3,1,7,2,},{6,4,5,0,3,2,7,1,},{6,4,5,0,3,7,1,2,},{6,4,5,0,3,7,2,1,},{6,4,5,0,7,1,2,3,},{6,4,5,0,7,1,3,2,},{6,4,5,0,7,2,1,3,},{6,4,5,0,7,2,3,1,},
		{6,4,5,0,7,3,1,2,},{6,4,5,0,7,3,2,1,},{6,4,5,1,0,2,7,3,},{6,4,5,1,0,3,7,2,},{6,4,5,1,0,7,2,3,},{6,4,5,1,0,7,3,2,},{6,4,5,1,2,0,7,3,},{6,4,5,1,2,3,7,0,},{6,4,5,1,2,7,0,3,},{6,4,5,1,2,7,3,0,},
		{6,4,5,1,3,0,7,2,},{6,4,5,1,3,2,7,0,},{6,4,5,1,3,7,0,2,},{6,4,5,1,3,7,2,0,},{6,4,5,1,7,0,2,3,},{6,4,5,1,7,0,3,2,},{6,4,5,1,7,2,0,3,},{6,4,5,1,7,2,3,0,},{6,4,5,1,7,3,0,2,},{6,4,5,1,7,3,2,0,},
		{6,4,5,2,0,1,7,3,},{6,4,5,2,0,3,7,1,},{6,4,5,2,0,7,1,3,},{6,4,5,2,0,7,3,1,},{6,4,5,2,1,0,7,3,},{6,4,5,2,1,3,7,0,},{6,4,5,2,1,7,0,3,},{6,4,5,2,1,7,3,0,},{6,4,5,2,3,0,7,1,},{6,4,5,2,3,1,7,0,},
		{6,4,5,2,3,7,0,1,},{6,4,5,2,3,7,1,0,},{6,4,5,2,7,0,1,3,},{6,4,5,2,7,0,3,1,},{6,4,5,2,7,1,0,3,},{6,4,5,2,7,1,3,0,},{6,4,5,2,7,3,0,1,},{6,4,5,2,7,3,1,0,},{6,4,5,7,0,1,2,3,},{6,4,5,7,0,1,3,2,},
		{6,4,5,7,0,2,1,3,},{6,4,5,7,0,2,3,1,},{6,4,5,7,0,3,1,2,},{6,4,5,7,0,3,2,1,},{6,4,5,7,1,0,2,3,},{6,4,5,7,1,0,3,2,},{6,4,5,7,1,2,0,3,},{6,4,5,7,1,2,3,0,},{6,4,5,7,1,3,0,2,},{6,4,5,7,1,3,2,0,},
		{6,4,5,7,2,0,1,3,},{6,4,5,7,2,0,3,1,},{6,4,5,7,2,1,0,3,},{6,4,5,7,2,1,3,0,},{6,4,5,7,2,3,0,1,},{6,4,5,7,2,3,1,0,},{6,4,5,7,3,0,1,2,},{6,4,5,7,3,0,2,1,},{6,4,5,7,3,1,0,2,},{6,4,5,7,3,1,2,0,},
		{6,4,5,7,3,2,0,1,},{6,4,5,7,3,2,1,0,},{6,4,7,0,1,2,3,5,},{6,4,7,0,1,2,5,3,},{6,4,7,0,1,3,2,5,},{6,4,7,0,1,3,5,2,},{6,4,7,0,2,1,3,5,},{6,4,7,0,2,1,5,3,},{6,4,7,0,2,3,1,5,},{6,4,7,0,2,3,5,1,},
		{6,4,7,0,3,1,2,5,},{6,4,7,0,3,1,5,2,},{6,4,7,0,3,2,1,5,},{6,4,7,0,3,2,5,1,},{6,4,7,0,5,1,2,3,},{6,4,7,0,5,1,3,2,},{6,4,7,0,5,2,1,3,},{6,4,7,0,5,2,3,1,},{6,4,7,0,5,3,1,2,},{6,4,7,0,5,3,2,1,},
		{6,4,7,1,0,2,3,5,},{6,4,7,1,0,2,5,3,},{6,4,7,1,0,3,2,5,},{6,4,7,1,0,3,5,2,},{6,4,7,1,2,0,3,5,},{6,4,7,1,2,0,5,3,},{6,4,7,1,2,3,0,5,},{6,4,7,1,2,3,5,0,},{6,4,7,1,3,0,2,5,},{6,4,7,1,3,0,5,2,},
		{6,4,7,1,3,2,0,5,},{6,4,7,1,3,2,5,0,},{6,4,7,1,5,0,2,3,},{6,4,7,1,5,0,3,2,},{6,4,7,1,5,2,0,3,},{6,4,7,1,5,2,3,0,},{6,4,7,1,5,3,0,2,},{6,4,7,1,5,3,2,0,},{6,4,7,2,0,1,3,5,},{6,4,7,2,0,1,5,3,},
		{6,4,7,2,0,3,1,5,},{6,4,7,2,0,3,5,1,},{6,4,7,2,1,0,3,5,},{6,4,7,2,1,0,5,3,},{6,4,7,2,1,3,0,5,},{6,4,7,2,1,3,5,0,},{6,4,7,2,3,0,1,5,},{6,4,7,2,3,0,5,1,},{6,4,7,2,3,1,0,5,},{6,4,7,2,3,1,5,0,},
		{6,4,7,2,5,0,1,3,},{6,4,7,2,5,0,3,1,},{6,4,7,2,5,1,0,3,},{6,4,7,2,5,1,3,0,},{6,4,7,2,5,3,0,1,},{6,4,7,2,5,3,1,0,},{6,4,7,5,0,1,2,3,},{6,4,7,5,0,1,3,2,},{6,4,7,5,0,2,1,3,},{6,4,7,5,0,2,3,1,},
		{6,4,7,5,0,3,1,2,},{6,4,7,5,0,3,2,1,},{6,4,7,5,1,0,2,3,},{6,4,7,5,1,0,3,2,},{6,4,7,5,1,2,0,3,},{6,4,7,5,1,2,3,0,},{6,4,7,5,1,3,0,2,},{6,4,7,5,1,3,2,0,},{6,4,7,5,2,0,1,3,},{6,4,7,5,2,0,3,1,},
		{6,4,7,5,2,1,0,3,},{6,4,7,5,2,1,3,0,},{6,4,7,5,2,3,0,1,},{6,4,7,5,2,3,1,0,},{6,4,7,5,3,0,1,2,},{6,4,7,5,3,0,2,1,},{6,4,7,5,3,1,0,2,},{6,4,7,5,3,1,2,0,},{6,4,7,5,3,2,0,1,},{6,4,7,5,3,2,1,0,},
		{6,5,0,1,2,3,7,4,},{6,5,0,1,2,4,7,3,},{6,5,0,1,2,7,3,4,},{6,5,0,1,2,7,4,3,},{6,5,0,1,3,2,7,4,},{6,5,0,1,3,4,7,2,},{6,5,0,1,3,7,2,4,},{6,5,0,1,3,7,4,2,},{6,5,0,1,7,2,3,4,},{6,5,0,1,7,2,4,3,},
		{6,5,0,1,7,3,2,4,},{6,5,0,1,7,3,4,2,},{6,5,0,1,7,4,2,3,},{6,5,0,1,7,4,3,2,},{6,5,0,2,1,3,7,4,},{6,5,0,2,1,4,7,3,},{6,5,0,2,1,7,3,4,},{6,5,0,2,1,7,4,3,},{6,5,0,2,3,1,7,4,},{6,5,0,2,3,4,7,1,},
		{6,5,0,2,3,7,1,4,},{6,5,0,2,3,7,4,1,},{6,5,0,2,7,1,3,4,},{6,5,0,2,7,1,4,3,},{6,5,0,2,7,3,1,4,},{6,5,0,2,7,3,4,1,},{6,5,0,2,7,4,1,3,},{6,5,0,2,7,4,3,1,},{6,5,0,4,1,2,7,3,},{6,5,0,4,1,3,7,2,},
		{6,5,0,4,1,7,2,3,},{6,5,0,4,1,7,3,2,},{6,5,0,4,2,1,7,3,},{6,5,0,4,2,3,7,1,},{6,5,0,4,2,7,1,3,},{6,5,0,4,2,7,3,1,},{6,5,0,4,3,1,7,2,},{6,5,0,4,3,2,7,1,},{6,5,0,4,3,7,1,2,},{6,5,0,4,3,7,2,1,},
		{6,5,0,4,7,1,2,3,},{6,5,0,4,7,1,3,2,},{6,5,0,4,7,2,1,3,},{6,5,0,4,7,2,3,1,},{6,5,0,4,7,3,1,2,},{6,5,0,4,7,3,2,1,},{6,5,0,7,1,2,3,4,},{6,5,0,7,1,2,4,3,},{6,5,0,7,1,3,2,4,},{6,5,0,7,1,3,4,2,},
		{6,5,0,7,1,4,2,3,},{6,5,0,7,1,4,3,2,},{6,5,0,7,2,1,3,4,},{6,5,0,7,2,1,4,3,},{6,5,0,7,2,3,1,4,},{6,5,0,7,2,3,4,1,},{6,5,0,7,2,4,1,3,},{6,5,0,7,2,4,3,1,},{6,5,0,7,3,1,2,4,},{6,5,0,7,3,1,4,2,},
		{6,5,0,7,3,2,1,4,},{6,5,0,7,3,2,4,1,},{6,5,0,7,3,4,1,2,},{6,5,0,7,3,4,2,1,},{6,5,1,0,2,3,7,4,},{6,5,1,0,2,4,7,3,},{6,5,1,0,2,7,3,4,},{6,5,1,0,2,7,4,3,},{6,5,1,0,3,2,7,4,},{6,5,1,0,3,4,7,2,},
		{6,5,1,0,3,7,2,4,},{6,5,1,0,3,7,4,2,},{6,5,1,0,7,2,3,4,},{6,5,1,0,7,2,4,3,},{6,5,1,0,7,3,2,4,},{6,5,1,0,7,3,4,2,},{6,5,1,0,7,4,2,3,},{6,5,1,0,7,4,3,2,},{6,5,1,2,0,3,7,4,},{6,5,1,2,0,4,7,3,},
		{6,5,1,2,0,7,3,4,},{6,5,1,2,0,7,4,3,},{6,5,1,2,3,0,7,4,},{6,5,1,2,3,4,7,0,},{6,5,1,2,3,7,0,4,},{6,5,1,2,3,7,4,0,},{6,5,1,2,7,0,3,4,},{6,5,1,2,7,0,4,3,},{6,5,1,2,7,3,0,4,},{6,5,1,2,7,3,4,0,},
		{6,5,1,2,7,4,0,3,},{6,5,1,2,7,4,3,0,},{6,5,1,4,0,2,7,3,},{6,5,1,4,0,3,7,2,},{6,5,1,4,0,7,2,3,},{6,5,1,4,0,7,3,2,},{6,5,1,4,2,0,7,3,},{6,5,1,4,2,3,7,0,},{6,5,1,4,2,7,0,3,},{6,5,1,4,2,7,3,0,},
		{6,5,1,4,3,0,7,2,},{6,5,1,4,3,2,7,0,},{6,5,1,4,3,7,0,2,},{6,5,1,4,3,7,2,0,},{6,5,1,4,7,0,2,3,},{6,5,1,4,7,0,3,2,},{6,5,1,4,7,2,0,3,},{6,5,1,4,7,2,3,0,},{6,5,1,4,7,3,0,2,},{6,5,1,4,7,3,2,0,},
		{6,5,1,7,0,2,3,4,},{6,5,1,7,0,2,4,3,},{6,5,1,7,0,3,2,4,},{6,5,1,7,0,3,4,2,},{6,5,1,7,0,4,2,3,},{6,5,1,7,0,4,3,2,},{6,5,1,7,2,0,3,4,},{6,5,1,7,2,0,4,3,},{6,5,1,7,2,3,0,4,},{6,5,1,7,2,3,4,0,},
		{6,5,1,7,2,4,0,3,},{6,5,1,7,2,4,3,0,},{6,5,1,7,3,0,2,4,},{6,5,1,7,3,0,4,2,},{6,5,1,7,3,2,0,4,},{6,5,1,7,3,2,4,0,},{6,5,1,7,3,4,0,2,},{6,5,1,7,3,4,2,0,},{6,5,3,0,1,2,7,4,},{6,5,3,0,1,4,7,2,},
		{6,5,3,0,1,7,2,4,},{6,5,3,0,1,7,4,2,},{6,5,3,0,2,1,7,4,},{6,5,3,0,2,4,7,1,},{6,5,3,0,2,7,1,4,},{6,5,3,0,2,7,4,1,},{6,5,3,0,7,1,2,4,},{6,5,3,0,7,1,4,2,},{6,5,3,0,7,2,1,4,},{6,5,3,0,7,2,4,1,},
		{6,5,3,0,7,4,1,2,},{6,5,3,0,7,4,2,1,},{6,5,3,1,0,2,7,4,},{6,5,3,1,0,4,7,2,},{6,5,3,1,0,7,2,4,},{6,5,3,1,0,7,4,2,},{6,5,3,1,2,0,7,4,},{6,5,3,1,2,4,7,0,},{6,5,3,1,2,7,0,4,},{6,5,3,1,2,7,4,0,},
		{6,5,3,1,7,0,2,4,},{6,5,3,1,7,0,4,2,},{6,5,3,1,7,2,0,4,},{6,5,3,1,7,2,4,0,},{6,5,3,1,7,4,0,2,},{6,5,3,1,7,4,2,0,},{6,5,3,2,0,1,7,4,},{6,5,3,2,0,4,7,1,},{6,5,3,2,0,7,1,4,},{6,5,3,2,0,7,4,1,},
		{6,5,3,2,1,0,7,4,},{6,5,3,2,1,4,7,0,},{6,5,3,2,1,7,0,4,},{6,5,3,2,1,7,4,0,},{6,5,3,2,7,0,1,4,},{6,5,3,2,7,0,4,1,},{6,5,3,2,7,1,0,4,},{6,5,3,2,7,1,4,0,},{6,5,3,2,7,4,0,1,},{6,5,3,2,7,4,1,0,},
		{6,5,3,4,0,1,7,2,},{6,5,3,4,0,2,7,1,},{6,5,3,4,0,7,1,2,},{6,5,3,4,0,7,2,1,},{6,5,3,4,1,0,7,2,},{6,5,3,4,1,2,7,0,},{6,5,3,4,1,7,0,2,},{6,5,3,4,1,7,2,0,},{6,5,3,4,2,0,7,1,},{6,5,3,4,2,1,7,0,},
		{6,5,3,4,2,7,0,1,},{6,5,3,4,2,7,1,0,},{6,5,3,4,7,0,1,2,},{6,5,3,4,7,0,2,1,},{6,5,3,4,7,1,0,2,},{6,5,3,4,7,1,2,0,},{6,5,3,4,7,2,0,1,},{6,5,3,4,7,2,1,0,},{6,5,3,7,0,1,2,4,},{6,5,3,7,0,1,4,2,},
		{6,5,3,7,0,2,1,4,},{6,5,3,7,0,2,4,1,},{6,5,3,7,0,4,1,2,},{6,5,3,7,0,4,2,1,},{6,5,3,7,1,0,2,4,},{6,5,3,7,1,0,4,2,},{6,5,3,7,1,2,0,4,},{6,5,3,7,1,2,4,0,},{6,5,3,7,1,4,0,2,},{6,5,3,7,1,4,2,0,},
		{6,5,3,7,2,0,1,4,},{6,5,3,7,2,0,4,1,},{6,5,3,7,2,1,0,4,},{6,5,3,7,2,1,4,0,},{6,5,3,7,2,4,0,1,},{6,5,3,7,2,4,1,0,},{6,5,4,0,1,2,7,3,},{6,5,4,0,1,3,7,2,},{6,5,4,0,1,7,2,3,},{6,5,4,0,1,7,3,2,},
		{6,5,4,0,2,1,7,3,},{6,5,4,0,2,3,7,1,},{6,5,4,0,2,7,1,3,},{6,5,4,0,2,7,3,1,},{6,5,4,0,3,1,7,2,},{6,5,4,0,3,2,7,1,},{6,5,4,0,3,7,1,2,},{6,5,4,0,3,7,2,1,},{6,5,4,0,7,1,2,3,},{6,5,4,0,7,1,3,2,},
		{6,5,4,0,7,2,1,3,},{6,5,4,0,7,2,3,1,},{6,5,4,0,7,3,1,2,},{6,5,4,0,7,3,2,1,},{6,5,4,1,0,2,7,3,},{6,5,4,1,0,3,7,2,},{6,5,4,1,0,7,2,3,},{6,5,4,1,0,7,3,2,},{6,5,4,1,2,0,7,3,},{6,5,4,1,2,3,7,0,},
		{6,5,4,1,2,7,0,3,},{6,5,4,1,2,7,3,0,},{6,5,4,1,3,0,7,2,},{6,5,4,1,3,2,7,0,},{6,5,4,1,3,7,0,2,},{6,5,4,1,3,7,2,0,},{6,5,4,1,7,0,2,3,},{6,5,4,1,7,0,3,2,},{6,5,4,1,7,2,0,3,},{6,5,4,1,7,2,3,0,},
		{6,5,4,1,7,3,0,2,},{6,5,4,1,7,3,2,0,},{6,5,4,2,0,1,7,3,},{6,5,4,2,0,3,7,1,},{6,5,4,2,0,7,1,3,},{6,5,4,2,0,7,3,1,},{6,5,4,2,1,0,7,3,},{6,5,4,2,1,3,7,0,},{6,5,4,2,1,7,0,3,},{6,5,4,2,1,7,3,0,},
		{6,5,4,2,3,0,7,1,},{6,5,4,2,3,1,7,0,},{6,5,4,2,3,7,0,1,},{6,5,4,2,3,7,1,0,},{6,5,4,2,7,0,1,3,},{6,5,4,2,7,0,3,1,},{6,5,4,2,7,1,0,3,},{6,5,4,2,7,1,3,0,},{6,5,4,2,7,3,0,1,},{6,5,4,2,7,3,1,0,},
		{6,5,4,7,0,1,2,3,},{6,5,4,7,0,1,3,2,},{6,5,4,7,0,2,1,3,},{6,5,4,7,0,2,3,1,},{6,5,4,7,0,3,1,2,},{6,5,4,7,0,3,2,1,},{6,5,4,7,1,0,2,3,},{6,5,4,7,1,0,3,2,},{6,5,4,7,1,2,0,3,},{6,5,4,7,1,2,3,0,},
		{6,5,4,7,1,3,0,2,},{6,5,4,7,1,3,2,0,},{6,5,4,7,2,0,1,3,},{6,5,4,7,2,0,3,1,},{6,5,4,7,2,1,0,3,},{6,5,4,7,2,1,3,0,},{6,5,4,7,2,3,0,1,},{6,5,4,7,2,3,1,0,},{6,5,4,7,3,0,1,2,},{6,5,4,7,3,0,2,1,},
		{6,5,4,7,3,1,0,2,},{6,5,4,7,3,1,2,0,},{6,5,4,7,3,2,0,1,},{6,5,4,7,3,2,1,0,},{6,5,7,0,1,2,3,4,},{6,5,7,0,1,2,4,3,},{6,5,7,0,1,3,2,4,},{6,5,7,0,1,3,4,2,},{6,5,7,0,1,4,2,3,},{6,5,7,0,1,4,3,2,},
		{6,5,7,0,2,1,3,4,},{6,5,7,0,2,1,4,3,},{6,5,7,0,2,3,1,4,},{6,5,7,0,2,3,4,1,},{6,5,7,0,2,4,1,3,},{6,5,7,0,2,4,3,1,},{6,5,7,0,3,1,2,4,},{6,5,7,0,3,1,4,2,},{6,5,7,0,3,2,1,4,},{6,5,7,0,3,2,4,1,},
		{6,5,7,0,3,4,1,2,},{6,5,7,0,3,4,2,1,},{6,5,7,1,0,2,3,4,},{6,5,7,1,0,2,4,3,},{6,5,7,1,0,3,2,4,},{6,5,7,1,0,3,4,2,},{6,5,7,1,0,4,2,3,},{6,5,7,1,0,4,3,2,},{6,5,7,1,2,0,3,4,},{6,5,7,1,2,0,4,3,},
		{6,5,7,1,2,3,0,4,},{6,5,7,1,2,3,4,0,},{6,5,7,1,2,4,0,3,},{6,5,7,1,2,4,3,0,},{6,5,7,1,3,0,2,4,},{6,5,7,1,3,0,4,2,},{6,5,7,1,3,2,0,4,},{6,5,7,1,3,2,4,0,},{6,5,7,1,3,4,0,2,},{6,5,7,1,3,4,2,0,},
		{6,5,7,2,0,1,3,4,},{6,5,7,2,0,1,4,3,},{6,5,7,2,0,3,1,4,},{6,5,7,2,0,3,4,1,},{6,5,7,2,0,4,1,3,},{6,5,7,2,0,4,3,1,},{6,5,7,2,1,0,3,4,},{6,5,7,2,1,0,4,3,},{6,5,7,2,1,3,0,4,},{6,5,7,2,1,3,4,0,},
		{6,5,7,2,1,4,0,3,},{6,5,7,2,1,4,3,0,},{6,5,7,2,3,0,1,4,},{6,5,7,2,3,0,4,1,},{6,5,7,2,3,1,0,4,},{6,5,7,2,3,1,4,0,},{6,5,7,2,3,4,0,1,},{6,5,7,2,3,4,1,0,},{6,5,7,4,0,1,2,3,},{6,5,7,4,0,1,3,2,},
		{6,5,7,4,0,2,1,3,},{6,5,7,4,0,2,3,1,},{6,5,7,4,0,3,1,2,},{6,5,7,4,0,3,2,1,},{6,5,7,4,1,0,2,3,},{6,5,7,4,1,0,3,2,},{6,5,7,4,1,2,0,3,},{6,5,7,4,1,2,3,0,},{6,5,7,4,1,3,0,2,},{6,5,7,4,1,3,2,0,},
		{6,5,7,4,2,0,1,3,},{6,5,7,4,2,0,3,1,},{6,5,7,4,2,1,0,3,},{6,5,7,4,2,1,3,0,},{6,5,7,4,2,3,0,1,},{6,5,7,4,2,3,1,0,},{6,5,7,4,3,0,1,2,},{6,5,7,4,3,0,2,1,},{6,5,7,4,3,1,0,2,},{6,5,7,4,3,1,2,0,},
		{6,5,7,4,3,2,0,1,},{6,5,7,4,3,2,1,0,},{6,7,0,1,2,3,4,5,},{6,7,0,1,2,3,5,4,},{6,7,0,1,2,4,3,5,},{6,7,0,1,2,4,5,3,},{6,7,0,1,3,2,4,5,},{6,7,0,1,3,2,5,4,},{6,7,0,1,3,4,2,5,},{6,7,0,1,3,4,5,2,},
		{6,7,0,1,5,2,3,4,},{6,7,0,1,5,2,4,3,},{6,7,0,1,5,3,2,4,},{6,7,0,1,5,3,4,2,},{6,7,0,1,5,4,2,3,},{6,7,0,1,5,4,3,2,},{6,7,0,2,1,3,4,5,},{6,7,0,2,1,3,5,4,},{6,7,0,2,1,4,3,5,},{6,7,0,2,1,4,5,3,},
		{6,7,0,2,3,1,4,5,},{6,7,0,2,3,1,5,4,},{6,7,0,2,3,4,1,5,},{6,7,0,2,3,4,5,1,},{6,7,0,2,5,1,3,4,},{6,7,0,2,5,1,4,3,},{6,7,0,2,5,3,1,4,},{6,7,0,2,5,3,4,1,},{6,7,0,2,5,4,1,3,},{6,7,0,2,5,4,3,1,},
		{6,7,0,4,1,2,3,5,},{6,7,0,4,1,2,5,3,},{6,7,0,4,1,3,2,5,},{6,7,0,4,1,3,5,2,},{6,7,0,4,2,1,3,5,},{6,7,0,4,2,1,5,3,},{6,7,0,4,2,3,1,5,},{6,7,0,4,2,3,5,1,},{6,7,0,4,3,1,2,5,},{6,7,0,4,3,1,5,2,},
		{6,7,0,4,3,2,1,5,},{6,7,0,4,3,2,5,1,},{6,7,0,4,5,1,2,3,},{6,7,0,4,5,1,3,2,},{6,7,0,4,5,2,1,3,},{6,7,0,4,5,2,3,1,},{6,7,0,4,5,3,1,2,},{6,7,0,4,5,3,2,1,},{6,7,0,5,1,2,3,4,},{6,7,0,5,1,2,4,3,},
		{6,7,0,5,1,3,2,4,},{6,7,0,5,1,3,4,2,},{6,7,0,5,1,4,2,3,},{6,7,0,5,1,4,3,2,},{6,7,0,5,2,1,3,4,},{6,7,0,5,2,1,4,3,},{6,7,0,5,2,3,1,4,},{6,7,0,5,2,3,4,1,},{6,7,0,5,2,4,1,3,},{6,7,0,5,2,4,3,1,},
		{6,7,0,5,3,1,2,4,},{6,7,0,5,3,1,4,2,},{6,7,0,5,3,2,1,4,},{6,7,0,5,3,2,4,1,},{6,7,0,5,3,4,1,2,},{6,7,0,5,3,4,2,1,},{6,7,1,0,2,3,4,5,},{6,7,1,0,2,3,5,4,},{6,7,1,0,2,4,3,5,},{6,7,1,0,2,4,5,3,},
		{6,7,1,0,3,2,4,5,},{6,7,1,0,3,2,5,4,},{6,7,1,0,3,4,2,5,},{6,7,1,0,3,4,5,2,},{6,7,1,0,5,2,3,4,},{6,7,1,0,5,2,4,3,},{6,7,1,0,5,3,2,4,},{6,7,1,0,5,3,4,2,},{6,7,1,0,5,4,2,3,},{6,7,1,0,5,4,3,2,},
		{6,7,1,2,0,3,4,5,},{6,7,1,2,0,3,5,4,},{6,7,1,2,0,4,3,5,},{6,7,1,2,0,4,5,3,},{6,7,1,2,3,0,4,5,},{6,7,1,2,3,0,5,4,},{6,7,1,2,3,4,0,5,},{6,7,1,2,3,4,5,0,},{6,7,1,2,5,0,3,4,},{6,7,1,2,5,0,4,3,},
		{6,7,1,2,5,3,0,4,},{6,7,1,2,5,3,4,0,},{6,7,1,2,5,4,0,3,},{6,7,1,2,5,4,3,0,},{6,7,1,4,0,2,3,5,},{6,7,1,4,0,2,5,3,},{6,7,1,4,0,3,2,5,},{6,7,1,4,0,3,5,2,},{6,7,1,4,2,0,3,5,},{6,7,1,4,2,0,5,3,},
		{6,7,1,4,2,3,0,5,},{6,7,1,4,2,3,5,0,},{6,7,1,4,3,0,2,5,},{6,7,1,4,3,0,5,2,},{6,7,1,4,3,2,0,5,},{6,7,1,4,3,2,5,0,},{6,7,1,4,5,0,2,3,},{6,7,1,4,5,0,3,2,},{6,7,1,4,5,2,0,3,},{6,7,1,4,5,2,3,0,},
		{6,7,1,4,5,3,0,2,},{6,7,1,4,5,3,2,0,},{6,7,1,5,0,2,3,4,},{6,7,1,5,0,2,4,3,},{6,7,1,5,0,3,2,4,},{6,7,1,5,0,3,4,2,},{6,7,1,5,0,4,2,3,},{6,7,1,5,0,4,3,2,},{6,7,1,5,2,0,3,4,},{6,7,1,5,2,0,4,3,},
		{6,7,1,5,2,3,0,4,},{6,7,1,5,2,3,4,0,},{6,7,1,5,2,4,0,3,},{6,7,1,5,2,4,3,0,},{6,7,1,5,3,0,2,4,},{6,7,1,5,3,0,4,2,},{6,7,1,5,3,2,0,4,},{6,7,1,5,3,2,4,0,},{6,7,1,5,3,4,0,2,},{6,7,1,5,3,4,2,0,},
		{6,7,3,0,1,2,4,5,},{6,7,3,0,1,2,5,4,},{6,7,3,0,1,4,2,5,},{6,7,3,0,1,4,5,2,},{6,7,3,0,2,1,4,5,},{6,7,3,0,2,1,5,4,},{6,7,3,0,2,4,1,5,},{6,7,3,0,2,4,5,1,},{6,7,3,0,5,1,2,4,},{6,7,3,0,5,1,4,2,},
		{6,7,3,0,5,2,1,4,},{6,7,3,0,5,2,4,1,},{6,7,3,0,5,4,1,2,},{6,7,3,0,5,4,2,1,},{6,7,3,1,0,2,4,5,},{6,7,3,1,0,2,5,4,},{6,7,3,1,0,4,2,5,},{6,7,3,1,0,4,5,2,},{6,7,3,1,2,0,4,5,},{6,7,3,1,2,0,5,4,},
		{6,7,3,1,2,4,0,5,},{6,7,3,1,2,4,5,0,},{6,7,3,1,5,0,2,4,},{6,7,3,1,5,0,4,2,},{6,7,3,1,5,2,0,4,},{6,7,3,1,5,2,4,0,},{6,7,3,1,5,4,0,2,},{6,7,3,1,5,4,2,0,},{6,7,3,2,0,1,4,5,},{6,7,3,2,0,1,5,4,},
		{6,7,3,2,0,4,1,5,},{6,7,3,2,0,4,5,1,},{6,7,3,2,1,0,4,5,},{6,7,3,2,1,0,5,4,},{6,7,3,2,1,4,0,5,},{6,7,3,2,1,4,5,0,},{6,7,3,2,5,0,1,4,},{6,7,3,2,5,0,4,1,},{6,7,3,2,5,1,0,4,},{6,7,3,2,5,1,4,0,},
		{6,7,3,2,5,4,0,1,},{6,7,3,2,5,4,1,0,},{6,7,3,4,0,1,2,5,},{6,7,3,4,0,1,5,2,},{6,7,3,4,0,2,1,5,},{6,7,3,4,0,2,5,1,},{6,7,3,4,1,0,2,5,},{6,7,3,4,1,0,5,2,},{6,7,3,4,1,2,0,5,},{6,7,3,4,1,2,5,0,},
		{6,7,3,4,2,0,1,5,},{6,7,3,4,2,0,5,1,},{6,7,3,4,2,1,0,5,},{6,7,3,4,2,1,5,0,},{6,7,3,4,5,0,1,2,},{6,7,3,4,5,0,2,1,},{6,7,3,4,5,1,0,2,},{6,7,3,4,5,1,2,0,},{6,7,3,4,5,2,0,1,},{6,7,3,4,5,2,1,0,},
		{6,7,3,5,0,1,2,4,},{6,7,3,5,0,1,4,2,},{6,7,3,5,0,2,1,4,},{6,7,3,5,0,2,4,1,},{6,7,3,5,0,4,1,2,},{6,7,3,5,0,4,2,1,},{6,7,3,5,1,0,2,4,},{6,7,3,5,1,0,4,2,},{6,7,3,5,1,2,0,4,},{6,7,3,5,1,2,4,0,},
		{6,7,3,5,1,4,0,2,},{6,7,3,5,1,4,2,0,},{6,7,3,5,2,0,1,4,},{6,7,3,5,2,0,4,1,},{6,7,3,5,2,1,0,4,},{6,7,3,5,2,1,4,0,},{6,7,3,5,2,4,0,1,},{6,7,3,5,2,4,1,0,},{6,7,4,0,1,2,3,5,},{6,7,4,0,1,2,5,3,},
		{6,7,4,0,1,3,2,5,},{6,7,4,0,1,3,5,2,},{6,7,4,0,2,1,3,5,},{6,7,4,0,2,1,5,3,},{6,7,4,0,2,3,1,5,},{6,7,4,0,2,3,5,1,},{6,7,4,0,3,1,2,5,},{6,7,4,0,3,1,5,2,},{6,7,4,0,3,2,1,5,},{6,7,4,0,3,2,5,1,},
		{6,7,4,0,5,1,2,3,},{6,7,4,0,5,1,3,2,},{6,7,4,0,5,2,1,3,},{6,7,4,0,5,2,3,1,},{6,7,4,0,5,3,1,2,},{6,7,4,0,5,3,2,1,},{6,7,4,1,0,2,3,5,},{6,7,4,1,0,2,5,3,},{6,7,4,1,0,3,2,5,},{6,7,4,1,0,3,5,2,},
		{6,7,4,1,2,0,3,5,},{6,7,4,1,2,0,5,3,},{6,7,4,1,2,3,0,5,},{6,7,4,1,2,3,5,0,},{6,7,4,1,3,0,2,5,},{6,7,4,1,3,0,5,2,},{6,7,4,1,3,2,0,5,},{6,7,4,1,3,2,5,0,},{6,7,4,1,5,0,2,3,},{6,7,4,1,5,0,3,2,},
		{6,7,4,1,5,2,0,3,},{6,7,4,1,5,2,3,0,},{6,7,4,1,5,3,0,2,},{6,7,4,1,5,3,2,0,},{6,7,4,2,0,1,3,5,},{6,7,4,2,0,1,5,3,},{6,7,4,2,0,3,1,5,},{6,7,4,2,0,3,5,1,},{6,7,4,2,1,0,3,5,},{6,7,4,2,1,0,5,3,},
		{6,7,4,2,1,3,0,5,},{6,7,4,2,1,3,5,0,},{6,7,4,2,3,0,1,5,},{6,7,4,2,3,0,5,1,},{6,7,4,2,3,1,0,5,},{6,7,4,2,3,1,5,0,},{6,7,4,2,5,0,1,3,},{6,7,4,2,5,0,3,1,},{6,7,4,2,5,1,0,3,},{6,7,4,2,5,1,3,0,},
		{6,7,4,2,5,3,0,1,},{6,7,4,2,5,3,1,0,},{6,7,4,5,0,1,2,3,},{6,7,4,5,0,1,3,2,},{6,7,4,5,0,2,1,3,},{6,7,4,5,0,2,3,1,},{6,7,4,5,0,3,1,2,},{6,7,4,5,0,3,2,1,},{6,7,4,5,1,0,2,3,},{6,7,4,5,1,0,3,2,},
		{6,7,4,5,1,2,0,3,},{6,7,4,5,1,2,3,0,},{6,7,4,5,1,3,0,2,},{6,7,4,5,1,3,2,0,},{6,7,4,5,2,0,1,3,},{6,7,4,5,2,0,3,1,},{6,7,4,5,2,1,0,3,},{6,7,4,5,2,1,3,0,},{6,7,4,5,2,3,0,1,},{6,7,4,5,2,3,1,0,},
		{6,7,4,5,3,0,1,2,},{6,7,4,5,3,0,2,1,},{6,7,4,5,3,1,0,2,},{6,7,4,5,3,1,2,0,},{6,7,4,5,3,2,0,1,},{6,7,4,5,3,2,1,0,},{6,7,5,0,1,2,3,4,},{6,7,5,0,1,2,4,3,},{6,7,5,0,1,3,2,4,},{6,7,5,0,1,3,4,2,},
		{6,7,5,0,1,4,2,3,},{6,7,5,0,1,4,3,2,},{6,7,5,0,2,1,3,4,},{6,7,5,0,2,1,4,3,},{6,7,5,0,2,3,1,4,},{6,7,5,0,2,3,4,1,},{6,7,5,0,2,4,1,3,},{6,7,5,0,2,4,3,1,},{6,7,5,0,3,1,2,4,},{6,7,5,0,3,1,4,2,},
		{6,7,5,0,3,2,1,4,},{6,7,5,0,3,2,4,1,},{6,7,5,0,3,4,1,2,},{6,7,5,0,3,4,2,1,},{6,7,5,1,0,2,3,4,},{6,7,5,1,0,2,4,3,},{6,7,5,1,0,3,2,4,},{6,7,5,1,0,3,4,2,},{6,7,5,1,0,4,2,3,},{6,7,5,1,0,4,3,2,},
		{6,7,5,1,2,0,3,4,},{6,7,5,1,2,0,4,3,},{6,7,5,1,2,3,0,4,},{6,7,5,1,2,3,4,0,},{6,7,5,1,2,4,0,3,},{6,7,5,1,2,4,3,0,},{6,7,5,1,3,0,2,4,},{6,7,5,1,3,0,4,2,},{6,7,5,1,3,2,0,4,},{6,7,5,1,3,2,4,0,},
		{6,7,5,1,3,4,0,2,},{6,7,5,1,3,4,2,0,},{6,7,5,2,0,1,3,4,},{6,7,5,2,0,1,4,3,},{6,7,5,2,0,3,1,4,},{6,7,5,2,0,3,4,1,},{6,7,5,2,0,4,1,3,},{6,7,5,2,0,4,3,1,},{6,7,5,2,1,0,3,4,},{6,7,5,2,1,0,4,3,},
		{6,7,5,2,1,3,0,4,},{6,7,5,2,1,3,4,0,},{6,7,5,2,1,4,0,3,},{6,7,5,2,1,4,3,0,},{6,7,5,2,3,0,1,4,},{6,7,5,2,3,0,4,1,},{6,7,5,2,3,1,0,4,},{6,7,5,2,3,1,4,0,},{6,7,5,2,3,4,0,1,},{6,7,5,2,3,4,1,0,},
		{6,7,5,4,0,1,2,3,},{6,7,5,4,0,1,3,2,},{6,7,5,4,0,2,1,3,},{6,7,5,4,0,2,3,1,},{6,7,5,4,0,3,1,2,},{6,7,5,4,0,3,2,1,},{6,7,5,4,1,0,2,3,},{6,7,5,4,1,0,3,2,},{6,7,5,4,1,2,0,3,},{6,7,5,4,1,2,3,0,},
		{6,7,5,4,1,3,0,2,},{6,7,5,4,1,3,2,0,},{6,7,5,4,2,0,1,3,},{6,7,5,4,2,0,3,1,},{6,7,5,4,2,1,0,3,},{6,7,5,4,2,1,3,0,},{6,7,5,4,2,3,0,1,},{6,7,5,4,2,3,1,0,},{6,7,5,4,3,0,1,2,},{6,7,5,4,3,0,2,1,},
		{6,7,5,4,3,1,0,2,},{6,7,5,4,3,1,2,0,},{6,7,5,4,3,2,0,1,},{6,7,5,4,3,2,1,0,},{7,0,1,2,3,4,5,6,},{7,0,1,2,3,6,4,5,},{7,0,1,2,3,6,5,4,},{7,0,1,2,5,3,4,6,},{7,0,1,2,5,4,3,6,},{7,0,1,2,5,6,3,4,},
		{7,0,1,2,5,6,4,3,},{7,0,1,2,6,3,4,5,},{7,0,1,2,6,3,5,4,},{7,0,1,2,6,4,3,5,},{7,0,1,2,6,4,5,3,},{7,0,1,4,2,3,5,6,},{7,0,1,4,2,6,3,5,},{7,0,1,4,2,6,5,3,},{7,0,1,4,3,2,5,6,},{7,0,1,4,3,6,2,5,},
		{7,0,1,4,3,6,5,2,},{7,0,1,4,5,2,3,6,},{7,0,1,4,5,3,2,6,},{7,0,1,4,5,6,2,3,},{7,0,1,4,5,6,3,2,},{7,0,1,4,6,2,3,5,},{7,0,1,4,6,2,5,3,},{7,0,1,4,6,3,2,5,},{7,0,1,4,6,3,5,2,},{7,0,1,5,2,3,4,6,},
		{7,0,1,5,2,4,3,6,},{7,0,1,5,2,6,3,4,},{7,0,1,5,2,6,4,3,},{7,0,1,5,3,2,4,6,},{7,0,1,5,3,4,2,6,},{7,0,1,5,3,6,2,4,},{7,0,1,5,3,6,4,2,},{7,0,1,5,6,2,3,4,},{7,0,1,5,6,2,4,3,},{7,0,1,5,6,3,2,4,},
		{7,0,1,5,6,3,4,2,},{7,0,1,5,6,4,2,3,},{7,0,1,5,6,4,3,2,},{7,0,1,6,2,3,4,5,},{7,0,1,6,2,3,5,4,},{7,0,1,6,2,4,3,5,},{7,0,1,6,2,4,5,3,},{7,0,1,6,3,2,4,5,},{7,0,1,6,3,2,5,4,},{7,0,1,6,3,4,2,5,},
		{7,0,1,6,3,4,5,2,},{7,0,1,6,5,2,3,4,},{7,0,1,6,5,2,4,3,},{7,0,1,6,5,3,2,4,},{7,0,1,6,5,3,4,2,},{7,0,1,6,5,4,2,3,},{7,0,1,6,5,4,3,2,},{7,0,3,1,2,4,5,6,},{7,0,3,1,2,6,4,5,},{7,0,3,1,2,6,5,4,},
		{7,0,3,1,5,2,4,6,},{7,0,3,1,5,4,2,6,},{7,0,3,1,5,6,2,4,},{7,0,3,1,5,6,4,2,},{7,0,3,1,6,2,4,5,},{7,0,3,1,6,2,5,4,},{7,0,3,1,6,4,2,5,},{7,0,3,1,6,4,5,2,},{7,0,3,2,1,4,5,6,},{7,0,3,2,1,6,4,5,},
		{7,0,3,2,1,6,5,4,},{7,0,3,2,5,1,4,6,},{7,0,3,2,5,4,1,6,},{7,0,3,2,5,6,1,4,},{7,0,3,2,5,6,4,1,},{7,0,3,2,6,1,4,5,},{7,0,3,2,6,1,5,4,},{7,0,3,2,6,4,1,5,},{7,0,3,2,6,4,5,1,},{7,0,3,4,1,2,5,6,},
		{7,0,3,4,1,6,2,5,},{7,0,3,4,1,6,5,2,},{7,0,3,4,2,1,5,6,},{7,0,3,4,2,6,1,5,},{7,0,3,4,2,6,5,1,},{7,0,3,4,5,1,2,6,},{7,0,3,4,5,2,1,6,},{7,0,3,4,5,6,1,2,},{7,0,3,4,5,6,2,1,},{7,0,3,4,6,1,2,5,},
		{7,0,3,4,6,1,5,2,},{7,0,3,4,6,2,1,5,},{7,0,3,4,6,2,5,1,},{7,0,3,5,1,2,4,6,},{7,0,3,5,1,4,2,6,},{7,0,3,5,1,6,2,4,},{7,0,3,5,1,6,4,2,},{7,0,3,5,2,1,4,6,},{7,0,3,5,2,4,1,6,},{7,0,3,5,2,6,1,4,},
		{7,0,3,5,2,6,4,1,},{7,0,3,5,6,1,2,4,},{7,0,3,5,6,1,4,2,},{7,0,3,5,6,2,1,4,},{7,0,3,5,6,2,4,1,},{7,0,3,5,6,4,1,2,},{7,0,3,5,6,4,2,1,},{7,0,3,6,1,2,4,5,},{7,0,3,6,1,2,5,4,},{7,0,3,6,1,4,2,5,},
		{7,0,3,6,1,4,5,2,},{7,0,3,6,2,1,4,5,},{7,0,3,6,2,1,5,4,},{7,0,3,6,2,4,1,5,},{7,0,3,6,2,4,5,1,},{7,0,3,6,5,1,2,4,},{7,0,3,6,5,1,4,2,},{7,0,3,6,5,2,1,4,},{7,0,3,6,5,2,4,1,},{7,0,3,6,5,4,1,2,},
		{7,0,3,6,5,4,2,1,},{7,0,4,1,2,3,5,6,},{7,0,4,1,2,6,3,5,},{7,0,4,1,2,6,5,3,},{7,0,4,1,3,2,5,6,},{7,0,4,1,3,6,2,5,},{7,0,4,1,3,6,5,2,},{7,0,4,1,5,2,3,6,},{7,0,4,1,5,3,2,6,},{7,0,4,1,5,6,2,3,},
		{7,0,4,1,5,6,3,2,},{7,0,4,1,6,2,3,5,},{7,0,4,1,6,2,5,3,},{7,0,4,1,6,3,2,5,},{7,0,4,1,6,3,5,2,},{7,0,4,2,1,3,5,6,},{7,0,4,2,1,6,3,5,},{7,0,4,2,1,6,5,3,},{7,0,4,2,3,1,5,6,},{7,0,4,2,3,6,1,5,},
		{7,0,4,2,3,6,5,1,},{7,0,4,2,5,1,3,6,},{7,0,4,2,5,3,1,6,},{7,0,4,2,5,6,1,3,},{7,0,4,2,5,6,3,1,},{7,0,4,2,6,1,3,5,},{7,0,4,2,6,1,5,3,},{7,0,4,2,6,3,1,5,},{7,0,4,2,6,3,5,1,},{7,0,4,5,1,2,3,6,},
		{7,0,4,5,1,3,2,6,},{7,0,4,5,1,6,2,3,},{7,0,4,5,1,6,3,2,},{7,0,4,5,2,1,3,6,},{7,0,4,5,2,3,1,6,},{7,0,4,5,2,6,1,3,},{7,0,4,5,2,6,3,1,},{7,0,4,5,3,1,2,6,},{7,0,4,5,3,2,1,6,},{7,0,4,5,3,6,1,2,},
		{7,0,4,5,3,6,2,1,},{7,0,4,5,6,1,2,3,},{7,0,4,5,6,1,3,2,},{7,0,4,5,6,2,1,3,},{7,0,4,5,6,2,3,1,},{7,0,4,5,6,3,1,2,},{7,0,4,5,6,3,2,1,},{7,0,4,6,1,2,3,5,},{7,0,4,6,1,2,5,3,},{7,0,4,6,1,3,2,5,},
		{7,0,4,6,1,3,5,2,},{7,0,4,6,2,1,3,5,},{7,0,4,6,2,1,5,3,},{7,0,4,6,2,3,1,5,},{7,0,4,6,2,3,5,1,},{7,0,4,6,3,1,2,5,},{7,0,4,6,3,1,5,2,},{7,0,4,6,3,2,1,5,},{7,0,4,6,3,2,5,1,},{7,0,4,6,5,1,2,3,},
		{7,0,4,6,5,1,3,2,},{7,0,4,6,5,2,1,3,},{7,0,4,6,5,2,3,1,},{7,0,4,6,5,3,1,2,},{7,0,4,6,5,3,2,1,},{7,0,5,1,2,3,4,6,},{7,0,5,1,2,4,3,6,},{7,0,5,1,2,6,3,4,},{7,0,5,1,2,6,4,3,},{7,0,5,1,3,2,4,6,},
		{7,0,5,1,3,4,2,6,},{7,0,5,1,3,6,2,4,},{7,0,5,1,3,6,4,2,},{7,0,5,1,6,2,3,4,},{7,0,5,1,6,2,4,3,},{7,0,5,1,6,3,2,4,},{7,0,5,1,6,3,4,2,},{7,0,5,1,6,4,2,3,},{7,0,5,1,6,4,3,2,},{7,0,5,2,1,3,4,6,},
		{7,0,5,2,1,4,3,6,},{7,0,5,2,1,6,3,4,},{7,0,5,2,1,6,4,3,},{7,0,5,2,3,1,4,6,},{7,0,5,2,3,4,1,6,},{7,0,5,2,3,6,1,4,},{7,0,5,2,3,6,4,1,},{7,0,5,2,6,1,3,4,},{7,0,5,2,6,1,4,3,},{7,0,5,2,6,3,1,4,},
		{7,0,5,2,6,3,4,1,},{7,0,5,2,6,4,1,3,},{7,0,5,2,6,4,3,1,},{7,0,5,4,1,2,3,6,},{7,0,5,4,1,3,2,6,},{7,0,5,4,1,6,2,3,},{7,0,5,4,1,6,3,2,},{7,0,5,4,2,1,3,6,},{7,0,5,4,2,3,1,6,},{7,0,5,4,2,6,1,3,},
		{7,0,5,4,2,6,3,1,},{7,0,5,4,3,1,2,6,},{7,0,5,4,3,2,1,6,},{7,0,5,4,3,6,1,2,},{7,0,5,4,3,6,2,1,},{7,0,5,4,6,1,2,3,},{7,0,5,4,6,1,3,2,},{7,0,5,4,6,2,1,3,},{7,0,5,4,6,2,3,1,},{7,0,5,4,6,3,1,2,},
		{7,0,5,4,6,3,2,1,},{7,0,5,6,1,2,3,4,},{7,0,5,6,1,2,4,3,},{7,0,5,6,1,3,2,4,},{7,0,5,6,1,3,4,2,},{7,0,5,6,1,4,2,3,},{7,0,5,6,1,4,3,2,},{7,0,5,6,2,1,3,4,},{7,0,5,6,2,1,4,3,},{7,0,5,6,2,3,1,4,},
		{7,0,5,6,2,3,4,1,},{7,0,5,6,2,4,1,3,},{7,0,5,6,2,4,3,1,},{7,0,5,6,3,1,2,4,},{7,0,5,6,3,1,4,2,},{7,0,5,6,3,2,1,4,},{7,0,5,6,3,2,4,1,},{7,0,5,6,3,4,1,2,},{7,0,5,6,3,4,2,1,},{7,0,6,1,2,3,4,5,},
		{7,0,6,1,2,3,5,4,},{7,0,6,1,2,4,3,5,},{7,0,6,1,2,4,5,3,},{7,0,6,1,3,2,4,5,},{7,0,6,1,3,2,5,4,},{7,0,6,1,3,4,2,5,},{7,0,6,1,3,4,5,2,},{7,0,6,1,5,2,3,4,},{7,0,6,1,5,2,4,3,},{7,0,6,1,5,3,2,4,},
		{7,0,6,1,5,3,4,2,},{7,0,6,1,5,4,2,3,},{7,0,6,1,5,4,3,2,},{7,0,6,2,1,3,4,5,},{7,0,6,2,1,3,5,4,},{7,0,6,2,1,4,3,5,},{7,0,6,2,1,4,5,3,},{7,0,6,2,3,1,4,5,},{7,0,6,2,3,1,5,4,},{7,0,6,2,3,4,1,5,},
		{7,0,6,2,3,4,5,1,},{7,0,6,2,5,1,3,4,},{7,0,6,2,5,1,4,3,},{7,0,6,2,5,3,1,4,},{7,0,6,2,5,3,4,1,},{7,0,6,2,5,4,1,3,},{7,0,6,2,5,4,3,1,},{7,0,6,4,1,2,3,5,},{7,0,6,4,1,2,5,3,},{7,0,6,4,1,3,2,5,},
		{7,0,6,4,1,3,5,2,},{7,0,6,4,2,1,3,5,},{7,0,6,4,2,1,5,3,},{7,0,6,4,2,3,1,5,},{7,0,6,4,2,3,5,1,},{7,0,6,4,3,1,2,5,},{7,0,6,4,3,1,5,2,},{7,0,6,4,3,2,1,5,},{7,0,6,4,3,2,5,1,},{7,0,6,4,5,1,2,3,},
		{7,0,6,4,5,1,3,2,},{7,0,6,4,5,2,1,3,},{7,0,6,4,5,2,3,1,},{7,0,6,4,5,3,1,2,},{7,0,6,4,5,3,2,1,},{7,0,6,5,1,2,3,4,},{7,0,6,5,1,2,4,3,},{7,0,6,5,1,3,2,4,},{7,0,6,5,1,3,4,2,},{7,0,6,5,1,4,2,3,},
		{7,0,6,5,1,4,3,2,},{7,0,6,5,2,1,3,4,},{7,0,6,5,2,1,4,3,},{7,0,6,5,2,3,1,4,},{7,0,6,5,2,3,4,1,},{7,0,6,5,2,4,1,3,},{7,0,6,5,2,4,3,1,},{7,0,6,5,3,1,2,4,},{7,0,6,5,3,1,4,2,},{7,0,6,5,3,2,1,4,},
		{7,0,6,5,3,2,4,1,},{7,0,6,5,3,4,1,2,},{7,0,6,5,3,4,2,1,},{7,2,0,1,3,4,5,6,},{7,2,0,1,3,6,4,5,},{7,2,0,1,3,6,5,4,},{7,2,0,1,5,3,4,6,},{7,2,0,1,5,4,3,6,},{7,2,0,1,5,6,3,4,},{7,2,0,1,5,6,4,3,},
		{7,2,0,1,6,3,4,5,},{7,2,0,1,6,3,5,4,},{7,2,0,1,6,4,3,5,},{7,2,0,1,6,4,5,3,},{7,2,0,4,1,3,5,6,},{7,2,0,4,1,6,3,5,},{7,2,0,4,1,6,5,3,},{7,2,0,4,3,1,5,6,},{7,2,0,4,3,6,1,5,},{7,2,0,4,3,6,5,1,},
		{7,2,0,4,5,1,3,6,},{7,2,0,4,5,3,1,6,},{7,2,0,4,5,6,1,3,},{7,2,0,4,5,6,3,1,},{7,2,0,4,6,1,3,5,},{7,2,0,4,6,1,5,3,},{7,2,0,4,6,3,1,5,},{7,2,0,4,6,3,5,1,},{7,2,0,5,1,3,4,6,},{7,2,0,5,1,4,3,6,},
		{7,2,0,5,1,6,3,4,},{7,2,0,5,1,6,4,3,},{7,2,0,5,3,1,4,6,},{7,2,0,5,3,4,1,6,},{7,2,0,5,3,6,1,4,},{7,2,0,5,3,6,4,1,},{7,2,0,5,6,1,3,4,},{7,2,0,5,6,1,4,3,},{7,2,0,5,6,3,1,4,},{7,2,0,5,6,3,4,1,},
		{7,2,0,5,6,4,1,3,},{7,2,0,5,6,4,3,1,},{7,2,0,6,1,3,4,5,},{7,2,0,6,1,3,5,4,},{7,2,0,6,1,4,3,5,},{7,2,0,6,1,4,5,3,},{7,2,0,6,3,1,4,5,},{7,2,0,6,3,1,5,4,},{7,2,0,6,3,4,1,5,},{7,2,0,6,3,4,5,1,},
		{7,2,0,6,5,1,3,4,},{7,2,0,6,5,1,4,3,},{7,2,0,6,5,3,1,4,},{7,2,0,6,5,3,4,1,},{7,2,0,6,5,4,1,3,},{7,2,0,6,5,4,3,1,},{7,2,1,0,3,4,5,6,},{7,2,1,0,3,6,4,5,},{7,2,1,0,3,6,5,4,},{7,2,1,0,5,3,4,6,},
		{7,2,1,0,5,4,3,6,},{7,2,1,0,5,6,3,4,},{7,2,1,0,5,6,4,3,},{7,2,1,0,6,3,4,5,},{7,2,1,0,6,3,5,4,},{7,2,1,0,6,4,3,5,},{7,2,1,0,6,4,5,3,},{7,2,1,4,0,3,5,6,},{7,2,1,4,0,6,3,5,},{7,2,1,4,0,6,5,3,},
		{7,2,1,4,3,0,5,6,},{7,2,1,4,3,6,0,5,},{7,2,1,4,3,6,5,0,},{7,2,1,4,5,0,3,6,},{7,2,1,4,5,3,0,6,},{7,2,1,4,5,6,0,3,},{7,2,1,4,5,6,3,0,},{7,2,1,4,6,0,3,5,},{7,2,1,4,6,0,5,3,},{7,2,1,4,6,3,0,5,},
		{7,2,1,4,6,3,5,0,},{7,2,1,5,0,3,4,6,},{7,2,1,5,0,4,3,6,},{7,2,1,5,0,6,3,4,},{7,2,1,5,0,6,4,3,},{7,2,1,5,3,0,4,6,},{7,2,1,5,3,4,0,6,},{7,2,1,5,3,6,0,4,},{7,2,1,5,3,6,4,0,},{7,2,1,5,6,0,3,4,},
		{7,2,1,5,6,0,4,3,},{7,2,1,5,6,3,0,4,},{7,2,1,5,6,3,4,0,},{7,2,1,5,6,4,0,3,},{7,2,1,5,6,4,3,0,},{7,2,1,6,0,3,4,5,},{7,2,1,6,0,3,5,4,},{7,2,1,6,0,4,3,5,},{7,2,1,6,0,4,5,3,},{7,2,1,6,3,0,4,5,},
		{7,2,1,6,3,0,5,4,},{7,2,1,6,3,4,0,5,},{7,2,1,6,3,4,5,0,},{7,2,1,6,5,0,3,4,},{7,2,1,6,5,0,4,3,},{7,2,1,6,5,3,0,4,},{7,2,1,6,5,3,4,0,},{7,2,1,6,5,4,0,3,},{7,2,1,6,5,4,3,0,},{7,2,3,0,1,4,5,6,},
		{7,2,3,0,1,6,4,5,},{7,2,3,0,1,6,5,4,},{7,2,3,0,5,1,4,6,},{7,2,3,0,5,4,1,6,},{7,2,3,0,5,6,1,4,},{7,2,3,0,5,6,4,1,},{7,2,3,0,6,1,4,5,},{7,2,3,0,6,1,5,4,},{7,2,3,0,6,4,1,5,},{7,2,3,0,6,4,5,1,},
		{7,2,3,1,0,4,5,6,},{7,2,3,1,0,6,4,5,},{7,2,3,1,0,6,5,4,},{7,2,3,1,5,0,4,6,},{7,2,3,1,5,4,0,6,},{7,2,3,1,5,6,0,4,},{7,2,3,1,5,6,4,0,},{7,2,3,1,6,0,4,5,},{7,2,3,1,6,0,5,4,},{7,2,3,1,6,4,0,5,},
		{7,2,3,1,6,4,5,0,},{7,2,3,4,0,1,5,6,},{7,2,3,4,0,6,1,5,},{7,2,3,4,0,6,5,1,},{7,2,3,4,1,0,5,6,},{7,2,3,4,1,6,0,5,},{7,2,3,4,1,6,5,0,},{7,2,3,4,5,0,1,6,},{7,2,3,4,5,1,0,6,},{7,2,3,4,5,6,0,1,},
		{7,2,3,4,5,6,1,0,},{7,2,3,4,6,0,1,5,},{7,2,3,4,6,0,5,1,},{7,2,3,4,6,1,0,5,},{7,2,3,4,6,1,5,0,},{7,2,3,5,0,1,4,6,},{7,2,3,5,0,4,1,6,},{7,2,3,5,0,6,1,4,},{7,2,3,5,0,6,4,1,},{7,2,3,5,1,0,4,6,},
		{7,2,3,5,1,4,0,6,},{7,2,3,5,1,6,0,4,},{7,2,3,5,1,6,4,0,},{7,2,3,5,6,0,1,4,},{7,2,3,5,6,0,4,1,},{7,2,3,5,6,1,0,4,},{7,2,3,5,6,1,4,0,},{7,2,3,5,6,4,0,1,},{7,2,3,5,6,4,1,0,},{7,2,3,6,0,1,4,5,},
		{7,2,3,6,0,1,5,4,},{7,2,3,6,0,4,1,5,},{7,2,3,6,0,4,5,1,},{7,2,3,6,1,0,4,5,},{7,2,3,6,1,0,5,4,},{7,2,3,6,1,4,0,5,},{7,2,3,6,1,4,5,0,},{7,2,3,6,5,0,1,4,},{7,2,3,6,5,0,4,1,},{7,2,3,6,5,1,0,4,},
		{7,2,3,6,5,1,4,0,},{7,2,3,6,5,4,0,1,},{7,2,3,6,5,4,1,0,},{7,2,4,0,1,3,5,6,},{7,2,4,0,1,6,3,5,},{7,2,4,0,1,6,5,3,},{7,2,4,0,3,1,5,6,},{7,2,4,0,3,6,1,5,},{7,2,4,0,3,6,5,1,},{7,2,4,0,5,1,3,6,},
		{7,2,4,0,5,3,1,6,},{7,2,4,0,5,6,1,3,},{7,2,4,0,5,6,3,1,},{7,2,4,0,6,1,3,5,},{7,2,4,0,6,1,5,3,},{7,2,4,0,6,3,1,5,},{7,2,4,0,6,3,5,1,},{7,2,4,1,0,3,5,6,},{7,2,4,1,0,6,3,5,},{7,2,4,1,0,6,5,3,},
		{7,2,4,1,3,0,5,6,},{7,2,4,1,3,6,0,5,},{7,2,4,1,3,6,5,0,},{7,2,4,1,5,0,3,6,},{7,2,4,1,5,3,0,6,},{7,2,4,1,5,6,0,3,},{7,2,4,1,5,6,3,0,},{7,2,4,1,6,0,3,5,},{7,2,4,1,6,0,5,3,},{7,2,4,1,6,3,0,5,},
		{7,2,4,1,6,3,5,0,},{7,2,4,5,0,1,3,6,},{7,2,4,5,0,3,1,6,},{7,2,4,5,0,6,1,3,},{7,2,4,5,0,6,3,1,},{7,2,4,5,1,0,3,6,},{7,2,4,5,1,3,0,6,},{7,2,4,5,1,6,0,3,},{7,2,4,5,1,6,3,0,},{7,2,4,5,3,0,1,6,},
		{7,2,4,5,3,1,0,6,},{7,2,4,5,3,6,0,1,},{7,2,4,5,3,6,1,0,},{7,2,4,5,6,0,1,3,},{7,2,4,5,6,0,3,1,},{7,2,4,5,6,1,0,3,},{7,2,4,5,6,1,3,0,},{7,2,4,5,6,3,0,1,},{7,2,4,5,6,3,1,0,},{7,2,4,6,0,1,3,5,},
		{7,2,4,6,0,1,5,3,},{7,2,4,6,0,3,1,5,},{7,2,4,6,0,3,5,1,},{7,2,4,6,1,0,3,5,},{7,2,4,6,1,0,5,3,},{7,2,4,6,1,3,0,5,},{7,2,4,6,1,3,5,0,},{7,2,4,6,3,0,1,5,},{7,2,4,6,3,0,5,1,},{7,2,4,6,3,1,0,5,},
		{7,2,4,6,3,1,5,0,},{7,2,4,6,5,0,1,3,},{7,2,4,6,5,0,3,1,},{7,2,4,6,5,1,0,3,},{7,2,4,6,5,1,3,0,},{7,2,4,6,5,3,0,1,},{7,2,4,6,5,3,1,0,},{7,2,5,0,1,3,4,6,},{7,2,5,0,1,4,3,6,},{7,2,5,0,1,6,3,4,},
		{7,2,5,0,1,6,4,3,},{7,2,5,0,3,1,4,6,},{7,2,5,0,3,4,1,6,},{7,2,5,0,3,6,1,4,},{7,2,5,0,3,6,4,1,},{7,2,5,0,6,1,3,4,},{7,2,5,0,6,1,4,3,},{7,2,5,0,6,3,1,4,},{7,2,5,0,6,3,4,1,},{7,2,5,0,6,4,1,3,},
		{7,2,5,0,6,4,3,1,},{7,2,5,1,0,3,4,6,},{7,2,5,1,0,4,3,6,},{7,2,5,1,0,6,3,4,},{7,2,5,1,0,6,4,3,},{7,2,5,1,3,0,4,6,},{7,2,5,1,3,4,0,6,},{7,2,5,1,3,6,0,4,},{7,2,5,1,3,6,4,0,},{7,2,5,1,6,0,3,4,},
		{7,2,5,1,6,0,4,3,},{7,2,5,1,6,3,0,4,},{7,2,5,1,6,3,4,0,},{7,2,5,1,6,4,0,3,},{7,2,5,1,6,4,3,0,},{7,2,5,4,0,1,3,6,},{7,2,5,4,0,3,1,6,},{7,2,5,4,0,6,1,3,},{7,2,5,4,0,6,3,1,},{7,2,5,4,1,0,3,6,},
		{7,2,5,4,1,3,0,6,},{7,2,5,4,1,6,0,3,},{7,2,5,4,1,6,3,0,},{7,2,5,4,3,0,1,6,},{7,2,5,4,3,1,0,6,},{7,2,5,4,3,6,0,1,},{7,2,5,4,3,6,1,0,},{7,2,5,4,6,0,1,3,},{7,2,5,4,6,0,3,1,},{7,2,5,4,6,1,0,3,},
		{7,2,5,4,6,1,3,0,},{7,2,5,4,6,3,0,1,},{7,2,5,4,6,3,1,0,},{7,2,5,6,0,1,3,4,},{7,2,5,6,0,1,4,3,},{7,2,5,6,0,3,1,4,},{7,2,5,6,0,3,4,1,},{7,2,5,6,0,4,1,3,},{7,2,5,6,0,4,3,1,},{7,2,5,6,1,0,3,4,},
		{7,2,5,6,1,0,4,3,},{7,2,5,6,1,3,0,4,},{7,2,5,6,1,3,4,0,},{7,2,5,6,1,4,0,3,},{7,2,5,6,1,4,3,0,},{7,2,5,6,3,0,1,4,},{7,2,5,6,3,0,4,1,},{7,2,5,6,3,1,0,4,},{7,2,5,6,3,1,4,0,},{7,2,5,6,3,4,0,1,},
		{7,2,5,6,3,4,1,0,},{7,2,6,0,1,3,4,5,},{7,2,6,0,1,3,5,4,},{7,2,6,0,1,4,3,5,},{7,2,6,0,1,4,5,3,},{7,2,6,0,3,1,4,5,},{7,2,6,0,3,1,5,4,},{7,2,6,0,3,4,1,5,},{7,2,6,0,3,4,5,1,},{7,2,6,0,5,1,3,4,},
		{7,2,6,0,5,1,4,3,},{7,2,6,0,5,3,1,4,},{7,2,6,0,5,3,4,1,},{7,2,6,0,5,4,1,3,},{7,2,6,0,5,4,3,1,},{7,2,6,1,0,3,4,5,},{7,2,6,1,0,3,5,4,},{7,2,6,1,0,4,3,5,},{7,2,6,1,0,4,5,3,},{7,2,6,1,3,0,4,5,},
		{7,2,6,1,3,0,5,4,},{7,2,6,1,3,4,0,5,},{7,2,6,1,3,4,5,0,},{7,2,6,1,5,0,3,4,},{7,2,6,1,5,0,4,3,},{7,2,6,1,5,3,0,4,},{7,2,6,1,5,3,4,0,},{7,2,6,1,5,4,0,3,},{7,2,6,1,5,4,3,0,},{7,2,6,4,0,1,3,5,},
		{7,2,6,4,0,1,5,3,},{7,2,6,4,0,3,1,5,},{7,2,6,4,0,3,5,1,},{7,2,6,4,1,0,3,5,},{7,2,6,4,1,0,5,3,},{7,2,6,4,1,3,0,5,},{7,2,6,4,1,3,5,0,},{7,2,6,4,3,0,1,5,},{7,2,6,4,3,0,5,1,},{7,2,6,4,3,1,0,5,},
		{7,2,6,4,3,1,5,0,},{7,2,6,4,5,0,1,3,},{7,2,6,4,5,0,3,1,},{7,2,6,4,5,1,0,3,},{7,2,6,4,5,1,3,0,},{7,2,6,4,5,3,0,1,},{7,2,6,4,5,3,1,0,},{7,2,6,5,0,1,3,4,},{7,2,6,5,0,1,4,3,},{7,2,6,5,0,3,1,4,},
		{7,2,6,5,0,3,4,1,},{7,2,6,5,0,4,1,3,},{7,2,6,5,0,4,3,1,},{7,2,6,5,1,0,3,4,},{7,2,6,5,1,0,4,3,},{7,2,6,5,1,3,0,4,},{7,2,6,5,1,3,4,0,},{7,2,6,5,1,4,0,3,},{7,2,6,5,1,4,3,0,},{7,2,6,5,3,0,1,4,},
		{7,2,6,5,3,0,4,1,},{7,2,6,5,3,1,0,4,},{7,2,6,5,3,1,4,0,},{7,2,6,5,3,4,0,1,},{7,2,6,5,3,4,1,0,},{7,3,0,1,2,4,5,6,},{7,3,0,1,2,6,4,5,},{7,3,0,1,2,6,5,4,},{7,3,0,1,5,2,4,6,},{7,3,0,1,5,4,2,6,},
		{7,3,0,1,5,6,2,4,},{7,3,0,1,5,6,4,2,},{7,3,0,1,6,2,4,5,},{7,3,0,1,6,2,5,4,},{7,3,0,1,6,4,2,5,},{7,3,0,1,6,4,5,2,},{7,3,0,2,1,4,5,6,},{7,3,0,2,1,6,4,5,},{7,3,0,2,1,6,5,4,},{7,3,0,2,5,1,4,6,},
		{7,3,0,2,5,4,1,6,},{7,3,0,2,5,6,1,4,},{7,3,0,2,5,6,4,1,},{7,3,0,2,6,1,4,5,},{7,3,0,2,6,1,5,4,},{7,3,0,2,6,4,1,5,},{7,3,0,2,6,4,5,1,},{7,3,0,4,1,2,5,6,},{7,3,0,4,1,6,2,5,},{7,3,0,4,1,6,5,2,},
		{7,3,0,4,2,1,5,6,},{7,3,0,4,2,6,1,5,},{7,3,0,4,2,6,5,1,},{7,3,0,4,5,1,2,6,},{7,3,0,4,5,2,1,6,},{7,3,0,4,5,6,1,2,},{7,3,0,4,5,6,2,1,},{7,3,0,4,6,1,2,5,},{7,3,0,4,6,1,5,2,},{7,3,0,4,6,2,1,5,},
		{7,3,0,4,6,2,5,1,},{7,3,0,5,1,2,4,6,},{7,3,0,5,1,4,2,6,},{7,3,0,5,1,6,2,4,},{7,3,0,5,1,6,4,2,},{7,3,0,5,2,1,4,6,},{7,3,0,5,2,4,1,6,},{7,3,0,5,2,6,1,4,},{7,3,0,5,2,6,4,1,},{7,3,0,5,6,1,2,4,},
		{7,3,0,5,6,1,4,2,},{7,3,0,5,6,2,1,4,},{7,3,0,5,6,2,4,1,},{7,3,0,5,6,4,1,2,},{7,3,0,5,6,4,2,1,},{7,3,0,6,1,2,4,5,},{7,3,0,6,1,2,5,4,},{7,3,0,6,1,4,2,5,},{7,3,0,6,1,4,5,2,},{7,3,0,6,2,1,4,5,},
		{7,3,0,6,2,1,5,4,},{7,3,0,6,2,4,1,5,},{7,3,0,6,2,4,5,1,},{7,3,0,6,5,1,2,4,},{7,3,0,6,5,1,4,2,},{7,3,0,6,5,2,1,4,},{7,3,0,6,5,2,4,1,},{7,3,0,6,5,4,1,2,},{7,3,0,6,5,4,2,1,},{7,3,1,0,2,4,5,6,},
		{7,3,1,0,2,6,4,5,},{7,3,1,0,2,6,5,4,},{7,3,1,0,5,2,4,6,},{7,3,1,0,5,4,2,6,},{7,3,1,0,5,6,2,4,},{7,3,1,0,5,6,4,2,},{7,3,1,0,6,2,4,5,},{7,3,1,0,6,2,5,4,},{7,3,1,0,6,4,2,5,},{7,3,1,0,6,4,5,2,},
		{7,3,1,2,0,4,5,6,},{7,3,1,2,0,6,4,5,},{7,3,1,2,0,6,5,4,},{7,3,1,2,5,0,4,6,},{7,3,1,2,5,4,0,6,},{7,3,1,2,5,6,0,4,},{7,3,1,2,5,6,4,0,},{7,3,1,2,6,0,4,5,},{7,3,1,2,6,0,5,4,},{7,3,1,2,6,4,0,5,},
		{7,3,1,2,6,4,5,0,},{7,3,1,4,0,2,5,6,},{7,3,1,4,0,6,2,5,},{7,3,1,4,0,6,5,2,},{7,3,1,4,2,0,5,6,},{7,3,1,4,2,6,0,5,},{7,3,1,4,2,6,5,0,},{7,3,1,4,5,0,2,6,},{7,3,1,4,5,2,0,6,},{7,3,1,4,5,6,0,2,},
		{7,3,1,4,5,6,2,0,},{7,3,1,4,6,0,2,5,},{7,3,1,4,6,0,5,2,},{7,3,1,4,6,2,0,5,},{7,3,1,4,6,2,5,0,},{7,3,1,5,0,2,4,6,},{7,3,1,5,0,4,2,6,},{7,3,1,5,0,6,2,4,},{7,3,1,5,0,6,4,2,},{7,3,1,5,2,0,4,6,},
		{7,3,1,5,2,4,0,6,},{7,3,1,5,2,6,0,4,},{7,3,1,5,2,6,4,0,},{7,3,1,5,6,0,2,4,},{7,3,1,5,6,0,4,2,},{7,3,1,5,6,2,0,4,},{7,3,1,5,6,2,4,0,},{7,3,1,5,6,4,0,2,},{7,3,1,5,6,4,2,0,},{7,3,1,6,0,2,4,5,},
		{7,3,1,6,0,2,5,4,},{7,3,1,6,0,4,2,5,},{7,3,1,6,0,4,5,2,},{7,3,1,6,2,0,4,5,},{7,3,1,6,2,0,5,4,},{7,3,1,6,2,4,0,5,},{7,3,1,6,2,4,5,0,},{7,3,1,6,5,0,2,4,},{7,3,1,6,5,0,4,2,},{7,3,1,6,5,2,0,4,},
		{7,3,1,6,5,2,4,0,},{7,3,1,6,5,4,0,2,},{7,3,1,6,5,4,2,0,},{7,3,4,0,1,2,5,6,},{7,3,4,0,1,6,2,5,},{7,3,4,0,1,6,5,2,},{7,3,4,0,2,1,5,6,},{7,3,4,0,2,6,1,5,},{7,3,4,0,2,6,5,1,},{7,3,4,0,5,1,2,6,},
		{7,3,4,0,5,2,1,6,},{7,3,4,0,5,6,1,2,},{7,3,4,0,5,6,2,1,},{7,3,4,0,6,1,2,5,},{7,3,4,0,6,1,5,2,},{7,3,4,0,6,2,1,5,},{7,3,4,0,6,2,5,1,},{7,3,4,1,0,2,5,6,},{7,3,4,1,0,6,2,5,},{7,3,4,1,0,6,5,2,},
		{7,3,4,1,2,0,5,6,},{7,3,4,1,2,6,0,5,},{7,3,4,1,2,6,5,0,},{7,3,4,1,5,0,2,6,},{7,3,4,1,5,2,0,6,},{7,3,4,1,5,6,0,2,},{7,3,4,1,5,6,2,0,},{7,3,4,1,6,0,2,5,},{7,3,4,1,6,0,5,2,},{7,3,4,1,6,2,0,5,},
		{7,3,4,1,6,2,5,0,},{7,3,4,2,0,1,5,6,},{7,3,4,2,0,6,1,5,},{7,3,4,2,0,6,5,1,},{7,3,4,2,1,0,5,6,},{7,3,4,2,1,6,0,5,},{7,3,4,2,1,6,5,0,},{7,3,4,2,5,0,1,6,},{7,3,4,2,5,1,0,6,},{7,3,4,2,5,6,0,1,},
		{7,3,4,2,5,6,1,0,},{7,3,4,2,6,0,1,5,},{7,3,4,2,6,0,5,1,},{7,3,4,2,6,1,0,5,},{7,3,4,2,6,1,5,0,},{7,3,4,5,0,1,2,6,},{7,3,4,5,0,2,1,6,},{7,3,4,5,0,6,1,2,},{7,3,4,5,0,6,2,1,},{7,3,4,5,1,0,2,6,},
		{7,3,4,5,1,2,0,6,},{7,3,4,5,1,6,0,2,},{7,3,4,5,1,6,2,0,},{7,3,4,5,2,0,1,6,},{7,3,4,5,2,1,0,6,},{7,3,4,5,2,6,0,1,},{7,3,4,5,2,6,1,0,},{7,3,4,5,6,0,1,2,},{7,3,4,5,6,0,2,1,},{7,3,4,5,6,1,0,2,},
		{7,3,4,5,6,1,2,0,},{7,3,4,5,6,2,0,1,},{7,3,4,5,6,2,1,0,},{7,3,4,6,0,1,2,5,},{7,3,4,6,0,1,5,2,},{7,3,4,6,0,2,1,5,},{7,3,4,6,0,2,5,1,},{7,3,4,6,1,0,2,5,},{7,3,4,6,1,0,5,2,},{7,3,4,6,1,2,0,5,},
		{7,3,4,6,1,2,5,0,},{7,3,4,6,2,0,1,5,},{7,3,4,6,2,0,5,1,},{7,3,4,6,2,1,0,5,},{7,3,4,6,2,1,5,0,},{7,3,4,6,5,0,1,2,},{7,3,4,6,5,0,2,1,},{7,3,4,6,5,1,0,2,},{7,3,4,6,5,1,2,0,},{7,3,4,6,5,2,0,1,},
		{7,3,4,6,5,2,1,0,},{7,3,5,0,1,2,4,6,},{7,3,5,0,1,4,2,6,},{7,3,5,0,1,6,2,4,},{7,3,5,0,1,6,4,2,},{7,3,5,0,2,1,4,6,},{7,3,5,0,2,4,1,6,},{7,3,5,0,2,6,1,4,},{7,3,5,0,2,6,4,1,},{7,3,5,0,6,1,2,4,},
		{7,3,5,0,6,1,4,2,},{7,3,5,0,6,2,1,4,},{7,3,5,0,6,2,4,1,},{7,3,5,0,6,4,1,2,},{7,3,5,0,6,4,2,1,},{7,3,5,1,0,2,4,6,},{7,3,5,1,0,4,2,6,},{7,3,5,1,0,6,2,4,},{7,3,5,1,0,6,4,2,},{7,3,5,1,2,0,4,6,},
		{7,3,5,1,2,4,0,6,},{7,3,5,1,2,6,0,4,},{7,3,5,1,2,6,4,0,},{7,3,5,1,6,0,2,4,},{7,3,5,1,6,0,4,2,},{7,3,5,1,6,2,0,4,},{7,3,5,1,6,2,4,0,},{7,3,5,1,6,4,0,2,},{7,3,5,1,6,4,2,0,},{7,3,5,2,0,1,4,6,},
		{7,3,5,2,0,4,1,6,},{7,3,5,2,0,6,1,4,},{7,3,5,2,0,6,4,1,},{7,3,5,2,1,0,4,6,},{7,3,5,2,1,4,0,6,},{7,3,5,2,1,6,0,4,},{7,3,5,2,1,6,4,0,},{7,3,5,2,6,0,1,4,},{7,3,5,2,6,0,4,1,},{7,3,5,2,6,1,0,4,},
		{7,3,5,2,6,1,4,0,},{7,3,5,2,6,4,0,1,},{7,3,5,2,6,4,1,0,},{7,3,5,4,0,1,2,6,},{7,3,5,4,0,2,1,6,},{7,3,5,4,0,6,1,2,},{7,3,5,4,0,6,2,1,},{7,3,5,4,1,0,2,6,},{7,3,5,4,1,2,0,6,},{7,3,5,4,1,6,0,2,},
		{7,3,5,4,1,6,2,0,},{7,3,5,4,2,0,1,6,},{7,3,5,4,2,1,0,6,},{7,3,5,4,2,6,0,1,},{7,3,5,4,2,6,1,0,},{7,3,5,4,6,0,1,2,},{7,3,5,4,6,0,2,1,},{7,3,5,4,6,1,0,2,},{7,3,5,4,6,1,2,0,},{7,3,5,4,6,2,0,1,},
		{7,3,5,4,6,2,1,0,},{7,3,5,6,0,1,2,4,},{7,3,5,6,0,1,4,2,},{7,3,5,6,0,2,1,4,},{7,3,5,6,0,2,4,1,},{7,3,5,6,0,4,1,2,},{7,3,5,6,0,4,2,1,},{7,3,5,6,1,0,2,4,},{7,3,5,6,1,0,4,2,},{7,3,5,6,1,2,0,4,},
		{7,3,5,6,1,2,4,0,},{7,3,5,6,1,4,0,2,},{7,3,5,6,1,4,2,0,},{7,3,5,6,2,0,1,4,},{7,3,5,6,2,0,4,1,},{7,3,5,6,2,1,0,4,},{7,3,5,6,2,1,4,0,},{7,3,5,6,2,4,0,1,},{7,3,5,6,2,4,1,0,},{7,3,6,0,1,2,4,5,},
		{7,3,6,0,1,2,5,4,},{7,3,6,0,1,4,2,5,},{7,3,6,0,1,4,5,2,},{7,3,6,0,2,1,4,5,},{7,3,6,0,2,1,5,4,},{7,3,6,0,2,4,1,5,},{7,3,6,0,2,4,5,1,},{7,3,6,0,5,1,2,4,},{7,3,6,0,5,1,4,2,},{7,3,6,0,5,2,1,4,},
		{7,3,6,0,5,2,4,1,},{7,3,6,0,5,4,1,2,},{7,3,6,0,5,4,2,1,},{7,3,6,1,0,2,4,5,},{7,3,6,1,0,2,5,4,},{7,3,6,1,0,4,2,5,},{7,3,6,1,0,4,5,2,},{7,3,6,1,2,0,4,5,},{7,3,6,1,2,0,5,4,},{7,3,6,1,2,4,0,5,},
		{7,3,6,1,2,4,5,0,},{7,3,6,1,5,0,2,4,},{7,3,6,1,5,0,4,2,},{7,3,6,1,5,2,0,4,},{7,3,6,1,5,2,4,0,},{7,3,6,1,5,4,0,2,},{7,3,6,1,5,4,2,0,},{7,3,6,2,0,1,4,5,},{7,3,6,2,0,1,5,4,},{7,3,6,2,0,4,1,5,},
		{7,3,6,2,0,4,5,1,},{7,3,6,2,1,0,4,5,},{7,3,6,2,1,0,5,4,},{7,3,6,2,1,4,0,5,},{7,3,6,2,1,4,5,0,},{7,3,6,2,5,0,1,4,},{7,3,6,2,5,0,4,1,},{7,3,6,2,5,1,0,4,},{7,3,6,2,5,1,4,0,},{7,3,6,2,5,4,0,1,},
		{7,3,6,2,5,4,1,0,},{7,3,6,4,0,1,2,5,},{7,3,6,4,0,1,5,2,},{7,3,6,4,0,2,1,5,},{7,3,6,4,0,2,5,1,},{7,3,6,4,1,0,2,5,},{7,3,6,4,1,0,5,2,},{7,3,6,4,1,2,0,5,},{7,3,6,4,1,2,5,0,},{7,3,6,4,2,0,1,5,},
		{7,3,6,4,2,0,5,1,},{7,3,6,4,2,1,0,5,},{7,3,6,4,2,1,5,0,},{7,3,6,4,5,0,1,2,},{7,3,6,4,5,0,2,1,},{7,3,6,4,5,1,0,2,},{7,3,6,4,5,1,2,0,},{7,3,6,4,5,2,0,1,},{7,3,6,4,5,2,1,0,},{7,3,6,5,0,1,2,4,},
		{7,3,6,5,0,1,4,2,},{7,3,6,5,0,2,1,4,},{7,3,6,5,0,2,4,1,},{7,3,6,5,0,4,1,2,},{7,3,6,5,0,4,2,1,},{7,3,6,5,1,0,2,4,},{7,3,6,5,1,0,4,2,},{7,3,6,5,1,2,0,4,},{7,3,6,5,1,2,4,0,},{7,3,6,5,1,4,0,2,},
		{7,3,6,5,1,4,2,0,},{7,3,6,5,2,0,1,4,},{7,3,6,5,2,0,4,1,},{7,3,6,5,2,1,0,4,},{7,3,6,5,2,1,4,0,},{7,3,6,5,2,4,0,1,},{7,3,6,5,2,4,1,0,},{7,4,0,1,2,3,5,6,},{7,4,0,1,2,6,3,5,},{7,4,0,1,2,6,5,3,},
		{7,4,0,1,3,2,5,6,},{7,4,0,1,3,6,2,5,},{7,4,0,1,3,6,5,2,},{7,4,0,1,5,2,3,6,},{7,4,0,1,5,3,2,6,},{7,4,0,1,5,6,2,3,},{7,4,0,1,5,6,3,2,},{7,4,0,1,6,2,3,5,},{7,4,0,1,6,2,5,3,},{7,4,0,1,6,3,2,5,},
		{7,4,0,1,6,3,5,2,},{7,4,0,2,1,3,5,6,},{7,4,0,2,1,6,3,5,},{7,4,0,2,1,6,5,3,},{7,4,0,2,3,1,5,6,},{7,4,0,2,3,6,1,5,},{7,4,0,2,3,6,5,1,},{7,4,0,2,5,1,3,6,},{7,4,0,2,5,3,1,6,},{7,4,0,2,5,6,1,3,},
		{7,4,0,2,5,6,3,1,},{7,4,0,2,6,1,3,5,},{7,4,0,2,6,1,5,3,},{7,4,0,2,6,3,1,5,},{7,4,0,2,6,3,5,1,},{7,4,0,5,1,2,3,6,},{7,4,0,5,1,3,2,6,},{7,4,0,5,1,6,2,3,},{7,4,0,5,1,6,3,2,},{7,4,0,5,2,1,3,6,},
		{7,4,0,5,2,3,1,6,},{7,4,0,5,2,6,1,3,},{7,4,0,5,2,6,3,1,},{7,4,0,5,3,1,2,6,},{7,4,0,5,3,2,1,6,},{7,4,0,5,3,6,1,2,},{7,4,0,5,3,6,2,1,},{7,4,0,5,6,1,2,3,},{7,4,0,5,6,1,3,2,},{7,4,0,5,6,2,1,3,},
		{7,4,0,5,6,2,3,1,},{7,4,0,5,6,3,1,2,},{7,4,0,5,6,3,2,1,},{7,4,0,6,1,2,3,5,},{7,4,0,6,1,2,5,3,},{7,4,0,6,1,3,2,5,},{7,4,0,6,1,3,5,2,},{7,4,0,6,2,1,3,5,},{7,4,0,6,2,1,5,3,},{7,4,0,6,2,3,1,5,},
		{7,4,0,6,2,3,5,1,},{7,4,0,6,3,1,2,5,},{7,4,0,6,3,1,5,2,},{7,4,0,6,3,2,1,5,},{7,4,0,6,3,2,5,1,},{7,4,0,6,5,1,2,3,},{7,4,0,6,5,1,3,2,},{7,4,0,6,5,2,1,3,},{7,4,0,6,5,2,3,1,},{7,4,0,6,5,3,1,2,},
		{7,4,0,6,5,3,2,1,},{7,4,1,0,2,3,5,6,},{7,4,1,0,2,6,3,5,},{7,4,1,0,2,6,5,3,},{7,4,1,0,3,2,5,6,},{7,4,1,0,3,6,2,5,},{7,4,1,0,3,6,5,2,},{7,4,1,0,5,2,3,6,},{7,4,1,0,5,3,2,6,},{7,4,1,0,5,6,2,3,},
		{7,4,1,0,5,6,3,2,},{7,4,1,0,6,2,3,5,},{7,4,1,0,6,2,5,3,},{7,4,1,0,6,3,2,5,},{7,4,1,0,6,3,5,2,},{7,4,1,2,0,3,5,6,},{7,4,1,2,0,6,3,5,},{7,4,1,2,0,6,5,3,},{7,4,1,2,3,0,5,6,},{7,4,1,2,3,6,0,5,},
		{7,4,1,2,3,6,5,0,},{7,4,1,2,5,0,3,6,},{7,4,1,2,5,3,0,6,},{7,4,1,2,5,6,0,3,},{7,4,1,2,5,6,3,0,},{7,4,1,2,6,0,3,5,},{7,4,1,2,6,0,5,3,},{7,4,1,2,6,3,0,5,},{7,4,1,2,6,3,5,0,},{7,4,1,5,0,2,3,6,},
		{7,4,1,5,0,3,2,6,},{7,4,1,5,0,6,2,3,},{7,4,1,5,0,6,3,2,},{7,4,1,5,2,0,3,6,},{7,4,1,5,2,3,0,6,},{7,4,1,5,2,6,0,3,},{7,4,1,5,2,6,3,0,},{7,4,1,5,3,0,2,6,},{7,4,1,5,3,2,0,6,},{7,4,1,5,3,6,0,2,},
		{7,4,1,5,3,6,2,0,},{7,4,1,5,6,0,2,3,},{7,4,1,5,6,0,3,2,},{7,4,1,5,6,2,0,3,},{7,4,1,5,6,2,3,0,},{7,4,1,5,6,3,0,2,},{7,4,1,5,6,3,2,0,},{7,4,1,6,0,2,3,5,},{7,4,1,6,0,2,5,3,},{7,4,1,6,0,3,2,5,},
		{7,4,1,6,0,3,5,2,},{7,4,1,6,2,0,3,5,},{7,4,1,6,2,0,5,3,},{7,4,1,6,2,3,0,5,},{7,4,1,6,2,3,5,0,},{7,4,1,6,3,0,2,5,},{7,4,1,6,3,0,5,2,},{7,4,1,6,3,2,0,5,},{7,4,1,6,3,2,5,0,},{7,4,1,6,5,0,2,3,},
		{7,4,1,6,5,0,3,2,},{7,4,1,6,5,2,0,3,},{7,4,1,6,5,2,3,0,},{7,4,1,6,5,3,0,2,},{7,4,1,6,5,3,2,0,},{7,4,3,0,1,2,5,6,},{7,4,3,0,1,6,2,5,},{7,4,3,0,1,6,5,2,},{7,4,3,0,2,1,5,6,},{7,4,3,0,2,6,1,5,},
		{7,4,3,0,2,6,5,1,},{7,4,3,0,5,1,2,6,},{7,4,3,0,5,2,1,6,},{7,4,3,0,5,6,1,2,},{7,4,3,0,5,6,2,1,},{7,4,3,0,6,1,2,5,},{7,4,3,0,6,1,5,2,},{7,4,3,0,6,2,1,5,},{7,4,3,0,6,2,5,1,},{7,4,3,1,0,2,5,6,},
		{7,4,3,1,0,6,2,5,},{7,4,3,1,0,6,5,2,},{7,4,3,1,2,0,5,6,},{7,4,3,1,2,6,0,5,},{7,4,3,1,2,6,5,0,},{7,4,3,1,5,0,2,6,},{7,4,3,1,5,2,0,6,},{7,4,3,1,5,6,0,2,},{7,4,3,1,5,6,2,0,},{7,4,3,1,6,0,2,5,},
		{7,4,3,1,6,0,5,2,},{7,4,3,1,6,2,0,5,},{7,4,3,1,6,2,5,0,},{7,4,3,2,0,1,5,6,},{7,4,3,2,0,6,1,5,},{7,4,3,2,0,6,5,1,},{7,4,3,2,1,0,5,6,},{7,4,3,2,1,6,0,5,},{7,4,3,2,1,6,5,0,},{7,4,3,2,5,0,1,6,},
		{7,4,3,2,5,1,0,6,},{7,4,3,2,5,6,0,1,},{7,4,3,2,5,6,1,0,},{7,4,3,2,6,0,1,5,},{7,4,3,2,6,0,5,1,},{7,4,3,2,6,1,0,5,},{7,4,3,2,6,1,5,0,},{7,4,3,5,0,1,2,6,},{7,4,3,5,0,2,1,6,},{7,4,3,5,0,6,1,2,},
		{7,4,3,5,0,6,2,1,},{7,4,3,5,1,0,2,6,},{7,4,3,5,1,2,0,6,},{7,4,3,5,1,6,0,2,},{7,4,3,5,1,6,2,0,},{7,4,3,5,2,0,1,6,},{7,4,3,5,2,1,0,6,},{7,4,3,5,2,6,0,1,},{7,4,3,5,2,6,1,0,},{7,4,3,5,6,0,1,2,},
		{7,4,3,5,6,0,2,1,},{7,4,3,5,6,1,0,2,},{7,4,3,5,6,1,2,0,},{7,4,3,5,6,2,0,1,},{7,4,3,5,6,2,1,0,},{7,4,3,6,0,1,2,5,},{7,4,3,6,0,1,5,2,},{7,4,3,6,0,2,1,5,},{7,4,3,6,0,2,5,1,},{7,4,3,6,1,0,2,5,},
		{7,4,3,6,1,0,5,2,},{7,4,3,6,1,2,0,5,},{7,4,3,6,1,2,5,0,},{7,4,3,6,2,0,1,5,},{7,4,3,6,2,0,5,1,},{7,4,3,6,2,1,0,5,},{7,4,3,6,2,1,5,0,},{7,4,3,6,5,0,1,2,},{7,4,3,6,5,0,2,1,},{7,4,3,6,5,1,0,2,},
		{7,4,3,6,5,1,2,0,},{7,4,3,6,5,2,0,1,},{7,4,3,6,5,2,1,0,},{7,4,5,0,1,2,3,6,},{7,4,5,0,1,3,2,6,},{7,4,5,0,1,6,2,3,},{7,4,5,0,1,6,3,2,},{7,4,5,0,2,1,3,6,},{7,4,5,0,2,3,1,6,},{7,4,5,0,2,6,1,3,},
		{7,4,5,0,2,6,3,1,},{7,4,5,0,3,1,2,6,},{7,4,5,0,3,2,1,6,},{7,4,5,0,3,6,1,2,},{7,4,5,0,3,6,2,1,},{7,4,5,0,6,1,2,3,},{7,4,5,0,6,1,3,2,},{7,4,5,0,6,2,1,3,},{7,4,5,0,6,2,3,1,},{7,4,5,0,6,3,1,2,},
		{7,4,5,0,6,3,2,1,},{7,4,5,1,0,2,3,6,},{7,4,5,1,0,3,2,6,},{7,4,5,1,0,6,2,3,},{7,4,5,1,0,6,3,2,},{7,4,5,1,2,0,3,6,},{7,4,5,1,2,3,0,6,},{7,4,5,1,2,6,0,3,},{7,4,5,1,2,6,3,0,},{7,4,5,1,3,0,2,6,},
		{7,4,5,1,3,2,0,6,},{7,4,5,1,3,6,0,2,},{7,4,5,1,3,6,2,0,},{7,4,5,1,6,0,2,3,},{7,4,5,1,6,0,3,2,},{7,4,5,1,6,2,0,3,},{7,4,5,1,6,2,3,0,},{7,4,5,1,6,3,0,2,},{7,4,5,1,6,3,2,0,},{7,4,5,2,0,1,3,6,},
		{7,4,5,2,0,3,1,6,},{7,4,5,2,0,6,1,3,},{7,4,5,2,0,6,3,1,},{7,4,5,2,1,0,3,6,},{7,4,5,2,1,3,0,6,},{7,4,5,2,1,6,0,3,},{7,4,5,2,1,6,3,0,},{7,4,5,2,3,0,1,6,},{7,4,5,2,3,1,0,6,},{7,4,5,2,3,6,0,1,},
		{7,4,5,2,3,6,1,0,},{7,4,5,2,6,0,1,3,},{7,4,5,2,6,0,3,1,},{7,4,5,2,6,1,0,3,},{7,4,5,2,6,1,3,0,},{7,4,5,2,6,3,0,1,},{7,4,5,2,6,3,1,0,},{7,4,5,6,0,1,2,3,},{7,4,5,6,0,1,3,2,},{7,4,5,6,0,2,1,3,},
		{7,4,5,6,0,2,3,1,},{7,4,5,6,0,3,1,2,},{7,4,5,6,0,3,2,1,},{7,4,5,6,1,0,2,3,},{7,4,5,6,1,0,3,2,},{7,4,5,6,1,2,0,3,},{7,4,5,6,1,2,3,0,},{7,4,5,6,1,3,0,2,},{7,4,5,6,1,3,2,0,},{7,4,5,6,2,0,1,3,},
		{7,4,5,6,2,0,3,1,},{7,4,5,6,2,1,0,3,},{7,4,5,6,2,1,3,0,},{7,4,5,6,2,3,0,1,},{7,4,5,6,2,3,1,0,},{7,4,5,6,3,0,1,2,},{7,4,5,6,3,0,2,1,},{7,4,5,6,3,1,0,2,},{7,4,5,6,3,1,2,0,},{7,4,5,6,3,2,0,1,},
		{7,4,5,6,3,2,1,0,},{7,4,6,0,1,2,3,5,},{7,4,6,0,1,2,5,3,},{7,4,6,0,1,3,2,5,},{7,4,6,0,1,3,5,2,},{7,4,6,0,2,1,3,5,},{7,4,6,0,2,1,5,3,},{7,4,6,0,2,3,1,5,},{7,4,6,0,2,3,5,1,},{7,4,6,0,3,1,2,5,},
		{7,4,6,0,3,1,5,2,},{7,4,6,0,3,2,1,5,},{7,4,6,0,3,2,5,1,},{7,4,6,0,5,1,2,3,},{7,4,6,0,5,1,3,2,},{7,4,6,0,5,2,1,3,},{7,4,6,0,5,2,3,1,},{7,4,6,0,5,3,1,2,},{7,4,6,0,5,3,2,1,},{7,4,6,1,0,2,3,5,},
		{7,4,6,1,0,2,5,3,},{7,4,6,1,0,3,2,5,},{7,4,6,1,0,3,5,2,},{7,4,6,1,2,0,3,5,},{7,4,6,1,2,0,5,3,},{7,4,6,1,2,3,0,5,},{7,4,6,1,2,3,5,0,},{7,4,6,1,3,0,2,5,},{7,4,6,1,3,0,5,2,},{7,4,6,1,3,2,0,5,},
		{7,4,6,1,3,2,5,0,},{7,4,6,1,5,0,2,3,},{7,4,6,1,5,0,3,2,},{7,4,6,1,5,2,0,3,},{7,4,6,1,5,2,3,0,},{7,4,6,1,5,3,0,2,},{7,4,6,1,5,3,2,0,},{7,4,6,2,0,1,3,5,},{7,4,6,2,0,1,5,3,},{7,4,6,2,0,3,1,5,},
		{7,4,6,2,0,3,5,1,},{7,4,6,2,1,0,3,5,},{7,4,6,2,1,0,5,3,},{7,4,6,2,1,3,0,5,},{7,4,6,2,1,3,5,0,},{7,4,6,2,3,0,1,5,},{7,4,6,2,3,0,5,1,},{7,4,6,2,3,1,0,5,},{7,4,6,2,3,1,5,0,},{7,4,6,2,5,0,1,3,},
		{7,4,6,2,5,0,3,1,},{7,4,6,2,5,1,0,3,},{7,4,6,2,5,1,3,0,},{7,4,6,2,5,3,0,1,},{7,4,6,2,5,3,1,0,},{7,4,6,5,0,1,2,3,},{7,4,6,5,0,1,3,2,},{7,4,6,5,0,2,1,3,},{7,4,6,5,0,2,3,1,},{7,4,6,5,0,3,1,2,},
		{7,4,6,5,0,3,2,1,},{7,4,6,5,1,0,2,3,},{7,4,6,5,1,0,3,2,},{7,4,6,5,1,2,0,3,},{7,4,6,5,1,2,3,0,},{7,4,6,5,1,3,0,2,},{7,4,6,5,1,3,2,0,},{7,4,6,5,2,0,1,3,},{7,4,6,5,2,0,3,1,},{7,4,6,5,2,1,0,3,},
		{7,4,6,5,2,1,3,0,},{7,4,6,5,2,3,0,1,},{7,4,6,5,2,3,1,0,},{7,4,6,5,3,0,1,2,},{7,4,6,5,3,0,2,1,},{7,4,6,5,3,1,0,2,},{7,4,6,5,3,1,2,0,},{7,4,6,5,3,2,0,1,},{7,4,6,5,3,2,1,0,},{7,5,0,1,2,3,4,6,},
		{7,5,0,1,2,4,3,6,},{7,5,0,1,2,6,3,4,},{7,5,0,1,2,6,4,3,},{7,5,0,1,3,2,4,6,},{7,5,0,1,3,4,2,6,},{7,5,0,1,3,6,2,4,},{7,5,0,1,3,6,4,2,},{7,5,0,1,6,2,3,4,},{7,5,0,1,6,2,4,3,},{7,5,0,1,6,3,2,4,},
		{7,5,0,1,6,3,4,2,},{7,5,0,1,6,4,2,3,},{7,5,0,1,6,4,3,2,},{7,5,0,2,1,3,4,6,},{7,5,0,2,1,4,3,6,},{7,5,0,2,1,6,3,4,},{7,5,0,2,1,6,4,3,},{7,5,0,2,3,1,4,6,},{7,5,0,2,3,4,1,6,},{7,5,0,2,3,6,1,4,},
		{7,5,0,2,3,6,4,1,},{7,5,0,2,6,1,3,4,},{7,5,0,2,6,1,4,3,},{7,5,0,2,6,3,1,4,},{7,5,0,2,6,3,4,1,},{7,5,0,2,6,4,1,3,},{7,5,0,2,6,4,3,1,},{7,5,0,4,1,2,3,6,},{7,5,0,4,1,3,2,6,},{7,5,0,4,1,6,2,3,},
		{7,5,0,4,1,6,3,2,},{7,5,0,4,2,1,3,6,},{7,5,0,4,2,3,1,6,},{7,5,0,4,2,6,1,3,},{7,5,0,4,2,6,3,1,},{7,5,0,4,3,1,2,6,},{7,5,0,4,3,2,1,6,},{7,5,0,4,3,6,1,2,},{7,5,0,4,3,6,2,1,},{7,5,0,4,6,1,2,3,},
		{7,5,0,4,6,1,3,2,},{7,5,0,4,6,2,1,3,},{7,5,0,4,6,2,3,1,},{7,5,0,4,6,3,1,2,},{7,5,0,4,6,3,2,1,},{7,5,0,6,1,2,3,4,},{7,5,0,6,1,2,4,3,},{7,5,0,6,1,3,2,4,},{7,5,0,6,1,3,4,2,},{7,5,0,6,1,4,2,3,},
		{7,5,0,6,1,4,3,2,},{7,5,0,6,2,1,3,4,},{7,5,0,6,2,1,4,3,},{7,5,0,6,2,3,1,4,},{7,5,0,6,2,3,4,1,},{7,5,0,6,2,4,1,3,},{7,5,0,6,2,4,3,1,},{7,5,0,6,3,1,2,4,},{7,5,0,6,3,1,4,2,},{7,5,0,6,3,2,1,4,},
		{7,5,0,6,3,2,4,1,},{7,5,0,6,3,4,1,2,},{7,5,0,6,3,4,2,1,},{7,5,1,0,2,3,4,6,},{7,5,1,0,2,4,3,6,},{7,5,1,0,2,6,3,4,},{7,5,1,0,2,6,4,3,},{7,5,1,0,3,2,4,6,},{7,5,1,0,3,4,2,6,},{7,5,1,0,3,6,2,4,},
		{7,5,1,0,3,6,4,2,},{7,5,1,0,6,2,3,4,},{7,5,1,0,6,2,4,3,},{7,5,1,0,6,3,2,4,},{7,5,1,0,6,3,4,2,},{7,5,1,0,6,4,2,3,},{7,5,1,0,6,4,3,2,},{7,5,1,2,0,3,4,6,},{7,5,1,2,0,4,3,6,},{7,5,1,2,0,6,3,4,},
		{7,5,1,2,0,6,4,3,},{7,5,1,2,3,0,4,6,},{7,5,1,2,3,4,0,6,},{7,5,1,2,3,6,0,4,},{7,5,1,2,3,6,4,0,},{7,5,1,2,6,0,3,4,},{7,5,1,2,6,0,4,3,},{7,5,1,2,6,3,0,4,},{7,5,1,2,6,3,4,0,},{7,5,1,2,6,4,0,3,},
		{7,5,1,2,6,4,3,0,},{7,5,1,4,0,2,3,6,},{7,5,1,4,0,3,2,6,},{7,5,1,4,0,6,2,3,},{7,5,1,4,0,6,3,2,},{7,5,1,4,2,0,3,6,},{7,5,1,4,2,3,0,6,},{7,5,1,4,2,6,0,3,},{7,5,1,4,2,6,3,0,},{7,5,1,4,3,0,2,6,},
		{7,5,1,4,3,2,0,6,},{7,5,1,4,3,6,0,2,},{7,5,1,4,3,6,2,0,},{7,5,1,4,6,0,2,3,},{7,5,1,4,6,0,3,2,},{7,5,1,4,6,2,0,3,},{7,5,1,4,6,2,3,0,},{7,5,1,4,6,3,0,2,},{7,5,1,4,6,3,2,0,},{7,5,1,6,0,2,3,4,},
		{7,5,1,6,0,2,4,3,},{7,5,1,6,0,3,2,4,},{7,5,1,6,0,3,4,2,},{7,5,1,6,0,4,2,3,},{7,5,1,6,0,4,3,2,},{7,5,1,6,2,0,3,4,},{7,5,1,6,2,0,4,3,},{7,5,1,6,2,3,0,4,},{7,5,1,6,2,3,4,0,},{7,5,1,6,2,4,0,3,},
		{7,5,1,6,2,4,3,0,},{7,5,1,6,3,0,2,4,},{7,5,1,6,3,0,4,2,},{7,5,1,6,3,2,0,4,},{7,5,1,6,3,2,4,0,},{7,5,1,6,3,4,0,2,},{7,5,1,6,3,4,2,0,},{7,5,3,0,1,2,4,6,},{7,5,3,0,1,4,2,6,},{7,5,3,0,1,6,2,4,},
		{7,5,3,0,1,6,4,2,},{7,5,3,0,2,1,4,6,},{7,5,3,0,2,4,1,6,},{7,5,3,0,2,6,1,4,},{7,5,3,0,2,6,4,1,},{7,5,3,0,6,1,2,4,},{7,5,3,0,6,1,4,2,},{7,5,3,0,6,2,1,4,},{7,5,3,0,6,2,4,1,},{7,5,3,0,6,4,1,2,},
		{7,5,3,0,6,4,2,1,},{7,5,3,1,0,2,4,6,},{7,5,3,1,0,4,2,6,},{7,5,3,1,0,6,2,4,},{7,5,3,1,0,6,4,2,},{7,5,3,1,2,0,4,6,},{7,5,3,1,2,4,0,6,},{7,5,3,1,2,6,0,4,},{7,5,3,1,2,6,4,0,},{7,5,3,1,6,0,2,4,},
		{7,5,3,1,6,0,4,2,},{7,5,3,1,6,2,0,4,},{7,5,3,1,6,2,4,0,},{7,5,3,1,6,4,0,2,},{7,5,3,1,6,4,2,0,},{7,5,3,2,0,1,4,6,},{7,5,3,2,0,4,1,6,},{7,5,3,2,0,6,1,4,},{7,5,3,2,0,6,4,1,},{7,5,3,2,1,0,4,6,},
		{7,5,3,2,1,4,0,6,},{7,5,3,2,1,6,0,4,},{7,5,3,2,1,6,4,0,},{7,5,3,2,6,0,1,4,},{7,5,3,2,6,0,4,1,},{7,5,3,2,6,1,0,4,},{7,5,3,2,6,1,4,0,},{7,5,3,2,6,4,0,1,},{7,5,3,2,6,4,1,0,},{7,5,3,4,0,1,2,6,},
		{7,5,3,4,0,2,1,6,},{7,5,3,4,0,6,1,2,},{7,5,3,4,0,6,2,1,},{7,5,3,4,1,0,2,6,},{7,5,3,4,1,2,0,6,},{7,5,3,4,1,6,0,2,},{7,5,3,4,1,6,2,0,},{7,5,3,4,2,0,1,6,},{7,5,3,4,2,1,0,6,},{7,5,3,4,2,6,0,1,},
		{7,5,3,4,2,6,1,0,},{7,5,3,4,6,0,1,2,},{7,5,3,4,6,0,2,1,},{7,5,3,4,6,1,0,2,},{7,5,3,4,6,1,2,0,},{7,5,3,4,6,2,0,1,},{7,5,3,4,6,2,1,0,},{7,5,3,6,0,1,2,4,},{7,5,3,6,0,1,4,2,},{7,5,3,6,0,2,1,4,},
		{7,5,3,6,0,2,4,1,},{7,5,3,6,0,4,1,2,},{7,5,3,6,0,4,2,1,},{7,5,3,6,1,0,2,4,},{7,5,3,6,1,0,4,2,},{7,5,3,6,1,2,0,4,},{7,5,3,6,1,2,4,0,},{7,5,3,6,1,4,0,2,},{7,5,3,6,1,4,2,0,},{7,5,3,6,2,0,1,4,},
		{7,5,3,6,2,0,4,1,},{7,5,3,6,2,1,0,4,},{7,5,3,6,2,1,4,0,},{7,5,3,6,2,4,0,1,},{7,5,3,6,2,4,1,0,},{7,5,4,0,1,2,3,6,},{7,5,4,0,1,3,2,6,},{7,5,4,0,1,6,2,3,},{7,5,4,0,1,6,3,2,},{7,5,4,0,2,1,3,6,},
		{7,5,4,0,2,3,1,6,},{7,5,4,0,2,6,1,3,},{7,5,4,0,2,6,3,1,},{7,5,4,0,3,1,2,6,},{7,5,4,0,3,2,1,6,},{7,5,4,0,3,6,1,2,},{7,5,4,0,3,6,2,1,},{7,5,4,0,6,1,2,3,},{7,5,4,0,6,1,3,2,},{7,5,4,0,6,2,1,3,},
		{7,5,4,0,6,2,3,1,},{7,5,4,0,6,3,1,2,},{7,5,4,0,6,3,2,1,},{7,5,4,1,0,2,3,6,},{7,5,4,1,0,3,2,6,},{7,5,4,1,0,6,2,3,},{7,5,4,1,0,6,3,2,},{7,5,4,1,2,0,3,6,},{7,5,4,1,2,3,0,6,},{7,5,4,1,2,6,0,3,},
		{7,5,4,1,2,6,3,0,},{7,5,4,1,3,0,2,6,},{7,5,4,1,3,2,0,6,},{7,5,4,1,3,6,0,2,},{7,5,4,1,3,6,2,0,},{7,5,4,1,6,0,2,3,},{7,5,4,1,6,0,3,2,},{7,5,4,1,6,2,0,3,},{7,5,4,1,6,2,3,0,},{7,5,4,1,6,3,0,2,},
		{7,5,4,1,6,3,2,0,},{7,5,4,2,0,1,3,6,},{7,5,4,2,0,3,1,6,},{7,5,4,2,0,6,1,3,},{7,5,4,2,0,6,3,1,},{7,5,4,2,1,0,3,6,},{7,5,4,2,1,3,0,6,},{7,5,4,2,1,6,0,3,},{7,5,4,2,1,6,3,0,},{7,5,4,2,3,0,1,6,},
		{7,5,4,2,3,1,0,6,},{7,5,4,2,3,6,0,1,},{7,5,4,2,3,6,1,0,},{7,5,4,2,6,0,1,3,},{7,5,4,2,6,0,3,1,},{7,5,4,2,6,1,0,3,},{7,5,4,2,6,1,3,0,},{7,5,4,2,6,3,0,1,},{7,5,4,2,6,3,1,0,},{7,5,4,6,0,1,2,3,},
		{7,5,4,6,0,1,3,2,},{7,5,4,6,0,2,1,3,},{7,5,4,6,0,2,3,1,},{7,5,4,6,0,3,1,2,},{7,5,4,6,0,3,2,1,},{7,5,4,6,1,0,2,3,},{7,5,4,6,1,0,3,2,},{7,5,4,6,1,2,0,3,},{7,5,4,6,1,2,3,0,},{7,5,4,6,1,3,0,2,},
		{7,5,4,6,1,3,2,0,},{7,5,4,6,2,0,1,3,},{7,5,4,6,2,0,3,1,},{7,5,4,6,2,1,0,3,},{7,5,4,6,2,1,3,0,},{7,5,4,6,2,3,0,1,},{7,5,4,6,2,3,1,0,},{7,5,4,6,3,0,1,2,},{7,5,4,6,3,0,2,1,},{7,5,4,6,3,1,0,2,},
		{7,5,4,6,3,1,2,0,},{7,5,4,6,3,2,0,1,},{7,5,4,6,3,2,1,0,},{7,5,6,0,1,2,3,4,},{7,5,6,0,1,2,4,3,},{7,5,6,0,1,3,2,4,},{7,5,6,0,1,3,4,2,},{7,5,6,0,1,4,2,3,},{7,5,6,0,1,4,3,2,},{7,5,6,0,2,1,3,4,},
		{7,5,6,0,2,1,4,3,},{7,5,6,0,2,3,1,4,},{7,5,6,0,2,3,4,1,},{7,5,6,0,2,4,1,3,},{7,5,6,0,2,4,3,1,},{7,5,6,0,3,1,2,4,},{7,5,6,0,3,1,4,2,},{7,5,6,0,3,2,1,4,},{7,5,6,0,3,2,4,1,},{7,5,6,0,3,4,1,2,},
		{7,5,6,0,3,4,2,1,},{7,5,6,1,0,2,3,4,},{7,5,6,1,0,2,4,3,},{7,5,6,1,0,3,2,4,},{7,5,6,1,0,3,4,2,},{7,5,6,1,0,4,2,3,},{7,5,6,1,0,4,3,2,},{7,5,6,1,2,0,3,4,},{7,5,6,1,2,0,4,3,},{7,5,6,1,2,3,0,4,},
		{7,5,6,1,2,3,4,0,},{7,5,6,1,2,4,0,3,},{7,5,6,1,2,4,3,0,},{7,5,6,1,3,0,2,4,},{7,5,6,1,3,0,4,2,},{7,5,6,1,3,2,0,4,},{7,5,6,1,3,2,4,0,},{7,5,6,1,3,4,0,2,},{7,5,6,1,3,4,2,0,},{7,5,6,2,0,1,3,4,},
		{7,5,6,2,0,1,4,3,},{7,5,6,2,0,3,1,4,},{7,5,6,2,0,3,4,1,},{7,5,6,2,0,4,1,3,},{7,5,6,2,0,4,3,1,},{7,5,6,2,1,0,3,4,},{7,5,6,2,1,0,4,3,},{7,5,6,2,1,3,0,4,},{7,5,6,2,1,3,4,0,},{7,5,6,2,1,4,0,3,},
		{7,5,6,2,1,4,3,0,},{7,5,6,2,3,0,1,4,},{7,5,6,2,3,0,4,1,},{7,5,6,2,3,1,0,4,},{7,5,6,2,3,1,4,0,},{7,5,6,2,3,4,0,1,},{7,5,6,2,3,4,1,0,},{7,5,6,4,0,1,2,3,},{7,5,6,4,0,1,3,2,},{7,5,6,4,0,2,1,3,},
		{7,5,6,4,0,2,3,1,},{7,5,6,4,0,3,1,2,},{7,5,6,4,0,3,2,1,},{7,5,6,4,1,0,2,3,},{7,5,6,4,1,0,3,2,},{7,5,6,4,1,2,0,3,},{7,5,6,4,1,2,3,0,},{7,5,6,4,1,3,0,2,},{7,5,6,4,1,3,2,0,},{7,5,6,4,2,0,1,3,},
		{7,5,6,4,2,0,3,1,},{7,5,6,4,2,1,0,3,},{7,5,6,4,2,1,3,0,},{7,5,6,4,2,3,0,1,},{7,5,6,4,2,3,1,0,},{7,5,6,4,3,0,1,2,},{7,5,6,4,3,0,2,1,},{7,5,6,4,3,1,0,2,},{7,5,6,4,3,1,2,0,},{7,5,6,4,3,2,0,1,},
		{7,5,6,4,3,2,1,0,},{7,6,0,1,2,3,4,5,},{7,6,0,1,2,3,5,4,},{7,6,0,1,2,4,3,5,},{7,6,0,1,2,4,5,3,},{7,6,0,1,3,2,4,5,},{7,6,0,1,3,2,5,4,},{7,6,0,1,3,4,2,5,},{7,6,0,1,3,4,5,2,},{7,6,0,1,5,2,3,4,},
		{7,6,0,1,5,2,4,3,},{7,6,0,1,5,3,2,4,},{7,6,0,1,5,3,4,2,},{7,6,0,1,5,4,2,3,},{7,6,0,1,5,4,3,2,},{7,6,0,2,1,3,4,5,},{7,6,0,2,1,3,5,4,},{7,6,0,2,1,4,3,5,},{7,6,0,2,1,4,5,3,},{7,6,0,2,3,1,4,5,},
		{7,6,0,2,3,1,5,4,},{7,6,0,2,3,4,1,5,},{7,6,0,2,3,4,5,1,},{7,6,0,2,5,1,3,4,},{7,6,0,2,5,1,4,3,},{7,6,0,2,5,3,1,4,},{7,6,0,2,5,3,4,1,},{7,6,0,2,5,4,1,3,},{7,6,0,2,5,4,3,1,},{7,6,0,4,1,2,3,5,},
		{7,6,0,4,1,2,5,3,},{7,6,0,4,1,3,2,5,},{7,6,0,4,1,3,5,2,},{7,6,0,4,2,1,3,5,},{7,6,0,4,2,1,5,3,},{7,6,0,4,2,3,1,5,},{7,6,0,4,2,3,5,1,},{7,6,0,4,3,1,2,5,},{7,6,0,4,3,1,5,2,},{7,6,0,4,3,2,1,5,},
		{7,6,0,4,3,2,5,1,},{7,6,0,4,5,1,2,3,},{7,6,0,4,5,1,3,2,},{7,6,0,4,5,2,1,3,},{7,6,0,4,5,2,3,1,},{7,6,0,4,5,3,1,2,},{7,6,0,4,5,3,2,1,},{7,6,0,5,1,2,3,4,},{7,6,0,5,1,2,4,3,},{7,6,0,5,1,3,2,4,},
		{7,6,0,5,1,3,4,2,},{7,6,0,5,1,4,2,3,},{7,6,0,5,1,4,3,2,},{7,6,0,5,2,1,3,4,},{7,6,0,5,2,1,4,3,},{7,6,0,5,2,3,1,4,},{7,6,0,5,2,3,4,1,},{7,6,0,5,2,4,1,3,},{7,6,0,5,2,4,3,1,},{7,6,0,5,3,1,2,4,},
		{7,6,0,5,3,1,4,2,},{7,6,0,5,3,2,1,4,},{7,6,0,5,3,2,4,1,},{7,6,0,5,3,4,1,2,},{7,6,0,5,3,4,2,1,},{7,6,1,0,2,3,4,5,},{7,6,1,0,2,3,5,4,},{7,6,1,0,2,4,3,5,},{7,6,1,0,2,4,5,3,},{7,6,1,0,3,2,4,5,},
		{7,6,1,0,3,2,5,4,},{7,6,1,0,3,4,2,5,},{7,6,1,0,3,4,5,2,},{7,6,1,0,5,2,3,4,},{7,6,1,0,5,2,4,3,},{7,6,1,0,5,3,2,4,},{7,6,1,0,5,3,4,2,},{7,6,1,0,5,4,2,3,},{7,6,1,0,5,4,3,2,},{7,6,1,2,0,3,4,5,},
		{7,6,1,2,0,3,5,4,},{7,6,1,2,0,4,3,5,},{7,6,1,2,0,4,5,3,},{7,6,1,2,3,0,4,5,},{7,6,1,2,3,0,5,4,},{7,6,1,2,3,4,0,5,},{7,6,1,2,3,4,5,0,},{7,6,1,2,5,0,3,4,},{7,6,1,2,5,0,4,3,},{7,6,1,2,5,3,0,4,},
		{7,6,1,2,5,3,4,0,},{7,6,1,2,5,4,0,3,},{7,6,1,2,5,4,3,0,},{7,6,1,4,0,2,3,5,},{7,6,1,4,0,2,5,3,},{7,6,1,4,0,3,2,5,},{7,6,1,4,0,3,5,2,},{7,6,1,4,2,0,3,5,},{7,6,1,4,2,0,5,3,},{7,6,1,4,2,3,0,5,},
		{7,6,1,4,2,3,5,0,},{7,6,1,4,3,0,2,5,},{7,6,1,4,3,0,5,2,},{7,6,1,4,3,2,0,5,},{7,6,1,4,3,2,5,0,},{7,6,1,4,5,0,2,3,},{7,6,1,4,5,0,3,2,},{7,6,1,4,5,2,0,3,},{7,6,1,4,5,2,3,0,},{7,6,1,4,5,3,0,2,},
		{7,6,1,4,5,3,2,0,},{7,6,1,5,0,2,3,4,},{7,6,1,5,0,2,4,3,},{7,6,1,5,0,3,2,4,},{7,6,1,5,0,3,4,2,},{7,6,1,5,0,4,2,3,},{7,6,1,5,0,4,3,2,},{7,6,1,5,2,0,3,4,},{7,6,1,5,2,0,4,3,},{7,6,1,5,2,3,0,4,},
		{7,6,1,5,2,3,4,0,},{7,6,1,5,2,4,0,3,},{7,6,1,5,2,4,3,0,},{7,6,1,5,3,0,2,4,},{7,6,1,5,3,0,4,2,},{7,6,1,5,3,2,0,4,},{7,6,1,5,3,2,4,0,},{7,6,1,5,3,4,0,2,},{7,6,1,5,3,4,2,0,},{7,6,3,0,1,2,4,5,},
		{7,6,3,0,1,2,5,4,},{7,6,3,0,1,4,2,5,},{7,6,3,0,1,4,5,2,},{7,6,3,0,2,1,4,5,},{7,6,3,0,2,1,5,4,},{7,6,3,0,2,4,1,5,},{7,6,3,0,2,4,5,1,},{7,6,3,0,5,1,2,4,},{7,6,3,0,5,1,4,2,},{7,6,3,0,5,2,1,4,},
		{7,6,3,0,5,2,4,1,},{7,6,3,0,5,4,1,2,},{7,6,3,0,5,4,2,1,},{7,6,3,1,0,2,4,5,},{7,6,3,1,0,2,5,4,},{7,6,3,1,0,4,2,5,},{7,6,3,1,0,4,5,2,},{7,6,3,1,2,0,4,5,},{7,6,3,1,2,0,5,4,},{7,6,3,1,2,4,0,5,},
		{7,6,3,1,2,4,5,0,},{7,6,3,1,5,0,2,4,},{7,6,3,1,5,0,4,2,},{7,6,3,1,5,2,0,4,},{7,6,3,1,5,2,4,0,},{7,6,3,1,5,4,0,2,},{7,6,3,1,5,4,2,0,},{7,6,3,2,0,1,4,5,},{7,6,3,2,0,1,5,4,},{7,6,3,2,0,4,1,5,},
		{7,6,3,2,0,4,5,1,},{7,6,3,2,1,0,4,5,},{7,6,3,2,1,0,5,4,},{7,6,3,2,1,4,0,5,},{7,6,3,2,1,4,5,0,},{7,6,3,2,5,0,1,4,},{7,6,3,2,5,0,4,1,},{7,6,3,2,5,1,0,4,},{7,6,3,2,5,1,4,0,},{7,6,3,2,5,4,0,1,},
		{7,6,3,2,5,4,1,0,},{7,6,3,4,0,1,2,5,},{7,6,3,4,0,1,5,2,},{7,6,3,4,0,2,1,5,},{7,6,3,4,0,2,5,1,},{7,6,3,4,1,0,2,5,},{7,6,3,4,1,0,5,2,},{7,6,3,4,1,2,0,5,},{7,6,3,4,1,2,5,0,},{7,6,3,4,2,0,1,5,},
		{7,6,3,4,2,0,5,1,},{7,6,3,4,2,1,0,5,},{7,6,3,4,2,1,5,0,},{7,6,3,4,5,0,1,2,},{7,6,3,4,5,0,2,1,},{7,6,3,4,5,1,0,2,},{7,6,3,4,5,1,2,0,},{7,6,3,4,5,2,0,1,},{7,6,3,4,5,2,1,0,},{7,6,3,5,0,1,2,4,},
		{7,6,3,5,0,1,4,2,},{7,6,3,5,0,2,1,4,},{7,6,3,5,0,2,4,1,},{7,6,3,5,0,4,1,2,},{7,6,3,5,0,4,2,1,},{7,6,3,5,1,0,2,4,},{7,6,3,5,1,0,4,2,},{7,6,3,5,1,2,0,4,},{7,6,3,5,1,2,4,0,},{7,6,3,5,1,4,0,2,},
		{7,6,3,5,1,4,2,0,},{7,6,3,5,2,0,1,4,},{7,6,3,5,2,0,4,1,},{7,6,3,5,2,1,0,4,},{7,6,3,5,2,1,4,0,},{7,6,3,5,2,4,0,1,},{7,6,3,5,2,4,1,0,},{7,6,4,0,1,2,3,5,},{7,6,4,0,1,2,5,3,},{7,6,4,0,1,3,2,5,},
		{7,6,4,0,1,3,5,2,},{7,6,4,0,2,1,3,5,},{7,6,4,0,2,1,5,3,},{7,6,4,0,2,3,1,5,},{7,6,4,0,2,3,5,1,},{7,6,4,0,3,1,2,5,},{7,6,4,0,3,1,5,2,},{7,6,4,0,3,2,1,5,},{7,6,4,0,3,2,5,1,},{7,6,4,0,5,1,2,3,},
		{7,6,4,0,5,1,3,2,},{7,6,4,0,5,2,1,3,},{7,6,4,0,5,2,3,1,},{7,6,4,0,5,3,1,2,},{7,6,4,0,5,3,2,1,},{7,6,4,1,0,2,3,5,},{7,6,4,1,0,2,5,3,},{7,6,4,1,0,3,2,5,},{7,6,4,1,0,3,5,2,},{7,6,4,1,2,0,3,5,},
		{7,6,4,1,2,0,5,3,},{7,6,4,1,2,3,0,5,},{7,6,4,1,2,3,5,0,},{7,6,4,1,3,0,2,5,},{7,6,4,1,3,0,5,2,},{7,6,4,1,3,2,0,5,},{7,6,4,1,3,2,5,0,},{7,6,4,1,5,0,2,3,},{7,6,4,1,5,0,3,2,},{7,6,4,1,5,2,0,3,},
		{7,6,4,1,5,2,3,0,},{7,6,4,1,5,3,0,2,},{7,6,4,1,5,3,2,0,},{7,6,4,2,0,1,3,5,},{7,6,4,2,0,1,5,3,},{7,6,4,2,0,3,1,5,},{7,6,4,2,0,3,5,1,},{7,6,4,2,1,0,3,5,},{7,6,4,2,1,0,5,3,},{7,6,4,2,1,3,0,5,},
		{7,6,4,2,1,3,5,0,},{7,6,4,2,3,0,1,5,},{7,6,4,2,3,0,5,1,},{7,6,4,2,3,1,0,5,},{7,6,4,2,3,1,5,0,},{7,6,4,2,5,0,1,3,},{7,6,4,2,5,0,3,1,},{7,6,4,2,5,1,0,3,},{7,6,4,2,5,1,3,0,},{7,6,4,2,5,3,0,1,},
		{7,6,4,2,5,3,1,0,},{7,6,4,5,0,1,2,3,},{7,6,4,5,0,1,3,2,},{7,6,4,5,0,2,1,3,},{7,6,4,5,0,2,3,1,},{7,6,4,5,0,3,1,2,},{7,6,4,5,0,3,2,1,},{7,6,4,5,1,0,2,3,},{7,6,4,5,1,0,3,2,},{7,6,4,5,1,2,0,3,},
		{7,6,4,5,1,2,3,0,},{7,6,4,5,1,3,0,2,},{7,6,4,5,1,3,2,0,},{7,6,4,5,2,0,1,3,},{7,6,4,5,2,0,3,1,},{7,6,4,5,2,1,0,3,},{7,6,4,5,2,1,3,0,},{7,6,4,5,2,3,0,1,},{7,6,4,5,2,3,1,0,},{7,6,4,5,3,0,1,2,},
		{7,6,4,5,3,0,2,1,},{7,6,4,5,3,1,0,2,},{7,6,4,5,3,1,2,0,},{7,6,4,5,3,2,0,1,},{7,6,4,5,3,2,1,0,},{7,6,5,0,1,2,3,4,},{7,6,5,0,1,2,4,3,},{7,6,5,0,1,3,2,4,},{7,6,5,0,1,3,4,2,},{7,6,5,0,1,4,2,3,},
		{7,6,5,0,1,4,3,2,},{7,6,5,0,2,1,3,4,},{7,6,5,0,2,1,4,3,},{7,6,5,0,2,3,1,4,},{7,6,5,0,2,3,4,1,},{7,6,5,0,2,4,1,3,},{7,6,5,0,2,4,3,1,},{7,6,5,0,3,1,2,4,},{7,6,5,0,3,1,4,2,},{7,6,5,0,3,2,1,4,},
		{7,6,5,0,3,2,4,1,},{7,6,5,0,3,4,1,2,},{7,6,5,0,3,4,2,1,},{7,6,5,1,0,2,3,4,},{7,6,5,1,0,2,4,3,},{7,6,5,1,0,3,2,4,},{7,6,5,1,0,3,4,2,},{7,6,5,1,0,4,2,3,},{7,6,5,1,0,4,3,2,},{7,6,5,1,2,0,3,4,},
		{7,6,5,1,2,0,4,3,},{7,6,5,1,2,3,0,4,},{7,6,5,1,2,3,4,0,},{7,6,5,1,2,4,0,3,},{7,6,5,1,2,4,3,0,},{7,6,5,1,3,0,2,4,},{7,6,5,1,3,0,4,2,},{7,6,5,1,3,2,0,4,},{7,6,5,1,3,2,4,0,},{7,6,5,1,3,4,0,2,},
		{7,6,5,1,3,4,2,0,},{7,6,5,2,0,1,3,4,},{7,6,5,2,0,1,4,3,},{7,6,5,2,0,3,1,4,},{7,6,5,2,0,3,4,1,},{7,6,5,2,0,4,1,3,},{7,6,5,2,0,4,3,1,},{7,6,5,2,1,0,3,4,},{7,6,5,2,1,0,4,3,},{7,6,5,2,1,3,0,4,},
		{7,6,5,2,1,3,4,0,},{7,6,5,2,1,4,0,3,},{7,6,5,2,1,4,3,0,},{7,6,5,2,3,0,1,4,},{7,6,5,2,3,0,4,1,},{7,6,5,2,3,1,0,4,},{7,6,5,2,3,1,4,0,},{7,6,5,2,3,4,0,1,},{7,6,5,2,3,4,1,0,},{7,6,5,4,0,1,2,3,},
		{7,6,5,4,0,1,3,2,},{7,6,5,4,0,2,1,3,},{7,6,5,4,0,2,3,1,},{7,6,5,4,0,3,1,2,},{7,6,5,4,0,3,2,1,},{7,6,5,4,1,0,2,3,},{7,6,5,4,1,0,3,2,},{7,6,5,4,1,2,0,3,},{7,6,5,4,1,2,3,0,},{7,6,5,4,1,3,0,2,},
		{7,6,5,4,1,3,2,0,},{7,6,5,4,2,0,1,3,},{7,6,5,4,2,0,3,1,},{7,6,5,4,2,1,0,3,},{7,6,5,4,2,1,3,0,},{7,6,5,4,2,3,0,1,},{7,6,5,4,2,3,1,0,},{7,6,5,4,3,0,1,2,},{7,6,5,4,3,0,2,1,},{7,6,5,4,3,1,0,2,},
		{7,6,5,4,3,1,2,0,},{7,6,5,4,3,2,0,1,},{7,6,5,4,3,2,1,0,}
	};
	egraph eg0;
	eg0.fromCompressedEgraph(eg);
	const edgesInEgraphBM& fixedNodes = fixNodes;
	//const edgesInEgraphBM& fixedNodes = depth > 5 ? nodeEdgesBM[eg.edges.size][0] : fixNodes;
	int e[10]; //edges to be permuted
	const int maxEdge = numEdges[eg.edges.size];
	const bool hasFixedNodes = fixedNodes.count() > 0;
	switch (depth) {
		case 2:
			for (int e1 = 0; e1 < maxEdge - 1; e1++) {
				if(hasFixedNodes && fixedNodes[e1]) continue;
				for (int e2 = e1 + 1; e2 < maxEdge; e2++) {
					if(hasFixedNodes && fixedNodes[e2]) continue;
					egraph eg1(eg0);
					std::swap(eg1.ceg.edges.edgeIndexes[e1],
							eg1.ceg.edges.edgeIndexes[e2]);
					eg1.approxNodeEnergies[edgeNodes[eg.edges.size][e1][0]] = 0;
					eg1.approxNodeEnergies[edgeNodes[eg.edges.size][e1][1]] = 0;
					eg1.approxNodeEnergies[edgeNodes[eg.edges.size][e2][0]] = 0;
					eg1.approxNodeEnergies[edgeNodes[eg.edges.size][e2][1]] = 0;
					equeue.add(eg1);
				}
			}
			if(!hasFixedNodes) {
				eg0.ceg.tags |= 2; //tag as processed at mutation depth 2
				db.addEgraph(eg0.ceg);
			}
			break;
		case 3:
			//permute (1,2,3) only to (2,3,1) and (3,1,2) because others are covered by mutate(2)
			for(e[0] = 0; e[0] < maxEdge - 2; e[0]++) {
				if(hasFixedNodes && fixedNodes[e[0]]) continue;
				for(e[1] = e[0] + 1; e[1] < maxEdge - 1; e[1]++) {
					if(hasFixedNodes && fixedNodes[e[1]]) continue;
					for(e[2] = e[1] + 1; e[2] < maxEdge - 0; e[2]++) {
						if(hasFixedNodes && fixedNodes[e[2]]) continue;
						for(int p = 0; p < 2; p++) {
							egraph eg1(eg0);
							for(int ee = 0; ee < 3; ee++) {
								eg1.ceg.edges.edgeIndexes[e[ee]] = eg.edges.edgeIndexes[e[permute3[p][ee]]]; //take the new edge
								eg1.approxNodeEnergies[edgeNodes[eg.edges.size][e[ee]][0]] = 0; //invalidate edge's node 1
								eg1.approxNodeEnergies[edgeNodes[eg.edges.size][e[ee]][1]] = 0; //invalidate edge's node 2
							}
							equeue.add(eg1);
						}
					}
				}
			}
			if(!hasFixedNodes) {
				eg0.ceg.tags |= 4; //tag as processed at mutation depth 3
				db.addEgraph(eg0.ceg);
			}
			break;
		case 4:
			for(e[0] = 0; e[0] < maxEdge - 3; e[0]++) {
				if(hasFixedNodes && fixedNodes[e[0]]) continue;
				for(e[1] = e[0] + 1; e[1] < maxEdge - 2; e[1]++) {
					if(hasFixedNodes && fixedNodes[e[1]]) continue;
					for(e[2] = e[1] + 1; e[2] < maxEdge - 1; e[2]++) {
						if(hasFixedNodes && fixedNodes[e[2]]) continue;
						for(e[3] = e[2] + 1; e[3] < maxEdge - 0; e[3]++) {
							if(hasFixedNodes && fixedNodes[e[3]]) continue;
							for(int p = 0; p < 9; p++) {
								if(gExiting) return;
								egraph eg1(eg0);
								for(int ee = 0; ee < 4; ee++) {
									eg1.ceg.edges.edgeIndexes[e[ee]] = eg.edges.edgeIndexes[e[permute4[p][ee]]]; //take the new edge
									eg1.approxNodeEnergies[edgeNodes[eg.edges.size][e[ee]][0]] = 0; //invalidate edge's node 1
									eg1.approxNodeEnergies[edgeNodes[eg.edges.size][e[ee]][1]] = 0; //invalidate edge's node 2
								}
								equeue.add(eg1);
							}
						}
					}
				}
			}
			if(!hasFixedNodes) {
				eg0.ceg.tags |= 8; //tag as processed at mutation depth 4
				db.addEgraph(eg0.ceg);
			}
			break;
		case 5:
			for(e[0] = 0; e[0] < maxEdge - 4; e[0]++) {
				if(hasFixedNodes && fixedNodes[e[0]]) continue;
				for(e[1] = e[0] + 1; e[1] < maxEdge - 3; e[1]++) {
					if(hasFixedNodes && fixedNodes[e[1]]) continue;
					for(e[2] = e[1] + 1; e[2] < maxEdge - 2; e[2]++) {
						if(hasFixedNodes && fixedNodes[e[2]]) continue;
						for(e[3] = e[2] + 1; e[3] < maxEdge - 1; e[3]++) {
							if(hasFixedNodes && fixedNodes[e[3]]) continue;
							for(e[4] = e[3] + 1; e[4] < maxEdge - 0; e[4]++) {
								if(hasFixedNodes && fixedNodes[e[4]]) continue;
								for(int p = 0; p < 44; p++) {
									if(gExiting) return;
									egraph eg1(eg0);
									for(int ee = 0; ee < 5; ee++) {
										eg1.ceg.edges.edgeIndexes[e[ee]] = eg.edges.edgeIndexes[e[permute5[p][ee]]]; //take the new edge
										eg1.approxNodeEnergies[edgeNodes[eg.edges.size][e[ee]][0]] = 0; //invalidate edge's node 1
										eg1.approxNodeEnergies[edgeNodes[eg.edges.size][e[ee]][1]] = 0; //invalidate edge's node 2
									}
									equeue.add(eg1);
								}
							}
						}
					}
				}
			}
			if(!hasFixedNodes) {
				eg0.ceg.tags |= 16; //tag as processed at mutation depth 5
				db.addEgraph(eg0.ceg);
			}
			break;
		case 6:
			for(e[0] = 0; e[0] < maxEdge - 5; e[0]++) {
				if(hasFixedNodes && fixedNodes[e[0]]) continue;
				for(e[1] = e[0] + 1; e[1] < maxEdge - 4; e[1]++) {
					if(hasFixedNodes && fixedNodes[e[1]]) continue;
					for(e[2] = e[1] + 1; e[2] < maxEdge - 3; e[2]++) {
						if(hasFixedNodes && fixedNodes[e[2]]) continue;
						for(e[3] = e[2] + 1; e[3] < maxEdge - 2; e[3]++) {
							if(hasFixedNodes && fixedNodes[e[3]]) continue;
							for(e[4] = e[3] + 1; e[4] < maxEdge - 1; e[4]++) {
								if(hasFixedNodes && fixedNodes[e[4]]) continue;
								for(e[5] = e[4] + 1; e[5] < maxEdge - 0; e[5]++) {
									if(hasFixedNodes && fixedNodes[e[5]]) continue;
									for(int p = 0; p < 265; p++) {
										if(gExiting) return;
										egraph eg1(eg0);
										for(int ee = 0; ee < 6; ee++) {
											eg1.ceg.edges.edgeIndexes[e[ee]] = eg.edges.edgeIndexes[e[permute6[p][ee]]]; //take the new edge
											eg1.approxNodeEnergies[edgeNodes[eg.edges.size][e[ee]][0]] = 0; //invalidate edge's node 1
											eg1.approxNodeEnergies[edgeNodes[eg.edges.size][e[ee]][1]] = 0; //invalidate edge's node 2
										}
										equeue.add(eg1);
									}
								}
							}
						}
					}
				}
			}
			if(!hasFixedNodes) {
				eg0.ceg.tags |= 32; //tag as processed at mutation depth 6
				db.addEgraph(eg0.ceg);
			}
			break;
		case 7:
			for(e[0] = 0; e[0] < maxEdge - 6; e[0]++) {
				if(hasFixedNodes && fixedNodes[e[0]]) continue;
				for(e[1] = e[0] + 1; e[1] < maxEdge - 5; e[1]++) {
					if(hasFixedNodes && fixedNodes[e[1]]) continue;
					for(e[2] = e[1] + 1; e[2] < maxEdge - 4; e[2]++) {
						if(hasFixedNodes && fixedNodes[e[2]]) continue;
						for(e[3] = e[2] + 1; e[3] < maxEdge - 3; e[3]++) {
							if(hasFixedNodes && fixedNodes[e[3]]) continue;
							for(e[4] = e[3] + 1; e[4] < maxEdge - 2; e[4]++) {
								if(hasFixedNodes && fixedNodes[e[4]]) continue;
								for(e[5] = e[4] + 1; e[5] < maxEdge - 1; e[5]++) {
									if(hasFixedNodes && fixedNodes[e[5]]) continue;
									for(e[6] = e[5] + 1; e[6] < maxEdge - 0; e[6]++) {
										if(hasFixedNodes && fixedNodes[e[6]]) continue;
										for(int p = 0; p < 1854; p++) {
											if(gExiting) return;
											egraph eg1(eg0);
											for(int ee = 0; ee < 7; ee++) {
												eg1.ceg.edges.edgeIndexes[e[ee]] = eg.edges.edgeIndexes[e[permute7[p][ee]]]; //take the new edge
												eg1.approxNodeEnergies[edgeNodes[eg.edges.size][e[ee]][0]] = 0; //invalidate edge's node 1
												eg1.approxNodeEnergies[edgeNodes[eg.edges.size][e[ee]][1]] = 0; //invalidate edge's node 2
											}
											equeue.add(eg1);
										}
									}
								}
							}
						}
					}
				}
			}
			if(!hasFixedNodes) {
				eg0.ceg.tags |= 64; //tag as processed at mutation depth 7
				db.addEgraph(eg0.ceg);
			}
			break;
		case 8:
			for(e[0] = 0; e[0] < maxEdge - 7; e[0]++) {
				if(hasFixedNodes && fixedNodes[e[0]]) continue;
				for(e[1] = e[0] + 1; e[1] < maxEdge - 6; e[1]++) {
					if(hasFixedNodes && fixedNodes[e[1]]) continue;
					for(e[2] = e[1] + 1; e[2] < maxEdge - 5; e[2]++) {
						if(hasFixedNodes && fixedNodes[e[2]]) continue;
						for(e[3] = e[2] + 1; e[3] < maxEdge - 4; e[3]++) {
							if(hasFixedNodes && fixedNodes[e[3]]) continue;
							for(e[4] = e[3] + 1; e[4] < maxEdge - 3; e[4]++) {
								if(hasFixedNodes && fixedNodes[e[4]]) continue;
								for(e[5] = e[4] + 1; e[5] < maxEdge - 2; e[5]++) {
									if(hasFixedNodes && fixedNodes[e[5]]) continue;
									for(e[6] = e[5] + 1; e[6] < maxEdge - 1; e[6]++) {
										if(hasFixedNodes && fixedNodes[e[6]]) continue;
										for(e[7] = e[6] + 1; e[7] < maxEdge - 0; e[7]++) {
											if(hasFixedNodes && fixedNodes[e[7]]) continue;
											for(int p = 0; p < 14833; p++) {
												if(gExiting) return;
												egraph eg1(eg0);
												for(int ee = 0; ee < 8; ee++) {
													eg1.ceg.edges.edgeIndexes[e[ee]] = eg.edges.edgeIndexes[e[permute8[p][ee]]]; //take the new edge
													eg1.approxNodeEnergies[edgeNodes[eg.edges.size][e[ee]][0]] = 0; //invalidate edge's node 1
													eg1.approxNodeEnergies[edgeNodes[eg.edges.size][e[ee]][1]] = 0; //invalidate edge's node 2
												}
												equeue.add(eg1);
											}
										}
									}
								}
							}
						}
					}
				}
			}
			if(!hasFixedNodes) {
				eg0.ceg.tags |= 128; //tag as processed at mutation depth 8
				db.addEgraph(eg0.ceg);
			}
			break;
		default:
			;
	}
}

//void recalculate() {
//	//unconditionally recalculate the weights/energies w/o canonicalization
//	std::vector<compressedEgraph*> all;
//	for(compressedEgraphMap::iterator g = db.begin(); /*(!gExiting) && */g != db.end(); g++) {
//		all.push_back(&(g->second));
//	}
//#ifdef _OPENMP
//#pragma omp parallel for schedule(dynamic, 1)
//#endif //_OPENMP
//	for(size_t i = 0; i < all.size(); ++i) {
//		{
//			if(gExiting) continue;
//			energy_t e;
//			all[i]->getEnergy(e);
//			all[i]->approxEnergy = (approxEnergy_t)e;
//		}
//	}
//}

//a node with
//  - defined edge values
//  - defined node number within the egraph
//  - some defined and possibly some undefined values permutations
struct partiallyAttachedNode : public detachedNode {
	//node index within the egraph is determined by the container (kind of egraph)

};

//static const std::bitset<378> blah[2] = {std::bitset<378>("0a123"),std::bitset<378>("0a123")};

//partially populated egraph
struct egraphBM : public egraph {
	edgesInEgraphBM allowedEdgeValues[378]; //allowedEdgeValues[e][0] = true when edge at position "e" can be set to 0 (i.e. the corresponding prime=2) w/o contradiction
	//edgesInEgraphBM valuesOccupiedOnce;
	nodesInEgraphBM allowedNodes;
	int valueCells[378];
	void fromNode(const detachedNode& n) {
		//do some common initialization
		ceg.edges.setSize(n.valuesOccupied.count());
		allowedNodes = (1U << ceg.edges.size) - 1;
		allowedEdgeValues[0].reset();
		for(size_t i = 0; i < ceg.edges.size; i++) {
			allowedEdgeValues[0].set(i);
		}
		for(size_t i = 1; i < ceg.edges.size; i++) {
			allowedEdgeValues[i] = allowedEdgeValues[0];
		}
		//now add the given node as 0
		//valuesOccupiedOnce |= n.valuesOccupied;
		allowedNodes &= ~(1 << 0); //disallow this node from further node assignment
		for(size_t e = 0; e < numEdges[ceg.edges.size]; e++) {
			allowedEdgeValues[e] &= nodeEdgesBM[ceg.edges.size][0];
		}
		size_t v = n.valuesOccupied._Find_first();
		for(size_t i = 0; i < ceg.edges.size - 1; i++) {
			ceg.edges.edgeIndexes[nodeEdges[ceg.edges.size][0][i]] = v;
			valueCells[v] = ceg.edges.edgeIndexes[nodeEdges[ceg.edges.size][0][i]];
			v = n.valuesOccupied._Find_next(v);
		}
		//bool disbalancePositive = n.tags & 1;
		approxNodeEnergies[0] = nodeTarget[ceg.edges.size] + n.disbalance;
	}
//	bool tryAddNode(const detachedNode& n) {
//		std::bitset<378> intersection;
//		//intersection = valuesOccupiedOnce & n.valuesOccupied;
//		if(intersection.none()) return false; //disjoint, retry later?
//		for(int i = 0; i < numEdges[ceg.edges.size]; i++) {
//			if(intersection[i]) {
//				int pos = valueCells[i];
//				//int nodeNumber = edgeNodes[ceg.edges.size][pos][0];
//				//if(nodesOccupiedBM & (1 << nodeNumber)) nodeNumber = edgeNodes[ceg.edges.size][pos][1];
//			}
//		}
//		return true;
//	}
};

bool mutateTopN(int numElements, int maxDepth) {
	bool ret = false;
	std::vector<compressedEgraph> top;
	db.getTopN(numElements, top);
	//std::cerr << "Mutating top " << top.size() << "/" << numElements << " to depths 2.." << maxDepth << std::endl;
	//std::cerr.flush();
//#ifdef _OPENMP
//#pragma omp parallel default(shared)
//#pragma omp single
//#endif //_OPENMP
	for(int m = maxDepth; m >= 2  && (!gExiting); m--) { //run longer tasks earlier
		for(std::vector<compressedEgraph>::const_iterator g = top.begin(); g != top.end() && (!gExiting); g++) {
			if(g->tags & (1 << (m - 1))) continue; //already done
			ret = true; //something is done
//#ifdef _OPENMP
//#pragma omp task default(none) firstprivate(g,m) untied
//#endif //_OPENMP
			mutate(*g, m);
		}
	}
	return ret;
}

bool mutateTopUntaggedN(int numElements, int depth) {
	bool ret = false;
	std::vector<compressedEgraph> top;
	db.getTopUntaggedN(numElements, 1 << (depth - 1), top);
	if(depth > 3) {
		std::cerr << "Mutating top untagged " << top.size() << " to depth " << depth << std::endl;
	}
//#ifdef _OPENMP
//#pragma omp parallel default(shared)
//#pragma omp single
//#endif //_OPENMP
	for(std::vector<compressedEgraph>::const_iterator g = top.begin(); g != top.end() && (!gExiting); g++) {
		ret = true; //something is done
//#ifdef _OPENMP
//#pragma omp task default(none) firstprivate(g,depth)
//#endif //_OPENMP
		mutate(*g, depth);
	}
	return ret;
}

//bool mutateWorstNodeUntaggedN(int numElements) {
//	bool ret = false;
//	std::vector<compressedEgraph> top;
//	db.getTopUntaggedN(numElements, 1, top); //bit 0 = worst node mutated at depth 1
////#ifdef _OPENMP
////#pragma omp parallel default(shared)
////#pragma omp single
////#endif //_OPENMP
//	for(std::vector<compressedEgraph>::const_iterator g = top.begin(); g != top.end() && (!gExiting); g++) {
//		ret = true; //something is done
////#ifdef _OPENMP
////#pragma omp task default(none) firstprivate(g,depth)
////#endif //_OPENMP
//		//partial implementation for depth 1
//		egraph eg0;
//		eg0.fromCompressedEgraph(*g);
//		bool isWorstNodeEdge[378]{false};
//		int worstNodeEdges[28];
//		int size = eg0.ceg.edges.size;
//		int worstNode = size - 1;
//		for(int i1 = 0; i1 < size - 1; i1++) {
//			int e1 = nodeEdges[size][worstNode][i1];
//			worstNodeEdges[i1] = e1;
//			isWorstNodeEdge[e1] = true;
//		}
//		for(int i1 = 0; i1 < size - 1; i1++) {
//			//nodeEdges edgeNodes
//			int e1 = worstNodeEdges[i1]; // cell position
//			int v1 = eg0.ceg.edges.edgeIndexes[e1]; //cell value = index of the primary number
//			//int neighbourNode = edgeNodes[size][e1][0]; //node which energy wouldn't be changed
//			//if(neighbourNode == worstNode) neighbourNode = edgeNodes[size][e1][1];
//			for(size_t e2 = 0; e2 < numEdges[size]; e2++) {
//				if(isWorstNodeEdge[e2]) continue; //don't swap edges both connected to the worst detachedNode
//				int v2 = eg0.ceg.edges.edgeIndexes[e2];
//				if(v2 > v1) continue; //don't swap edges that would increase the worst energy
//
//				//below is a wrong code section
////				int remoteNode = edgeNodes[size][e2][0];
////				if(remoteNode == neighbourNode) remoteNode = edgeNodes[size][e2][1];
////				approxEnergy_t oldSum = eg0.approxNodeEnergies[worstNode] + eg0.approxNodeEnergies[remoteNode];
////				approxEnergy_t newSum = eg0.approxNodeEnergies[worstNode] / primes[v1] * primes[v2] + eg0.approxNodeEnergies[remoteNode] / primes[v2] * primes[v1];
////				if(newSum > oldSum) continue; //actually this is very strong condition since it always produces a better egraph and never worse but close one
//
//				egraph eg1(eg0);
//				eg1.ceg.edges.edgeIndexes[e1] = v2;
//				eg1.ceg.edges.edgeIndexes[e2] = v1;
//				eg1.approxNodeEnergies[edgeNodes[size][e1][0]] = 0; //invalidate
//				eg1.approxNodeEnergies[edgeNodes[size][e1][1]] = 0; //invalidate
//				eg1.approxNodeEnergies[edgeNodes[size][e2][0]] = 0; //invalidate
//				eg1.approxNodeEnergies[edgeNodes[size][e2][1]] = 0; //invalidate
//				equeue.add(eg1);
//				ret = true;
//			}
//		}
//		eg0.ceg.tags |= 1; //tag as processed at worst node mutation depth 1
//		db.addEgraph(eg0.ceg);
//	}
//	return ret;
//}

struct partialEgraph {
	size_t numTargetNodes; //the final size
	size_t numNodes; //number of nodes attached so far
	detachedNode nodes[28]; //unordered list of nodes
	approxEnergy_t disbalance;
	tags_t tags; //bit 0 = positive disbalance
	edgesInEgraphBM maskNoneOf; //intersection of already attached nodes
	edgesInEgraphBM maskOneOf; //union of already attached nodes
	static approxEnergy_t maxNodeDeviation;
	static bitMaps* matrix;
	static std::vector<const detachedNode*> topNodes;
	partialEgraph(size_t size) : numTargetNodes(size), numNodes(0), disbalance(0.0), tags(0) {}
	static unsigned long long nextPermutation(const unsigned long long v) {
		//https://graphics.stanford.edu/~seander/bithacks.html#NextBitPermutation
		//Thanks to Dario Sneidermanis of Argentina, who provided this on November 28, 2009.
		unsigned long long t = (v | (v - 1)) + 1;
		return t | ((((t & -t) / (v & -v)) >> 1) - 1);
	}
	static uint32_t nextPermutation(const uint32_t v) {
		//https://graphics.stanford.edu/~seander/bithacks.html#NextBitPermutation
		//Thanks to Dario Sneidermanis of Argentina, who provided this on November 28, 2009.
		uint32_t t = (v | (v - 1)) + 1;
		return t | ((((t & -t) / (v & -v)) >> 1) - 1);
	}
	approxEnergy_t getDisbalance() const {
		return (tags & 1) ? disbalance : -disbalance;
	}
	bool attachNode(const detachedNode& n) {
		if((n.valuesOccupied & maskNoneOf).any()) return false;
		edgesInEgraphBM updatedMaskNoneOf(maskNoneOf);
		for(size_t i = 0; i < numNodes; i++) {
			edgesInEgraphBM newFixed(n.valuesOccupied);
			newFixed &= nodes[i].valuesOccupied;
			if(newFixed.count() != 1) return false;
			updatedMaskNoneOf |= newFixed;
		}
		//success
		nodes[numNodes] = n;
		maskNoneOf |= updatedMaskNoneOf;
		maskOneOf |= n.valuesOccupied;
		disbalance = getDisbalance() + n.getDisbalance();
		if(disbalance > 0) {
			tags |= 1;
		}
		else {
			disbalance = -disbalance;
			tags &= ~((tags_t)1);
		}
		numNodes++;
		return true;
	}
	bool isAttachable(const edgesInEgraphBM& n) const {
		if((n & maskNoneOf).any()) return false;
		if((n & maskOneOf).none()) return false;
		//TODO: maybe one more fast check for number of bits in (n.valuesOccupied & maskOneOf)?
		for(size_t i = 0; i < numNodes; i++) {
			edgesInEgraphBM newFixed(n);
			newFixed &= nodes[i].valuesOccupied;
			if(newFixed.count() != 1) return false;
		}
		return true;
	}
	void buildEdgeIndex(edgelist& el) const {
		//el.setSize(numEdges[numTargetNodes]);
		for(size_t n1 = 0; n1 < numTargetNodes - 1; n1++) {
			for(size_t n2 = n1 + 1; n2 < numTargetNodes; n2++) {
				edgesInEgraphBM commonEdge = nodes[n1].valuesOccupied;
				commonEdge &= nodes[n2].valuesOccupied;
				size_t e = commonEdge._Find_first();
				el.edgeIndexes[edgePerNodes[numTargetNodes][n1][n2]] = e;
			}
		}
	}
	void attachLastNode() {
		//latest node should be the remainder
		edgesInEgraphBM restEdges(allEdgesPerSizeBM[numTargetNodes]);
		restEdges ^= maskNoneOf;
		detachedNode r;
		r.valuesOccupied = restEdges;
		r.setDisbalance();
		//estimate egraph's energy
		{
			approxEnergy_t approxEnergy(0);
			for(size_t i = 0; i < numNodes; i++) {
				approxEnergy += nodes[i].getDisbalance();
			}
			approxEnergy += r.getDisbalance();
			approxEnergy += nodeTarget[numTargetNodes] * numTargetNodes;
			if(approxEnergy > ignoreAbove[numTargetNodes]) {
				//the grid is too weak statically
				//continue;
				goto skip;
			}
			if(db.isFull && approxEnergy > db.worstApproxEnergy) {
				//the grid is weak dynamically
				//continue;
				goto skip;
			}
			//a possible new good grid candidate
			if(!attachNode(r)) {
				//something wrong happened
				std::cerr << "debug: latest node can't be attached for some reason\n";
				goto skip;
			}
			//order the edges and recalculate energy
			edgelist el(numTargetNodes);
			buildEdgeIndex(el);
			egraph eg(el); //recalculates energies and does canonicalization
			if(!eg.isWeak)
#ifdef _OPENMP
#pragma omp critical (newEgraphs)
#endif //_OPENMP
			{ //energy is accumulated up to weakness determination, continue only with non-weak instances
				//almost always the graph is already in the database
				compressedEgraphMap::const_iterator old = db.find(eg.ceg.edges);
				if(old == db.end()) {
					std::cerr << "^";
					db.addEgraph(eg.ceg);
					//db.resetGraphAge();
				}
				else {
					//std::cerr << "=";
				}
			}
//					//	std::cerr << "debug: \t";
//					//	db.logBestEgraph(cg);
			//}
		}
		skip:
		;
	}
//	void advanceFromVector(const std::vector<detachedNode*>& compatibleNodes, size_t maxChildren) {
//		//size_t maxChildren = 2;
//		if(gExiting) return;
//		size_t limit = maxChildren; //4
//		for(std::vector<detachedNode*>::const_iterator n = compatibleNodes.begin(); (!gExiting) && limit && n != compatibleNodes.end(); n++) {
//			partialEgraph p(*this);
//			if(p.attachNode(**n)) {
//				limit--;
//				if(p.numNodes == p.numTargetNodes - 1) {
//					p.attachLastNode();
//				}
//				else {
//					//reduce the nodes
//					std::vector<detachedNode*> reducedNodes;
//					for(std::vector<detachedNode*>::const_iterator nnn = std::next(n); nnn != compatibleNodes.end(); nnn++) {
//						if(((*nnn)->valuesOccupied & p.maskNoneOf).none() && ((*nnn)->valuesOccupied & p.nodes[p.numNodes - 1].valuesOccupied).count() == 1)
//							reducedNodes.push_back(*nnn);
//					}
//					//recurse
//					if(!reducedNodes.empty()) {
//						p.advanceFromVector(reducedNodes, maxChildren);
//					}
//				}
//			}
//		}
//	}



	void expandFreeEdges(edgesInEgraphBM& nodeBM, const size_t* freeEdges, const approxEnergy_t accumulatedEnergy, const approxEnergy_t worstMinEnergy, const approxEnergy_t worstMaxEnergy) const {
////		//Check whether the collected so far disbalance can't be compensated further according to some criteria on nodes quality. Below is the most weak filter == to be better than the worst one.
//		if(this->disbalance > std::abs(db.worstApproxEnergy - (this->numTargetNodes - this->numNodes - 1) * db.maxNodeDeviationForWorst())) {
//		//if(this->disbalance > fabsq(db.worstApproxEnergy - (this->numTargetNodes - this->numNodes - 1) * (__float128)db.maxNodeDeviationForWorst())) {
//			return; //a doomed to failure branch
//		}

		if(gExiting) return;
		//for the last, partially assembled node, we have already fixed edges in nodeBM, and want to append some free edges from freeEdges[]
		size_t numFreeEdges = numEdges[this->numTargetNodes] - this->maskOneOf.count(); //todo: a better expression should exist
		size_t numEdgesToAdd = this->numTargetNodes - this->numNodes - 1;
		edgesInEgraphBM nodeEdges;
		//typedef unsigned long long mask_t;
		typedef uint32_t mask_t;
		mask_t end_mask = ((mask_t)1) << numFreeEdges;
		for(mask_t mask = ((mask_t)1 << numEdgesToAdd) - 1; mask < end_mask; mask = nextPermutation(mask)) {
			approxEnergy_t newAccumulatedEnergy = accumulatedEnergy;
			nodeEdges = nodeBM;
			for(size_t i = 0; i < numFreeEdges; i++) {
				if(mask & ((mask_t)1 << i)) {
					newAccumulatedEnergy *= primes[freeEdges[i]];
					nodeEdges.set(freeEdges[i]);
				}
			}
			if(gExiting) return;
			if(newAccumulatedEnergy > worstMaxEnergy) continue; //assuming group free edges in increasing order
			if(newAccumulatedEnergy < worstMinEnergy) continue; //assuming group free edges in increasing order
			partialEgraph p(*this);
			if(p.isAttachable(nodeEdges)) {
				detachedNode r(nodeEdges); //calculates the disbalance
				p.attachNode(r);
				if(p.numNodes == p.numTargetNodes - 1) {
					p.attachLastNode(); //store to db
				}
				else {
					p.expandEdges();
				}
			}
			else {
				//debug
				//p.disbalance = p.disbalance;
			}
		}
	}
	void expandEdgesFromGroup(edgesInEgraphBM& nodeBM, const size_t freeEdges[32][32], const size_t group, const approxEnergy_t accumulatedEnergy, const approxEnergy_t worstMinEnergy, const approxEnergy_t worstMaxEnergy) const {
//		if(gExiting) return;
//		size_t groupSize = this->numTargetNodes - this->numNodes;
//		for(size_t i = 0; i < groupSize; i++) {
//			nodeBM.set(freeEdges[group][i]);
//			if(group) {
//				expandEdgesFromGroup(nodeBM, freeEdges, group - 1);
//			}
//			else {
//				expandFreeEdges(nodeBM,freeEdges[this->numNodes]);
//			}
//			nodeBM.reset(freeEdges[group][i]);
//		}
		if(gExiting) return;
		if(group) {
			size_t groupSize = this->numTargetNodes - this->numNodes;
			for(size_t i = 0; i < groupSize; i++) {
				approxEnergy_t newAccumulatedEnergy = accumulatedEnergy * primes[freeEdges[group][i]];
				if(newAccumulatedEnergy > worstMaxEnergy) return; //assuming group free edges in increasing order
				nodeBM.set(freeEdges[group][i]);
				expandEdgesFromGroup(nodeBM, freeEdges, group - 1, newAccumulatedEnergy, worstMinEnergy, worstMaxEnergy);
				nodeBM.reset(freeEdges[group][i]);
			}
		}
		else { //iterating trough all edges of group 0 would cause duplicates
			approxEnergy_t newAccumulatedEnergy = accumulatedEnergy * primes[freeEdges[0][0]];
			if(newAccumulatedEnergy > worstMaxEnergy) return; //assuming group free edges in increasing order
			//if(newAccumulatedEnergy < worstMinEnergy) return; //NO: we have free edges to add
			nodeBM.set(freeEdges[0][0]);
			expandFreeEdges(nodeBM,freeEdges[this->numNodes], newAccumulatedEnergy, worstMinEnergy, worstMaxEnergy);
			nodeBM.reset(freeEdges[0][0]);
		}
	}
	void expandEdges() const {
		if(gExiting) return;
		size_t freeEdges[32][32]; //indexes of the single connected edges for each of the nodes
		edgesInEgraphBM tmp;
		edgesInEgraphBM tmp1(this->maskNoneOf);
		tmp1.flip();
		//extract the tuples of free (i.e. single connected) edges
		for(size_t n = 0; n < numNodes; n++) {
			tmp = nodes[n].valuesOccupied;
			tmp &= tmp1;
			size_t nn = 0;
			for(size_t e = tmp._Find_first(); e != tmp.size(); e = tmp._Find_next(e)) {
				freeEdges[n][nn] = e;
				nn++;
			}
		}
		//extract the list of untouched edges and store them in freeEdges[this->numNodes]
		tmp = allEdgesPerSizeBM[numTargetNodes];
		tmp ^= this->maskOneOf;
		for(size_t e = tmp._Find_first(), nn = 0; e != tmp.size(); e = tmp._Find_next(e), nn++) {
			freeEdges[this->numNodes][nn] = e;
		}
		tmp.reset();
		//const approxEnergy_t worstMinEnergy = nodeTarget[db.egraphSize] - db.maxNodeDeviationForBetter();
		//const approxEnergy_t worstMaxEnergy = nodeTarget[db.egraphSize] + db.maxNodeDeviationForBetter();
		const approxEnergy_t worstMinEnergy = .999999999L * (nodeTarget[db.egraphSize] - db.maxNodeDeviationForWorst()); //for 15 1,326060032×10³¹
		const approxEnergy_t worstMaxEnergy = 1.000000001L * (nodeTarget[db.egraphSize] + db.maxNodeDeviationForWorst()); //for 15 1,326120533×10³¹
		expandEdgesFromGroup(tmp, freeEdges, this->numNodes - 1, 1.L, worstMinEnergy, worstMaxEnergy);
	}
//	void generateLast2Nodes() const {
//		//this instance has all previously attached nodes
//		edgesInEgraphBM restEdges(allEdgesPerSizeBM[numTargetNodes]);
//		restEdges ^= maskNoneOf; //we should iterate here
//		edgesInEgraphBM touched;
//		for(size_t n = 0; n < numNodes; n++) {
//			touched |= nodes[n].valuesOccupied;
//		}
//		edgesInEgraphBM commonEdgeBM(allEdgesPerSizeBM[numTargetNodes]);
//		commonEdgeBM ^= touched;
//		if(commonEdgeBM.count() != 1) { //debug
//			std::cerr << "regenerateLast2Nodes(!) ";
//		}
//		size_t commonEdge = commonEdgeBM._Find_first();
//		restEdges.reset(commonEdge); //select (numNodes==(numTargetNodes - 2)) edges from here in all possible ways
//		size_t map_perm_to_edge[64];
//		size_t word_size = 0; //also the map size
//		for(size_t o1 = restEdges._Find_first();
//				o1 != restEdges.size();
//				o1 = restEdges._Find_next(o1)) {
//			map_perm_to_edge[word_size++] = o1;
//		}
//		unsigned int end_mask = 1 << word_size;
//		for(unsigned int mask = (1 << numNodes) - 1; mask < end_mask; mask = nextPermutation(mask)) {
//			edgesInEgraphBM nodeEdges;
//			nodeEdges.set(commonEdge);
//			for(size_t i = 0; i < word_size; i++) {
//				if(mask & (1 << i)) {
//					//this doesn't take into account that no 2 edges from an already assigned node shouldn't be set simultaneously
//					//the above is dirty fixed later by trial to attach
//					//TODO
//					nodeEdges.set(map_perm_to_edge[i]);
//				}
//			}
//			partialEgraph p(*this);
//			if(p.isAttachable(nodeEdges)) {
//				detachedNode r(nodeEdges); //calculates the disbalance
//				p.attachNode(r);
//				p.attachLastNode(); //store to db
//			}
//		}
//	}

//	static void regenerateLast2Nodes(const compressedEgraph& g) {
//		regenerateLastNodes(g, 2);
//	}
//	static void regenerateLastNodes(const compressedEgraph& g, size_t numNodes) {
//		partialEgraph p(db.egraphSize);
//		for(size_t n = 0; n < p.numTargetNodes - numNodes; n++) {
//			p.attachNode(g.getDetachedNode(n));
//		}
//		p.expandEdges();
//	}
	static void regenerateAll2Nodes(const compressedEgraph& g) {
		for(size_t skip1 = 0; skip1 < db.egraphSize - 2; skip1++) { // -4 to skip latest two covered by crunching process, else -3
			for(size_t skip2 = skip1 + 1; skip2 < db.egraphSize - 1; skip2++) {
//		for(size_t skip1 = db.egraphSize - 4; skip1 < db.egraphSize - 2; skip1++) { // dirty patch line 1 of 2
//			for(size_t skip2 = skip1 + 1; skip2 < db.egraphSize - 1; skip2++) { // dirty patch line 2 of 2
				if(gExiting) return;
				partialEgraph p(db.egraphSize);
				for(size_t n = 0; n < p.numTargetNodes; n++) {
					if(n == skip1 || n == skip2) continue;
					p.attachNode(g.getDetachedNode(n));
				}
				//p.generateLast2Nodes();
				p.expandEdges();
			}
		}
	}
	static void regenerateAll3Nodes(const compressedEgraph& g) {
		for(size_t skip1 = 0; skip1 < db.egraphSize - 3; skip1++) {
			for(size_t skip2 = skip1 + 1; skip2 < db.egraphSize - 2; skip2++) {
				for(size_t skip3 = skip2 + 1; skip3 < db.egraphSize - 1; skip3++) {
					if(gExiting) return;
					partialEgraph p(db.egraphSize);
					for(size_t n = 0; n < p.numTargetNodes; n++) {
						if(n == skip1 || n == skip2 || n == skip3) continue;
						p.attachNode(g.getDetachedNode(n));
					}
					p.expandEdges();
				}
			}
		}
	}
	static void regenerateAll4Nodes(const compressedEgraph& g) {
		for(size_t skip1 = 0; skip1 < db.egraphSize - 4; skip1++) {
			for(size_t skip2 = skip1 + 1; skip2 < db.egraphSize - 3; skip2++) {
				for(size_t skip3 = skip2 + 1; skip3 < db.egraphSize - 2; skip3++) {
					for(size_t skip4 = skip3 + 1; skip4 < db.egraphSize - 1; skip4++) {
						if(gExiting) return;
						partialEgraph p(db.egraphSize);
						for(size_t n = 0; n < p.numTargetNodes; n++) {
							if(n == skip1 || n == skip2 || n == skip3 || n == skip4) continue;
							p.attachNode(g.getDetachedNode(n));
						}
						p.expandEdges();
					}
				}
			}
		}
	}
//	void advanceFromNodes(const detachedNodes::idxByDeviation_t::const_iterator& top, size_t maxChildren) {
//		//static const size_t maxChildren = 600;
//		if(gExiting) return;
//		size_t limit = maxChildren; //4
//		for(detachedNodes::idxByDeviation_t::const_iterator n = top; (!gExiting) && limit && n != db.nodesList.idxByDeviation.end(); n++) {
//			partialEgraph p(*this);
//			if(p.attachNode(*(n->second))) {
//				limit--;
//				if(p.numNodes == p.numTargetNodes - 1) {
//					p.attachLastNode();
//				}
//				else {
//					if(p.numNodes == 4) {
//						//build a vector of compatible nodes to work with
//						std::vector<detachedNode*> reducedNodes;
//						for(detachedNodes::idxByDeviation_t::const_iterator nnn = std::next(n); (!gExiting) && limit && nnn != db.nodesList.idxByDeviation.end(); nnn++) {
//							if((nnn->second->valuesOccupied & p.maskNoneOf).any()) continue; //none of the already attached to 2 nodes
//							for(size_t pn = 0; pn < p.numNodes; pn++) {
//								if((p.nodes[pn].valuesOccupied & nnn->second->valuesOccupied).count() != 1) { //one of the already attached to 1 node
//									goto skip;
//								}
//							}
//							reducedNodes.push_back(nnn->second);
//							skip:
//							;
//						}
//						if(!reducedNodes.empty()) {
//							p.advanceFromVector(reducedNodes, maxChildren);
//						}
//					}
//					else {
//						//recurse
//						detachedNodes::idxByDeviation_t::const_iterator nn(n);
//						++nn;
//						p.advanceFromNodes(nn, maxChildren);
//					}
//				}
//			}
//		}
//	}
//	void buildFromNodes(size_t maxChildren) {
//		size_t top_limit = 32; //16
//		detachedNode nodes[32];
//		size_t num_nodes = 0;
//		for(detachedNodes::idxByDeviation_t::const_iterator n = db.nodesList.idxByDeviation.begin(); (!gExiting) && num_nodes < top_limit && n != db.nodesList.idxByDeviation.end(); n++) {
//			nodes[num_nodes++] = *(n->second);
//		}
//#ifdef _OPENMP
//#pragma omp parallel for schedule(dynamic, 1) default(none) shared(num_nodes,db,nodes,maxChildren)
//#endif //_OPENMP
//		for(size_t i = 0; i < num_nodes; i++) {
//			partialEgraph g(db.egraphSize);
//			g.attachNode(nodes[i]); //first attachment always suceeds
//			//recurse
//			detachedNodes::idxByDeviation_t::const_iterator nn = db.nodesList.idxByDeviation.find(nodes[i].disbalance);
//			++nn;
//			g.advanceFromNodes(nn, maxChildren);
//		}
//	}
//	void buildFromNodesAll(size_t maxChildren) {
//		if(maxChildren == 0 || maxChildren >= 10) return;
//		static const size_t chunkSize = 64; //chunk size for parallelization
//		detachedNode nodes[chunkSize];
//		if(db.nodesList.empty()) return;
//		detachedNode last_processed(*db.nodesList.idxByDeviation.begin()->second);
//		last_processed.disbalance = 0.0; //be sure not to skip the most valuable first node
//		restart:
//		{
//			size_t num_nodes = 0;
//			for(detachedNodes::idxByDeviation_t::const_iterator n = db.nodesList.findNextByObject(last_processed); (!gExiting) && num_nodes < chunkSize && n != db.nodesList.idxByDeviation.end(); n++) {
//				if(n->second->tags & (((tags_t)1) << (maxChildren + 5))) continue; //skip tagged nodes
//				nodes[num_nodes++] = *(n->second);
//			}
//			if(num_nodes == 0) return;
//			last_processed = nodes[num_nodes - 1]; //store to know where to continue next chunk from
//	#ifdef _OPENMP
//	#pragma omp parallel for schedule(dynamic, 1) default(none) shared(num_nodes,db,nodes,maxChildren,gExiting)
//	#endif //_OPENMP
//			for(size_t i = 0; i < num_nodes; i++) {
//				partialEgraph g(db.egraphSize);
//				g.attachNode(nodes[i]); //first attachment always succeeds
//				//recurse
//				detachedNodes::idxByDeviation_t::const_iterator nn = db.nodesList.idxByDeviation.find(nodes[i].disbalance);
//				++nn;
//				g.advanceFromNodes(nn, maxChildren);
//				if(!gExiting) {
//					//tag the node as processed
//					db.nodesList[nodes[i].valuesOccupied].tags |= (((tags_t)1) << (maxChildren + 5));
//				}
//			}
//			if((!gExiting) && num_nodes)
//				goto restart;
//		}
//	}
//	bool attachBestNodeLargestFirst() {
//		//find last edge connected only to one node
//		size_t largestBit = 10000;
//		for(size_t e = numEdges[db.egraphSize] - 1; e; e--) {
//			if(!this->maskOneOf[e]) continue;
//			if(this->maskNoneOf[e]) continue;
//			largestBit = e;
//			break;
//		}
//		if(largestBit == 10000) return false;
//		size_t sign = tags & 1;
//		//search forward
//		partialEgraph closerAfter(*this);
//		for(detachedNodes::idxByDeviation_t::const_iterator n1 = db.nodesList.idxByDeviation.lower_bound(this->disbalance); (!gExiting) && n1 != db.nodesList.idxByDeviation.end(); n1++) {
//			if((n1->second->tags & 1) == sign) continue; //we are searching for nodes with opposite deviation
//			if(n1->second->valuesOccupied[largestBit] == 0) continue; //hasn't the edge we are searching for
//			if((n1->second->valuesOccupied & this->maskNoneOf).any()) continue; //contains edges that are already fixed here
//			if(closerAfter.attachNode(*n1->second)) break;
//		}
//		//search backward
//		partialEgraph closerBefore(*this);
//		for(detachedNodes::idxByDeviation_t::const_reverse_iterator n2(db.nodesList.idxByDeviation.upper_bound(this->disbalance)); (!gExiting) && n2 != db.nodesList.idxByDeviation.rend(); n2++) {
//			if((n2->second->tags & 1) == sign) continue; //we are searching for nodes with opposite deviation
//			if(n2->second->valuesOccupied[largestBit] == 0) continue; //hasn't the edge we are searching for
//			if((n2->second->valuesOccupied & this->maskNoneOf).any()) continue; //contains edges that are already fixed here
//			if(closerBefore.attachNode(*n2->second)) break;
//		}
//		if(closerAfter.numNodes == this->numNodes) { //not found
//			if(closerBefore.numNodes == this->numNodes) return false; //none found
//			this->attachNode(closerBefore.nodes[closerBefore.numNodes - 1]); //return the only found
//			return true;
//		}
//		if(closerBefore.numNodes == this->numNodes) {
//			this->attachNode(closerAfter.nodes[closerAfter.numNodes - 1]); //return the only found
//			return true;
//		}
//		//nodes are found in both directions. Return the better one.
//		if(closerAfter.disbalance > closerBefore.disbalance) {
//			this->attachNode(closerBefore.nodes[closerBefore.numNodes - 1]);
//			return true;
//		}
//		this->attachNode(closerAfter.nodes[closerAfter.numNodes - 1]);
//		return true;
//	}
//	void attachBestNodeLargestFirst(const bitMap& prevValidCandidates) const {
//		//static const size_t reducedChildren[29] = {8,8,8,8,8,16,64,128,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256};
//		if(this->numNodes == this->numTargetNodes - 2) {
//			//perform full join to all possible node pairs regardless of the disbalance
//			this->generateLast2Nodes();
//			return;
//		}
//		static const size_t ParallelizeAfterNode = 2;
//		//select the edge with less (known best) nodes to start from
////		bitCounts population;
////		for(detachedNodes::const_iterator n1 = db.nodesList.begin(); n1 != db.nodesList.end(); n1++) {
////			//skip incompatible nodes
////			if(!this->isAttachable(n1->first)) continue;
////			population.addCounts(n1->first);
////		}
//		edgesInEgraphBM mask(this->maskOneOf);
//		mask &= ~this->maskNoneOf; //if the current maskOneOf hasn't already excluded them (while writing this it doesn't exclude them)
////		size_t startBit = population.getLeastPopulated(mask);
//		size_t startBit = mask._Find_first();
//
//
//		bitMap idx(numEdges[(db.egraphSize)]);
//		const detachedNode& lastNode = this->nodes[this->numNodes - 1];
//		for(size_t e = lastNode.valuesOccupied._Find_first(); e != lastNode.valuesOccupied.size(); e = lastNode.valuesOccupied._Find_next(e)) {
//			idx.set(e); //copy
//		}
//		bitMap b(prevValidCandidates);
//		idx.reset(startBit);
//		b.hasOneOf(matrix->maps, idx); //index of compatible nodes
//		b &= matrix->maps[startBit]; //joint to edge startBit
////		if(this->numNodes == ParallelizeAfterNode) {
////#ifdef _OPENMP
////#pragma omp parallel for schedule(dynamic, 1) default(none) shared(db,gExiting,maxChildren)
////#endif //_OPENMP
////			for(size_t n2 = b.first(); n2 != b.size(); n2 = b.next(n2)) {
////				if(gExiting) continue;
////				partialEgraph pp(*this);
////				pp.attachNode(*topNodes[n2]);
////				pp.attachBestNodeLargestFirst(maxChildren, b);
////			}
////		}
////		else {
//			for(size_t n2 = b.first(); (!gExiting) && n2 != b.size(); n2 = b.next(n2)) {
//				partialEgraph pp(*this);
//				pp.attachNode(*topNodes[n2]);
//				pp.attachBestNodeLargestFirst(b);
//			}
////		}
///*
//
//		//now compose partialEgraph from top maxChildren nodes and expand them
//		approxEnergy_t curDisbalance = this->getDisbalance();
//		detachedNodes topNodes;
//		//topNodes.max_size = maxChildren;
//		std::deque<const detachedNode*> compatibleNodes;
//		mask = this->maskNoneOf;
//		mask.set(startBit);
//		bool produceCompatibleNodes = (this->numNodes < this->numTargetNodes - 2);
//		if(oldCompatibleNodes != NULL) {
//			for(std::deque<const detachedNode*>::const_iterator n1 = oldCompatibleNodes->begin(); n1 != oldCompatibleNodes->end(); n1++) {
//				if(produceCompatibleNodes) {
//					if((*n1)->valuesOccupied[startBit] == 0) { //compatible with current too
//						edgesInEgraphBM mask1(mask);
//						mask1 &= (*n1)->valuesOccupied;
//						if(!mask1.any()) {
//							compatibleNodes.push_back(&(**n1));
//						}
//					}
//				}
//				if((*n1)->valuesOccupied[startBit] == 0) continue; //hasn't the edge we are searching for
//				if(!this->isAttachable((*n1)->valuesOccupied)) continue;
//				//compose a false detachedNode with relative instead of absolute disbalance
//				detachedNode nn(**n1);
//				approxEnergy_t newDisbalance(nn.getDisbalance() - curDisbalance);
//				if(newDisbalance >= 0) {
//					nn.disbalance = newDisbalance;
//					nn.tags |= 1;
//				}
//				else {
//					nn.disbalance = -newDisbalance;
//					nn.tags &= ~(tags_t)1;
//				}
//				topNodes.AddNode(nn);
//			}
//		}
//		else {
//			for(detachedNodes::idxByDeviation_t::const_iterator n1 = db.nodesList.idxByDeviation.begin(); n1 != db.nodesList.idxByDeviation.lower_bound(maxNodeDeviation); n1++) {
//				if(produceCompatibleNodes) {
//					if(n1->second->valuesOccupied[startBit] == 0) { //compatible with current too
//						edgesInEgraphBM mask1(mask);
//						mask1 &= n1->second->valuesOccupied;
//						if(!mask1.any()) {
//							compatibleNodes.push_back(&(*(n1->second)));
//						}
//					}
//				}
//				if(n1->second->valuesOccupied[startBit] == 0) continue; //hasn't the edge we are searching for
//				if(!this->isAttachable(n1->second->valuesOccupied)) continue;
//				//compose a false detachedNode with relative instead of absolute disbalance
//				detachedNode nn(*(n1->second));
//				approxEnergy_t newDisbalance(nn.getDisbalance() - curDisbalance);
//				if(newDisbalance >= 0) {
//					nn.disbalance = newDisbalance;
//					nn.tags |= 1;
//				}
//				else {
//					nn.disbalance = -newDisbalance;
//					nn.tags &= ~(tags_t)1;
//				}
//				topNodes.AddNode(nn);
//			}
//		}
//		if(topNodes.empty()) return;
//
//		if(compatibleNodes.size() < db.egraphSize - this->numNodes - 2) {
//			//we must advance up to (db.egraphSize - 2) only using nodes from this list
//			//we need to have in hands at least one node per further advance step
//			return;
//		}
//		if(this->numNodes == ParallelizeAterNode) {
//			std::cerr << "Scanning " << compatibleNodes.size() << " nodes for valid graph\n";
//		}
//		//copy the nodes to a vector and recalculate disbalance to reflect the absolute one
//		size_t numChildren = topNodes.size();
//		std::vector<detachedNode> nodesToIterate(numChildren);
//		size_t i = 0;
//		for(detachedNodes::idxByDeviation_t::const_iterator n1 = topNodes.idxByDeviation.begin(); n1 != topNodes.idxByDeviation.end(); n1++, i++) {
//			nodesToIterate[i] = *n1->second;
//			nodesToIterate[i].setDisbalance(); //recalculate the balance to absolute one
//		}
//		//maxChildren = std::min(reducedChildren[this->numTargetNodes - this->numNodes], maxChildren); //large deviations at the end couldn't be compensated and cause empty loops
//		if(this->numNodes == ParallelizeAfterNode) {
//#ifdef _OPENMP
//#pragma omp parallel for schedule(dynamic, 1) default(none) shared(nodesToIterate,db,gExiting,numChildren,maxChildren,compatibleNodes)
//#endif //_OPENMP
//			for(size_t i = 0; i < numChildren; i++) {
//				if(gExiting) continue;
//				partialEgraph p(*this);
//				p.attachNode(nodesToIterate[i]);
//				p.attachBestNodeLargestFirst(maxChildren, b, &compatibleNodes);
//			}
//		}
//		else {
//			for(size_t i = 0; i < numChildren && (!gExiting); i++) {
//				partialEgraph p(*this);
//				p.attachNode(nodesToIterate[i]);
//				p.attachBestNodeLargestFirst(maxChildren, b, &compatibleNodes);
//			}
//		}
////		//find last edge connected only to one node
////		size_t largestBit = 10000;
////		for(size_t e = numEdges[db.egraphSize] - 1; e; e--) {
////			if(!this->maskOneOf[e]) continue;
////			if(this->maskNoneOf[e]) continue;
////			largestBit = e;
////			break;
////		}
////		if(largestBit == 10000) return false;
////		//search forward
////		partialEgraph closerAfter(*this);
////		for(detachedNodes::idxByDeviation_t::const_iterator n1 = db.nodesList.idxByDeviation.begin(); (!gExiting) && n1 != db.nodesList.idxByDeviation.end(); n1++) {
////			if(n1->second->valuesOccupied[largestBit] == 0) continue; //hasn't the edge we are searching for
////			if((n1->second->valuesOccupied & this->maskNoneOf).any()) continue; //contains edges that are already fixed here
////			if(closerAfter.attachNode(*n1->second)) goto found;
////		}
////		return false;
////		found:
////		this->attachNode(closerAfter.nodes[closerAfter.numNodes - 1]); //return the only found
////		return true;*/
//	}
	void __attribute__ ((noinline)) appendNodes(const bitMap& prevValidCandidates, size_t numLastNodesToGenerate, bool startParallel = false) const {
//		//node loop: from all valid candidates select one and join - isn't it sufficient to choose a single still valid edge and loop trough it?
//		for(size_t n1 = prevValidCandidates.next(prevNodeNumber); (!gExiting) && n1 != prevValidCandidates.size(); n1 = prevValidCandidates.next(n1)) {
//			appendNodeAndExpand(prevValidCandidates, n1);
//		}
		//select a valid edge so that:
		// - it has no 2 nodes connected to it (should be covered by prevValidCandidates)
		// - it has 1 node connected to it (should be covered by prevValidCandidates)
		// - it it lexicographically smallest (assuming the edge corresponding to prime number 2 is most problematic, and has less nodes collected in the cache)
		if(this->numNodes) {
			// select the single-connected edge with minimal index
			edgesInEgraphBM edgesToIterate(this->maskNoneOf); //the invalid edges with 2 nodes attached
			edgesToIterate.flip(); //valid edges with 0 or 1 nodes attached
			edgesToIterate &= this->maskOneOf; //valid edges with exactly 1 node attached
			size_t edgeToIterate = edgesToIterate._Find_first(); //first edge having exactly 1 node attached
			//compose the index to follow
			bitMap nodeIndexForSelectedEdge(prevValidCandidates);
			nodeIndexForSelectedEdge &= matrix->maps[edgeToIterate];
			//now follow the index
			if(startParallel) {
				std::vector<size_t> nodes;
				for(size_t n1 = nodeIndexForSelectedEdge.first(); (!gExiting) && n1 != nodeIndexForSelectedEdge.size(); n1 = nodeIndexForSelectedEdge.next(n1)) {
					nodes.push_back(n1);
				}
#ifdef _OPENMP
#pragma omp parallel for schedule(dynamic, 1) default(none) shared(prevValidCandidates, nodes, gExiting, numLastNodesToGenerate)
#endif //_OPENMP
				for(size_t n = 0; n < nodes.size(); n++) { // -2 for latest two nodes generated from scratch
					if(gExiting) continue;
					appendNodeAndExpand(prevValidCandidates, nodes[n], numLastNodesToGenerate); //do parallel processing
				}
			}
			else {
				for(size_t n1 = nodeIndexForSelectedEdge.first(); (!gExiting) && n1 != nodeIndexForSelectedEdge.size(); n1 = nodeIndexForSelectedEdge.next(n1)) {
					appendNodeAndExpand(prevValidCandidates, n1, numLastNodesToGenerate);
				}
			}
		}
		else {
			//we are starting with an empty graph and will iterate edge 0
			std::cerr << "Processing " << matrix->maps[0].count() << " startup nodes\n";
			for(size_t n1 = matrix->maps[0].first(); (!gExiting) && n1 != matrix->maps[0].size(); n1 = matrix->maps[0].next(n1)) {
				const detachedNode& nn1 = *topNodes[n1];
				partialEgraph p(*this);
				if(!p.attachNode(nn1)) {
					std::cerr << "can't attach 0!\n";
					exit(1);
					return;
				}
				//filter the candidates for the next iteration
				bitMap firstValidCandidates(prevValidCandidates); //clone the old
				size_t idx[28];
				size_t i = 0;
				edgesInEgraphBM curFixedEdges = p.maskNoneOf;
				curFixedEdges.flip();
				edgesInEgraphBM newFixedEdges = nn1.valuesOccupied;
				newFixedEdges &= curFixedEdges; //the additional criterion for a next candidate is to have exactly one of the newly involved open edges
				for(size_t e = newFixedEdges._Find_first(); e != newFixedEdges.size(); e = newFixedEdges._Find_next(e)) {
					idx[i++] = e;
				}
				idx[i] = (size_t)-1;
				firstValidCandidates.hasExactlyOneOf(matrix->maps, idx);
				bitMap pairing(firstValidCandidates); //clone the old
				pairing &= matrix->maps[0];
				for(size_t n2 = pairing.next(n1); (!gExiting) && n2 != pairing.size(); n2 = pairing.next(n2)) {
					const detachedNode& nn2 = *topNodes[n2];
					partialEgraph pp(p);
					if(!pp.attachNode(nn2)) {
						std::cerr << "can't attach 1!\n";
						exit(1);
						return;
					}
					//filter the candidates for the next iteration
					bitMap nextValidCandidates(firstValidCandidates); //clone the old
					//exclude new fixed edge 0 from further search
					nextValidCandidates.clearBits(matrix->maps[0]); //exclude candidates having the edge 0 which was just closed
					//now start back from the full list
					edgesInEgraphBM newFixedEdges(nn2.valuesOccupied);
					newFixedEdges.reset(0); //the additional criterion for a next candidate is to have exactly one of the newly involved open edges
					size_t idx[28];
					size_t i = 0;
					for(size_t e = newFixedEdges._Find_first(); e != newFixedEdges.size(); e = newFixedEdges._Find_next(e)) {
						idx[i++] = e;
					}
					idx[i] = (size_t)-1;
					nextValidCandidates.hasExactlyOneOf(matrix->maps, idx);
//					size_t debug_exit = 0;
					for(size_t n3 = nextValidCandidates.first(); (!gExiting) && n3 != nextValidCandidates.size(); n3 = nextValidCandidates.next(n3)) {
						pp.appendNodeAndExpand(nextValidCandidates, n3, numLastNodesToGenerate);

//						//stop after first few iterations for timing purposes
//						std::cerr << "."; //debug
//						debug_exit++;
//						if(debug_exit == 20)
//							return;

					}
				}
			}
		}
	}
	void __attribute__ ((noinline)) appendNodeAndExpand(const bitMap& prevValidCandidates, size_t n1, size_t numLastNodesToGenerate) const {
		const detachedNode& n = *topNodes[n1];
		//partialEgraph p(*this);
		union partialEgraph_u {
			char dummy;
			partialEgraph p;
			partialEgraph_u() {};
			partialEgraph_u(const partialEgraph& other) {
				std::memcpy(this, &other, sizeof(*this));
			};
		};
		partialEgraph_u z(*this);
		partialEgraph& p = z.p;
		if(!p.attachNode(n)) {
			std::cerr << "can't attach!\n";
			exit(1);
			return;
		}
//		if(p.disbalance > std::abs(db.worstApproxEnergy - (p.numTargetNodes - p.numNodes - 1) * db.maxNodeDeviationForWorst())) {
//			std::cerr << "-"; // debug
//			return; //a doomed to failure branch - never happened
//		}
		if(p.numNodes == p.numTargetNodes - numLastNodesToGenerate) {
			if(numLastNodesToGenerate == 1) {
				p.attachLastNode(); //and save
			}
			else {
				//p.generateLast2Nodes();
				p.expandEdges();
			}
			return;
		}
		//filter the candidates for the next iteration
		bitMap nextValidCandidates(prevValidCandidates); //clone the old
		//exclude new fixed edges from further search
		edgesInEgraphBM curFixedEdges(this->maskNoneOf);
		curFixedEdges.flip();
		edgesInEgraphBM newFixedEdges(p.maskNoneOf);
		newFixedEdges &= curFixedEdges; //exclude the already removed
		size_t idx[28];
		size_t i = 0;
		for(size_t e = newFixedEdges._Find_first(); e != newFixedEdges.size(); e = newFixedEdges._Find_next(e)) {
			idx[i++] = e;
		}
		idx[i] = (size_t)-1;
		nextValidCandidates.hasNoneOf(matrix->maps, idx); //exclude candidates having an edge which was just closed
		//now start back from the full list
		curFixedEdges = p.maskNoneOf;
		curFixedEdges.flip();
		newFixedEdges = n.valuesOccupied;
		newFixedEdges &= curFixedEdges; //the additional criterion for a next candidate is to have exactly one of the newly involved open edges
		i = 0;
		for(size_t e = newFixedEdges._Find_first(); e != newFixedEdges.size(); e = newFixedEdges._Find_next(e)) {
			idx[i++] = e;
		}
		idx[i] = (size_t)-1;
		nextValidCandidates.hasExactlyOneOf(matrix->maps, idx);

//		//test start
//		size_t numEmpty = 0;
//		for(size_t e = 0; e < p.numTargetNodes; e++) {
//			if(p.maskNoneOf[e]) continue; //skip the edges already set
//			if(nextValidCandidates.clearsAll(matrix->maps[e]))
//				numEmpty++;
//		}
//		if(numEmpty > 1) //secondary empty, assuming we can iterate up to 1 missing and reject on secondary. This could be extended later by adding 2+ nodes by node generation on place
//			return; //dead end
//		//test end

		//test start (reducing test case for 13 from 43" to 30")
//		if(p.numNodes >= (p.numTargetNodes + 1) / 2) { // < 1% slower when executed unconditionally from the start
			for(size_t e = 0; e < p.numTargetNodes; e++) {
				if(p.maskNoneOf[e]) continue; //skip the edges already set
				if(nextValidCandidates.clearsAll(matrix->maps[e]))
					return; //cancel on first empty edge, assuming we know all good nodes
			}
//		}
		//test end

		if(p.numNodes != 3) { //for size 13 test is 414 for 3 / 426 for 4
			p.appendNodes(nextValidCandidates, numLastNodesToGenerate);
		}
		else {
			p.consolidateMatrix(nextValidCandidates, numLastNodesToGenerate);
		}
	}
	void __attribute__ ((noinline)) consolidateMatrix(const bitMap& stillValidCandidates, size_t numLastNodesToGenerate) {
		//at a stage where most of the nodes are invalidated it is better to compress the survivors
		//the nodes to remain are in stillValidCandidates, especially from prevNodeNumber up
		//the edges to remain exclude this->maskNoneOf
		//Note that this class uses static pointers to the structures which shouldn't be touched
		size_t cNumNodes = 0;
		//for(size_t n1 = stillValidCandidates.next(prevNodeNumber); n1 != stillValidCandidates.size(); n1 = stillValidCandidates.next(n1)) {
		for(size_t n1 = stillValidCandidates.first(); n1 != stillValidCandidates.size(); n1 = stillValidCandidates.next(n1)) {
			cNumNodes++;
		}
		bitMap cValidCandidates(cNumNodes);
		cValidCandidates.set(); //all are valid
		bitMaps* cMatrix = new bitMaps(numEdges[(db.egraphSize)], cNumNodes);
		std::vector<const detachedNode*> cTopNodes(cNumNodes);
		size_t newIndex = 0;
		//for(size_t n1 = stillValidCandidates.next(prevNodeNumber); n1 != stillValidCandidates.size(); n1 = stillValidCandidates.next(n1)) {
		for(size_t n1 = stillValidCandidates.first(); n1 != stillValidCandidates.size(); n1 = stillValidCandidates.next(n1)) {
			cTopNodes[newIndex] = topNodes[n1];
//			for(size_t e = 0; e < numEdges[(db.egraphSize)]; e++) {
//				//if(this->maskOneOf[e]) continue; //skip fixed edges
//				if(matrix->maps[e][n1]) cMatrix->maps[e].set(newIndex);
//			}
			for(size_t e = topNodes[n1]->valuesOccupied._Find_first(); e < topNodes[n1]->valuesOccupied.size(); e = topNodes[n1]->valuesOccupied._Find_next(e)) {
				cMatrix->maps[e].set(newIndex);
			}
			newIndex++;
		}
		std::swap(cMatrix, matrix);
		std::swap(cTopNodes, topNodes);
		appendNodes(cValidCandidates, numLastNodesToGenerate, true); //do the rest of the job starting parallel processing
		std::swap(cMatrix, matrix);
		std::swap(cTopNodes, topNodes);
		delete cMatrix;
		cMatrix = NULL;
		cTopNodes.clear();
	}
	static void buildFromBestNodes(bool useWeakNodeFilter, size_t numLastNodesToGenerate) {
		//truncate the search space to nodes having deviation <= some maxNodeDeviation
		if(useWeakNodeFilter) {
			maxNodeDeviation = db.maxNodeDeviationForBetter(); //use the best egraph in the db
		}
		else {
			maxNodeDeviation = db.maxNodeDeviationForBest(); //hardcoded, external info
		}
		//copy the nodes of interest to the static vector topNodes and build the matrix
		detachedNodes::idxByDeviation_t::const_iterator last = db.nodesList.idxByDeviation.lower_bound(maxNodeDeviation);
		size_t nNodes = std::distance(db.nodesList.idxByDeviation.cbegin(), last);
		//nNodes /= 30; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< debug <<<<<<<<<<<<<<<
		std::cerr << "using top " << nNodes << " nodes\n";
		matrix = new bitMaps(numEdges[(db.egraphSize)], nNodes);
		topNodes.resize(nNodes);
		size_t n = 0;
		for(detachedNodes::idxByDeviation_t::const_iterator n1 = db.nodesList.idxByDeviation.begin(); n < nNodes && (!gExiting) && n1 != last; n1++, n++) {
			detachedNode* nn = n1->second;
			topNodes[n] = nn;
		}
		std::random_shuffle(topNodes.begin(), topNodes.end());
		for(size_t n = 0; (!gExiting) && n < nNodes; n++) {
			const detachedNode* nn = topNodes[n];
			for(size_t e = nn->valuesOccupied._Find_first(); e != nn->valuesOccupied.size(); e = nn->valuesOccupied._Find_next(e)) {
				matrix->maps[e].set(n); //transpose
			}
		}
		bitMap validCandidates(nNodes);
		validCandidates.set(); //all nodes are valid candidates
		partialEgraph p(db.egraphSize);
		p.appendNodes(validCandidates, numLastNodesToGenerate);
//
//
//
//		//node loop: from all valid candidates select one and join
//		for(size_t n1 = validCandidates.first(); (!gExiting) && n1 != validCandidates.size(); n1 = validCandidates.next(n1)) {
//			partialEgraph p(db.egraphSize);
//
//		}
//		size_t nodeIndex =
//		//assume the nodes containing bit 0 are less frequent
//		//compose all compatible node pairs by nodes having bit 0 set
//		for(size_t n1 = matrix->maps[0].first(); (!gExiting) && n1 != matrix->maps[0].size(); n1 = matrix->maps[0].next(n1)) {
//			p.attachNode(*topNodes[n1]);
//			bitMap idx(numEdges[(db.egraphSize)]);
//			idx.reset();
//			for(size_t e = topNodes[n1]->valuesOccupied._Find_first(); e != topNodes[n1]->valuesOccupied.size(); e = topNodes[n1]->valuesOccupied._Find_next(e)) {
//				idx.set(e); //copy
//			}
//			idx.reset(0); //exclude the common edge from the filter
//			bitMap b(validCandidates);
//			b.hasNoneOf(matrix->maps, idx); //index of compatible nodes
//			b &= matrix->maps[0]; //exclude nodes not joint to edge 0
//			size_t deb = 0;
//			for(size_t n2 = b.next(n1); (!gExiting) && n2 != b.size(); n2 = b.next(n2)) {
//				partialEgraph pp(p);
//				if(pp.attachNode(*topNodes[n2])) {
//					deb++;
//					//pp.attachBestNodeLargestFirst(b);
//				}
//			}
//		}
		delete matrix;
		matrix = NULL;
		topNodes.clear();
//		for(detachedNodes::idxByDeviation_t::const_iterator n1 = db.nodesList.idxByDeviation.begin(); (!gExiting) && n1 != last; n1++) {
//			if(n1->second->valuesOccupied[0] == 0) continue; //hasn't the edge we are searching for
//			partialEgraph p(db.egraphSize);
//			p.attachNode(*n1->second);
//			for(detachedNodes::idxByDeviation_t::const_iterator n2 = std::next(n1); (!gExiting) && n2 != last; n2++) {
//				if(n2->second->valuesOccupied[0] == 0) continue; //hasn't the edge we are searching for
//				partialEgraph pp(p);
//				if(!pp.attachNode(*n2->second)) continue; //has more common edges than valuesOccupied[0]
//				// pp contains 2 compatible nodes joint by edge 0
//				// attach everything possible to them
//				pp.attachBestNodeLargestFirst(maxChildren);
//			}
//		}
	}
};
approxEnergy_t partialEgraph::maxNodeDeviation;
std::vector<const detachedNode*> partialEgraph::topNodes;
bitMaps* partialEgraph::matrix = NULL;

struct partialGraph {
	struct edgeIndexes_t {
		bitMaps* edgeNodes; //indexes
		std::vector<const detachedNode*>* nodes; //pointers to nodes included in the indexes
	};
	struct node_t {
		const detachedNode* node; //pointer to the node in db
		edgeIndexes_t edgeIndexes; //all nodes and their indexes by edge
		bitMap* validNodes; // valid for next steps
		bitMap* validEdgeNodes; //scan this index
		edgesInEgraphBM newSingleConnectedEdges; //introduced after placement of the node on this step
		edgesInEgraphBM newDoubleConnectedEdges;
		edgesInEgraphBM allSingleConnectedEdges; //accumulated, after the placement of the node on this step
		edgesInEgraphBM allDoubleConnectedEdges;
		edgesInEgraphBM edgesWithoutNodes; //no one of the (filtered) nodes has this edge so it is postponed to be completed with the final, yet unknown, good node(s)
	};
	static const size_t consolidateAfter = 3; //3; //after placing nodes 0, 1 and 2, consolidate the lists (nodes and indexes) and continue in parallel
	//static const size_t consolidateAfter = 20; //2; //after placing nodes 0, 1 and 2, consolidate the lists (nodes and indexes) and continue in parallel
	node_t nodes[28];
	bool enableConsolidation = false;
	//bool enableShuffling = false;
	partialGraph() {}
	//partialGraph(const partialGraph& old) : nodes(old.nodes) {} //used by the next constructor
	partialGraph(const partialGraph& old, const size_t curNodeDepth) :
			nodes(old.nodes),
			enableConsolidation(old.enableConsolidation)//,
			//enableShuffling(old.enableShuffling)
	{ //used to clone and continue in parallel
		//copy pointers content for the current
		nodes[curNodeDepth].validNodes = new bitMap(*old.nodes[curNodeDepth].validNodes);
		nodes[curNodeDepth].validEdgeNodes = new bitMap(*old.nodes[curNodeDepth].validEdgeNodes);
		//create empty pointers content for the rest
		const size_t cNumNodes = nodes[curNodeDepth].edgeIndexes.nodes->size();
		size_t maxNodeToInit = db.egraphSize - 2;
		if(enableConsolidation && 1 <= consolidateAfter) {
			maxNodeToInit = consolidateAfter;
		}
		for(size_t n = curNodeDepth + 1; n <= maxNodeToInit; n++) {
			nodes[n].validNodes = new bitMap(cNumNodes);
			nodes[n].validEdgeNodes = new bitMap(cNumNodes);
		}
	}
	void clean(size_t curNodeDepth) {
		//delete contents of current and rest pointers
		size_t maxNodeToInit = db.egraphSize - 2;
		if(enableConsolidation && 1 <= consolidateAfter) {
			maxNodeToInit = consolidateAfter;
		}
		for(size_t n = curNodeDepth; n <= maxNodeToInit; n++) {
			delete nodes[n].validNodes;
			delete nodes[n].validEdgeNodes;
		}
	}
	bool hasEmptiedEdges(size_t nodeNumber) const { //relatively fast forward search for dead branches
		//todo: may we search in free edges for 2 occurences, and in partially connected for 1 occurence?
		edgesInEgraphBM incomplete(this->nodes[nodeNumber].allDoubleConnectedEdges); //don't check these
		//incomplete |= this->nodes[nodeNumber].allSingleConnectedEdges; //these will be checked soon later when selecting the next edge
		incomplete.flip();
		incomplete &= allEdgesPerSizeBM[db.egraphSize];
		for(size_t e = incomplete._Find_first(); e != incomplete.size(); e = incomplete._Find_next(e)) {
			if(nodes[nodeNumber].validNodes->clearsAll(this->nodes[nodeNumber].edgeIndexes.edgeNodes->maps[e]))
				return true; //cancel on first empty edge, assuming we know all good nodes
		}
		return false;
	}
//	bool hasEmptiedDisjointPairs(size_t nodeNumber) const { //relatively fast forward search for dead branches
//		//at initial stages it is possible the current configuration to be dead due to a missing
//		//pair for some untouched edge
//		//check whether each untouched edge has at least one survived node pair
//		edgesInEgraphBM virgins(this->nodes[nodeNumber].allDoubleConnectedEdges); //skip these
//		virgins |= this->nodes[nodeNumber].allSingleConnectedEdges; //skip these too
//		virgins.flip();
//		virgins &= allEdgesPerSizeBM[db.egraphSize]; //process these
//		bitMap curEdgeValidNodes(nodes[nodeNumber].validNodes->size());
//		for(size_t e = virgins._Find_first(); e != virgins.size(); e = virgins._Find_next(e)) {
//			curEdgeValidNodes = *nodes[nodeNumber].validNodes; //all valid nodes
//			curEdgeValidNodes &= this->nodes[nodeNumber].edgeIndexes.edgeNodes->maps[e]; //valid nodes having edge e
//			for(size_t n0 = curEdgeValidNodes.first(); n0 != curEdgeValidNodes.size(); n0 = curEdgeValidNodes.next(n0)) {
//				for(size_t n1 = curEdgeValidNodes.next(n0); n1 != curEdgeValidNodes.size(); n1 = curEdgeValidNodes.next(n1)) {
//					edgesInEgraphBM intersection(this->nodes[nodeNumber].edgeIndexes.nodes->at(n0)->valuesOccupied);
//					intersection &= this->nodes[nodeNumber].edgeIndexes.nodes->at(n1)->valuesOccupied;
//					intersection.reset(e);
//					if(intersection.none()) goto nextVirgin;
//				}
//			}
//			return true;
//			nextVirgin:
//			;
//		}
//		return false;
//	}
	void BuildInitialEdgeIndexes(bool useWeakNodeFilter = false, size_t reduceFactor = 1, bool shuffle = true) {
		//enableConsolidation = true;
		//truncate the search space to nodes having deviation <= some maxNodeDeviation
		approxEnergy_t maxNodeDeviation;
		if(useWeakNodeFilter) {
			maxNodeDeviation = db.maxNodeDeviationForBetter(); //use the best egraph in the db
		}
		else {
			maxNodeDeviation = db.maxNodeDeviationForBest(); //hardcoded, external info
		}
		//copy the nodes of interest to the static vector topNodes and build the matrix
		detachedNodes::idxByDeviation_t::const_iterator last = db.nodesList.idxByDeviation.lower_bound(maxNodeDeviation);
		//detachedNodes::idxByDeviation_t::const_iterator last = db.nodesList.idxByDeviation.end(); //debug, unconditionally use all available nodes
		size_t nNodes = std::distance(db.nodesList.idxByDeviation.cbegin(), last) * (11 - reduceFactor) / 10;
		//nNodes /= 30; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< debug <<<<<<<<<<<<<<<
		std::cerr << "using top " << nNodes << " nodes\n";
		bitMaps* matrix = new bitMaps(numEdges[(db.egraphSize)], nNodes);
		std::vector<const detachedNode*>* topNodes = new std::vector<const detachedNode*>(nNodes);
		size_t n = 0;
		for(detachedNodes::idxByDeviation_t::const_iterator n1 = db.nodesList.idxByDeviation.begin(); n < nNodes && (!gExiting) && n1 != last; n1++, n++) {
			detachedNode* nn = n1->second;
			topNodes->at(n) = nn; //iterate from best to worst nodes
			//topNodes->at(nNodes - n - 1) = nn; //iterate from worst to best nodes
		}
		//if(shuffle) std::random_shuffle(topNodes->begin(), topNodes->end());
		//size_t nodesToShuffle = nNodes / 2000;
		//if(shuffle) std::random_shuffle(topNodes->begin(), topNodes->begin() + nodesToShuffle);
		if(shuffle) std::random_shuffle(topNodes->begin(), topNodes->begin() + 300);
		//if(shuffle) std::random_shuffle(topNodes->begin(), topNodes->begin() + 80);
		for(size_t n = 0; (!gExiting) && n < nNodes; n++) {
			const detachedNode* nn = (*topNodes)[n];
			for(size_t e = nn->valuesOccupied._Find_first(); e != nn->valuesOccupied.size(); e = nn->valuesOccupied._Find_next(e)) {
				matrix->maps[e].set(n); //transpose
			}
		}
		nodes[0].edgeIndexes.edgeNodes = matrix;
		nodes[0].edgeIndexes.nodes = topNodes;
		nodes[0].validNodes = new bitMap(nNodes);
		//nodes[0].validEdgeNodes = new bitMap(nodes[0].edgeIndexes.edgeNodes->maps[mostDeficiteEdge]); //will scan nodes having edge mostDeficiteEdge (i.e. the corresponding prime)
		nodes[0].validEdgeNodes = new bitMap(nNodes); //will scan nodes having edge mostDeficiteEdge (i.e. the corresponding prime)
		nodes[0].validNodes->set(); //all are valid but do we really will use this later ????
		size_t maxNodeToInit = db.egraphSize - 2;
		if(enableConsolidation && 1 <= consolidateAfter) {
			maxNodeToInit = consolidateAfter;
		}
		for(size_t n = 1; n <= maxNodeToInit; n++) {
			nodes[n].edgeIndexes = nodes[0].edgeIndexes;
			nodes[n].validNodes = new bitMap(nNodes);
			nodes[n].validEdgeNodes = new bitMap(nNodes);
		}
	}
	void ClearInitialEdgeIndexes() {
		size_t maxNodeToInit = db.egraphSize - 2;
		if(enableConsolidation && 1 <= consolidateAfter) {
			maxNodeToInit = consolidateAfter;
		}
		for(size_t n = 0; n <= maxNodeToInit; n++) {
			delete nodes[n].validEdgeNodes;
			delete nodes[n].validNodes;
		}
		delete nodes[0].edgeIndexes.nodes;
		delete nodes[0].edgeIndexes.edgeNodes;
	}
//	static void printNodes01statistics() { //prints pairs having most virgins left (for the worst case, i.e. having max over all pairs(min over all digits(virgins))
//		partialGraph g;
//		//build indexes for node 0
//		const size_t mostDeficiteEdge = 0;
//		g.enableConsolidation = true;
//		g.BuildInitialEdgeIndexes(false, 1, false);
//		*(g.nodes[0].validEdgeNodes) = g.nodes[0].edgeIndexes.edgeNodes->maps[mostDeficiteEdge];
//
//		const size_t maxListSize = 10000;
//		std::multimap<size_t, std::pair<size_t, size_t>, std::greater<size_t> > bestNodePairs;
//		//std::multimap<size_t, std::pair<size_t, size_t>> worstNodePairs;
//		//iterate edges
//
//		//we are starting with an empty graph and will iterate edge 0
//		std::cerr << "Processing " << g.nodes[0].validEdgeNodes->count() << " startup nodes for prime 2\n";
//
//		for(size_t n0 = g.nodes[0].validEdgeNodes->first(); (!gExiting) && n0 != g.nodes[0].validEdgeNodes->size(); n0 = g.nodes[0].validEdgeNodes->next(n0)) {
//			g.nodes[0].node = g.nodes[0].edgeIndexes.nodes->at(n0);
//			g.nodes[0].newSingleConnectedEdges = g.nodes[0].node->valuesOccupied;
//			g.nodes[0].newDoubleConnectedEdges.reset();
//			g.nodes[0].allSingleConnectedEdges = g.nodes[0].newSingleConnectedEdges;
//			g.nodes[0].allDoubleConnectedEdges.reset();
//
//			//filter the candidates for the next iteration
//			g.nodes[0].validNodes->set(); //all valid
//			size_t idx[28];
//			size_t i = 0;
//			for(size_t e = g.nodes[0].newSingleConnectedEdges._Find_first(); e != g.nodes[0].newSingleConnectedEdges.size(); e = g.nodes[0].newSingleConnectedEdges._Find_next(e)) {
//				idx[i++] = e;
//			}
//			idx[i] = (size_t)-1;
//			g.nodes[0].validNodes->hasExactlyOneOf(g.nodes[0].edgeIndexes.edgeNodes->maps, idx);
//			//now iterate the second node which closes mostDeficiteEdge
//			*g.nodes[1].validEdgeNodes = g.nodes[0].edgeIndexes.edgeNodes->maps[mostDeficiteEdge]; //will scan nodes having edge mostDeficiteEdge (i.e. the corresponding prime)
//			*g.nodes[1].validEdgeNodes &= *g.nodes[0].validNodes;
//			for(size_t n1 = g.nodes[1].validEdgeNodes->next(n0); (!gExiting) && n1 != g.nodes[1].validEdgeNodes->size(); n1 = g.nodes[1].validEdgeNodes->next(n1)) {
//				//count compatible nodes
//				g.nodes[1].node = (*g.nodes[1].edgeIndexes.nodes)[n1];
//				g.nodes[1].newDoubleConnectedEdges = g.nodes[1 - 1].allSingleConnectedEdges;
//				g.nodes[1].newDoubleConnectedEdges &= g.nodes[1].node->valuesOccupied;
//				g.nodes[1].allDoubleConnectedEdges = g.nodes[1 - 1].allDoubleConnectedEdges;
//				g.nodes[1].allDoubleConnectedEdges |= g.nodes[1].newDoubleConnectedEdges;
//				g.nodes[1].allSingleConnectedEdges = g.nodes[1 - 1].allSingleConnectedEdges;
//				g.nodes[1].allSingleConnectedEdges |= g.nodes[1].node->valuesOccupied;
//				edgesInEgraphBM tmp(g.nodes[1].allDoubleConnectedEdges);
//				tmp.flip();
//				g.nodes[1].allSingleConnectedEdges &= tmp;
//				g.nodes[1].newSingleConnectedEdges = g.nodes[1].allSingleConnectedEdges;
//				tmp = g.nodes[1 - 1].allSingleConnectedEdges;
//				tmp.flip();
//				g.nodes[1].newSingleConnectedEdges &= tmp;
//				*g.nodes[1].validNodes = *g.nodes[1 - 1].validNodes;
//				size_t idx[400];
//				size_t i = 0;
//				for(size_t e = g.nodes[1].newDoubleConnectedEdges._Find_first(); e != g.nodes[1].newDoubleConnectedEdges.size(); e = g.nodes[1].newDoubleConnectedEdges._Find_next(e)) {
//					idx[i++] = e;
//				}
//				idx[i] = (size_t)-1;
//				g.nodes[1].validNodes->hasNoneOf(g.nodes[1].edgeIndexes.edgeNodes->maps, idx);
//				i = 0;
//				for(size_t e = g.nodes[1].newSingleConnectedEdges._Find_first(); e != g.nodes[1].newSingleConnectedEdges.size(); e = g.nodes[1].newSingleConnectedEdges._Find_next(e)) {
//					idx[i++] = e;
//				}
//				idx[i] = (size_t)-1;
//				g.nodes[1].validNodes->hasExactlyOneOf(g.nodes[1].edgeIndexes.edgeNodes->maps, idx);
//
//
//
////				//find the least populated edge
////				size_t minCount = g.nodes[2 - 1].edgeIndexes.edgeNodes->numElements;
////				//size_t edge = 0; //secondary edge
////				for(size_t e = g.nodes[2 - 1].allSingleConnectedEdges._Find_first(); e != g.nodes[2 - 1].allSingleConnectedEdges.size(); e = g.nodes[2 - 1].allSingleConnectedEdges._Find_next(e)) {
////					size_t curCount = (minCount == g.nodes[2 - 1].edgeIndexes.edgeNodes->numElements
////							? g.nodes[2 - 1].validNodes->intersectionCount(g.nodes[2 - 1].edgeIndexes.edgeNodes->maps[e])
////							: g.nodes[2 - 1].validNodes->intersectionCount(g.nodes[2 - 1].edgeIndexes.edgeNodes->maps[e], minCount));
////					if(curCount == 0) return; //no candidates for this edge
////					if(minCount > curCount) {
////						minCount = curCount;
////						//edge = e;
////					}
////				}
//				//check also whether yet unused edges have valid nodes
//				edgesInEgraphBM virgins(g.nodes[2 - 1].allSingleConnectedEdges);
//				virgins |= g.nodes[2 - 1].allDoubleConnectedEdges;
//				virgins.flip();
//				virgins &= allEdgesPerSizeBM[db.egraphSize];
//				size_t minVirginsCount = g.nodes[2 - 1].edgeIndexes.edgeNodes->numElements;
//				//size_t totalVirgins = 0;
//				for(size_t e = virgins._Find_first(); e != virgins.size(); e = virgins._Find_next(e)) {
//					size_t curCount = g.nodes[2 - 1].validNodes->intersectionCount(g.nodes[2 - 1].edgeIndexes.edgeNodes->maps[e], minVirginsCount);
////					if(curCount < 2) return; //no candidates for this edge
//					if(minVirginsCount > curCount) minVirginsCount = curCount;
////					totalVirgins += curCount;
//					//find minimal number of node pairs for edge e, which are compatible to the fixed pair(n0,n1) but that would be too expensive
//				}
//				std::cout << minVirginsCount << "\t" << n0 << "\t" << n1 << "\n";
//				if(minVirginsCount > bestNodePairs.cend()->first) {
//					if(bestNodePairs.size() > maxListSize) {
//						bestNodePairs.erase(bestNodePairs.cend());
//					}
//					bestNodePairs.insert(std::make_pair(minVirginsCount, std::make_pair(n0, n1)));
//				}
////				if(minVirginsCount < worstNodePairs.cend()->first) {
////					if(worstNodePairs.size() > maxListSize) {
////						worstNodePairs.erase(worstNodePairs.cend());
////					}
////					worstNodePairs.insert(std::make_pair(minVirginsCount, std::make_pair(n0, n1)));
////				}
//			} //n1 loop
//		} //n0 loop
//		//clear the initial indexes
//		g.ClearInitialEdgeIndexes();
//
//		//dump the results
//		std::cerr << "max min(virgins)\n";
//		for(auto & kv : bestNodePairs) {
//			std::cerr << kv.first << "\t" << kv.second.first << "\t" << kv.second.second << "\n";
//		}
////		std::cerr << "min min(virgins)\n";
////		for(auto & kv : worstNodePairs) {
////			std::cerr << kv.first << "\t" << kv.second.first << "\t" << kv.second.second << "\n";
////		}
//	}
	static void printNodes01statistics() {
		partialGraph g;
		//build indexes for node 0
		const size_t mostDeficiteEdge = 0;
		g.enableConsolidation = true;
		g.BuildInitialEdgeIndexes(false, 1, false);
		*(g.nodes[0].validEdgeNodes) = g.nodes[0].edgeIndexes.edgeNodes->maps[mostDeficiteEdge];
		
		const size_t maxListSize = 10000;
		std::multimap<size_t, std::pair<size_t, size_t>, std::greater<size_t> > bestNodePairs;
		//std::multimap<size_t, std::pair<size_t, size_t>> worstNodePairs;
		//iterate edges

		//we are starting with an empty graph and will iterate edge 0
		std::cerr << "Processing " << g.nodes[0].validEdgeNodes->count() << " startup nodes for prime 2\n";

		for(size_t n0 = g.nodes[0].validEdgeNodes->first(); (!gExiting) && n0 != g.nodes[0].validEdgeNodes->size(); n0 = g.nodes[0].validEdgeNodes->next(n0)) {
			g.nodes[0].node = g.nodes[0].edgeIndexes.nodes->at(n0);
			g.nodes[0].newSingleConnectedEdges = g.nodes[0].node->valuesOccupied;
			g.nodes[0].newDoubleConnectedEdges.reset();
			g.nodes[0].allSingleConnectedEdges = g.nodes[0].newSingleConnectedEdges;
			g.nodes[0].allDoubleConnectedEdges.reset();

			//filter the candidates for the next iteration
			g.nodes[0].validNodes->set(); //all valid
			size_t idx[28];
			size_t i = 0;
			for(size_t e = g.nodes[0].newSingleConnectedEdges._Find_first(); e != g.nodes[0].newSingleConnectedEdges.size(); e = g.nodes[0].newSingleConnectedEdges._Find_next(e)) {
				idx[i++] = e;
			}
			idx[i] = (size_t)-1;
			g.nodes[0].validNodes->hasExactlyOneOf(g.nodes[0].edgeIndexes.edgeNodes->maps, idx);
			//now iterate the second node which closes mostDeficiteEdge
			*g.nodes[1].validEdgeNodes = g.nodes[0].edgeIndexes.edgeNodes->maps[mostDeficiteEdge]; //will scan nodes having edge mostDeficiteEdge (i.e. the corresponding prime)
			*g.nodes[1].validEdgeNodes &= *g.nodes[0].validNodes;
			for(size_t n1 = g.nodes[1].validEdgeNodes->next(n0); (!gExiting) && n1 != g.nodes[1].validEdgeNodes->size(); n1 = g.nodes[1].validEdgeNodes->next(n1)) {
				//count compatible nodes
				g.nodes[1].node = (*g.nodes[1].edgeIndexes.nodes)[n1];
				g.nodes[1].newDoubleConnectedEdges = g.nodes[1 - 1].allSingleConnectedEdges;
				g.nodes[1].newDoubleConnectedEdges &= g.nodes[1].node->valuesOccupied;
				g.nodes[1].allDoubleConnectedEdges = g.nodes[1 - 1].allDoubleConnectedEdges;
				g.nodes[1].allDoubleConnectedEdges |= g.nodes[1].newDoubleConnectedEdges;
				g.nodes[1].allSingleConnectedEdges = g.nodes[1 - 1].allSingleConnectedEdges;
				g.nodes[1].allSingleConnectedEdges |= g.nodes[1].node->valuesOccupied;
				edgesInEgraphBM tmp(g.nodes[1].allDoubleConnectedEdges);
				tmp.flip();
				g.nodes[1].allSingleConnectedEdges &= tmp;
				g.nodes[1].newSingleConnectedEdges = g.nodes[1].allSingleConnectedEdges;
				tmp = g.nodes[1 - 1].allSingleConnectedEdges;
				tmp.flip();
				g.nodes[1].newSingleConnectedEdges &= tmp;
				*g.nodes[1].validNodes = *g.nodes[1 - 1].validNodes;
				size_t idx[400];
				size_t i = 0;
				for(size_t e = g.nodes[1].newDoubleConnectedEdges._Find_first(); e != g.nodes[1].newDoubleConnectedEdges.size(); e = g.nodes[1].newDoubleConnectedEdges._Find_next(e)) {
					idx[i++] = e;
				}
				idx[i] = (size_t)-1;
				g.nodes[1].validNodes->hasNoneOf(g.nodes[1].edgeIndexes.edgeNodes->maps, idx);
				i = 0;
				for(size_t e = g.nodes[1].newSingleConnectedEdges._Find_first(); e != g.nodes[1].newSingleConnectedEdges.size(); e = g.nodes[1].newSingleConnectedEdges._Find_next(e)) {
					idx[i++] = e;
				}
				idx[i] = (size_t)-1;
				g.nodes[1].validNodes->hasExactlyOneOf(g.nodes[1].edgeIndexes.edgeNodes->maps, idx);
			
				
				
//				//find the least populated edge
//				size_t minCount = g.nodes[2 - 1].edgeIndexes.edgeNodes->numElements;
//				//size_t edge = 0; //secondary edge
//				for(size_t e = g.nodes[2 - 1].allSingleConnectedEdges._Find_first(); e != g.nodes[2 - 1].allSingleConnectedEdges.size(); e = g.nodes[2 - 1].allSingleConnectedEdges._Find_next(e)) {
//					size_t curCount = (minCount == g.nodes[2 - 1].edgeIndexes.edgeNodes->numElements
//							? g.nodes[2 - 1].validNodes->intersectionCount(g.nodes[2 - 1].edgeIndexes.edgeNodes->maps[e])
//							: g.nodes[2 - 1].validNodes->intersectionCount(g.nodes[2 - 1].edgeIndexes.edgeNodes->maps[e], minCount));
//					if(curCount == 0) return; //no candidates for this edge
//					if(minCount > curCount) {
//						minCount = curCount;
//						//edge = e;
//					}
//				}
				//check also whether yet unused edges have valid nodes
				edgesInEgraphBM virgins(g.nodes[2 - 1].allSingleConnectedEdges);
				virgins |= g.nodes[2 - 1].allDoubleConnectedEdges;
				virgins.flip();
				virgins &= allEdgesPerSizeBM[db.egraphSize];
				size_t minVirginsCount = g.nodes[2 - 1].edgeIndexes.edgeNodes->numElements;
				//size_t totalVirgins = 0;
				for(size_t e = virgins._Find_first(); e != virgins.size(); e = virgins._Find_next(e)) {
					size_t curCount = g.nodes[2 - 1].validNodes->intersectionCount(g.nodes[2 - 1].edgeIndexes.edgeNodes->maps[e], minVirginsCount);
//					if(curCount < 2) return; //no candidates for this edge
					if(minVirginsCount > curCount) minVirginsCount = curCount;
//					totalVirgins += curCount;
					//find minimal number of node pairs for edge e, which are compatible to the fixed pair(n0,n1) but that would be too expensive
				}
				std::cout << minVirginsCount << "\t" << n0 << "\t" << n1 << "\n";
				if(minVirginsCount > bestNodePairs.cend()->first) {
					if(bestNodePairs.size() > maxListSize) {
						bestNodePairs.erase(bestNodePairs.cend());
					}
					bestNodePairs.insert(std::make_pair(minVirginsCount, std::make_pair(n0, n1)));
				}
//				if(minVirginsCount < worstNodePairs.cend()->first) {
//					if(worstNodePairs.size() > maxListSize) {
//						worstNodePairs.erase(worstNodePairs.cend());
//					}
//					worstNodePairs.insert(std::make_pair(minVirginsCount, std::make_pair(n0, n1)));
//				}
			} //n1 loop
		} //n0 loop
		//clear the initial indexes
		g.ClearInitialEdgeIndexes();
		
		//dump the results
		std::cerr << "max min(virgins)\n";
		for(auto & kv : bestNodePairs) {
			std::cerr << kv.first << "\t" << kv.second.first << "\t" << kv.second.second << "\n";
		}
//		std::cerr << "min min(virgins)\n";
//		for(auto & kv : worstNodePairs) {
//			std::cerr << kv.first << "\t" << kv.second.first << "\t" << kv.second.second << "\n";
//		}
	}	void processNodes01andGo(const size_t mostDeficiteEdge) {
		*(nodes[0].validEdgeNodes) = nodes[0].edgeIndexes.edgeNodes->maps[mostDeficiteEdge];
		//we are starting with an empty graph and will iterate edge mostDeficiteEdge
		std::cerr << "Processing " << nodes[0].validEdgeNodes->count() << " startup nodes(" << mostDeficiteEdge << ")\n";

//		std::vector<size_t> validEdgeNodes0;
//		for(size_t n0 = nodes[0].validEdgeNodes->first(); (!gExiting) && n0 != nodes[0].validEdgeNodes->size(); n0 = nodes[0].validEdgeNodes->next(n0)) {
//			validEdgeNodes0.push_back(n0);
//		}
//		std::random_shuffle(validEdgeNodes0.begin(), validEdgeNodes0.end());
//		for(std::vector<size_t>::const_iterator n0 = validEdgeNodes0.begin(); (!gExiting) && n0 != validEdgeNodes0.end(); n0++) {
		//int curN0 = 0;
		for(size_t n0 = nodes[0].validEdgeNodes->first(); (!gExiting) && n0 != nodes[0].validEdgeNodes->size(); n0 = nodes[0].validEdgeNodes->next(n0)) {
			//if(!isInBestGraph(0, n0)) continue; //debug
			nodes[0].node = nodes[0].edgeIndexes.nodes->at(n0);
			nodes[0].newSingleConnectedEdges = nodes[0].node->valuesOccupied;
			nodes[0].newDoubleConnectedEdges.reset();
			nodes[0].allSingleConnectedEdges = nodes[0].newSingleConnectedEdges;
			nodes[0].allDoubleConnectedEdges.reset();

			//filter the candidates for the next iteration
			nodes[0].validNodes->set(); //all valid
			size_t idx[28];
			size_t i = 0;
			for(size_t e = nodes[0].newSingleConnectedEdges._Find_first(); e != nodes[0].newSingleConnectedEdges.size(); e = nodes[0].newSingleConnectedEdges._Find_next(e)) {
				idx[i++] = e;
			}
			idx[i] = (size_t)-1;
			nodes[0].validNodes->hasExactlyOneOf(nodes[0].edgeIndexes.edgeNodes->maps, idx);
			//now iterate the second node which closes mostDeficiteEdge
			*nodes[1].validEdgeNodes = nodes[0].edgeIndexes.edgeNodes->maps[mostDeficiteEdge]; //will scan nodes having edge mostDeficiteEdge (i.e. the corresponding prime)
			*nodes[1].validEdgeNodes &= *nodes[0].validNodes;
			//serial code
			//for(size_t n1 = nodes[1].validEdgeNodes->next(n0); (!gExiting) && n1 != nodes[1].validEdgeNodes->size(); n1 = nodes[1].validEdgeNodes->next(n1)) {
			//	addNode(1, n1);
			//}
			//parallel code
			{
				const size_t nodeNumber = 1;
				//compose a bitmap of the valid nodes having this edge
				std::vector<size_t> nodesVector;
				//for each valid node having selected edge
				//int allN1 = 0;
				for(size_t n1 = nodes[nodeNumber].validEdgeNodes->first(); n1 != nodes[nodeNumber].validEdgeNodes->size(); n1 = nodes[nodeNumber].validEdgeNodes->next(n1)) {
					//allN1++;
					//if(std::abs(nodes[0].node->disbalance + nodes[0].edgeIndexes.nodes->at(n1)->disbalance) > db.nodesList.worstDeviation / (db.egraphSize * 1.5L)) continue; //process only balanced pairs
					nodesVector.push_back(n1);
				}
				//std::cerr << "\nn0(" << curN0 << ")\tn1 passed " << nodesVector.size() << " out of " << allN1 << "\n";
#ifdef _OPENMP
#pragma omp parallel for schedule(dynamic, 1) default(none) shared(gExiting, nodesVector, db, std::cerr)
				for(size_t n = 0; n < nodesVector.size(); n++) {
					if(gExiting) continue;
//					if(db.graphAgeTimeout()) {
//						continue; //advance to the next outer loop after hitting a fruitless branch
//					}
					partialGraph p(*this, nodeNumber);
					p.addNode(nodeNumber, nodesVector[n]);
					p.clean(nodeNumber);
				}
#else
				for(size_t n = 0; n < nodesVector.size(); n++) {
					if(gExiting) break;
//					if(db.graphAgeTimeout()) {
//						break; //advance to the next outer loop after hitting a fruitless branch
//					}
					addNode(nodeNumber, nodesVector[n]);
				}
#endif //_OPENMP
//				std::cerr << "R";
//				db.resetGraphAge();
			}
			//curN0++;
		}
		//if(db.graphAgeTimeout()) return; //do full reset
		std::cerr << "\n" << rejectedVirgins << " rejected/" << passedVirgins << " passed virgins, " << rejectedConnected << " rejected semi-connected\n"; //debug
	}
//	void processNode0() {
//		//we are starting with an empty graph and will iterate nodes by increasing disbalance
//		std::cerr << "Processing " << nodes[0].edgeIndexes.nodes->size() << " startup nodes\n";
//		for(size_t n0 = 0; (!gExiting) && n0 != nodes[0].edgeIndexes.nodes->size(); n0 ++) {
//			nodes[0].node = (*nodes[0].edgeIndexes.nodes)[n0];
//			nodes[0].newSingleConnectedEdges = nodes[0].node->valuesOccupied;
//			nodes[0].newDoubleConnectedEdges.reset();
//			nodes[0].allSingleConnectedEdges = nodes[0].newSingleConnectedEdges;
//			nodes[0].allDoubleConnectedEdges.reset();
//
//			//filter the candidates for the next iteration
//			nodes[0].validNodes->set(); //all valid
//			size_t idx[28];
//			size_t i = 0;
//			for(size_t e = nodes[0].newSingleConnectedEdges._Find_first(); e != nodes[0].newSingleConnectedEdges.size(); e = nodes[0].newSingleConnectedEdges._Find_next(e)) {
//				idx[i++] = e;
//			}
//			idx[i] = (size_t)-1;
//			nodes[0].validNodes->hasExactlyOneOf(nodes[0].edgeIndexes.edgeNodes->maps, idx);
//			for(size_t n1 = nodes[0].validNodes->next(n0); (!gExiting) && n1 != nodes[0].validNodes->size(); n1 = nodes[0].validNodes->next(n1)) {
//				addNode(1, n1);
//			}
//			exit(1); //debug
//		}
//	}
//	void scanFirstEdge(const size_t nodeNumber) {
//		//find smallest partially connected edge and iterate nodes containing it
//		size_t edge = nodes[nodeNumber - 1].allSingleConnectedEdges._Find_first();
//		//compose a bitmap of the valid nodes having this edge
//		*nodes[nodeNumber].validEdgeNodes = nodes[nodeNumber].edgeIndexes.edgeNodes->maps[edge]; //will scan nodes having this edge
//		*nodes[nodeNumber].validEdgeNodes &= *nodes[nodeNumber - 1].validNodes; //skip nodes previously determined as incompatible
//		//for each valid node having selected edge
//		for(size_t nodePositionInIndex = nodes[nodeNumber].validEdgeNodes->first(); (!gExiting) && nodePositionInIndex != nodes[nodeNumber].validEdgeNodes->size(); nodePositionInIndex = nodes[nodeNumber].validEdgeNodes->next(nodePositionInIndex)) {
//			//if(nodeNumber == 3 && std::rand() % 10 != 0) continue; //debug
//			addNode(nodeNumber, nodePositionInIndex);
//		}
//
////		//exit on return from first 3-node back to 2-node subgraph
////		if(nodeNumber == 2)
////			exit(1); //debug
//	}
	
	size_t rejectedVirgins = 0;
	size_t passedVirgins = 0;
	size_t rejectedConnected = 0;

	size_t findLeastPopulatedSingleConnectedEdge(const size_t nodeNumber, size_t* foundMinCount = NULL) {
		//find the least populated edge
		const node_t& prevNode = nodes[nodeNumber - 1];
		size_t minCount = prevNode.edgeIndexes.edgeNodes->numElements;
		size_t edge = 0; //secondary edge
		//nodes[nodeNumber].edgesWithoutNodes = prevNode.edgesWithoutNodes;
		edgesInEgraphBM edgesToCheck(prevNode.edgesWithoutNodes);
		edgesToCheck.flip();
		edgesToCheck &= prevNode.allSingleConnectedEdges;
		for(size_t e = edgesToCheck._Find_first(); e != edgesToCheck.size(); e = edgesToCheck._Find_next(e)) {
			size_t curCount;
			if(minCount < 3) { //if minCount is already reduced to 1 or 2 then replace the costly check for other 1 or 2 to the cheaper check for 0 or > 0
				curCount = prevNode.validNodes->clearsAll(prevNode.edgeIndexes.edgeNodes->maps[e]) ? 0 : 3;
			}
			else if(minCount == prevNode.edgeIndexes.edgeNodes->numElements) {
				curCount = prevNode.validNodes->intersectionCount(prevNode.edgeIndexes.edgeNodes->maps[e]);
			}
			else {
				curCount = prevNode.validNodes->intersectionCount(prevNode.edgeIndexes.edgeNodes->maps[e], minCount);
			}
			if(curCount == 0) {
				 //return -1; //no candidates for this edge
				nodes[nodeNumber].edgesWithoutNodes.set(e); //add to the postponed edges
				if(nodes[nodeNumber].edgesWithoutNodes.count() > maxSolitaries[db.egraphSize]) {
					//std::cerr << "[" << nodeNumber << "," << nodes[nodeNumber].edgesWithoutNodes.count() << "]";
					return -1; //2 unknown nodes aren't sufficient to complete the graph
				}
				continue; //don't set minCount and edge to 0, invalid
			}
			if(minCount > curCount) {
				minCount = curCount;
				edge = e;
				//if(minCount < 5) break; //experimental dirty hack!!!
			}
		}
		if(foundMinCount != NULL) *foundMinCount = minCount;
		return edge;
	}
	void scanLeastPopulatedEdge(const size_t nodeNumber) {
		nodes[nodeNumber].edgesWithoutNodes = nodes[nodeNumber - 1].edgesWithoutNodes;
		size_t edge;
		if(true) {
		//if(nodeNumber < db.egraphSize - 5) {
		//if(nodeNumber < db.egraphSize - 6) { //measured for 13 j1 -2 and is slower than "always" and "-5" which are almost equal
			//check whether yet unused edges have valid nodes
	//		size_t minVirginsCount = nodes[nodeNumber - 1].edgeIndexes.edgeNodes->numElements;
	//		size_t totalVirgins = 0;
			edgesInEgraphBM virgins(nodes[nodeNumber - 1].allSingleConnectedEdges);
			virgins |= nodes[nodeNumber - 1].allDoubleConnectedEdges;
			//virgins |= nodes[nodeNumber].edgesWithoutNodes; //todo: this breaks the minVirginsCount logic just below
			virgins.flip();
			virgins &= allEdgesPerSizeBM[db.egraphSize];
			unsigned short virginsMissed = 0;
			for(size_t e = virgins._Find_first(); e != virgins.size(); e = virgins._Find_next(e)) {
				if(nodes[nodeNumber - 1].validNodes->clearsAll(this->nodes[nodeNumber - 1].edgeIndexes.edgeNodes->maps[e])) {
					//return; //cancel on first empty edge, assuming we know all good nodes
					virginsMissed++;
					if(virginsMissed > maxLostVirgins[db.egraphSize]) {
						//std::cerr << "v";
						return; //a secondary virgin left the kingdom
					}
//					nodes[nodeNumber].edgesWithoutNodes.set(e);
//					if(nodes[nodeNumber].edgesWithoutNodes.count() >= db.egraphSize * 2 - 2) { //todo: actually if > 2 virgins are dead we can't compensate that with 2 unknown nodes
//						return; //too many empty edges
//					}
				}
			}
			//find the least populated edge
			size_t minConnectedEdgeCount = 0;
			edge = findLeastPopulatedSingleConnectedEdge(nodeNumber, &minConnectedEdgeCount);
			if(edge == (size_t)-1) {
				//std::cerr << "s"; //too much solitaries
				return;
			}
//			if(enableConsolidation && nodeNumber == 3) {
//				if(minConnectedEdgeCount < virginsThreshold[db.egraphSize][2]) {
//					rejectedConnected++;
//					return;
//				}
//				size_t minVirginsCount = nodes[nodeNumber - 1].edgeIndexes.edgeNodes->numElements;
//				size_t totalVirgins = 0;
//				for(size_t e = virgins._Find_first(); e != virgins.size(); e = virgins._Find_next(e)) {
//					size_t curCount = nodes[nodeNumber - 1].validNodes->intersectionCount(nodes[nodeNumber - 1].edgeIndexes.edgeNodes->maps[e]);
//					if(curCount < 2) return; //no candidates for this edge
//					if(minVirginsCount > curCount) minVirginsCount = curCount;
//					totalVirgins += curCount;
//				}
//				//std::cerr << minVirginsCount << "\t" << totalVirgins << "\t" << minConnectedEdgeCount << "\n";
//				//return;
//				if(minVirginsCount < virginsThreshold[db.egraphSize][0] || totalVirgins < virginsThreshold[db.egraphSize][1]) { //
//					rejectedVirgins++;
//					return;
//				}
//				else {
//					passedVirgins++;
//				}
//			}
		}
		else {
			edgesInEgraphBM edgesToCheck(nodes[nodeNumber].edgesWithoutNodes);
			edgesToCheck.flip();
			edgesToCheck &= nodes[nodeNumber - 1].allSingleConnectedEdges;
			edge = edgesToCheck._Find_first();
			while(edge < edgesToCheck.size()) {
				if(!nodes[nodeNumber - 1].validNodes->clearsAll(this->nodes[nodeNumber - 1].edgeIndexes.edgeNodes->maps[edge]))
					goto foundNode;
				nodes[nodeNumber].edgesWithoutNodes.set(edge);
				//if(nodes[nodeNumber].edgesWithoutNodes.count() >= db.egraphSize * 2 - 2) {
				if(nodes[nodeNumber].edgesWithoutNodes.count() > maxSolitaries[db.egraphSize]) {
					return; //too many empty edges
				}
				edge = edgesToCheck._Find_next(edge);
			}
			return; //all edges haven't valid nodes to continue with
		}
		foundNode:
		*nodes[nodeNumber].validEdgeNodes = nodes[nodeNumber].edgeIndexes.edgeNodes->maps[edge]; //will scan nodes having this edge
		*nodes[nodeNumber].validEdgeNodes &= *nodes[nodeNumber - 1].validNodes; //skip nodes previously determined as incompatible
		//for each valid node having selected edge
		for(size_t nodePositionInIndex = nodes[nodeNumber].validEdgeNodes->first(); (!gExiting) && nodePositionInIndex != nodes[nodeNumber].validEdgeNodes->size(); nodePositionInIndex = nodes[nodeNumber].validEdgeNodes->next(nodePositionInIndex)) {
			//if(nodeNumber == 3 && std::rand() % 10 != 0) continue; //desperate: cover smaller pieces but from more area (in random manner)
//			if(nodeNumber == 3) { //yet another desperate attempt for improvement, makes sense when nodes are iterated in decreasing deviation order
//				approxEnergy_t curDeviation = nodes[0].node->disbalance + nodes[1].node->disbalance + nodes[2].node->disbalance;
//				if(std::abs(nodes[3].edgeIndexes.nodes->at(nodePositionInIndex)->disbalance + curDeviation) * 80 > db.maxNodeDeviationForBest()) {
//				//if(std::abs(nodes[3].edgeIndexes.nodes->at(nodePositionInIndex)->disbalance + curDeviation) > nodes[0].node->disbalance) {
//					//std::cerr << "w"; //debug
//					continue; //leave only sufficiently balanced tuples
//				}
//			}
//			//std::cerr << "S"; //debug
			addNode(nodeNumber, nodePositionInIndex);
		}
////		//exit on return from first 3-node back to 2-node subgraph
//		if(nodeNumber == 2) {
////			exit(1); //debug
//			std::cerr << "T"; //debug
//		}
	}

	void consolidateAndScanLeastPopulatedEdge(const size_t nodeNumber) {
		////He doesn't like loosers
		//if(std::rand() & 15) return; //ignore 15/16 of the nodes

		//if(db.graphAgeTimeout()) return; //advance to the next outer loop after hitting a fruitless branch

		//consolidate the indexes
		//at a stage where most of the nodes are invalidated it is better to compress the survivors
		//the nodes to remain have bit set in this->nodes[nodeNumber].validNodes
		size_t cNumNodes = nodes[nodeNumber - 1].validNodes->count();
		nodes[nodeNumber].edgeIndexes.edgeNodes = new bitMaps(numEdges[db.egraphSize], cNumNodes);
		std::vector<const detachedNode*> cTopNodes(cNumNodes);
		size_t newIndex = 0;
		for(size_t n1 = nodes[nodeNumber - 1].validNodes->first(); n1 != nodes[nodeNumber - 1].validNodes->size(); n1 = nodes[nodeNumber - 1].validNodes->next(n1)) {
			cTopNodes[newIndex] = nodes[nodeNumber - 1].edgeIndexes.nodes->at(n1);
			for(size_t e = nodes[nodeNumber - 1].edgeIndexes.nodes->at(n1)->valuesOccupied._Find_first(); e < (*nodes[nodeNumber - 1].edgeIndexes.nodes)[n1]->valuesOccupied.size(); e = (*nodes[nodeNumber - 1].edgeIndexes.nodes)[n1]->valuesOccupied._Find_next(e)) {
				nodes[nodeNumber].edgeIndexes.edgeNodes->maps[e].set(newIndex);
			}
			newIndex++;
		}
		nodes[nodeNumber].edgeIndexes.nodes = &cTopNodes;
		nodes[nodeNumber].validNodes = new bitMap(cNumNodes);
		nodes[nodeNumber].validEdgeNodes = new bitMap(cNumNodes);
		nodes[nodeNumber].validNodes->set(); //all are valid
		for(size_t n = nodeNumber + 1; n < db.egraphSize; n++) {
			nodes[n].edgeIndexes = nodes[nodeNumber].edgeIndexes; //copy pointers
			nodes[n].validNodes = new bitMap(cNumNodes);
			nodes[n].validEdgeNodes = new bitMap(cNumNodes);
		}
		//consolidation is done
		//find smallest partially connected edge and iterate nodes containing it
		nodes[nodeNumber].edgesWithoutNodes = nodes[nodeNumber - 1].edgesWithoutNodes;
		size_t edge = findLeastPopulatedSingleConnectedEdge(nodeNumber);
		if(edge == (size_t)-1) goto cleanup; //no candidates lrft for this edge
		//if(minCount < 130) goto cleanup; //skip unpromising startup combinations
		{
			//compose a bitmap of the valid nodes having this edge
			*nodes[nodeNumber].validEdgeNodes = nodes[nodeNumber].edgeIndexes.edgeNodes->maps[edge]; //all nodes in the index are valid after the consolidation
			std::vector<size_t> nodesVector;
			//for each valid node having selected edge
			for(size_t n1 = nodes[nodeNumber].validEdgeNodes->first(); n1 != nodes[nodeNumber].validEdgeNodes->size(); n1 = nodes[nodeNumber].validEdgeNodes->next(n1)) {
				nodesVector.push_back(n1);
			}
			for(size_t n = 0; n < nodesVector.size(); n++) {
				if(gExiting) break;
				addNode(nodeNumber, nodesVector[n]);
			}
		}
		//cleanup
		cleanup:
		delete nodes[nodeNumber].edgeIndexes.edgeNodes;
		//delete nodes[nodeNumber].edgeIndexes.nodes; <<-- this is allocated in the stack of the current method call instance
		delete nodes[nodeNumber].validNodes;
		delete nodes[nodeNumber].validEdgeNodes;
		for(size_t n = nodeNumber + 1; n < db.egraphSize; n++) {
			delete nodes[n].validNodes;
			delete nodes[n].validEdgeNodes;
		}
		//exit(1); //debug
	}
//	bool isInBestGraph(const size_t nodeNumber, const size_t nodePositionInIndex) {
//		return true;
////		if(nodeNumber == 0) {
////			//if(nodePositionInIndex == 16644) return true; //A) 3893 virgins
////			//if(nodePositionInIndex == 12745) return true; //B) 2888 virgins
////			//if(nodePositionInIndex == 17403) return true; //C) 3893 virgins
////			if(nodePositionInIndex == 175888) return true; //D) 3906 virgins
////			return false;
////		}
////		if(nodeNumber == 1) {
////			//if(nodePositionInIndex == 26202) return true; //A)
////			//if(nodePositionInIndex == 205916) return true; //B)
////			//if(nodePositionInIndex == 161071) return true; //C)
////			if(nodePositionInIndex == 217602) return true; //D)
////			return false;
////		}
////		return true;
//
////		const detachedNode* thisNode = (*nodes[nodeNumber].edgeIndexes.nodes)[nodePositionInIndex];
////		//const compressedEgraph* bestGraph = db.idxApproxEnergy.cbegin()->second;
////		//const compressedEgraph* bestGraph = std::next(db.idxApproxEnergy.cbegin())->second;
////		//const compressedEgraph* bestGraph = std::next(std::next(db.idxApproxEnergy.cbegin()))->second;
////		//const compressedEgraph* bestGraph = std::next(std::next(std::next(db.idxApproxEnergy.cbegin())))->second;
////		//const compressedEgraph* bestGraph = std::next(std::next(std::next(std::next(db.idxApproxEnergy.cbegin()))))->second;
////		//const compressedEgraph* bestGraph = std::next(std::next(std::next(std::next(std::next(db.idxApproxEnergy.cbegin())))))->second;
////		const compressedEgraph* bestGraph = std::next(std::next(std::next(std::next(std::next(std::next(db.idxApproxEnergy.cbegin()))))))->second;
////		//const compressedEgraph* bestGraph = std::next(std::next(std::next(std::next(std::next(std::next(std::next(db.idxApproxEnergy.cbegin())))))))->second;
////		//const compressedEgraph* bestGraph = std::next(std::next(std::next(std::next(std::next(std::next(std::next(std::next(db.idxApproxEnergy.cbegin()))))))))->second;
////		//const compressedEgraph* bestGraph = std::next(std::next(std::next(std::next(std::next(std::next(std::next(std::next(std::next(db.idxApproxEnergy.cbegin())))))))))->second;
////		for(size_t gNodeIndex = 0; gNodeIndex < bestGraph->edges.size; gNodeIndex++) {
////			const detachedNode gNode(bestGraph->getDetachedNode(gNodeIndex));
////			if(thisNode->valuesOccupied == gNode.valuesOccupied) return true;
////		}
////		return false;
//	}
	void addNode(const size_t nodeNumber, const size_t nodePositionInIndex) {
		//debug
		//skip all but the nodes from the best known graph
		//if(!isInBestGraph(nodeNumber, nodePositionInIndex)) return;

		//if(db.graphAgeTimeout()) return; //advance to the next outer loop after hitting a fruitless branch
//		if(nodeNumber == 2) {
//			std::cerr << "T"; //debug
//		}

		nodes[nodeNumber].node = (*nodes[nodeNumber].edgeIndexes.nodes)[nodePositionInIndex];

		if(nodeNumber == bruteAfterNode[db.egraphSize]) { //experimental: do {-1,+1} immediately
			//std::cerr << "."; //let something move on the screen to see the rate of the hits
			//std::cerr << "(" << nodes[nodeNumber].edgesWithoutNodes.count() << ")"; //doesn't correlate with the success rate
//			{ //try the composed subgraph
//				partialEgraph p(db.egraphSize);
//				for(size_t n = 0; n <= nodeNumber; n++) {
//					if(!p.attachNode(*nodes[n].node)) {
//						std::cerr << "Bug!\n";
//					}
//				}
//				if(nodeNumber == db.egraphSize - 2) {
//					p.attachLastNode();
//				}
//				else {
//					p.expandEdges();
//				}
//			}
			{ //try the (composed subgraph - 1)
				for(size_t skipNode = 0; skipNode <= nodeNumber; skipNode++) {
					partialEgraph p(db.egraphSize);
					for(size_t n = 0; n <= nodeNumber; n++) {
						if(n == skipNode) continue;
						if(!p.attachNode(*nodes[n].node)) {
							std::cerr << "Bug!\n";
						}
					}
					if(nodeNumber == db.egraphSize - 1) { //one more node is removed, compare to -1 instead of -2
						p.attachLastNode();
					}
					else {
						p.expandEdges();
					}
				}
			}
			return;
		}
		nodes[nodeNumber].newDoubleConnectedEdges = nodes[nodeNumber - 1].allSingleConnectedEdges;
		nodes[nodeNumber].newDoubleConnectedEdges &= nodes[nodeNumber].node->valuesOccupied;
		nodes[nodeNumber].allDoubleConnectedEdges = nodes[nodeNumber - 1].allDoubleConnectedEdges;
		nodes[nodeNumber].allDoubleConnectedEdges |= nodes[nodeNumber].newDoubleConnectedEdges;
		nodes[nodeNumber].allSingleConnectedEdges = nodes[nodeNumber - 1].allSingleConnectedEdges;
		nodes[nodeNumber].allSingleConnectedEdges |= nodes[nodeNumber].node->valuesOccupied;
		edgesInEgraphBM tmp(nodes[nodeNumber].allDoubleConnectedEdges);
		tmp.flip();
		nodes[nodeNumber].allSingleConnectedEdges &= tmp;

		nodes[nodeNumber].newSingleConnectedEdges = nodes[nodeNumber].allSingleConnectedEdges;
		tmp = nodes[nodeNumber - 1].allSingleConnectedEdges;
		tmp.flip();
		nodes[nodeNumber].newSingleConnectedEdges &= tmp;
		//if(nodeNumber != switchToParallelAfter + 1) { //at consolidation is was already set to all ones, else would copy the larger old
		if(nodes[nodeNumber].validNodes->size() == nodes[nodeNumber - 1].validNodes->size()) { //at consolidation is was already set to all ones, else would copy the larger old
			*nodes[nodeNumber].validNodes = *nodes[nodeNumber - 1].validNodes;
		}
		else{
			nodes[nodeNumber].validNodes->set();
		}
		size_t idx[400];
		size_t i = 0;
		for(size_t e = nodes[nodeNumber].newDoubleConnectedEdges._Find_first(); e != nodes[nodeNumber].newDoubleConnectedEdges.size(); e = nodes[nodeNumber].newDoubleConnectedEdges._Find_next(e)) {
			idx[i++] = e;
		}
		idx[i] = (size_t)-1;
		nodes[nodeNumber].validNodes->hasNoneOf(nodes[nodeNumber].edgeIndexes.edgeNodes->maps, idx);
		i = 0;
		for(size_t e = nodes[nodeNumber].newSingleConnectedEdges._Find_first(); e != nodes[nodeNumber].newSingleConnectedEdges.size(); e = nodes[nodeNumber].newSingleConnectedEdges._Find_next(e)) {
			idx[i++] = e;
		}
		idx[i] = (size_t)-1;
		nodes[nodeNumber].validNodes->hasExactlyOneOf(nodes[nodeNumber].edgeIndexes.edgeNodes->maps, idx);
//		if(hasEmptiedEdges(nodeNumber))
//			return;
//		if(nodeNumber < 6 && hasEmptiedDisjointPairs(nodeNumber))
//			return;
		//recurse
//		if(nodeNumber == 2) {
//			std::cerr << "/";
//		}
		if(enableConsolidation && nodeNumber == consolidateAfter) {
			//std::cerr << "/";
			consolidateAndScanLeastPopulatedEdge(nodeNumber + 1);
		}
		else {
			scanLeastPopulatedEdge(nodeNumber + 1);
			//scanFirstEdge(nodeNumber + 1);
		}
	}
	static void iterate(size_t reduceFactor, bool useWeakNodeFilter = false) {
//		size_t startupEdge = getMostDeficiteEdge(useWeakNodeFilter);
//		if(startupEdge == (size_t)-1) {
//			std::cerr << "An empty startup edge found. Searching cancelled.\n";
//			return;
//		}
		partialGraph g;
		//build indexes for nodes
		g.enableConsolidation = true;
		g.BuildInitialEdgeIndexes(useWeakNodeFilter, reduceFactor, true);
		//g.BuildInitialEdgeIndexes(useWeakNodeFilter, reduceFactor, false); //don't shuffle nodes
		//iterate edges
		size_t startupEdge = std::rand() % numEdges[db.egraphSize];
//		size_t startupEdge = leastFrequentEdge[db.egraphSize];
//		size_t minPopulation = (size_t)-1;
//		for(size_t e = 0; e < numEdges[db.egraphSize]; e++) {
//			size_t curPopulation = g.nodes[0].edgeIndexes.edgeNodes->maps[e].count();
//			if(minPopulation > curPopulation) {
//				minPopulation = curPopulation;
//				startupEdge = e;
//			}
//		}
		std::cerr << "Node deviations(worst,better,best)=(" << db.maxNodeDeviationForWorst() << ","  << db.maxNodeDeviationForBetter() << "," << db.maxNodeDeviationForBest() << ")\n";
		//db.resetGraphAge();
		g.processNodes01andGo(startupEdge);
		//g.processNode0(); //experimnental
		//clear the initial indexes
		g.ClearInitialEdgeIndexes();
	}
static void iterateGreedy(size_t reduceFactor, bool useWeakNodeFilter = false) {
	partialGraph g;
	g.enableConsolidation = false; //does it work by ignoring the nested parallelization?
	g.loopGreedy(reduceFactor, useWeakNodeFilter);
}

void loopGreedy(size_t reduceFactor, bool useWeakNodeFilter = false) {
		std::vector<std::vector<detachedNode>> fixedNodesQueue;
		size_t idx[400];
		size_t i = 0;
		//partialGraph g;
		//build indexes for nodes
		BuildInitialEdgeIndexes(useWeakNodeFilter, reduceFactor, false);
		//iterate nodes in deviation order
		size_t placedNodeIndexes[28];
		size_t nodeNumber = 0;
		size_t start0index = 0;

		initNewNode:
		placedNodeIndexes[nodeNumber] = nodeNumber ? nodes[nodeNumber - 1].validNodes->next(placedNodeIndexes[nodeNumber - 1]) : start0index;
		goto checkExitLoop;
		
		advanceNode:
		placedNodeIndexes[nodeNumber] = nodeNumber ? nodes[nodeNumber - 1].validNodes->next(placedNodeIndexes[nodeNumber]) : placedNodeIndexes[nodeNumber] + 1;
		
		checkExitLoop:
		if(!(placedNodeIndexes[nodeNumber] < nodes[nodeNumber ? nodeNumber - 1 : 0].validNodes->size() && !gExiting)) goto exitLoop;
		
		//loop body start
		//set the node
		nodes[nodeNumber].node = (*nodes[nodeNumber].edgeIndexes.nodes)[placedNodeIndexes[nodeNumber]];
		
		if(nodeNumber == 2) {
			std::cerr << "\nnodes(" << placedNodeIndexes[0] << "," << placedNodeIndexes[1] << "," << placedNodeIndexes[2] << ")";
			std::vector<detachedNode> fixedNodes;
			for(size_t n = 0; n <= 2; n++) {
				fixedNodes.push_back(*nodes[n].node);
			}
			fixedNodesQueue.push_back(fixedNodes);
			if(fixedNodesQueue.size() > 2048) {
#ifdef _OPENMP
#pragma omp parallel for schedule(dynamic, 1) default(none) shared(fixedNodesQueue,useWeakNodeFilter)
#endif //_OPENMP
				for(size_t t = 0; t < fixedNodesQueue.size(); t++) {
					completeWithGoodNodes(fixedNodesQueue[t], useWeakNodeFilter);
				}
				fixedNodesQueue.clear();
			}
			goto nextNodeInList;
		}

		//should we stop here?
		if(nodeNumber == bruteAfterNode[db.egraphSize]) {
			//std::cerr << ".";
			partialEgraph p(db.egraphSize);
			for(size_t n = 0; n <= nodeNumber; n++) {
				if(!p.attachNode(*nodes[n].node)) {
					std::cerr << "Bug!\n";
				}
			}
			if(nodeNumber == db.egraphSize - 2) {
				p.attachLastNode();
			}
			else {
				p.expandEdges();
			}
			goto nextNodeInList;
		}
		//set the rest attributes in preparation for next node assignment
		if(nodeNumber) {
			nodes[nodeNumber].newDoubleConnectedEdges = nodes[nodeNumber - 1].allSingleConnectedEdges;
			nodes[nodeNumber].newDoubleConnectedEdges &= nodes[nodeNumber].node->valuesOccupied;
			nodes[nodeNumber].allDoubleConnectedEdges = nodes[nodeNumber - 1].allDoubleConnectedEdges;
			nodes[nodeNumber].allDoubleConnectedEdges |= nodes[nodeNumber].newDoubleConnectedEdges;
			nodes[nodeNumber].allSingleConnectedEdges = nodes[nodeNumber - 1].allSingleConnectedEdges;
			nodes[nodeNumber].allSingleConnectedEdges |= nodes[nodeNumber].node->valuesOccupied;
			edgesInEgraphBM tmp(nodes[nodeNumber].allDoubleConnectedEdges);
			tmp.flip();
			nodes[nodeNumber].allSingleConnectedEdges &= tmp;
			nodes[nodeNumber].newSingleConnectedEdges = nodes[nodeNumber].allSingleConnectedEdges;
			tmp = nodes[nodeNumber - 1].allSingleConnectedEdges;
			tmp.flip();
			nodes[nodeNumber].newSingleConnectedEdges &= tmp;
			if(nodes[nodeNumber].validNodes->size() == nodes[nodeNumber - 1].validNodes->size()) { //at consolidation is was already set to all ones, else would copy the larger old
				*nodes[nodeNumber].validNodes = *nodes[nodeNumber - 1].validNodes;
			}
			else{
				nodes[nodeNumber].validNodes->set();
			}
			//invalidate nodes having already twice assigned edge
			i = 0;
			for(size_t e = nodes[nodeNumber].newDoubleConnectedEdges._Find_first(); e != nodes[nodeNumber].newDoubleConnectedEdges.size(); e = nodes[nodeNumber].newDoubleConnectedEdges._Find_next(e)) {
				idx[i++] = e;
			}
			idx[i] = (size_t)-1;
			nodes[nodeNumber].validNodes->hasNoneOf(nodes[nodeNumber].edgeIndexes.edgeNodes->maps, idx);
		}
		else {
			nodes[0].newDoubleConnectedEdges.reset();
			nodes[0].allDoubleConnectedEdges.reset();
			nodes[0].allSingleConnectedEdges = nodes[0].node->valuesOccupied;
			nodes[0].newSingleConnectedEdges = nodes[0].allSingleConnectedEdges;
			nodes[0].validNodes->set();
		}
		//invalidate nodes having none or 2+ from the once assigned edges
		i = 0;
		for(size_t e = nodes[nodeNumber].newSingleConnectedEdges._Find_first(); e != nodes[nodeNumber].newSingleConnectedEdges.size(); e = nodes[nodeNumber].newSingleConnectedEdges._Find_next(e)) {
			idx[i++] = e;
		}
		idx[i] = (size_t)-1;
		nodes[nodeNumber].validNodes->hasExactlyOneOf(nodes[nodeNumber].edgeIndexes.edgeNodes->maps, idx);
		if(hasEmptiedEdges(nodeNumber))
			goto nextNodeInList;
//		if(nodeNumber == 2) {
//			std::cerr << "/";
//		}

//			if(enableConsolidation && nodeNumber == consolidateAfter) {
//				//std::cerr << "/";
//				consolidateAndScanLeastPopulatedEdge(nodeNumber + 1);
//			}
//			else {
//				scanLeastPopulatedEdge(nodeNumber + 1);
//				//scanFirstEdge(nodeNumber + 1);
//			}

		nodeNumber++;
		goto initNewNode;

		nextNodeInList:
		//placeholder for finalization operations
		goto advanceNode;
		;
		//loop body end
		exitLoop:
		//backtrack
		if(nodeNumber) {
			nodeNumber--;
			goto advanceNode;
		}
		if(fixedNodesQueue.size() > 0) {
#ifdef _OPENMP
#pragma omp parallel for schedule(dynamic, 1) default(none) shared(fixedNodesQueue,useWeakNodeFilter)
#endif //_OPENMP
			for(size_t t = 0; t < fixedNodesQueue.size(); t++) {
				completeWithGoodNodes(fixedNodesQueue[t], useWeakNodeFilter);
			}
			fixedNodesQueue.clear();
		}
		
		//clear the initial indexes
		ClearInitialEdgeIndexes();
	}
	static void completeWithGoodNodes(const std::vector<detachedNode>& fixedNodes, const bool useWeakNodeFilter = false) {
		partialGraph g;
		g.enableConsolidation = true; //does it work by ignoring the nested parallelization?
		size_t start_node = 0;
		//copy the node pointers
		for(std::vector<detachedNode>::const_iterator n = fixedNodes.cbegin(); n!= fixedNodes.cend(); n++) {
			g.nodes[start_node].node = &(*n);
			start_node++;
		}
//		for(size_t n = 0; n < fixedNodes.size(); n++) {
//			g.nodes[start_node].node = &(*fixedNodes[n]);
//			start_node++;
//		}
		//find single- and double-connected edges
		for(size_t n = 0; n < start_node; n++) {
			edgesInEgraphBM tmp(g.nodes[n].node->valuesOccupied);	//new edges
			tmp &= g.nodes[start_node - 1].allSingleConnectedEdges;	//edges both in new and old are duplicates
			g.nodes[start_node - 1].allDoubleConnectedEdges |= tmp;	//accumulate duplicates
			g.nodes[start_node - 1].allSingleConnectedEdges |= g.nodes[n].node->valuesOccupied;	//accumulate all involved edges
		}
		edgesInEgraphBM tmp(g.nodes[start_node - 1].allDoubleConnectedEdges);
		tmp.flip();
		g.nodes[start_node - 1].allSingleConnectedEdges &= tmp;	//exclude doubles from singles
		for(size_t n = 0; n < start_node; n++) {
			g.nodes[n].newSingleConnectedEdges = g.nodes[n].node->valuesOccupied;
			g.nodes[n].newSingleConnectedEdges &= tmp; //clear double-connected edges
		}
		//truncate the search space to nodes having deviation <= some maxNodeDeviation
		approxEnergy_t maxNodeDeviation;
		if(useWeakNodeFilter) {
			maxNodeDeviation = db.maxNodeDeviationForBetter(); //use the best egraph in the db
		}
		else {
			maxNodeDeviation = db.maxNodeDeviationForBest(); //hardcoded, external info
		}
		//maxNodeDeviation = 1e100; //debug
		detachedNodes::idxByDeviation_t::const_iterator last = db.nodesList.idxByDeviation.lower_bound(maxNodeDeviation);
		//copy the nodes of interest to the static vector topNodes and build the matrix
		g.nodes[start_node - 1].edgeIndexes.nodes = new std::vector<const detachedNode*>;
		edgesInEgraphBM coveredEdges;
		for(detachedNodes::idxByDeviation_t::const_iterator n1 = db.nodesList.idxByDeviation.begin(); n1 != last; n1++) {
			const detachedNode* nn = n1->second;
			//apply filters for compatibility to existent nodes
			edgesInEgraphBM tmp(g.nodes[start_node - 1].allDoubleConnectedEdges);
			tmp &= nn->valuesOccupied;
			if(tmp.any()) continue; //contains some already double-connected edges
			for(size_t n = 0; n < start_node; n++) {
				edgesInEgraphBM tmp(g.nodes[n].newSingleConnectedEdges);
				tmp &= nn->valuesOccupied;
				if(tmp.count() != 1) {
					//can't connect nn to nodes[n].node by single edge
					goto skipGoodNode;
				}
			}
			//looks promising
			g.nodes[start_node - 1].edgeIndexes.nodes->push_back(nn);
			//todo: collect covered duplicates for untouched edges?
			coveredEdges |= nn->valuesOccupied;
			skipGoodNode:
			;
		}
		//in fact coveredEdges contains also the untouched edges
		coveredEdges &= g.nodes[start_node - 1].allSingleConnectedEdges; //clear untouched edges
		size_t nNodes = g.nodes[start_node - 1].edgeIndexes.nodes->size();
		if((nNodes == 0) || (coveredEdges != g.nodes[start_node - 1].allSingleConnectedEdges)) {
			//no node found for some edge
			delete g.nodes[start_node - 1].edgeIndexes.nodes;
			return;
		}
		g.nodes[start_node - 1].edgeIndexes.edgeNodes = new bitMaps(numEdges[(db.egraphSize)], nNodes);

		for(size_t n = 0; n < nNodes; n++) {
			const detachedNode* nn = g.nodes[start_node - 1].edgeIndexes.nodes->at(n);
			for(size_t e = nn->valuesOccupied._Find_first(); e != nn->valuesOccupied.size(); e = nn->valuesOccupied._Find_next(e)) {
				g.nodes[start_node - 1].edgeIndexes.edgeNodes->maps[e].set(n); //transpose
			}
		}
		g.nodes[start_node - 1].validNodes = new bitMap(nNodes);
		g.nodes[start_node - 1].validNodes->set(); //all are valid
		size_t maxNodeToInit = db.egraphSize - 2;
		if(g.enableConsolidation && start_node <= g.consolidateAfter) {
			maxNodeToInit = g.consolidateAfter;
		}
		for(size_t n = start_node; n <= maxNodeToInit; n++) {
			g.nodes[n].edgeIndexes = g.nodes[start_node - 1].edgeIndexes;
			g.nodes[n].validNodes = new bitMap(nNodes);
			g.nodes[n].validEdgeNodes = new bitMap(nNodes);
		}
		//size_t startEdge = g.nodes[start_node - 1].allSingleConnectedEdges._Find_first();
		g.nodes[start_node].edgesWithoutNodes.reset();
		size_t startEdge = g.findLeastPopulatedSingleConnectedEdge(start_node);
		if(startEdge == (size_t)-1) goto cleanup; //no candidates lrft for this edge
		//for each valid node having selected edge
		for(size_t nodePositionInIndex = g.nodes[start_node - 1].edgeIndexes.edgeNodes->maps[startEdge].first();
				(!gExiting) && nodePositionInIndex != g.nodes[start_node - 1].edgeIndexes.edgeNodes->maps[startEdge].size();
				nodePositionInIndex = g.nodes[start_node - 1].edgeIndexes.edgeNodes->maps[startEdge].next(nodePositionInIndex)) {
			//do the job
			g.addNode(start_node, nodePositionInIndex); //and recurse
		}
		//cleanup
		cleanup:
		for(size_t n = start_node; n <= maxNodeToInit; n++) {
			delete g.nodes[n].validEdgeNodes;
			delete g.nodes[n].validNodes;
		}
		delete g.nodes[start_node - 1].validNodes;
		delete g.nodes[start_node - 1].edgeIndexes.nodes;
		delete g.nodes[start_node - 1].edgeIndexes.edgeNodes;
	}
//	static size_t getMostDeficiteEdge(const bool useWeakNodeFilter = false) {
//		approxEnergy_t maxNodeDeviation;
//		if(useWeakNodeFilter) {
//			maxNodeDeviation = db.maxNodeDeviationForBetter(); //use the best egraph in the db
//		}
//		else {
//			maxNodeDeviation = db.maxNodeDeviationForBest(); //hardcoded, external info
//		}
//		size_t numNodesOfInterest = std::distance(db.nodesList.idxByDeviation.begin(), db.nodesList.idxByDeviation.lower_bound(maxNodeDeviation));
//        std::cerr <<  numNodesOfInterest << " nodes match the filter\n";
//		size_t bestEdge = 0;
//		size_t bestStartupCount = (size_t)-1;
//		//process each edge
//		for(size_t e0 = 0; e0 < numEdges[db.egraphSize]; e0++) {
//			size_t n0Index = 0;
//			size_t curStartupCount = 0;
//			size_t numNodesWithE0 = 0;
//			//std::map<edgesInEgraphBM, size_t> uniqueInterfaces;
//			for(detachedNodes::idxByDeviation_t::const_iterator n0 = db.nodesList.idxByDeviation.cbegin(); n0Index < numNodesOfInterest; n0++, n0Index++) { //just count
//				if(! n0->second->valuesOccupied[e0]) continue; //skip nodes w/o edge e0
//				numNodesWithE0++;
//			}
//			std::vector<edgesInEgraphBM> e0Bits(numNodesWithE0); //allocate
//			size_t curE0Node = 0;
//			n0Index = 0;
//			for(detachedNodes::idxByDeviation_t::const_iterator n0 = db.nodesList.idxByDeviation.cbegin(); n0Index < numNodesOfInterest; n0++, n0Index++) { //copy & reset bit e0
//				if(! n0->second->valuesOccupied[e0]) continue; //skip nodes w/o edge e0
//				e0Bits[curE0Node] = n0->second->valuesOccupied;
//				e0Bits[curE0Node].reset(e0);
//				curE0Node++;
//			}
//			for(size_t n0 = 0; n0 < numNodesWithE0 - 1; n0++) {
//				for(size_t n1 = n0 + 1; n1 < numNodesWithE0; n1++) {
//					edgesInEgraphBM  n01Intersection(e0Bits[n0]);
//					n01Intersection &= e0Bits[n1];
//					if(n01Intersection.any()) continue; //more than one common edge
//					//nodes n0 and n1 are valid startup for graph assembling
//					curStartupCount++;
//					//edgesInEgraphBM  n01Union(e0Bits[n0]);
//					//n01Union |= e0Bits[n1];
//					//uniqueInterfaces[n01Union]++;
//				}
//			}
//			//std::cerr << "(" << e0 << "," << uniqueInterfaces.size() << "/" << curStartupCount << ")";
//			std::cerr << "(" << e0 << "," << curStartupCount << ")";
//			if(bestStartupCount > curStartupCount) {
//				bestStartupCount = curStartupCount;
//				bestEdge = e0;
//			}
//			if(bestStartupCount == 0) {
//				//can't compose graph from this nodes at all due to a missing startup edge
//				return (size_t)-1;
//			}
//		}
//        std::cerr << "\nMostDeficite is ("  << bestEdge << "," << bestStartupCount << ")\n";
//		return bestEdge;
//	}
};

//struct pg { //partial graph v2
//	bitMaps* cm;
//	std::vector<detachedNode*> topNodes;
//	size_t full_search_depth;
//	pg(size_t depth, bool useWeakNodeFilter) : full_search_depth(depth) {
//		approxEnergy_t maxNodeDeviation = useWeakNodeFilter ? db.maxNodeDeviationForBetter() : db.maxNodeDeviationForBest(); //current or the stronger hardcoded
//		detachedNodes::idxByDeviation_t::const_iterator last = db.nodesList.idxByDeviation.lower_bound(maxNodeDeviation);
//		size_t nNodes = std::distance(db.nodesList.idxByDeviation.cbegin(), last);
//		std::cerr << "using top " << nNodes << " nodes\n";
//		this->cm = new bitMaps(nNodes, nNodes);
//		this->topNodes.resize(nNodes);
//		size_t n = 0;
//		for(detachedNodes::idxByDeviation_t::const_iterator n1 = db.nodesList.idxByDeviation.begin(); n < nNodes; n1++, n++) {
//			this->topNodes[n] = n1->second;
//		}
//		edgesInEgraphBM tmp;
//		for(size_t n1 = 0; n1 < nNodes - 1; n1++) {
//			for(size_t n2 = n1 + 1; n2 < nNodes; n2++) {
//				tmp = this->topNodes[n1]->valuesOccupied;
//				tmp &= this->topNodes[n2]->valuesOccupied;
//				if(tmp.count() == 1) {
//					this->cm->maps[n1].set(n2);
//					this->cm->maps[n2].set(n1); //todo: unnecessary so far?
//				}
//			}
//		}
//	}
//	~pg() {
//		delete cm;
//	}
//	void expandNode0(size_t starter) const {
//
//		//initial conditions
//		//nodes[0] = starter; //the fixed first node
//		//nodes[1] = starter; //the startup for the second node
//		//singles[0] = topNodes[starter]->valuesOccupied;
//		//doubles[0].reset();
//		partialEgraph p0(db.egraphSize); //the initial nodes we are going to expand from
//		p0.attachNode(*topNodes[starter]);
//		this->expandNodes(p0, starter);
//	}
//
//	void expandNodes(const partialEgraph& p0, const size_t starter = (size_t)-1) const {
//		///// cut here ///////
//		size_t nodes[28];
//		edgesInEgraphBM singles[28];
//		edgesInEgraphBM doubles[28];
//		edgesInEgraphBM tmp;
//		size_t size;
//		singles[p0.numNodes - 1] = p0.maskOneOf; //same as singles[0] = topNodes[starter]->valuesOccupied;
//		doubles[p0.numNodes - 1] = p0.maskNoneOf; //same as doubles[0].reset();
//		size = p0.numNodes + 1; //minimal size where we are doing changes
//		for(size_t i = 0; i < p0.numNodes; i++) {
//			//get the exact deviation from db
//			auto const nodeInDb = db.nodesList.find(p0.nodes[i].valuesOccupied);
//			if(nodeInDb != db.nodesList.end()) {
//				//find its index in the matrix
//				for(detachedNodes::idxByDeviation_t::const_iterator last = db.nodesList.idxByDeviation.lower_bound(nodeInDb->second.disbalance);
//						last != db.nodesList.idxByDeviation.upper_bound(nodeInDb->second.disbalance);
//						last++) {
//					if(last->second->valuesOccupied == p0.nodes[i].valuesOccupied) {
//						//the given node is found in the right index. Get its position.
//						size_t nNodes = std::distance(db.nodesList.idxByDeviation.cbegin(), last);
//						nodes[i] = nNodes; //will paricipate in duplicates check
//						goto nextNodesI;
//					}
//				}
//				//unable to find the index
//			}
//			//the given node isn't known and therefore has no index in the matrix to work with
//			std::cerr << "the given node " << i << " isn't in the best list\n";
//			return;
//			nextNodesI:
//			;
//		}
//		nodes[p0.numNodes] = starter; //the startup for the second node
//
//		repeat:
//		if(gExiting) return;
//		size_t nodeIndexInGraphToAdvance = size - 1;
//		size_t nextByAllFixedNodes = nodes[nodeIndexInGraphToAdvance] + 1; //minimal and unchecked new node
//
//		checkAllFixed:
//		for(size_t fixedNode = 0; fixedNode < nodeIndexInGraphToAdvance && nextByAllFixedNodes < this->cm->maps->numElements; fixedNode++) {
//			if(this->cm->maps[nodes[fixedNode]][nextByAllFixedNodes]) {
//				//this nodefixedNode is compatible which is OK
//				continue;
//			}
//			nextByAllFixedNodes = this->cm->maps[nodes[fixedNode]].next(nextByAllFixedNodes);
//			if(nextByAllFixedNodes == this->cm->maps->numElements) {
//				//exhausted, advance previous
//				goto backtrack;
//			}
//			//nextByAllFixedNodes is advanced, repeat checking all fixed nodes
//			goto checkAllFixed;
//		}
//		if(nextByAllFixedNodes >= this->cm->maps->numElements) {
//			goto backtrack;
//		}
//		//nodeIndexInGraphToAdvance was successfully advanced to nextByAllFixedNodes
//		//it is possible the new node to have edges in common from the already fixed ones
//		tmp = topNodes[nextByAllFixedNodes]->valuesOccupied;
//		tmp &= doubles[nodeIndexInGraphToAdvance - 1];
//		if(tmp.any()) {
//			nextByAllFixedNodes++;
//			goto checkAllFixed;
//		}
//		//place this node
//		nodes[nodeIndexInGraphToAdvance] = nextByAllFixedNodes;
//		singles[nodeIndexInGraphToAdvance] = singles[nodeIndexInGraphToAdvance - 1];
//		singles[nodeIndexInGraphToAdvance] |= topNodes[nextByAllFixedNodes]->valuesOccupied;
//		doubles[nodeIndexInGraphToAdvance] = singles[nodeIndexInGraphToAdvance - 1];
//		doubles[nodeIndexInGraphToAdvance] &= topNodes[nextByAllFixedNodes]->valuesOccupied; //new duplicates = old singles & new edges
//		doubles[nodeIndexInGraphToAdvance] |= doubles[nodeIndexInGraphToAdvance - 1];
//		if(size == db.egraphSize - this->full_search_depth) {
//			//std::cerr << "eureka\n";
//			partialEgraph p(p0); //to the given partial graph
//			for(size_t n = p0.numNodes; n < size; n++) {
//				//add node and intercept eventual error for debugging
//				if(!p.attachNode(*(topNodes[nodes[n]]))) {
//					//something wrong
//					std::cerr << "wrong node " << n << "\n";
//					for(size_t nn = 0; nn < p0.numNodes; nn++) {
//						std::cerr << p0.nodes[nn].valuesOccupied.to_string() << "\n";
//					}
//					for(size_t nn = p0.numNodes; nn <= size; nn++) {
//						std::cerr << topNodes[nodes[nn]]->valuesOccupied.to_string() << "\n";
//					}
//					exit(1);
//				}
//			}
//			if(this->full_search_depth > 1) {
//				//combine all possibilities for expansion and save
//				p.expandEdges();
//			}
//			else {
//				//add the trivial last node and save
//				p.attachLastNode();
//			}
//			//now continue by advancing the previous node
//			size--;
//			goto repeat;
//		}
//		//append the next node
//		nodes[size] = nodes[nodeIndexInGraphToAdvance];
//		size++;
//		//expand further
//		goto repeat;
//		backtrack:
//		//exhausted, advance previous
//		size --;
//		if(size > p0.numNodes) {
//			goto repeat;
//		}
//		//we are back to initial, done
//	}
//	void iterateFirstNode() {
//		size_t maxStartNode = this->cm->numElements - db.egraphSize + 1; // 1 is for last node, we are actually expanding to db.egraphSize-1
//#ifdef _OPENMP
//#pragma omp parallel for schedule(dynamic, 1) default(none) shared(gExiting,maxStartNode)
//#endif //_OPENMP
//		for(size_t n = 0; n < maxStartNode; n++) {
//			if(gExiting) continue;
//			expandNode0(n);
//		}
//	}
//};

//bool mutateWorstNodeUntaggedN(int numElements) {
//	std::vector<compressedEgraph> top;
//	db.getTopUntaggedN(numElements, 1, top); //bit 0 = worst node mutated at depth 1
//	if(top.empty()) return false; //nothing is done
//#ifdef _OPENMP
//#pragma omp parallel for schedule(dynamic, 1) default(none) shared(top,db,gExiting)
//#endif //_OPENMP
//	for(size_t i = 0; i < top.size(); i++) {
//		if(gExiting) continue;
//		compressedEgraph* g = &top[i];
//		partialEgraph::regenerateLast2Nodes(*g);
//		g->tags |= 1; //tag as processed at worst 2 nodes mutation
//		db.addEgraph(*g);
//	}
//	return true;
//}
bool mutate2NodesUntaggedN(int numElements) {
	std::vector<compressedEgraph> top;
	static const tags_t mask = 1 << 9;

	db.getTopUntaggedN(numElements, mask, top);
        
	if(top.empty()) return false; //nothing is done
#ifdef _OPENMP
#pragma omp parallel for schedule(dynamic, 1) default(none) shared(top,db,gExiting)
#endif //_OPENMP
	for(size_t i = 0; i < top.size(); i++) {
		if(gExiting) continue;
		compressedEgraph* g = &top[i];
		partialEgraph::regenerateAll2Nodes(*g);
		g->tags |= mask; //tag as processed
#ifdef _OPENMP
#pragma omp critical (newEgraphs)
#endif //_OPENMP
		db.addEgraph(*g);
	}
	return true;
}

bool mutate3NodesUntaggedN(int numElements) {
	std::vector<compressedEgraph> top;
	static const tags_t mask = 1 << 10;
	db.getTopUntaggedN(numElements, mask, top);
	if(top.empty()) return false; //nothing is done
#ifdef _OPENMP
#pragma omp parallel for schedule(dynamic, 1) default(none) shared(top,db,gExiting)
#endif //_OPENMP
	for(size_t i = 0; i < top.size(); i++) {
		if(gExiting) continue;
		compressedEgraph* g = &top[i];
		partialEgraph::regenerateAll3Nodes(*g);
		g->tags |= mask; //tag as processed
#ifdef _OPENMP
#pragma omp critical (newEgraphs)
#endif //_OPENMP
		db.addEgraph(*g);
	}
	return true;
}
bool mutate4NodesUntaggedN(int numElements) {
//	for(compressedEgraphMap::iterator top = db.begin(); top != db.end(); top++) {
//		static const tags_t mask = 1 << 19;
//		top->second.tags &= ~mask; //clear the wrongly set tag
//	}
//	return false;
	std::vector<compressedEgraph> top;
	static const tags_t mask = 1 << 19;
	db.getTopUntaggedN(numElements, mask, top);
	if(top.empty()) return false; //nothing is done
#ifdef _OPENMP
#pragma omp parallel for schedule(dynamic, 1) default(none) shared(top,db,gExiting)
#endif //_OPENMP
	for(size_t i = 0; i < top.size(); i++) {
		if(gExiting) continue;
		compressedEgraph* g = &top[i];
		partialEgraph::regenerateAll4Nodes(*g);
		g->tags |= mask; //tag as processed
#ifdef _OPENMP
#pragma omp critical (newEgraphs)
#endif //_OPENMP
		db.addEgraph(*g);
	}
	return true;
}

void mutateNodes1() {
	static const size_t chunk_size = 6400;
	detachedNode originals[chunk_size];
//	//dirty patch
//	for(detachedNodes::iterator n = db.nodesList.begin(); n != db.nodesList.end(); n++) {
//		n->second.tags &= 1;
//	}
//	//dirty patch end
	restart:
	{
		//std::vector<detachedNode> newNodes;
		size_t numNodes = 0;
		for(detachedNodes::idxByDeviation_t::const_reverse_iterator n = db.nodesList.idxByDeviation.rbegin(); (!gExiting) && numNodes < chunk_size && n != db.nodesList.idxByDeviation.rend(); n++) {
			if(n->second->tags & 2) continue; //already done
			originals[numNodes++] = (*(n->second));
		}
		const approxEnergy_t worstMinEnergy = nodeTarget[db.egraphSize] - db.nodesList.worstDeviation;
		const approxEnergy_t worstMaxEnergy = nodeTarget[db.egraphSize] + db.nodesList.worstDeviation;
#ifdef _OPENMP
#pragma omp parallel for schedule(dynamic, 1) default(none) shared(numNodes,db,originals,gExiting,numEdges,nodeTarget,primes)
#endif //_OPENMP
		for(size_t i = 0; i < numNodes; i++) {
			if(gExiting) continue;
			detachedNode& original(originals[i]);
			approxEnergy_t energy0 = nodeTarget[db.egraphSize] + original.getDisbalance();
			for(size_t o1 = original.valuesOccupied._Find_first();
					o1 != original.valuesOccupied.size();
					o1 = original.valuesOccupied._Find_next(o1)) {
				edgesInEgraphBM bmMinus1(original.valuesOccupied);
				bmMinus1.reset(o1);
				approxEnergy_t energym1 = energy0 / primes[o1];
				for(size_t t1 = 0; t1 < numEdges[db.egraphSize]; t1++) {
					if(original.valuesOccupied[t1]) continue;
					approxEnergy_t energym1p1 = energym1 * primes[t1];
					if(energym1p1 > worstMaxEnergy) {
						break; //max t1 reached
					}
					if(energym1p1 < worstMinEnergy) {
						continue; //skip up to next larger t1
					}
					edgesInEgraphBM bmMinus1Plus1(bmMinus1);
					bmMinus1Plus1.set(t1);
					//is it new?
					//detachedNodes::const_iterator old = db.nodesList.find(bmMinus1Plus1);
					//if(old != db.nodesList.end()) continue;
					detachedNode m1p1(bmMinus1Plus1); //this calculates the distance, etc.
					if(db.nodesList.isWeak(m1p1.disbalance)) continue;
					//is it new?
					detachedNodes::const_iterator old = db.nodesList.find(bmMinus1Plus1);
					if(old != db.nodesList.end()) continue;
#ifdef _OPENMP
#pragma omp critical (m1p1)
#endif //_OPENMP
					//newNodes.push_back(m1p1);
					db.AddNode(m1p1);
				}
			}
			original.tags |= 2;
#ifdef _OPENMP
#pragma omp critical (m1p1)
#endif //_OPENMP
			//newNodes.push_back(original); //update the tag
			db.AddNode(original);
		}
//		//merge new to the existing
//		for(std::vector<detachedNode>::const_iterator n = newNodes.begin(); n != newNodes.end(); n++) {
//			db.AddNode(*n);
//		}
		if((!gExiting) && numNodes > chunk_size / 16) //repeat only when some reasonable minimum of nodes has to be processed
			goto restart;
	}
}
void mutateNodes2() {
	static const size_t chunk_size = 6400;
	detachedNode originals[chunk_size];
	restart:
	{
		mutateNodes1();
		//std::vector<detachedNode> newNodes;
		size_t numNodes = 0;
		for(detachedNodes::idxByDeviation_t::const_reverse_iterator n = db.nodesList.idxByDeviation.rbegin(); (!gExiting) && numNodes < chunk_size && n != db.nodesList.idxByDeviation.rend(); n++) {
			if(n->second->tags & 4) continue; //already done
			originals[numNodes++] = (*(n->second));
		}
		const approxEnergy_t worstMinEnergy = nodeTarget[db.egraphSize] - db.nodesList.worstDeviation;
		const approxEnergy_t worstMaxEnergy = nodeTarget[db.egraphSize] + db.nodesList.worstDeviation;
#ifdef _OPENMP
#pragma omp parallel for schedule(dynamic, 1) default(none) shared(numNodes,db,originals,gExiting,numEdges,nodeTarget,primes)
#endif //_OPENMP
		for(size_t i = 0; i < numNodes; i++) {
			if(gExiting) continue;
			detachedNode& original(originals[i]);
			approxEnergy_t energy0 = nodeTarget[db.egraphSize] + original.getDisbalance();
			for(size_t o1 = original.valuesOccupied._Find_first();
					o1 != original.valuesOccupied.size();
					o1 = original.valuesOccupied._Find_next(o1)) {
				edgesInEgraphBM bmMinus1(original.valuesOccupied);
				bmMinus1.reset(o1);
				approxEnergy_t energym1 = energy0 / primes[o1];
				for(size_t o2 = original.valuesOccupied._Find_next(o1);
						o2 != original.valuesOccupied.size();
						o2 = original.valuesOccupied._Find_next(o2)) {
					edgesInEgraphBM bmMinus2(bmMinus1);
					bmMinus2.reset(o2);
					approxEnergy_t energym2 = energym1 / primes[o2];
					for(size_t t1 = 0; t1 < numEdges[db.egraphSize] - 1; t1++) {
						if(original.valuesOccupied[t1]) continue;
						approxEnergy_t energym2p1 = energym2 * primes[t1];
						if(primes[t1 + 1] * energym2p1 > worstMaxEnergy) { //include the minimal additional multiplier for t2
							break; //max t1 reached
						}
						edgesInEgraphBM bmMinus2Plus1(bmMinus2);
						bmMinus2Plus1.set(t1);
						for(size_t t2 = t1 + 1; t2 < numEdges[db.egraphSize]; t2++) {
							if(original.valuesOccupied[t2]) continue;
							approxEnergy_t energym2p2 = energym2p1 * primes[t2];
							if(energym2p2 > worstMaxEnergy) {
								break; //max t2 reached
							}
							if(energym2p2 < worstMinEnergy) {
								continue; //skip up to next larger t2
							}
							edgesInEgraphBM bmMinus2Plus2(bmMinus2Plus1);
							bmMinus2Plus2.set(t2);
							detachedNode m2p2(bmMinus2Plus2); //this calculates the distance, etc.
							if(db.nodesList.isWeak(m2p2.disbalance)) continue;
							//is it new?
							detachedNodes::const_iterator old = db.nodesList.find(bmMinus2Plus2);
							if(old != db.nodesList.end()) continue;
#ifdef _OPENMP
#pragma omp critical (m2p2)
#endif //_OPENMP
							//newNodes.push_back(m2p2);
							db.AddNode(m2p2);
						}
					}
				}
			}
			original.tags |= 4;
#ifdef _OPENMP
#pragma omp critical (m2p2)
#endif //_OPENMP
			//newNodes.push_back(original); //update the tag
			db.AddNode(original);
		}
//		//merge new to the existing
//		for(std::vector<detachedNode>::const_iterator n = newNodes.begin(); n != newNodes.end(); n++) {
//			db.AddNode(*n);
//		}
		if((!gExiting) && numNodes)
			goto restart;
	}
}
void mutateNodes3() {
	static const size_t chunk_size = 640;
	detachedNode originals[chunk_size];
	restart:
	{
		mutateNodes2();
		//std::vector<detachedNode> newNodes;
		size_t numNodes = 0;
		for(detachedNodes::idxByDeviation_t::const_reverse_iterator n = db.nodesList.idxByDeviation.rbegin(); (!gExiting) && numNodes < chunk_size && n != db.nodesList.idxByDeviation.rend(); n++) {
			if(n->second->tags & 8) continue; //already done
			originals[numNodes++] = (*(n->second));
		}
		const approxEnergy_t worstMinEnergy = nodeTarget[db.egraphSize] - db.nodesList.worstDeviation;
		const approxEnergy_t worstMaxEnergy = nodeTarget[db.egraphSize] + db.nodesList.worstDeviation;
#ifdef _OPENMP
#pragma omp parallel for schedule(dynamic, 1) default(none) shared(numNodes,db,originals,gExiting,numEdges,nodeTarget,primes)
#endif //_OPENMP
		for(size_t i = 0; i < numNodes; i++) {
			if(gExiting) continue;
			detachedNode& original(originals[i]);
			approxEnergy_t energy0 = nodeTarget[db.egraphSize] + original.getDisbalance();
			for(size_t o1 = original.valuesOccupied._Find_first();
					o1 != original.valuesOccupied.size();
					o1 = original.valuesOccupied._Find_next(o1)) {
				edgesInEgraphBM bmMinus1(original.valuesOccupied);
				bmMinus1.reset(o1);
				approxEnergy_t energym1 = energy0 / primes[o1];
				for(size_t o2 = original.valuesOccupied._Find_next(o1);
						o2 != original.valuesOccupied.size();
						o2 = original.valuesOccupied._Find_next(o2)) {
					edgesInEgraphBM bmMinus2(bmMinus1);
					bmMinus2.reset(o2);
					approxEnergy_t energym2 = energym1 / primes[o2];
					for(size_t o3 = original.valuesOccupied._Find_next(o2);
							o3 != original.valuesOccupied.size();
							o3 = original.valuesOccupied._Find_next(o3)) {
						edgesInEgraphBM bmMinus3(bmMinus2);
						bmMinus3.reset(o3);
						approxEnergy_t energym3 = energym2 / primes[o3];
						for(size_t t1 = 0; t1 < numEdges[db.egraphSize] - 2; t1++) {
							if(original.valuesOccupied[t1]) continue;
							approxEnergy_t energym3p1 = energym3 * primes[t1];
							if(primes[t1 + 1] * primes[t1 + 2] * energym3p1 > worstMaxEnergy) { //include the minimal additional multipliers for t2,t3
								break; //max t1 reached
							}
							edgesInEgraphBM bmMinus3Plus1(bmMinus3);
							bmMinus3Plus1.set(t1);
							for(size_t t2 = t1 + 1; t2 < numEdges[db.egraphSize] - 1; t2++) {
								if(original.valuesOccupied[t2]) continue;
								approxEnergy_t energym3p2 = energym3p1 * primes[t2];
								if(primes[t2 + 1] * energym3p2 > worstMaxEnergy) { //include the minimal additional multiplier for t3
									break; //max t2 reached
								}
								edgesInEgraphBM bmMinus3Plus2(bmMinus3Plus1);
								bmMinus3Plus2.set(t2);
								for(size_t t3 = t2 + 1; t3 < numEdges[db.egraphSize] - 0; t3++) {
									if(original.valuesOccupied[t3]) continue;
									approxEnergy_t energym3p3 = energym3p2 * primes[t3];
									if(energym3p3 > worstMaxEnergy) {
										break; //max t3 reached
									}
									if(energym3p3 < worstMinEnergy) {
										continue; //skip up to next larger t3
									}
									edgesInEgraphBM bmMinus3Plus3(bmMinus3Plus2);
									bmMinus3Plus3.set(t3);
									detachedNode m3p3(bmMinus3Plus3); //this calculates the distance, etc.
									if(db.nodesList.isWeak(m3p3.disbalance)) continue;
									//is it new?
									detachedNodes::const_iterator old = db.nodesList.find(bmMinus3Plus3);
									if(old != db.nodesList.end()) continue;
#ifdef _OPENMP
#pragma omp critical (m3p3)
#endif //_OPENMP
									//newNodes.push_back(m3p3);
									db.AddNode(m3p3);
								}
							}
						}
					}
				}
			}
			original.tags |= 8;
#ifdef _OPENMP
#pragma omp critical (m3p3)
#endif //_OPENMP
			//newNodes.push_back(original); //update the tag
			db.AddNode(original);
		}
//		//merge new to the existing
//		for(std::vector<detachedNode>::const_iterator n = newNodes.begin(); n != newNodes.end(); n++) {
//			db.AddNode(*n);
//		}
		if((!gExiting) && numNodes)
			goto restart;
	}
}
void mutateNodes4() {
	static const size_t chunk_size = 640;
	detachedNode originals[chunk_size];
	restart:
	{
		mutateNodes3();
		//std::vector<detachedNode> newNodes;
		size_t numNodes = 0;
		for(detachedNodes::idxByDeviation_t::const_reverse_iterator n = db.nodesList.idxByDeviation.rbegin(); (!gExiting) && numNodes < chunk_size && n != db.nodesList.idxByDeviation.rend(); n++) {
			if(n->second->tags & 16) continue; //already done
			originals[numNodes++] = (*(n->second));
		}
		const approxEnergy_t worstMinEnergy = nodeTarget[db.egraphSize] - db.nodesList.worstDeviation;
		const approxEnergy_t worstMaxEnergy = nodeTarget[db.egraphSize] + db.nodesList.worstDeviation;
#ifdef _OPENMP
#pragma omp parallel for schedule(dynamic, 1) default(none) shared(numNodes,db,originals,gExiting,numEdges,nodeTarget,primes)
#endif //_OPENMP
		for(size_t i = 0; i < numNodes; i++) {
			if(gExiting) continue;
			detachedNode& original(originals[i]);
			approxEnergy_t energy0 = nodeTarget[db.egraphSize] + original.getDisbalance();
			for(size_t o1 = original.valuesOccupied._Find_first();
					o1 != original.valuesOccupied.size();
					o1 = original.valuesOccupied._Find_next(o1)) {
				edgesInEgraphBM bmMinus1(original.valuesOccupied);
				bmMinus1.reset(o1);
				approxEnergy_t energym1 = energy0 / primes[o1];
				for(size_t o2 = original.valuesOccupied._Find_next(o1);
						o2 != original.valuesOccupied.size();
						o2 = original.valuesOccupied._Find_next(o2)) {
					edgesInEgraphBM bmMinus2(bmMinus1);
					bmMinus2.reset(o2);
					approxEnergy_t energym2 = energym1 / primes[o2];
					for(size_t o3 = original.valuesOccupied._Find_next(o2);
							o3 != original.valuesOccupied.size();
							o3 = original.valuesOccupied._Find_next(o3)) {
						edgesInEgraphBM bmMinus3(bmMinus2);
						bmMinus3.reset(o3);
						approxEnergy_t energym3 = energym2 / primes[o3];
						for(size_t o4 = original.valuesOccupied._Find_next(o3);
								o4 != original.valuesOccupied.size();
								o4 = original.valuesOccupied._Find_next(o4)) {
							edgesInEgraphBM bmMinus4(bmMinus3);
							bmMinus4.reset(o4);
							approxEnergy_t energym4 = energym3 / primes[o4];
							for(size_t t1 = 0; t1 < numEdges[db.egraphSize] - 3; t1++) {
								if(original.valuesOccupied[t1]) continue;
								approxEnergy_t energym4p1 = energym4 * primes[t1];
								if(primes[t1 + 1] * primes[t1 + 2] * primes[t1 + 3] * energym4p1 > worstMaxEnergy) { //include the minimal additional multipliers for t2,t3,t4
									break; //max t1 reached
								}
								edgesInEgraphBM bmMinus4Plus1(bmMinus4);
								bmMinus4Plus1.set(t1);
								for(size_t t2 = t1 + 1; t2 < numEdges[db.egraphSize] - 2; t2++) {
									if(original.valuesOccupied[t2]) continue;
									approxEnergy_t energym4p2 = energym4p1 * primes[t2];
									if(primes[t2 + 1] * primes[t2 + 2] * energym4p2 > worstMaxEnergy) { //include the minimal additional multipliers for t3,t4
										break; //max t2 reached
									}
									edgesInEgraphBM bmMinus4Plus2(bmMinus4Plus1);
									bmMinus4Plus2.set(t2);
									for(size_t t3 = t2 + 1; t3 < numEdges[db.egraphSize] - 1; t3++) {
										if(original.valuesOccupied[t3]) continue;
										approxEnergy_t energym4p3 = energym4p2 * primes[t3];
										if(primes[t3 + 1] * energym4p2 > worstMaxEnergy) { //include the minimal additional multiplier for t4
											break; //max t3 reached
										}
										edgesInEgraphBM bmMinus4Plus3(bmMinus4Plus2);
										bmMinus4Plus3.set(t3);
										for(size_t t4 = t3 + 1; t4 < numEdges[db.egraphSize] - 0; t4++) {
											if(original.valuesOccupied[t4]) continue;
											approxEnergy_t energym4p4 = energym4p3 * primes[t4];
											if(energym4p4 > worstMaxEnergy) {
												break; //max t4 reached
											}
											if(energym4p4 < worstMinEnergy) {
												continue; //skip up to next larger t4
											}
											edgesInEgraphBM bmMinus4Plus4(bmMinus4Plus3);
											bmMinus4Plus4.set(t4);
											detachedNode m4p4(bmMinus4Plus4); //this calculates the distance, etc.
											if(db.nodesList.isWeak(m4p4.disbalance)) continue;
											//is it new?
											detachedNodes::const_iterator old = db.nodesList.find(bmMinus4Plus4);
											if(old != db.nodesList.end()) continue;
#ifdef _OPENMP
#pragma omp critical (m4p4)
#endif //_OPENMP
											//newNodes.push_back(m4p4);
											db.AddNode(m4p4);
										}
									}
								}
							}
						}
					}
				}
			}
			original.tags |= 16;
#ifdef _OPENMP
#pragma omp critical (m4p4)
#endif //_OPENMP
			//newNodes.push_back(original); //update the tag
			db.AddNode(original);
		}
//		//merge new to the existing
//		for(std::vector<detachedNode>::const_iterator n = newNodes.begin(); n != newNodes.end(); n++) {
//			db.AddNode(*n);
//		}
		if((!gExiting) && numNodes)
			goto restart;
	}
}
void mutateNodes5() {
	static const size_t chunk_size = 16;
	detachedNode originals[chunk_size];
	restart:
	{
		mutateNodes3(); // <<< this is intentionally 3 not 4 in order some nodes to be mutated to 5 w/o forcing all their derivatives to be automatically mutated to 4
		//std::vector<detachedNode> newNodes;
		size_t numNodes = 0;
		for(detachedNodes::idxByDeviation_t::const_reverse_iterator n = db.nodesList.idxByDeviation.rbegin(); (!gExiting) && numNodes < chunk_size && n != db.nodesList.idxByDeviation.rend(); n++) {
			if(n->second->tags & 32) continue; //already done
			originals[numNodes++] = (*(n->second));
		}
		const approxEnergy_t worstMinEnergy = nodeTarget[db.egraphSize] - db.nodesList.worstDeviation;
		const approxEnergy_t worstMaxEnergy = nodeTarget[db.egraphSize] + db.nodesList.worstDeviation;
#ifdef _OPENMP
#pragma omp parallel for schedule(dynamic, 1) default(none) shared(numNodes,db,originals,gExiting,numEdges,nodeTarget,primes)
#endif //_OPENMP
		for(size_t i = 0; i < numNodes; i++) {
			if(gExiting) continue;
			detachedNode& original(originals[i]);
			approxEnergy_t energy0 = nodeTarget[db.egraphSize] + original.getDisbalance();
			for(size_t o1 = original.valuesOccupied._Find_first();
					o1 != original.valuesOccupied.size();
					o1 = original.valuesOccupied._Find_next(o1)) {
				edgesInEgraphBM bmMinus1(original.valuesOccupied);
				bmMinus1.reset(o1);
				approxEnergy_t energym1 = energy0 / primes[o1];
				for(size_t o2 = original.valuesOccupied._Find_next(o1);
						o2 != original.valuesOccupied.size();
						o2 = original.valuesOccupied._Find_next(o2)) {
					edgesInEgraphBM bmMinus2(bmMinus1);
					bmMinus2.reset(o2);
					approxEnergy_t energym2 = energym1 / primes[o2];
					for(size_t o3 = original.valuesOccupied._Find_next(o2);
							o3 != original.valuesOccupied.size();
							o3 = original.valuesOccupied._Find_next(o3)) {
						edgesInEgraphBM bmMinus3(bmMinus2);
						bmMinus3.reset(o3);
						approxEnergy_t energym3 = energym2 / primes[o3];
						for(size_t o4 = original.valuesOccupied._Find_next(o3);
								o4 != original.valuesOccupied.size();
								o4 = original.valuesOccupied._Find_next(o4)) {
							edgesInEgraphBM bmMinus4(bmMinus3);
							bmMinus4.reset(o4);
							approxEnergy_t energym4 = energym3 / primes[o4];
							for(size_t o5 = original.valuesOccupied._Find_next(o4);
									o5 != original.valuesOccupied.size();
									o5 = original.valuesOccupied._Find_next(o5)) {
								edgesInEgraphBM bmMinus5(bmMinus4);
								bmMinus5.reset(o5);
								approxEnergy_t energym5 = energym4 / primes[o5];
								for(size_t t1 = 0; t1 < numEdges[db.egraphSize] - 4; t1++) {
									if(original.valuesOccupied[t1]) continue;
									approxEnergy_t energym5p1 = energym5 * primes[t1];
									if(primes[t1 + 1] * primes[t1 + 2] * primes[t1 + 3] * primes[t1 + 4] * energym5p1 > worstMaxEnergy) { //include the minimal additional multipliers for t2,t3,t4,t5
										break; //max t1 reached
									}
									edgesInEgraphBM bmMinus5Plus1(bmMinus5);
									bmMinus5Plus1.set(t1);
									for(size_t t2 = t1 + 1; t2 < numEdges[db.egraphSize] - 3; t2++) {
										if(original.valuesOccupied[t2]) continue;
										approxEnergy_t energym5p2 = energym5p1 * primes[t2];
										if(primes[t2 + 1] * primes[t2 + 2] * primes[t2 + 3] * energym5p2 > worstMaxEnergy) { //include the minimal additional multipliers for t3,t4,t5
											break; //max t2 reached
										}
										edgesInEgraphBM bmMinus5Plus2(bmMinus5Plus1);
										bmMinus5Plus2.set(t2);
										for(size_t t3 = t2 + 1; t3 < numEdges[db.egraphSize] - 2; t3++) {
											if(original.valuesOccupied[t3]) continue;
											approxEnergy_t energym5p3 = energym5p2 * primes[t3];
											if(primes[t3 + 1] * primes[t3 + 2] * energym5p2 > worstMaxEnergy) { //include the minimal additional multipliers for t4,t5
												break; //max t3 reached
											}
											edgesInEgraphBM bmMinus5Plus3(bmMinus5Plus2);
											bmMinus5Plus3.set(t3);
											for(size_t t4 = t3 + 1; t4 < numEdges[db.egraphSize] - 1; t4++) {
												if(original.valuesOccupied[t4]) continue;
												approxEnergy_t energym5p4 = energym5p3 * primes[t4];
												if(primes[t4 + 1] * energym5p3 > worstMaxEnergy) { //include the minimal additional multiplier for t5
													break; //max t4 reached
												}
												edgesInEgraphBM bmMinus5Plus4(bmMinus5Plus3);
												bmMinus5Plus4.set(t4);
												for(size_t t5 = t4 + 1; t5 < numEdges[db.egraphSize] - 0; t5++) {
													if(original.valuesOccupied[t5]) continue;
													approxEnergy_t energym5p5 = energym5p4 * primes[t5];
													if(energym5p5 > worstMaxEnergy) {
														break; //max t5 reached
													}
													if(energym5p5 < worstMinEnergy) {
														continue; //skip up to next larger t5
													}
													edgesInEgraphBM bmMinus5Plus5(bmMinus5Plus4);
													bmMinus5Plus5.set(t5);
													detachedNode m5p5(bmMinus5Plus5); //this calculates the distance, etc.
													if(db.nodesList.isWeak(m5p5.disbalance)) continue;
													//is it new?
													detachedNodes::const_iterator old = db.nodesList.find(bmMinus5Plus5);
													if(old != db.nodesList.end()) continue;
#ifdef _OPENMP
#pragma omp critical (m5p5)
#endif //_OPENMP
													//newNodes.push_back(m5p5);
													db.AddNode(m5p5);
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
			original.tags |= 32;
#ifdef _OPENMP
#pragma omp critical (m5p5)
#endif //_OPENMP
			//newNodes.push_back(original); //update the tag
			db.AddNode(original);
		}
//		//merge new to the existing
//		for(std::vector<detachedNode>::const_iterator n = newNodes.begin(); n != newNodes.end(); n++) {
//			db.AddNode(*n);
//		}
		if((!gExiting) && numNodes)
			goto restart;
	}
}
void crunch() {
//	for(compressedEgraphMap::iterator g = db.begin(); g != db.end(); g++) { //dirty patch: clear bit 1 for all egraphs
//		g->second.tags &= ~((tags_t)1);
//	}

	std::vector<compressedEgraph> top;
	bool repeat = false;
	do {
		equeue.flush(); //don't remove this. There could be unflushed derivative graphs with parent already marked as "processed".
		repeat = false;
//		//repeat |= mutateWorstNodeUntaggedN(50000);
// 		repeat |= mutate2NodesUntaggedN(480);
//		//std::cerr << "mutateWorstNodeUntaggedN(50000) done\n";
//		if(gExiting) continue;
//		if(repeat) continue;

		repeat |= mutateTopN(240, 2);
		//std::cerr << "mutateTopN(240, 2) done\n";
		if(gExiting) continue;
		if(repeat) continue;

//		repeat |= mutate2NodesUntaggedN(4);
//		if(gExiting) continue;
//		if(repeat) continue;

//		repeat |= mutateTopN(16, 3);
//		std::cerr << "mutateTopN(16, 3) done\n";
//		if(gExiting) continue;
//		if(repeat) continue;
//
//		repeat |= mutateTopN(16, 4);
//		//std::cerr << "mutateTopN(100, 4) done\n";
//		if(gExiting) continue;
//		if(repeat) continue;
//
//		repeat |= mutateTopN(16, 5);
//		//std::cerr << "mutateTopN(64, 5) done\n";
//		if(gExiting) continue;
//		if(repeat) continue;
//
//		repeat |= mutateTopN(4, 6);
//		//std::cerr << "mutateTopN(4, 6) done\n";
//		if(gExiting) continue;
//		if(repeat) continue;

//		repeat |= mutateTopN(2, 7);
//		//std::cerr << "mutateTopN(2, 7) done\n";
//		if(gExiting) continue;
//		if(repeat) continue;
//
//		repeat |= mutateTopN(1, 8);
//		//std::cerr << "mutateTopN(64, 8) done\n";
//		if(gExiting) continue;
//		if(repeat) continue;

		repeat |= mutateTopUntaggedN(320, 2);
		std::cerr << "mutateTopUntaggedN(320, 2) done\n";
		if(gExiting) continue;
		if(repeat) continue;

		repeat |= mutateTopUntaggedN(500, 3);
		//std::cerr << "mutateTopUntaggedN(500, 3) done\n";
		if(gExiting) continue;
		if(repeat) continue;

		repeat |= mutateTopUntaggedN(48, 4);
		//std::cerr << "mutateTopUntaggedN(48, 4) done\n";
		if(gExiting) continue;
		if(repeat) continue;

		repeat |= mutateTopUntaggedN(32, 5);
		//std::cerr << "mutateTopUntaggedN(32, 5) done\n";
		if(gExiting) continue;
		if(repeat) continue;

		repeat |= mutateTopUntaggedN(1, 6);
		std::cerr << "mutateTopUntaggedN(1, 6) done\n";
		if(gExiting) continue;
		if(repeat) continue;

//		repeat |= mutateTopUntaggedN(4, 7);
//		std::cerr << "mutateTopUntaggedN(4, 7) done\n";
//		if(gExiting) continue;
//		if(repeat) continue;
//
//		repeat |= mutateTopUntaggedN(1, 8);
//		std::cerr << "mutateTopUntaggedN(32, 8) done\n";
	} while(repeat && (!gExiting));
	equeue.flush(); //don't remove this. There could be unflushed derivative graphs with parent already marked as "processed".
}

//void scramble() {
//	std::vector<compressedEgraph> top;
//	//scramble
//	for(int i = 0; i < 1 && (!gExiting); i++) {
//		top.clear();
//		db.getTopN(10000, top);
//		for(std::vector<compressedEgraph>::const_iterator g = top.begin(); g != top.end() && (!gExiting); g++) {
//			egraph eg0;
//			eg0.fromCompressedEgraph(*g);
//#ifdef _OPENMP
//#pragma omp parallel for schedule(dynamic, 1)
//#endif //_OPENMP
//			for(int i = 0; i < 6400; i++) {
//				egraph eg(eg0);
//				//eg.scramble(4);
//				eg.scramble(200);
//			}
//		}
//	}
//}

void dumpGraphs() {
	struct nodeWithGraphs {
		std::map<std::string, std::vector<size_t>>::const_iterator node;
		bool operator < (const nodeWithGraphs& other) const {
			return this->node->second.size() > other.node->second.size();
		}
		nodeWithGraphs(const std::map<std::string, std::vector<size_t>>::const_iterator& n) : node(n) {}
	};
	std::multiset<nodeWithGraphs> nodesByFrequency;
	size_t graphNumber = 0;
	std::map<std::string, std::vector<size_t>> nodeUsage;
	for(idxApproxEnergy_t::const_iterator cg = db.idxApproxEnergy.begin(); cg != db.idxApproxEnergy.end(); cg++) {
		const compressedEgraph& g(*(cg->second));
		BigInteger total(0);
		std::vector<std::string> nodeEdgeStrings(g.edges.size, std::string(numEdges[g.edges.size], '.'));
		std::vector<std::string> nodeEdgeEnergies(g.edges.size);
		for(size_t node = 0; node < g.edges.size; node++) {
			BigInteger ne(1);
			for(size_t e = 0; e < g.edges.size - 1; e++) {
				nodeEdgeStrings[node][g.edges.edgeIndexes[nodeEdges[g.edges.size][node][e]]] = '*';
				ne *= primes[g.edges.edgeIndexes[nodeEdges[g.edges.size][node][e]]];
			}
			ne -= nodeTargetBI[g.edges.size];
			nodeEdgeEnergies[node] = (std::string)ne;
			nodeUsage[nodeEdgeStrings[node]].push_back(graphNumber);
			total += ne;
		}
		//std::cout << graphNumber << total.getNumber() << "\t" << g.approxEnergy << "\t" << g.edges.size << "\t" << g.site_format() << "\n";
		std::cout << graphNumber << "\t" << (std::string)total << "\t" << g.approxEnergy << "\t" << g.edges.size << "\n";
		for(size_t node = 0; node < g.edges.size; node++) {
			std::cout << "\t" << node << "\t" << nodeEdgeStrings[node] << "\t" << nodeEdgeEnergies[node] << "\n";
		}
		graphNumber++;
	}
	std::cout << "==================" << "\n";
	for(std::map<std::string, std::vector<size_t>>::const_iterator n = nodeUsage.begin(); n != nodeUsage.end(); n++) {
		if(n->second.size() < 2) continue;
		nodeWithGraphs nwg(n);
		nodesByFrequency.insert(nwg);
//		std::cout << n->second.size() << "\t" << n->first;
//		for(size_t i = 0; i < n->second.size(); i++) {
//			std::cout << "\t" << n->second[i];
//		}
//		std::cout << "\n";
	}
	for(std::set<nodeWithGraphs>::const_iterator n = nodesByFrequency.begin(); n != nodesByFrequency.end(); n++) {
		std::cout << n->node->second.size() << "\t" << n->node->first;
		for(size_t i = 0; i < n->node->second.size(); i++) {
			std::cout << "\t" << n->node->second[i];
		}
		std::cout << "\n";
	}
	exit(0);
}
void dumpNodes() {
}

//struct getPrimeFactors {
//	unsigned long long squares[378];
//	getPrimeFactors() {
//		for(int i = 0; i < 378; i++) {
//			squares[i] = primes[i] * primes[i];
//		}
//	}
//	void getFactors(int size, const BigInteger& test) {
//		BigInteger x(test);
//		edgesInEgraphBM factors;
//		//factors.reset();
//		int numFactors = 0;
//		for(size_t p = 0; p < numEdges[size]; p++) {
//			pair<string, long long> rest = BigInteger::divide(x, squares[p]);
//			if(rest.second == 0) return;
//		}
//		for(size_t p = 0; p < numEdges[size]; p++) {
//			pair<string, long long> rest = BigInteger::divide(x, primes[p]);
//			if(rest.second) continue; //not integer divisible
////			//once it was divided, try twice
////			if(BigInteger(rest.first) >= BigInteger(primes[p])) {
////				pair<string, long long> rest2 = BigInteger::divide(rest.first, primes[p]);
////				if(!rest2.second) continue; //factorizable as primes[i]*primes[i]*... which is wrong
////			}
//			factors.set(p);
//			numFactors++;
//			x = rest.first;
//			if(numFactors == size - 1) break;
//			if(x < BigInteger(primes[p])) break;
//		}
//		if(numFactors == size - 1 && x == BigInteger(1)) {
//			//bingo!!!
//			detachedNode n(factors);
//			std::cout << test << "\t" << std::string(n) << std::endl;
//		}
//	}
//
//	void getFactors(int size) {
//		BigInteger x0((const long double)nodeTarget[size]);
//		for(int i = 0; i < 20000000; i++) {
//			BigInteger test(x0 - i);
//			//std::cout << test.getNumber() << "\n"; //debug
//			if(test <= BigInteger(1)) break;
//			getFactors(size, test);
//			test = x0 + i;
//			getFactors(size, test);
//		}
//	}
//};
void join(size_t join_depth, bool useWeakNodeFilter) {
	//partialEgraph pg(db.egraphSize);
	//old code pg.buildFromNodes(5);//try composing a graph from scratch and given nodes. Join top 64 nodes to all other.
	//pg.buildFromNodesAll(join_depth);//try composing a graph from scratch and given nodes. Join each node only to the best of each other. <<--- prod code

	//partialEgraph::buildFromBestNodes(useWeakNodeFilter, join_depth); //1 to 3

	while(!gExiting) partialGraph::iterate(join_depth, useWeakNodeFilter);

	//pg x(join_depth, useWeakNodeFilter);
	//x.iterateFirstNode();
}
void joinGreedy(size_t join_depth, bool useWeakNodeFilter) {
	partialGraph::iterateGreedy(join_depth, useWeakNodeFilter);
}

void nodePairs(bool backward = false) {
	while ((!gExiting) && mutate2NodesUntaggedN(backward ? -480 : 480))
		std::cerr << "mutate2NodesUntaggedN(480) done\n";
		;
}
void nodeTriplets(bool backward = false) {
	while ((!gExiting) && mutate3NodesUntaggedN(backward ? -480 : 480))
		;
}
void nodeQuadruplets(bool backward = false) {
	while ((!gExiting) && mutate4NodesUntaggedN(backward ? -480 : 480))
		;
}
//void regenerateLast(size_t depth) {
//	if(depth < 3 || depth > 6) return;
//	//egraph tags bit 11,12,13,14 = worst 3,4,5,6 nodes regenerated
//	tags_t mask = (tags_t)1 << (8 + depth);
//	//todo: take into account that depth 6 covers also 3,4,5 so 1) mark all when done, and 2) when filtering exclude these with higher depth processed
//	for(auto & kv : db.idxApproxEnergy) {
//		if(kv.second->tags & mask) continue; //already done
//		if(gExiting) return;
//		partialEgraph::regenerateLastNodes(*kv.second, depth); //this takes forever
//		if(gExiting) return;
//		compressedEgraph g(*kv.second);
//		g.tags |= mask; //update the tag
//		db.addEgraph(g);
//	}
//}
void replaceBadNodesMinusN(const size_t numFixedNodes, const bool useWeakNodeFilter = false) {
//	const tags_t bxMask = ~(((tags_t)15) << 15);
//	for(auto & kv : db) {
//		kv.second.tags &= bxMask;
//	}
//	return;

	if(numFixedNodes < 1 || numFixedNodes > 9) return;
	//if(numFixedNodes <= partialGraph::switchToParallelAfter + 1) return; //too deeply
	approxEnergy_t bestMaxNodeDeviation = useWeakNodeFilter ? db.maxNodeDeviationForBetter() : db.maxNodeDeviationForBest();
	//approxEnergy_t bestMaxNodeDeviation = db.maxNodeDeviationForBetter();
	std::vector<compressedEgraph> g;
	std::cerr << "MaxNodeDeviation=" << bestMaxNodeDeviation << "\n";
	for(auto const & kv : db.idxApproxEnergy) {
		//bits 15,16,17,18 all N[0..15] tuples regenerated by attempting to attach only good nodes to them
		tags_t originalDepth = (kv.second->tags >> 15) & 15;
		if(originalDepth && originalDepth <= numFixedNodes) continue; //skip graphs previously processed at higher depth
		g.push_back(*kv.second);
	}
	//on the first pass get and lo the counters
	size_t graphsPerGoodNodes[29];
	for(size_t n = 0; n <= db.egraphSize; n++) graphsPerGoodNodes[n] = 0;
	for(size_t gg = 0; gg < g.size(); gg++) {
		size_t numGoodNodes = 0;
		for(size_t i = 0; i < db.egraphSize; i++) {
			const detachedNode& n(g[gg].getDetachedNode(i));
			if(n.disbalance > bestMaxNodeDeviation) continue; //skip weak nodes
			numGoodNodes++;
		}
		if(numGoodNodes == db.egraphSize) {
			std::cerr << db.egraphSize << " " << g[gg].approxEnergy << " " << g[gg].site_format() << "\n";
		}
		graphsPerGoodNodes[numGoodNodes]++;
	}
	for(int n = db.egraphSize; n >= 0; n--) {
		std::cerr << n << "(" << graphsPerGoodNodes[n] << ") ";
	}
	std::cerr << "\n";

	//on the second pass do the requested job
#ifdef _OPENMP
#pragma omp parallel for schedule(dynamic, 1) default(none) shared(db,gExiting,g,bestMaxNodeDeviation,std::cerr,graphsPerGoodNodes)
#endif //_OPENMP
	for(size_t gg = 0; gg < g.size(); gg++) {
		if(gExiting) continue;
		std::vector<detachedNode> goodNodes;
		for(size_t i = 0; i < db.egraphSize; i++) {
			const detachedNode& n(g[gg].getDetachedNode(i));
			if(n.disbalance <= bestMaxNodeDeviation) {
				goodNodes.push_back(n);
			}
		}
		//if(goodNodes.size() <= partialGraph::switchToParallelAfter + 1) continue; //too deep
		if(goodNodes.size() < numFixedNodes) continue; //too weak
		//if(goodNodes.size() == db.egraphSize) continue; //debug
		std::sort(goodNodes.begin(), goodNodes.end(), detachedNode::disbalanceCompare);
		//iterate trough all permutation of fixed numFixedNodes nodes
		unsigned long long end_mask = ((unsigned long long)1) << goodNodes.size();
		for(unsigned long long mask = ((unsigned long long)1 << numFixedNodes) - 1; mask < end_mask; mask = partialEgraph::nextPermutation(mask)) {
			if(gExiting) break;
			std::vector<detachedNode> fixedNodes;
			for(size_t i = 0; i < goodNodes.size(); i++) {
				if(mask & ((unsigned long long)1 << i)) {
					fixedNodes.push_back(goodNodes[i]);
				}
			}
			//if there exist entirely processed graph having the same tuple of nodes, then the later processing is redundant
			bool skipIt = false;
#ifdef _OPENMP
#pragma omp critical (newEgraphs)
#endif //_OPENMP
			{
				for(auto const & kv : db) { //remote graph
					//bits 15,16,17,18 all N[0..15] tuples regenerated by attempting to attach only good nodes to them
					tags_t originalDepth = (kv.second.tags >> 15) & 15;
					if(originalDepth == 0 || originalDepth > numFixedNodes) continue; //skip graphs not processed or previously processed at lower depth
					size_t matchingNodes = 0;
					for(size_t i = 0; i < db.egraphSize; i++) { //remote node
						const detachedNode& n(kv.second.getDetachedNode(i));
						if(n.disbalance > bestMaxNodeDeviation) continue; //skip weak nodes
						for(size_t src = 0; src < numFixedNodes; src++) { //candidate for processing node
							if(fixedNodes[src].valuesOccupied != n.valuesOccupied) continue;
							matchingNodes++;
							if(matchingNodes == numFixedNodes) {
								skipIt = true;
								goto nextTuple;
							}
							break; //no more matches expected ;)
						}
					}
				}
				nextTuple:
				;
			}
			if(skipIt) {
				std::cerr << "s";
				continue;
			}
			std::cerr << "p";
			partialGraph::completeWithGoodNodes(fixedNodes, useWeakNodeFilter);
		}
		if(useWeakNodeFilter && !gExiting) {
			//mark graph as "processed" for the respective depth
			compressedEgraph gUpdated(g[gg]);
			gUpdated.mergeTags((((tags_t)numFixedNodes) << 15));
#ifdef _OPENMP
#pragma omp critical (newEgraphs)
#endif //_OPENMP
			db.addEgraph(gUpdated);
		}
		std::cerr << "D";
	}
}
void growPairs() {
#ifdef _OPENMP
#pragma omp parallel for schedule(dynamic, 1) default(none) shared(db,gExiting,std::cerr)
#endif //_OPENMP
	for(size_t i = 0; i < db.givenPairs.size(); i++) {
		if(gExiting) continue;
		std::vector<detachedNode> fixedNodes;
		detachedNodes::idxByDeviation_t::const_iterator iter = db.nodesList.idxByDeviation.cbegin();
		std::advance(iter, db.givenPairs[i].node1Index);
		fixedNodes.push_back(*iter->second);
		std::advance(iter, db.givenPairs[i].node2Index - db.givenPairs[i].node1Index);
		fixedNodes.push_back(*iter->second);
		partialGraph::completeWithGoodNodes(fixedNodes, false);
		if(!gExiting) {
#ifdef _OPENMP
#pragma omp critical (cerr)
#endif //_OPENMP
			std::cerr << "\nfinished pair " << db.givenPairs[i];
		}
	}
}
//void replaceBadNodesminus0() {
//	approxEnergy_t bestMaxNodeDeviation = db.maxNodeDeviationForBest();
//	pg pg0(1, false);
//	std::vector<compressedEgraph> g;
//	for(auto const & kv : db.idxApproxEnergy) {
//		g.push_back(*kv.second);
//	}
//#ifdef _OPENMP
//#pragma omp parallel for schedule(dynamic, 1) default(none) shared(db,gExiting,pg0,g,bestMaxNodeDeviation,std::cerr)
//#endif //_OPENMP
//	for(size_t gg = 0; gg < g.size(); gg++) {
//		if(gExiting) continue;
//		partialEgraph p(db.egraphSize);
//		for(size_t i = 0; i < db.egraphSize; i++) {
//			detachedNode n(g[gg].getDetachedNode(i));
//			if(n.disbalance < bestMaxNodeDeviation) {
//				p.attachNode(n);
//			}
//		}
//		pg0.expandNodes(p);
//		std::cerr << ".";
//		std::cerr.flush();
//	}
//	std::cerr << "\n";
//}
//void replaceBadNodesminus1() {
//	//minus 0 doesn't give result, try -1
//	approxEnergy_t bestMaxNodeDeviation = db.maxNodeDeviationForBest();
//	pg pg0(1, false);
//	std::vector<compressedEgraph> g;
//	for(auto const & kv : db.idxApproxEnergy) {
//		g.push_back(*kv.second);
//	}
//#ifdef _OPENMP
//#pragma omp parallel for schedule(dynamic, 1) default(none) shared(db,gExiting,pg0,g,bestMaxNodeDeviation,std::cerr)
//#endif //_OPENMP
//	for(size_t gg = 0; gg < g.size(); gg++) {
//		if(gExiting) continue;
//		partialEgraph p(db.egraphSize);
//		for(size_t i = 0; i < db.egraphSize; i++) {
//			detachedNode n(g[gg].getDetachedNode(i));
//			if(n.disbalance < bestMaxNodeDeviation) {
//				p.attachNode(n);
//			}
//		}
//		for(size_t nodeToSkip = 0; nodeToSkip < p.numNodes; nodeToSkip++) {
//			if(gExiting) break;
//			partialEgraph pp(db.egraphSize);
//			for(size_t n = 0; n < p.numNodes; n++) {
//				if(n != nodeToSkip) {
//					pp.attachNode(p.nodes[n]);
//				}
//			}
//			pg0.expandNodes(pp);
//		}
//		std::cerr << ".";
//		std::cerr.flush();
//	}
//	std::cerr << "\n";
//}

//struct ratio {
//	approxEnergy_t ratio;
//	int insert;
//	int remove;
//};

int main(int argc, char **argv) {
	try {
	std::signal(SIGINT, exit_signal_handler);

	//std::cin.precision(std::numeric_limits<long double>::digits10 + 1); //wrong!
	std::cin.precision(approxEnergyPrecision);
	std::cout.precision(approxEnergyPrecision);
	std::cerr.precision(approxEnergyPrecision);
	std::srand(std::time(0));

	enum class commands {
		unknown,
		mutateNodes1, mutateNodes2, mutateNodes3, mutateNodes4, mutateNodes5,
		crunch,
		join, weakjoin, joinGreedy, weakjoinGreedy,
		pairs, pairsBackwards, triplets, tripletsBackwards, quadruplets, quadrupletsBackwards,
		badNodes, BadNodes,
		lastNodes,
		graphStats, nodeStats,
		givenPairs
	};
	if(argc < 2) {
		goto usage;
	}
	{
	enum commands cmd(commands::unknown);
	size_t join_depth = 100;
	switch (argv[1][0]) {
		case 'm':
			switch (argv[1][1]) {
				case '1':
					cmd = commands::mutateNodes1;
					break;
				case '2':
					cmd = commands::mutateNodes2;
					break;
				case '3':
					cmd = commands::mutateNodes3;
					break;
				case '4':
					cmd = commands::mutateNodes4;
					break;
				case '5':
					cmd = commands::mutateNodes5;
					break;
				default:
					;
			}
			break;
		case 'c':
			cmd = commands::crunch;
			break;
		case 'j':
			cmd = commands::join;
			{
			size_t jd = argv[1][1];
			if(jd && jd <= '9')
				join_depth = jd - '0';
			}
			break;
		case 'w':
			cmd = commands::weakjoin;
			{
			size_t jd = argv[1][1];
			if(jd && jd <= '9')
				join_depth = jd - '0';
			}
			break;
		case 'i':
			cmd = commands::joinGreedy;
			{
			size_t jd = argv[1][1];
			if(jd && jd <= '9')
				join_depth = jd - '0';
			}
			break;
		case 'I':
			cmd = commands::weakjoinGreedy;
			{
			size_t jd = argv[1][1];
			if(jd && jd <= '9')
				join_depth = jd - '0';
			}
			break;
//		case 'l':
//			cmd = commands::lastNodes;
//			{
//			size_t jd = argv[1][1];
//			if(jd && jd <= '9')
//				join_depth = jd - '0';
//			}
//			break;
		case 'p':
			cmd = commands::pairs;
			break;
		case 'P':
			cmd = commands::pairsBackwards;
			break;
		case 't':
			cmd = commands::triplets;
			break;
		case 'T':
			cmd = commands::tripletsBackwards;
			break;
		case 'q':
			cmd = commands::quadruplets;
			break;
		case 'Q':
			cmd = commands::quadrupletsBackwards;
			break;
		case 'b':
			cmd = commands::badNodes;
			{
			size_t jd = argv[1][1];
			if(jd && jd <= '9')
				join_depth = jd - '0';
			}
			break;
 		case 'B':
			cmd = commands::BadNodes;
			{
			size_t jd = argv[1][1];
			if(jd && jd <= '9')
				join_depth = jd - '0';
			}
			break;
		case 'g':
			cmd = commands::graphStats;
			break;
		case 'n':
			cmd = commands::nodeStats;
			break;
		case '2':
			cmd = commands::givenPairs;
			break;
		default:
			;
	}
	if(cmd == commands::unknown) {
		goto usage;
	}

	db.load();
	
//	partialGraph::printNodes01statistics();
//	return(0);
	
	switch (cmd) {
		case commands::mutateNodes1:
			mutateNodes1(); //mutate nodes at {-1;+1} and tag the mutants
			break;
		case commands::mutateNodes2:
			mutateNodes2();
			break;
		case commands::mutateNodes3:
			mutateNodes3();
			break;
		case commands::mutateNodes4:
			mutateNodes4();
			break;
		case commands::mutateNodes5:
			mutateNodes5();
			break;
		case commands::crunch:
			crunch();
			break;
		case commands::join:
			join(join_depth, false); //joins existing nodes
			break;
		case commands::weakjoin:
			join(join_depth, true); //joins existing nodes using teh internal best graph for node filtering
			break;
		case commands::joinGreedy:
			joinGreedy(join_depth, false); //joins existing nodes
			break;
		case commands::weakjoinGreedy:
			joinGreedy(join_depth, true); //joins existing nodes
			break;
		case commands::pairs:
			nodePairs(false); //regenerate all pairs (but the latest) in chunks
			break;
		case commands::pairsBackwards:
			nodePairs(true); //regenerate all pairs (but the latest) in chunks
			break;
		case commands::triplets:
			nodeTriplets(false); //regenerate all node triplets in chunks
			break;
		case commands::tripletsBackwards:
			nodeTriplets(true); //regenerate all node triplets in chunks
			break;
		case commands::quadruplets:
			nodeQuadruplets(false); //regenerate all node triplets in chunks
			break;
		case commands::quadrupletsBackwards:
			nodeQuadruplets(true); //regenerate all node triplets in chunks
			break;
		case commands::badNodes:
			replaceBadNodesMinusN(join_depth, false); //try replacing all bad nodes by good nodes
			break;
		case commands::BadNodes:
			replaceBadNodesMinusN(join_depth, true); //try replacing all bad nodes by semi-good nodes
			break;
		case commands::givenPairs:
			growPairs(); //assemble graphs from given pairs of nodes
			break;
//		case commands::lastNodes:
//			regenerateLast(join_depth); //regenerates last nodes in all possible ways
//			break;
		case commands::graphStats:
			dumpGraphs(); //display ststistics for graphs
			break;
		case commands::nodeStats:
			dumpNodes(); //display statistics for nodes
			break;
		default:
			goto usage;
	}

//	//factorization approach
//	getPrimeFactors pf;
//	pf.getFactors(9);

//	//ratio
//	std::cout << "approxEnergy_t ratios[29][][][] {\n";
//	for(int s = 28; s <= 28; s++) { //size
//		std::multimap<approxEnergy_t,std::pair<int,int>> map;
//		for(int p1 = 0; p1 < numEdges[s]; p1++) { //prime 1
//			for(int p2 = 0; p2 < numEdges[s]; p2++) { //prime 2
//				approxEnergy_t r = (approxEnergy_t)primes[p1] / primes[p2];
//				map.insert(std::make_pair(r, std::make_pair(primes[p1], primes[p2])));
//			}
//		}
//		for(std::multimap<approxEnergy_t,std::pair<int,int>>::const_iterator r = map.begin(); r != map.end(); r++) {
//			std::cout << r->first << "\t" << r->second.first << "\t" << r->second.second << "\n";
//		}
//		std::cout << "size=" << map.size() << "\n";//142884 incl. 1 x x
//	}

//	return 0;


//	//recalculate the weights/energies
//	for(compressedEgraphMap::iterator g = db.begin(); g != db.end(); g++) {
//		egraph eg0;
//		eg0.fromCompressedEgraph(g->second);
//		g->second = eg0.ceg;
//	}

//	compressedEgraph cg;
//	cg.init(9);
//	egraph eg0;
//	eg0.fromCompressedEgraph(cg);
//	eg0.scramble(20);
//	db.addEgraph(eg0.ceg);

//	//for(int i = 0; i < 1000000; i++) {
//	for(int i = 0; i < 100; i++) {
//		const compressedEgraph* top = db.findTopUntagged(2);
//		if (top) {
//			egraph g;
//			g.fromCompressedEgraph(*top);
//			g.mutate(2, db);
//			db.addEgraph(g.ceg); //update the tag
//			continue;
//		}
//		break;
//	}
	db.save();
	return 0;
	}

	usage:
	std::cerr << "Usage: " << *argv[0] << " m{1|2|3|4|5} | c | j[1..9] | w[1..9] | p | t | b[3..9] | B[3..9] < infile > outfile 2>> logfile\n";
	std::cerr << "Press Ctrl-C or send -SIGINT to interrupt\n";
	std::cerr << "m1, m2, m3, m4, m5 - enrich nodes by applying {-n/+n} transformations\n";
	std::cerr << "c - crunch, loop trough hardcoded sequence of graph transformations\n";
	std::cerr << "j1, j2 ... - generate graphs by joining 1/n of the best nodes\n";
	std::cerr << "w1, w2 ... - generate graphs by joining 1/n of the weaker nodes\n";
	std::cerr << "i1, i2 ... - generate graphs by greedy joining 1/n of the best nodes\n";
	std::cerr << "I1, I2 ... - generate graphs by greedy joining 1/n of the weaker nodes\n";
	std::cerr << "p - regenerate all graph node pairs\n";
	std::cerr << "t, T - regenerate all graph node triplets (T=backwards)\n";
	std::cerr << "q - regenerate all graph node quadruplets\n";
//	std::cerr << "l3 ... l6 - regenerate last (worst) graph 3 ... 6 nodes\n";
	std::cerr << "b3..9 - replace bad nodes with good leaving 3..9 old good nodes\n";
	std::cerr << "B3..9 - replace bad nodes with semi-good leaving 3..9 old semi-good nodes\n";
	std::cerr << "g - print graphs' statistics\n";
	std::cerr << "n - print nodes' statistics\n";
	std::cerr << "2 - processes givens pairs\n";
	return 1;
	}
    catch(...)
    {
        std::exception_ptr p = std::current_exception();
        std::cerr << "Exception: " <<(p ? p.__cxa_exception_type()->name() : "null") << std::endl;
    }
    return 1;
}
